// This file is generated by rust-protobuf 2.10.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `Wire.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_0;

#[derive(PartialEq,Clone,Default)]
pub struct ProtocolErrorMessage {
    // message fields
    pub signature: ::protobuf::SingularPtrField<super::Cryptography::Signature>,
    pub peer_id: ::protobuf::SingularPtrField<super::Peer::PeerId>,
    pub correlation_id: ::std::vec::Vec<u8>,
    pub code: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProtocolErrorMessage {
    fn default() -> &'a ProtocolErrorMessage {
        <ProtocolErrorMessage as ::protobuf::Message>::default_instance()
    }
}

impl ProtocolErrorMessage {
    pub fn new() -> ProtocolErrorMessage {
        ::std::default::Default::default()
    }

    // .Catalyst.Protocol.Cryptography.Signature signature = 1;


    pub fn get_signature(&self) -> &super::Cryptography::Signature {
        self.signature.as_ref().unwrap_or_else(|| super::Cryptography::Signature::default_instance())
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: super::Cryptography::Signature) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut super::Cryptography::Signature {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> super::Cryptography::Signature {
        self.signature.take().unwrap_or_else(|| super::Cryptography::Signature::new())
    }

    // .Catalyst.Protocol.Peer.PeerId peer_id = 2;


    pub fn get_peer_id(&self) -> &super::Peer::PeerId {
        self.peer_id.as_ref().unwrap_or_else(|| super::Peer::PeerId::default_instance())
    }
    pub fn clear_peer_id(&mut self) {
        self.peer_id.clear();
    }

    pub fn has_peer_id(&self) -> bool {
        self.peer_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer_id(&mut self, v: super::Peer::PeerId) {
        self.peer_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_id(&mut self) -> &mut super::Peer::PeerId {
        if self.peer_id.is_none() {
            self.peer_id.set_default();
        }
        self.peer_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_peer_id(&mut self) -> super::Peer::PeerId {
        self.peer_id.take().unwrap_or_else(|| super::Peer::PeerId::new())
    }

    // bytes correlation_id = 3;


    pub fn get_correlation_id(&self) -> &[u8] {
        &self.correlation_id
    }
    pub fn clear_correlation_id(&mut self) {
        self.correlation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_correlation_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.correlation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_correlation_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.correlation_id
    }

    // Take field
    pub fn take_correlation_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.correlation_id, ::std::vec::Vec::new())
    }

    // int32 code = 4;


    pub fn get_code(&self) -> i32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.code = v;
    }
}

impl ::protobuf::Message for ProtocolErrorMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.peer_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.peer_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.correlation_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.code = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.peer_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.correlation_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.correlation_id);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(4, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.peer_id.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.correlation_id.is_empty() {
            os.write_bytes(3, &self.correlation_id)?;
        }
        if self.code != 0 {
            os.write_int32(4, self.code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProtocolErrorMessage {
        ProtocolErrorMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Cryptography::Signature>>(
                    "signature",
                    |m: &ProtocolErrorMessage| { &m.signature },
                    |m: &mut ProtocolErrorMessage| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Peer::PeerId>>(
                    "peer_id",
                    |m: &ProtocolErrorMessage| { &m.peer_id },
                    |m: &mut ProtocolErrorMessage| { &mut m.peer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "correlation_id",
                    |m: &ProtocolErrorMessage| { &m.correlation_id },
                    |m: &mut ProtocolErrorMessage| { &mut m.correlation_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "code",
                    |m: &ProtocolErrorMessage| { &m.code },
                    |m: &mut ProtocolErrorMessage| { &mut m.code },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProtocolErrorMessage>(
                    "ProtocolErrorMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProtocolErrorMessage {
        static mut instance: ::protobuf::lazy::Lazy<ProtocolErrorMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProtocolErrorMessage,
        };
        unsafe {
            instance.get(ProtocolErrorMessage::new)
        }
    }
}

impl ::protobuf::Clear for ProtocolErrorMessage {
    fn clear(&mut self) {
        self.signature.clear();
        self.peer_id.clear();
        self.correlation_id.clear();
        self.code = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProtocolErrorMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtocolErrorMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProtocolMessage {
    // message fields
    pub peer_id: ::protobuf::SingularPtrField<super::Peer::PeerId>,
    pub correlation_id: ::std::vec::Vec<u8>,
    pub type_url: ::std::string::String,
    pub value: ::std::vec::Vec<u8>,
    pub signature: ::protobuf::SingularPtrField<super::Cryptography::Signature>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProtocolMessage {
    fn default() -> &'a ProtocolMessage {
        <ProtocolMessage as ::protobuf::Message>::default_instance()
    }
}

impl ProtocolMessage {
    pub fn new() -> ProtocolMessage {
        ::std::default::Default::default()
    }

    // .Catalyst.Protocol.Peer.PeerId peer_id = 1;


    pub fn get_peer_id(&self) -> &super::Peer::PeerId {
        self.peer_id.as_ref().unwrap_or_else(|| super::Peer::PeerId::default_instance())
    }
    pub fn clear_peer_id(&mut self) {
        self.peer_id.clear();
    }

    pub fn has_peer_id(&self) -> bool {
        self.peer_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer_id(&mut self, v: super::Peer::PeerId) {
        self.peer_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_id(&mut self) -> &mut super::Peer::PeerId {
        if self.peer_id.is_none() {
            self.peer_id.set_default();
        }
        self.peer_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_peer_id(&mut self) -> super::Peer::PeerId {
        self.peer_id.take().unwrap_or_else(|| super::Peer::PeerId::new())
    }

    // bytes correlation_id = 2;


    pub fn get_correlation_id(&self) -> &[u8] {
        &self.correlation_id
    }
    pub fn clear_correlation_id(&mut self) {
        self.correlation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_correlation_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.correlation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_correlation_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.correlation_id
    }

    // Take field
    pub fn take_correlation_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.correlation_id, ::std::vec::Vec::new())
    }

    // string type_url = 3;


    pub fn get_type_url(&self) -> &str {
        &self.type_url
    }
    pub fn clear_type_url(&mut self) {
        self.type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_url(&mut self, v: ::std::string::String) {
        self.type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.type_url
    }

    // Take field
    pub fn take_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.type_url, ::std::string::String::new())
    }

    // bytes value = 4;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }

    // .Catalyst.Protocol.Cryptography.Signature signature = 5;


    pub fn get_signature(&self) -> &super::Cryptography::Signature {
        self.signature.as_ref().unwrap_or_else(|| super::Cryptography::Signature::default_instance())
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: super::Cryptography::Signature) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut super::Cryptography::Signature {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> super::Cryptography::Signature {
        self.signature.take().unwrap_or_else(|| super::Cryptography::Signature::new())
    }
}

impl ::protobuf::Message for ProtocolMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.peer_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.peer_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.correlation_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.type_url)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.peer_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.correlation_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.correlation_id);
        }
        if !self.type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.type_url);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.value);
        }
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.peer_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.correlation_id.is_empty() {
            os.write_bytes(2, &self.correlation_id)?;
        }
        if !self.type_url.is_empty() {
            os.write_string(3, &self.type_url)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(4, &self.value)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProtocolMessage {
        ProtocolMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Peer::PeerId>>(
                    "peer_id",
                    |m: &ProtocolMessage| { &m.peer_id },
                    |m: &mut ProtocolMessage| { &mut m.peer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "correlation_id",
                    |m: &ProtocolMessage| { &m.correlation_id },
                    |m: &mut ProtocolMessage| { &mut m.correlation_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type_url",
                    |m: &ProtocolMessage| { &m.type_url },
                    |m: &mut ProtocolMessage| { &mut m.type_url },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &ProtocolMessage| { &m.value },
                    |m: &mut ProtocolMessage| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Cryptography::Signature>>(
                    "signature",
                    |m: &ProtocolMessage| { &m.signature },
                    |m: &mut ProtocolMessage| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProtocolMessage>(
                    "ProtocolMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProtocolMessage {
        static mut instance: ::protobuf::lazy::Lazy<ProtocolMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProtocolMessage,
        };
        unsafe {
            instance.get(ProtocolMessage::new)
        }
    }
}

impl ::protobuf::Clear for ProtocolMessage {
    fn clear(&mut self) {
        self.peer_id.clear();
        self.correlation_id.clear();
        self.type_url.clear();
        self.value.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProtocolMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtocolMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionBroadcast {
    // message fields
    pub public_entry: ::protobuf::SingularPtrField<super::Transaction::PublicEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionBroadcast {
    fn default() -> &'a TransactionBroadcast {
        <TransactionBroadcast as ::protobuf::Message>::default_instance()
    }
}

impl TransactionBroadcast {
    pub fn new() -> TransactionBroadcast {
        ::std::default::Default::default()
    }

    // .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;


    pub fn get_public_entry(&self) -> &super::Transaction::PublicEntry {
        self.public_entry.as_ref().unwrap_or_else(|| super::Transaction::PublicEntry::default_instance())
    }
    pub fn clear_public_entry(&mut self) {
        self.public_entry.clear();
    }

    pub fn has_public_entry(&self) -> bool {
        self.public_entry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_entry(&mut self, v: super::Transaction::PublicEntry) {
        self.public_entry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_entry(&mut self) -> &mut super::Transaction::PublicEntry {
        if self.public_entry.is_none() {
            self.public_entry.set_default();
        }
        self.public_entry.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_entry(&mut self) -> super::Transaction::PublicEntry {
        self.public_entry.take().unwrap_or_else(|| super::Transaction::PublicEntry::new())
    }
}

impl ::protobuf::Message for TransactionBroadcast {
    fn is_initialized(&self) -> bool {
        for v in &self.public_entry {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.public_entry)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_entry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_entry.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionBroadcast {
        TransactionBroadcast::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Transaction::PublicEntry>>(
                    "public_entry",
                    |m: &TransactionBroadcast| { &m.public_entry },
                    |m: &mut TransactionBroadcast| { &mut m.public_entry },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionBroadcast>(
                    "TransactionBroadcast",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionBroadcast {
        static mut instance: ::protobuf::lazy::Lazy<TransactionBroadcast> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionBroadcast,
        };
        unsafe {
            instance.get(TransactionBroadcast::new)
        }
    }
}

impl ::protobuf::Clear for TransactionBroadcast {
    fn clear(&mut self) {
        self.public_entry.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionBroadcast {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionBroadcast {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CandidateDeltaBroadcast {
    // message fields
    pub hash: ::std::vec::Vec<u8>,
    pub producer_id: ::protobuf::SingularPtrField<super::Peer::PeerId>,
    pub previous_delta_dfs_hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CandidateDeltaBroadcast {
    fn default() -> &'a CandidateDeltaBroadcast {
        <CandidateDeltaBroadcast as ::protobuf::Message>::default_instance()
    }
}

impl CandidateDeltaBroadcast {
    pub fn new() -> CandidateDeltaBroadcast {
        ::std::default::Default::default()
    }

    // bytes hash = 1;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    // .Catalyst.Protocol.Peer.PeerId producer_id = 2;


    pub fn get_producer_id(&self) -> &super::Peer::PeerId {
        self.producer_id.as_ref().unwrap_or_else(|| super::Peer::PeerId::default_instance())
    }
    pub fn clear_producer_id(&mut self) {
        self.producer_id.clear();
    }

    pub fn has_producer_id(&self) -> bool {
        self.producer_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_producer_id(&mut self, v: super::Peer::PeerId) {
        self.producer_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_producer_id(&mut self) -> &mut super::Peer::PeerId {
        if self.producer_id.is_none() {
            self.producer_id.set_default();
        }
        self.producer_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_producer_id(&mut self) -> super::Peer::PeerId {
        self.producer_id.take().unwrap_or_else(|| super::Peer::PeerId::new())
    }

    // bytes previous_delta_dfs_hash = 3;


    pub fn get_previous_delta_dfs_hash(&self) -> &[u8] {
        &self.previous_delta_dfs_hash
    }
    pub fn clear_previous_delta_dfs_hash(&mut self) {
        self.previous_delta_dfs_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_delta_dfs_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.previous_delta_dfs_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_delta_dfs_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.previous_delta_dfs_hash
    }

    // Take field
    pub fn take_previous_delta_dfs_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.previous_delta_dfs_hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CandidateDeltaBroadcast {
    fn is_initialized(&self) -> bool {
        for v in &self.producer_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.producer_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.previous_delta_dfs_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        if let Some(ref v) = self.producer_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.previous_delta_dfs_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.previous_delta_dfs_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        if let Some(ref v) = self.producer_id.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.previous_delta_dfs_hash.is_empty() {
            os.write_bytes(3, &self.previous_delta_dfs_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CandidateDeltaBroadcast {
        CandidateDeltaBroadcast::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &CandidateDeltaBroadcast| { &m.hash },
                    |m: &mut CandidateDeltaBroadcast| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Peer::PeerId>>(
                    "producer_id",
                    |m: &CandidateDeltaBroadcast| { &m.producer_id },
                    |m: &mut CandidateDeltaBroadcast| { &mut m.producer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "previous_delta_dfs_hash",
                    |m: &CandidateDeltaBroadcast| { &m.previous_delta_dfs_hash },
                    |m: &mut CandidateDeltaBroadcast| { &mut m.previous_delta_dfs_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CandidateDeltaBroadcast>(
                    "CandidateDeltaBroadcast",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CandidateDeltaBroadcast {
        static mut instance: ::protobuf::lazy::Lazy<CandidateDeltaBroadcast> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CandidateDeltaBroadcast,
        };
        unsafe {
            instance.get(CandidateDeltaBroadcast::new)
        }
    }
}

impl ::protobuf::Clear for CandidateDeltaBroadcast {
    fn clear(&mut self) {
        self.hash.clear();
        self.producer_id.clear();
        self.previous_delta_dfs_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CandidateDeltaBroadcast {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CandidateDeltaBroadcast {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FavouriteDeltaBroadcast {
    // message fields
    pub candidate: ::protobuf::SingularPtrField<CandidateDeltaBroadcast>,
    pub voter_id: ::protobuf::SingularPtrField<super::Peer::PeerId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FavouriteDeltaBroadcast {
    fn default() -> &'a FavouriteDeltaBroadcast {
        <FavouriteDeltaBroadcast as ::protobuf::Message>::default_instance()
    }
}

impl FavouriteDeltaBroadcast {
    pub fn new() -> FavouriteDeltaBroadcast {
        ::std::default::Default::default()
    }

    // .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;


    pub fn get_candidate(&self) -> &CandidateDeltaBroadcast {
        self.candidate.as_ref().unwrap_or_else(|| CandidateDeltaBroadcast::default_instance())
    }
    pub fn clear_candidate(&mut self) {
        self.candidate.clear();
    }

    pub fn has_candidate(&self) -> bool {
        self.candidate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_candidate(&mut self, v: CandidateDeltaBroadcast) {
        self.candidate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_candidate(&mut self) -> &mut CandidateDeltaBroadcast {
        if self.candidate.is_none() {
            self.candidate.set_default();
        }
        self.candidate.as_mut().unwrap()
    }

    // Take field
    pub fn take_candidate(&mut self) -> CandidateDeltaBroadcast {
        self.candidate.take().unwrap_or_else(|| CandidateDeltaBroadcast::new())
    }

    // .Catalyst.Protocol.Peer.PeerId voter_id = 2;


    pub fn get_voter_id(&self) -> &super::Peer::PeerId {
        self.voter_id.as_ref().unwrap_or_else(|| super::Peer::PeerId::default_instance())
    }
    pub fn clear_voter_id(&mut self) {
        self.voter_id.clear();
    }

    pub fn has_voter_id(&self) -> bool {
        self.voter_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_voter_id(&mut self, v: super::Peer::PeerId) {
        self.voter_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voter_id(&mut self) -> &mut super::Peer::PeerId {
        if self.voter_id.is_none() {
            self.voter_id.set_default();
        }
        self.voter_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_voter_id(&mut self) -> super::Peer::PeerId {
        self.voter_id.take().unwrap_or_else(|| super::Peer::PeerId::new())
    }
}

impl ::protobuf::Message for FavouriteDeltaBroadcast {
    fn is_initialized(&self) -> bool {
        for v in &self.candidate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.voter_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.candidate)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.voter_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.candidate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.voter_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.candidate.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.voter_id.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FavouriteDeltaBroadcast {
        FavouriteDeltaBroadcast::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CandidateDeltaBroadcast>>(
                    "candidate",
                    |m: &FavouriteDeltaBroadcast| { &m.candidate },
                    |m: &mut FavouriteDeltaBroadcast| { &mut m.candidate },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Peer::PeerId>>(
                    "voter_id",
                    |m: &FavouriteDeltaBroadcast| { &m.voter_id },
                    |m: &mut FavouriteDeltaBroadcast| { &mut m.voter_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FavouriteDeltaBroadcast>(
                    "FavouriteDeltaBroadcast",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FavouriteDeltaBroadcast {
        static mut instance: ::protobuf::lazy::Lazy<FavouriteDeltaBroadcast> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FavouriteDeltaBroadcast,
        };
        unsafe {
            instance.get(FavouriteDeltaBroadcast::new)
        }
    }
}

impl ::protobuf::Clear for FavouriteDeltaBroadcast {
    fn clear(&mut self) {
        self.candidate.clear();
        self.voter_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FavouriteDeltaBroadcast {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FavouriteDeltaBroadcast {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeltaDfsHashBroadcast {
    // message fields
    pub delta_dfs_hash: ::std::vec::Vec<u8>,
    pub previous_delta_dfs_hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeltaDfsHashBroadcast {
    fn default() -> &'a DeltaDfsHashBroadcast {
        <DeltaDfsHashBroadcast as ::protobuf::Message>::default_instance()
    }
}

impl DeltaDfsHashBroadcast {
    pub fn new() -> DeltaDfsHashBroadcast {
        ::std::default::Default::default()
    }

    // bytes delta_dfs_hash = 1;


    pub fn get_delta_dfs_hash(&self) -> &[u8] {
        &self.delta_dfs_hash
    }
    pub fn clear_delta_dfs_hash(&mut self) {
        self.delta_dfs_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_delta_dfs_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.delta_dfs_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delta_dfs_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.delta_dfs_hash
    }

    // Take field
    pub fn take_delta_dfs_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.delta_dfs_hash, ::std::vec::Vec::new())
    }

    // bytes previous_delta_dfs_hash = 2;


    pub fn get_previous_delta_dfs_hash(&self) -> &[u8] {
        &self.previous_delta_dfs_hash
    }
    pub fn clear_previous_delta_dfs_hash(&mut self) {
        self.previous_delta_dfs_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_delta_dfs_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.previous_delta_dfs_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_delta_dfs_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.previous_delta_dfs_hash
    }

    // Take field
    pub fn take_previous_delta_dfs_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.previous_delta_dfs_hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeltaDfsHashBroadcast {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.delta_dfs_hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.previous_delta_dfs_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delta_dfs_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.delta_dfs_hash);
        }
        if !self.previous_delta_dfs_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.previous_delta_dfs_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delta_dfs_hash.is_empty() {
            os.write_bytes(1, &self.delta_dfs_hash)?;
        }
        if !self.previous_delta_dfs_hash.is_empty() {
            os.write_bytes(2, &self.previous_delta_dfs_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeltaDfsHashBroadcast {
        DeltaDfsHashBroadcast::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "delta_dfs_hash",
                    |m: &DeltaDfsHashBroadcast| { &m.delta_dfs_hash },
                    |m: &mut DeltaDfsHashBroadcast| { &mut m.delta_dfs_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "previous_delta_dfs_hash",
                    |m: &DeltaDfsHashBroadcast| { &m.previous_delta_dfs_hash },
                    |m: &mut DeltaDfsHashBroadcast| { &mut m.previous_delta_dfs_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeltaDfsHashBroadcast>(
                    "DeltaDfsHashBroadcast",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeltaDfsHashBroadcast {
        static mut instance: ::protobuf::lazy::Lazy<DeltaDfsHashBroadcast> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeltaDfsHashBroadcast,
        };
        unsafe {
            instance.get(DeltaDfsHashBroadcast::new)
        }
    }
}

impl ::protobuf::Clear for DeltaDfsHashBroadcast {
    fn clear(&mut self) {
        self.delta_dfs_hash.clear();
        self.previous_delta_dfs_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeltaDfsHashBroadcast {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeltaDfsHashBroadcast {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nWire.proto\x12\x16Catalyst.Protocol.Wire\x1a\x12Cryptography.proto\
    \x1a\nPeer.proto\x1a\x11Transaction.proto\x1a\x1fgoogle/protobuf/timesta\
    mp.proto\"\xd3\x01\n\x14ProtocolErrorMessage\x12G\n\tsignature\x18\x01\
    \x20\x01(\x0b2).Catalyst.Protocol.Cryptography.SignatureR\tsignature\x12\
    7\n\x07peer_id\x18\x02\x20\x01(\x0b2\x1e.Catalyst.Protocol.Peer.PeerIdR\
    \x06peerId\x12%\n\x0ecorrelation_id\x18\x03\x20\x01(\x0cR\rcorrelationId\
    \x12\x12\n\x04code\x18\x04\x20\x01(\x05R\x04code\"\xeb\x01\n\x0fProtocol\
    Message\x127\n\x07peer_id\x18\x01\x20\x01(\x0b2\x1e.Catalyst.Protocol.Pe\
    er.PeerIdR\x06peerId\x12%\n\x0ecorrelation_id\x18\x02\x20\x01(\x0cR\rcor\
    relationId\x12\x19\n\x08type_url\x18\x03\x20\x01(\tR\x07typeUrl\x12\x14\
    \n\x05value\x18\x04\x20\x01(\x0cR\x05value\x12G\n\tsignature\x18\x05\x20\
    \x01(\x0b2).Catalyst.Protocol.Cryptography.SignatureR\tsignature\"e\n\
    \x14TransactionBroadcast\x12M\n\x0cpublic_entry\x18\x01\x20\x01(\x0b2*.C\
    atalyst.Protocol.Transaction.PublicEntryR\x0bpublicEntry\"\xa5\x01\n\x17\
    CandidateDeltaBroadcast\x12\x12\n\x04hash\x18\x01\x20\x01(\x0cR\x04hash\
    \x12?\n\x0bproducer_id\x18\x02\x20\x01(\x0b2\x1e.Catalyst.Protocol.Peer.\
    PeerIdR\nproducerId\x125\n\x17previous_delta_dfs_hash\x18\x03\x20\x01(\
    \x0cR\x14previousDeltaDfsHash\"\xa3\x01\n\x17FavouriteDeltaBroadcast\x12\
    M\n\tcandidate\x18\x01\x20\x01(\x0b2/.Catalyst.Protocol.Wire.CandidateDe\
    ltaBroadcastR\tcandidate\x129\n\x08voter_id\x18\x02\x20\x01(\x0b2\x1e.Ca\
    talyst.Protocol.Peer.PeerIdR\x07voterId\"t\n\x15DeltaDfsHashBroadcast\
    \x12$\n\x0edelta_dfs_hash\x18\x01\x20\x01(\x0cR\x0cdeltaDfsHash\x125\n\
    \x17previous_delta_dfs_hash\x18\x02\x20\x01(\x0cR\x14previousDeltaDfsHas\
    hB\x02P\x01J\xaf\x1b\n\x06\x12\x04\x13\0E\x01\n\xdf\x06\n\x01\x0c\x12\
    \x03\x13\0\x122\xd4\x06*\n\x20Copyright\x20(c)\x202019\x20Catalyst\x20Ne\
    twork\n\n\x20This\x20file\x20is\x20part\x20of\x20Catalyst.Network.Protoc\
    ol.Protobuffs\x20<https://github.com/catalyst-network/protocol-protobuff\
    s>\n\n\x20Catalyst.Network.Protocol.Protobuffs\x20is\x20free\x20software\
    :\x20you\x20can\x20redistribute\x20it\x20and/or\x20modify\n\x20it\x20und\
    er\x20the\x20terms\x20of\x20the\x20GNU\x20General\x20Public\x20License\
    \x20as\x20published\x20by\n\x20the\x20Free\x20Software\x20Foundation,\
    \x20either\x20version\x202\x20of\x20the\x20License,\x20or\n\x20(at\x20yo\
    ur\x20option)\x20any\x20later\x20version.\n\x20\n\x20Catalyst.Network.Pr\
    otocol.Protobuffs\x20is\x20distributed\x20in\x20the\x20hope\x20that\x20i\
    t\x20will\x20be\x20useful,\n\x20but\x20WITHOUT\x20ANY\x20WARRANTY;\x20wi\
    thout\x20even\x20the\x20implied\x20warranty\x20of\n\x20MERCHANTABILITY\
    \x20or\x20FITNESS\x20FOR\x20A\x20PARTICULAR\x20PURPOSE.\x20See\x20the\n\
    \x20GNU\x20General\x20Public\x20License\x20for\x20more\x20details.\n\x20\
    \n\x20You\x20should\x20have\x20received\x20a\x20copy\x20of\x20the\x20GNU\
    \x20General\x20Public\x20License\n\x20along\x20with\x20Catalyst.Network.\
    Protocol.Protobuffs\x20If\x20not,\x20see\x20<https://www.gnu.org/license\
    s/>.\n\n\x08\n\x01\x08\x12\x03\x15\0\"\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\
    \x15\0\"\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x15\x07\x1a\n\r\n\x06\x08\
    \xe7\x07\0\x02\0\x12\x03\x15\x07\x1a\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\
    \x12\x03\x15\x07\x1a\n\x0c\n\x05\x08\xe7\x07\0\x03\x12\x03\x15\x1d!\n\t\
    \n\x02\x03\0\x12\x03\x17\x07\x1b\n\t\n\x02\x03\x01\x12\x03\x18\x07\x13\n\
    \t\n\x02\x03\x02\x12\x03\x19\x07\x1a\n\t\n\x02\x03\x03\x12\x03\x1a\x07(\
    \n\x08\n\x01\x02\x12\x03\x1c\x08\x1e\nc\n\x02\x04\0\x12\x04!\0&\x01\x1aW\
    *\n\x20Provides\x20a\x20network\x20error\x20message,\x20for\x20when\x20a\
    \x20node\x20cant\x20send/\x20build\x20a\x20valid\x20response\n\n\n\n\x03\
    \x04\0\x01\x12\x03!\x08\x1c\n\x0b\n\x04\x04\0\x02\0\x12\x03\"\x08-\n\r\n\
    \x05\x04\0\x02\0\x04\x12\x04\"\x08!\x1e\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03\"\x08\x1e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\"\x1f(\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\"+,\n\x0b\n\x04\x04\0\x02\x01\x12\x03#\x04\x1c\
    \n\r\n\x05\x04\0\x02\x01\x04\x12\x04#\x04\"-\n\x0c\n\x05\x04\0\x02\x01\
    \x06\x12\x03#\x04\x0f\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03#\x10\x17\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03#\x1a\x1b\n\x0b\n\x04\x04\0\x02\x02\
    \x12\x03$\x04\x1d\n\r\n\x05\x04\0\x02\x02\x04\x12\x04$\x04#\x1c\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03$\x04\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03$\n\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03$\x1b\x1c\n\x0b\n\x04\
    \x04\0\x02\x03\x12\x03%\x04\x13\n\r\n\x05\x04\0\x02\x03\x04\x12\x04%\x04\
    $\x1d\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03%\x04\t\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03%\n\x0e\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03%\x11\x12\n\
    \x95\x01\n\x02\x04\x01\x12\x04+\01\x01\x1a\x88\x01*\n\x20A\x20wrapper\
    \x20around\x20the\x20service\x20message,\x20the\x20contents\x20of\x20ser\
    vice\x20message\x20should\x20be\x20signed\x20by\x20the\x20sender\x20to\
    \x20avoid\x20tampering\x20mid-transit.\n\n\n\n\x03\x04\x01\x01\x12\x03+\
    \x08\x17\n%\n\x04\x04\x01\x02\0\x12\x03,\x04\x1c\"\x18\x20is\x20the\x20s\
    ender's\x20peerId\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04,\x04+\x19\n\x0c\
    \n\x05\x04\x01\x02\0\x06\x12\x03,\x04\x0f\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03,\x10\x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03,\x1a\x1b\nT\n\
    \x04\x04\x01\x02\x01\x12\x03-\x04\x1d\"G\x20is\x20a\x2016\x20bytes\x20gu\
    id\x20used\x20to\x20match\x20responses\x20to\x20their\x20original\x20req\
    uests\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04-\x04,\x1c\n\x0c\n\x05\x04\
    \x01\x02\x01\x05\x12\x03-\x04\t\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03-\
    \n\x18\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03-\x1b\x1c\n\x88\x01\n\x04\
    \x04\x01\x02\x02\x12\x03.\x04\x18\"{\x20is\x20the\x20shortened\x20protoc\
    ol\x20name\x20of\x20the\x20message\x20type\x20being\x20encoded\x20in\x20\
    the\x20value\x20field\x20(cf\x20Any\x20from\x20protobuf\x20WellKnownType\
    s)\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04.\x04-\x1d\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03.\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03.\x0b\
    \x13\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03.\x16\x17\ne\n\x04\x04\x01\
    \x02\x03\x12\x03/\x04\x14\"X\x20is\x20the\x20actual\x20value\x20of\x20th\
    e\x20message\x20being\x20wrapped\x20(cf\x20Any\x20from\x20protobuf\x20We\
    llKnownTypes)\n\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04/\x04.\x18\n\x0c\n\
    \x05\x04\x01\x02\x03\x05\x12\x03/\x04\t\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03/\n\x0f\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03/\x12\x13\n1\n\
    \x04\x04\x01\x02\x04\x12\x030\x04)\"$\x20is\x20the\x20ed25519ph\x20conte\
    xt\x20signature\n\n\r\n\x05\x04\x01\x02\x04\x04\x12\x040\x04/\x14\n\x0c\
    \n\x05\x04\x01\x02\x04\x06\x12\x030\x04\x1a\n\x0c\n\x05\x04\x01\x02\x04\
    \x01\x12\x030\x1b$\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x030'(\n\n\n\x02\
    \x04\x02\x12\x043\05\x01\n\n\n\x03\x04\x02\x01\x12\x033\x08\x1c\n3\n\x04\
    \x04\x02\x02\0\x12\x034\x081\"&\x200\x20field\x20for\x20confidential\x20\
    transaction\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x044\x083\x1e\n\x0c\n\x05\
    \x04\x02\x02\0\x06\x12\x034\x08\x1f\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x034\x20,\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x034/0\n\n\n\x02\x04\x03\
    \x12\x047\x01;\x01\n\n\n\x03\x04\x03\x01\x12\x037\t\x20\n\x8c\x01\n\x04\
    \x04\x03\x02\0\x12\x038\x08\x17\"\x7f\x20The\x20hash\x20computed\x20for\
    \x20the\x20current\x20delta\x20produced\x20by\x20ProducerId.\x20This\x20\
    is\x20meant\x20to\x20be\x20used\x20when\x20voting\x20for\x20most\x20popu\
    lar\x20hashes.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x048\x087\"\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x038\x08\r\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x038\
    \x0e\x12\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x038\x15\x16\n;\n\x04\x04\x03\
    \x02\x01\x12\x039\x08$\".\x20Identifier\x20of\x20the\x20producer\x20of\
    \x20the\x20candidate.\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x049\x088\x17\
    \n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x039\x08\x13\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x039\x14\x1f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x039\"\
    #\nU\n\x04\x04\x03\x02\x02\x12\x03:\x08*\"H\x20The\x20DFS\x20address\x20\
    for\x20the\x20content\x20of\x20the\x20delta\x20preceding\x20this\x20cand\
    idate.\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04:\x089$\n\x0c\n\x05\x04\
    \x03\x02\x02\x05\x12\x03:\x08\r\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03:\
    \x0e%\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03:()\n\n\n\x02\x04\x04\x12\
    \x04=\0@\x01\n\n\n\x03\x04\x04\x01\x12\x03=\x08\x1f\nM\n\x04\x04\x04\x02\
    \0\x12\x03>\x08.\"@\x20The\x20candidate\x20favoured\x20by\x20the\x20vote\
    r\x20broadcasting\x20this\x20message.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\
    \x04>\x08=!\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03>\x08\x1f\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03>\x20)\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03>,\
    -\nP\n\x04\x04\x04\x02\x01\x12\x03?\x08!\"C\x20The\x20PeerId\x20of\x20th\
    e\x20participant\x20submitting\x20its\x20vote\x20to\x20the\x20network.\n\
    \n\r\n\x05\x04\x04\x02\x01\x04\x12\x04?\x08>.\n\x0c\n\x05\x04\x04\x02\
    \x01\x06\x12\x03?\x08\x13\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03?\x14\
    \x1c\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03?\x1f\x20\n\n\n\x02\x04\x05\
    \x12\x04B\x01E\x01\n\n\n\x03\x04\x05\x01\x12\x03B\t\x1e\nW\n\x04\x04\x05\
    \x02\0\x12\x03C\x08!\"J\x20The\x20DFS\x20address\x20at\x20which\x20the\
    \x20full\x20content\x20of\x20the\x20delta\x20can\x20be\x20retrieved.\n\n\
    \r\n\x05\x04\x05\x02\0\x04\x12\x04C\x08B\x20\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x03C\x08\r\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03C\x0e\x1c\n\x0c\
    \n\x05\x04\x05\x02\0\x03\x12\x03C\x1f\x20\nU\n\x04\x04\x05\x02\x01\x12\
    \x03D\x08*\"H\x20The\x20DFS\x20address\x20for\x20the\x20content\x20of\
    \x20the\x20delta\x20preceding\x20this\x20candidate.\n\n\r\n\x05\x04\x05\
    \x02\x01\x04\x12\x04D\x08C!\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03D\x08\
    \r\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03D\x0e%\n\x0c\n\x05\x04\x05\x02\
    \x01\x03\x12\x03D()b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
