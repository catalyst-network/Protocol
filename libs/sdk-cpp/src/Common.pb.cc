// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#include "Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PeerId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ProtocolMessage;
}  // namespace protobuf_Common_2eproto
namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace Catalyst {
namespace Protocol {
namespace Common {
class PeerIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerId>
      _instance;
} _PeerId_default_instance_;
class ProtocolErrorMessageSignedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtocolErrorMessageSigned>
      _instance;
} _ProtocolErrorMessageSigned_default_instance_;
class ProtocolMessageSignedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtocolMessageSigned>
      _instance;
} _ProtocolMessageSigned_default_instance_;
class ProtocolMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtocolMessage>
      _instance;
} _ProtocolMessage_default_instance_;
class PeerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerInfo>
      _instance;
} _PeerInfo_default_instance_;
class SigningContextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SigningContext>
      _instance;
} _SigningContext_default_instance_;
}  // namespace Common
}  // namespace Protocol
}  // namespace Catalyst
namespace protobuf_Common_2eproto {
static void InitDefaultsPeerId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Common::_PeerId_default_instance_;
    new (ptr) ::Catalyst::Protocol::Common::PeerId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Common::PeerId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerId}, {}};

static void InitDefaultsProtocolErrorMessageSigned() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Common::_ProtocolErrorMessageSigned_default_instance_;
    new (ptr) ::Catalyst::Protocol::Common::ProtocolErrorMessageSigned();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Common::ProtocolErrorMessageSigned::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProtocolErrorMessageSigned =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProtocolErrorMessageSigned}, {
      &protobuf_Common_2eproto::scc_info_PeerId.base,}};

static void InitDefaultsProtocolMessageSigned() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Common::_ProtocolMessageSigned_default_instance_;
    new (ptr) ::Catalyst::Protocol::Common::ProtocolMessageSigned();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Common::ProtocolMessageSigned::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProtocolMessageSigned =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProtocolMessageSigned}, {
      &protobuf_Common_2eproto::scc_info_ProtocolMessage.base,}};

static void InitDefaultsProtocolMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Common::_ProtocolMessage_default_instance_;
    new (ptr) ::Catalyst::Protocol::Common::ProtocolMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Common::ProtocolMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProtocolMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProtocolMessage}, {
      &protobuf_Common_2eproto::scc_info_PeerId.base,}};

static void InitDefaultsPeerInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Common::_PeerInfo_default_instance_;
    new (ptr) ::Catalyst::Protocol::Common::PeerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Common::PeerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PeerInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPeerInfo}, {
      &protobuf_Common_2eproto::scc_info_PeerId.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsSigningContext() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Common::_SigningContext_default_instance_;
    new (ptr) ::Catalyst::Protocol::Common::SigningContext();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Common::SigningContext::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SigningContext =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSigningContext}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PeerId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtocolErrorMessageSigned.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtocolMessageSigned.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProtocolMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SigningContext.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerId, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerId, protocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerId, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerId, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerId, publickey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolErrorMessageSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolErrorMessageSigned, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolErrorMessageSigned, peerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolErrorMessageSigned, correlationid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolErrorMessageSigned, code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolMessageSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolMessageSigned, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolMessageSigned, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolMessage, peerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolMessage, correlationid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolMessage, type_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::ProtocolMessage, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerInfo, peerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerInfo, reputation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerInfo, blacklisted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerInfo, isawolpeer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerInfo, inactivefor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerInfo, lastseen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerInfo, modified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::PeerInfo, created_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::SigningContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::SigningContext, network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Common::SigningContext, signaturetype_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Catalyst::Protocol::Common::PeerId)},
  { 10, -1, sizeof(::Catalyst::Protocol::Common::ProtocolErrorMessageSigned)},
  { 19, -1, sizeof(::Catalyst::Protocol::Common::ProtocolMessageSigned)},
  { 26, -1, sizeof(::Catalyst::Protocol::Common::ProtocolMessage)},
  { 35, -1, sizeof(::Catalyst::Protocol::Common::PeerInfo)},
  { 48, -1, sizeof(::Catalyst::Protocol::Common::SigningContext)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::Common::_PeerId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::Common::_ProtocolErrorMessageSigned_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::Common::_ProtocolMessageSigned_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::Common::_ProtocolMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::Common::_PeerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::Common::_SigningContext_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Common.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Common.proto\022\030Catalyst.Protocol.Common"
      "\032\037google/protobuf/timestamp.proto\032\036googl"
      "e/protobuf/duration.proto\"`\n\006PeerId\022\020\n\010c"
      "lientId\030\001 \001(\014\022\027\n\017protocolVersion\030\002 \001(\014\022\n"
      "\n\002ip\030\003 \001(\014\022\014\n\004port\030\004 \001(\014\022\021\n\tpublicKey\030\005 "
      "\001(\014\"\206\001\n\032ProtocolErrorMessageSigned\022\021\n\tsi"
      "gnature\030\001 \001(\014\0220\n\006peerId\030\002 \001(\0132 .Catalyst"
      ".Protocol.Common.PeerId\022\025\n\rcorrelationId"
      "\030\003 \001(\014\022\014\n\004code\030\004 \001(\005\"f\n\025ProtocolMessageS"
      "igned\022\021\n\tsignature\030\001 \001(\014\022:\n\007message\030\002 \001("
      "\0132).Catalyst.Protocol.Common.ProtocolMes"
      "sage\"{\n\017ProtocolMessage\0220\n\006peerId\030\001 \001(\0132"
      " .Catalyst.Protocol.Common.PeerId\022\025\n\rcor"
      "relationId\030\002 \001(\014\022\020\n\010type_url\030\003 \001(\t\022\r\n\005va"
      "lue\030\004 \001(\014\"\262\002\n\010PeerInfo\0220\n\006peerId\030\001 \001(\0132 "
      ".Catalyst.Protocol.Common.PeerId\022\022\n\nrepu"
      "tation\030\002 \001(\005\022\023\n\013blackListed\030\003 \001(\010\022\022\n\nisA"
      "wolPeer\030\004 \001(\010\022.\n\013inactiveFor\030\005 \001(\0132\031.goo"
      "gle.protobuf.Duration\022,\n\010lastSeen\030\006 \001(\0132"
      "\032.google.protobuf.Timestamp\022,\n\010modified\030"
      "\007 \001(\0132\032.google.protobuf.Timestamp\022+\n\007cre"
      "ated\030\010 \001(\0132\032.google.protobuf.Timestamp\"\204"
      "\001\n\016SigningContext\0222\n\007network\030\001 \001(\0162!.Cat"
      "alyst.Protocol.Common.Network\022>\n\rsignatu"
      "reType\030\002 \001(\0162\'.Catalyst.Protocol.Common."
      "SignatureType*D\n\007Network\022\023\n\017NETWORK_UNKN"
      "OWN\020\000\022\013\n\007MAINNET\020\001\022\n\n\006DEVNET\020\002\022\013\n\007TESTNE"
      "T\020\003*\206\001\n\rSignatureType\022\032\n\026SIGNATURE_TYPE_"
      "UNKNOWN\020\000\022\026\n\022TRANSACTION_PUBLIC\020\001\022\034\n\030TRA"
      "NSACTION_CONFIDENTIAL\020\002\022\020\n\014PROTOCOL_RPC\020"
      "\003\022\021\n\rPROTOCOL_PEER\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Common.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Common_2eproto
namespace Catalyst {
namespace Protocol {
namespace Common {
const ::google::protobuf::EnumDescriptor* Network_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[0];
}
bool Network_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SignatureType_descriptor() {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Common_2eproto::file_level_enum_descriptors[1];
}
bool SignatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PeerId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerId::kClientIdFieldNumber;
const int PeerId::kProtocolVersionFieldNumber;
const int PeerId::kIpFieldNumber;
const int PeerId::kPortFieldNumber;
const int PeerId::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerId::PeerId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_PeerId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Common.PeerId)
}
PeerId::PeerId(const PeerId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientid().size() > 0) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  protocolversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocolversion().size() > 0) {
    protocolversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolversion_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port().size() > 0) {
    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.publickey().size() > 0) {
    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Common.PeerId)
}

void PeerId::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerId::~PeerId() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Common.PeerId)
  SharedDtor();
}

void PeerId::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerId::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerId& PeerId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_PeerId.base);
  return *internal_default_instance();
}


void PeerId::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Common.PeerId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Common.PeerId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes protocolVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protocolversion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes publicKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publickey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Common.PeerId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Common.PeerId)
  return false;
#undef DO_
}

void PeerId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Common.PeerId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes clientId = 1;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->clientid(), output);
  }

  // bytes protocolVersion = 2;
  if (this->protocolversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->protocolversion(), output);
  }

  // bytes ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ip(), output);
  }

  // bytes port = 4;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->port(), output);
  }

  // bytes publicKey = 5;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->publickey(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Common.PeerId)
}

::google::protobuf::uint8* PeerId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Common.PeerId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes clientId = 1;
  if (this->clientid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->clientid(), target);
  }

  // bytes protocolVersion = 2;
  if (this->protocolversion().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->protocolversion(), target);
  }

  // bytes ip = 3;
  if (this->ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ip(), target);
  }

  // bytes port = 4;
  if (this->port().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->port(), target);
  }

  // bytes publicKey = 5;
  if (this->publickey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->publickey(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Common.PeerId)
  return target;
}

size_t PeerId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Common.PeerId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes clientId = 1;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clientid());
  }

  // bytes protocolVersion = 2;
  if (this->protocolversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->protocolversion());
  }

  // bytes ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  // bytes port = 4;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->port());
  }

  // bytes publicKey = 5;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->publickey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Common.PeerId)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Common.PeerId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Common.PeerId)
    MergeFrom(*source);
  }
}

void PeerId::MergeFrom(const PeerId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Common.PeerId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.protocolversion().size() > 0) {

    protocolversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocolversion_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
}

void PeerId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Common.PeerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerId::CopyFrom(const PeerId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Common.PeerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerId::IsInitialized() const {
  return true;
}

void PeerId::Swap(PeerId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerId::InternalSwap(PeerId* other) {
  using std::swap;
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocolversion_.Swap(&other->protocolversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_.Swap(&other->port_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publickey_.Swap(&other->publickey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerId::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtocolErrorMessageSigned::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Common::_ProtocolErrorMessageSigned_default_instance_._instance.get_mutable()->peerid_ = const_cast< ::Catalyst::Protocol::Common::PeerId*>(
      ::Catalyst::Protocol::Common::PeerId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtocolErrorMessageSigned::kSignatureFieldNumber;
const int ProtocolErrorMessageSigned::kPeerIdFieldNumber;
const int ProtocolErrorMessageSigned::kCorrelationIdFieldNumber;
const int ProtocolErrorMessageSigned::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtocolErrorMessageSigned::ProtocolErrorMessageSigned()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_ProtocolErrorMessageSigned.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
}
ProtocolErrorMessageSigned::ProtocolErrorMessageSigned(const ProtocolErrorMessageSigned& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  correlationid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.correlationid().size() > 0) {
    correlationid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlationid_);
  }
  if (from.has_peerid()) {
    peerid_ = new ::Catalyst::Protocol::Common::PeerId(*from.peerid_);
  } else {
    peerid_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
}

void ProtocolErrorMessageSigned::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlationid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&peerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&peerid_)) + sizeof(code_));
}

ProtocolErrorMessageSigned::~ProtocolErrorMessageSigned() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  SharedDtor();
}

void ProtocolErrorMessageSigned::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlationid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peerid_;
}

void ProtocolErrorMessageSigned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtocolErrorMessageSigned::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtocolErrorMessageSigned& ProtocolErrorMessageSigned::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_ProtocolErrorMessageSigned.base);
  return *internal_default_instance();
}


void ProtocolErrorMessageSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && peerid_ != NULL) {
    delete peerid_;
  }
  peerid_ = NULL;
  code_ = 0;
  _internal_metadata_.Clear();
}

bool ProtocolErrorMessageSigned::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Common.PeerId peerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peerid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes correlationId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_correlationid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  return false;
#undef DO_
}

void ProtocolErrorMessageSigned::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // .Catalyst.Protocol.Common.PeerId peerId = 2;
  if (this->has_peerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_peerid(), output);
  }

  // bytes correlationId = 3;
  if (this->correlationid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->correlationid(), output);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
}

::google::protobuf::uint8* ProtocolErrorMessageSigned::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // .Catalyst.Protocol.Common.PeerId peerId = 2;
  if (this->has_peerid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_peerid(), deterministic, target);
  }

  // bytes correlationId = 3;
  if (this->correlationid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->correlationid(), target);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  return target;
}

size_t ProtocolErrorMessageSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // bytes correlationId = 3;
  if (this->correlationid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->correlationid());
  }

  // .Catalyst.Protocol.Common.PeerId peerId = 2;
  if (this->has_peerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peerid_);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolErrorMessageSigned::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolErrorMessageSigned* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtocolErrorMessageSigned>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
    MergeFrom(*source);
  }
}

void ProtocolErrorMessageSigned::MergeFrom(const ProtocolErrorMessageSigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.correlationid().size() > 0) {

    correlationid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlationid_);
  }
  if (from.has_peerid()) {
    mutable_peerid()->::Catalyst::Protocol::Common::PeerId::MergeFrom(from.peerid());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ProtocolErrorMessageSigned::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolErrorMessageSigned::CopyFrom(const ProtocolErrorMessageSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolErrorMessageSigned::IsInitialized() const {
  return true;
}

void ProtocolErrorMessageSigned::Swap(ProtocolErrorMessageSigned* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtocolErrorMessageSigned::InternalSwap(ProtocolErrorMessageSigned* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  correlationid_.Swap(&other->correlationid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(peerid_, other->peerid_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtocolErrorMessageSigned::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtocolMessageSigned::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Common::_ProtocolMessageSigned_default_instance_._instance.get_mutable()->message_ = const_cast< ::Catalyst::Protocol::Common::ProtocolMessage*>(
      ::Catalyst::Protocol::Common::ProtocolMessage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtocolMessageSigned::kSignatureFieldNumber;
const int ProtocolMessageSigned::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtocolMessageSigned::ProtocolMessageSigned()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_ProtocolMessageSigned.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Common.ProtocolMessageSigned)
}
ProtocolMessageSigned::ProtocolMessageSigned(const ProtocolMessageSigned& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_message()) {
    message_ = new ::Catalyst::Protocol::Common::ProtocolMessage(*from.message_);
  } else {
    message_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Common.ProtocolMessageSigned)
}

void ProtocolMessageSigned::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = NULL;
}

ProtocolMessageSigned::~ProtocolMessageSigned() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Common.ProtocolMessageSigned)
  SharedDtor();
}

void ProtocolMessageSigned::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void ProtocolMessageSigned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtocolMessageSigned::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtocolMessageSigned& ProtocolMessageSigned::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_ProtocolMessageSigned.base);
  return *internal_default_instance();
}


void ProtocolMessageSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Common.ProtocolMessageSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
  _internal_metadata_.Clear();
}

bool ProtocolMessageSigned::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Common.ProtocolMessageSigned)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Common.ProtocolMessage message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Common.ProtocolMessageSigned)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Common.ProtocolMessageSigned)
  return false;
#undef DO_
}

void ProtocolMessageSigned::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Common.ProtocolMessageSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // .Catalyst.Protocol.Common.ProtocolMessage message = 2;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Common.ProtocolMessageSigned)
}

::google::protobuf::uint8* ProtocolMessageSigned::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Common.ProtocolMessageSigned)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // .Catalyst.Protocol.Common.ProtocolMessage message = 2;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_message(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Common.ProtocolMessageSigned)
  return target;
}

size_t ProtocolMessageSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Common.ProtocolMessageSigned)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // .Catalyst.Protocol.Common.ProtocolMessage message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *message_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolMessageSigned::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Common.ProtocolMessageSigned)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolMessageSigned* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtocolMessageSigned>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Common.ProtocolMessageSigned)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Common.ProtocolMessageSigned)
    MergeFrom(*source);
  }
}

void ProtocolMessageSigned::MergeFrom(const ProtocolMessageSigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Common.ProtocolMessageSigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_message()) {
    mutable_message()->::Catalyst::Protocol::Common::ProtocolMessage::MergeFrom(from.message());
  }
}

void ProtocolMessageSigned::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Common.ProtocolMessageSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolMessageSigned::CopyFrom(const ProtocolMessageSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Common.ProtocolMessageSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolMessageSigned::IsInitialized() const {
  return true;
}

void ProtocolMessageSigned::Swap(ProtocolMessageSigned* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtocolMessageSigned::InternalSwap(ProtocolMessageSigned* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_, other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtocolMessageSigned::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtocolMessage::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Common::_ProtocolMessage_default_instance_._instance.get_mutable()->peerid_ = const_cast< ::Catalyst::Protocol::Common::PeerId*>(
      ::Catalyst::Protocol::Common::PeerId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtocolMessage::kPeerIdFieldNumber;
const int ProtocolMessage::kCorrelationIdFieldNumber;
const int ProtocolMessage::kTypeUrlFieldNumber;
const int ProtocolMessage::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtocolMessage::ProtocolMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_ProtocolMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Common.ProtocolMessage)
}
ProtocolMessage::ProtocolMessage(const ProtocolMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  correlationid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.correlationid().size() > 0) {
    correlationid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlationid_);
  }
  type_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type_url().size() > 0) {
    type_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_url_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_peerid()) {
    peerid_ = new ::Catalyst::Protocol::Common::PeerId(*from.peerid_);
  } else {
    peerid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Common.ProtocolMessage)
}

void ProtocolMessage::SharedCtor() {
  correlationid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peerid_ = NULL;
}

ProtocolMessage::~ProtocolMessage() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Common.ProtocolMessage)
  SharedDtor();
}

void ProtocolMessage::SharedDtor() {
  correlationid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peerid_;
}

void ProtocolMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtocolMessage::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtocolMessage& ProtocolMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_ProtocolMessage.base);
  return *internal_default_instance();
}


void ProtocolMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Common.ProtocolMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && peerid_ != NULL) {
    delete peerid_;
  }
  peerid_ = NULL;
  _internal_metadata_.Clear();
}

bool ProtocolMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Common.ProtocolMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Common.PeerId peerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peerid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes correlationId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_correlationid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type_url().data(), static_cast<int>(this->type_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Common.ProtocolMessage.type_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Common.ProtocolMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Common.ProtocolMessage)
  return false;
#undef DO_
}

void ProtocolMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Common.ProtocolMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Common.PeerId peerId = 1;
  if (this->has_peerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_peerid(), output);
  }

  // bytes correlationId = 2;
  if (this->correlationid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->correlationid(), output);
  }

  // string type_url = 3;
  if (this->type_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_url().data(), static_cast<int>(this->type_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Common.ProtocolMessage.type_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type_url(), output);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Common.ProtocolMessage)
}

::google::protobuf::uint8* ProtocolMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Common.ProtocolMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Common.PeerId peerId = 1;
  if (this->has_peerid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_peerid(), deterministic, target);
  }

  // bytes correlationId = 2;
  if (this->correlationid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->correlationid(), target);
  }

  // string type_url = 3;
  if (this->type_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_url().data(), static_cast<int>(this->type_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Common.ProtocolMessage.type_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type_url(), target);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Common.ProtocolMessage)
  return target;
}

size_t ProtocolMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Common.ProtocolMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes correlationId = 2;
  if (this->correlationid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->correlationid());
  }

  // string type_url = 3;
  if (this->type_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_url());
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .Catalyst.Protocol.Common.PeerId peerId = 1;
  if (this->has_peerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peerid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Common.ProtocolMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtocolMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Common.ProtocolMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Common.ProtocolMessage)
    MergeFrom(*source);
  }
}

void ProtocolMessage::MergeFrom(const ProtocolMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Common.ProtocolMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.correlationid().size() > 0) {

    correlationid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlationid_);
  }
  if (from.type_url().size() > 0) {

    type_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_url_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_peerid()) {
    mutable_peerid()->::Catalyst::Protocol::Common::PeerId::MergeFrom(from.peerid());
  }
}

void ProtocolMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Common.ProtocolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolMessage::CopyFrom(const ProtocolMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Common.ProtocolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolMessage::IsInitialized() const {
  return true;
}

void ProtocolMessage::Swap(ProtocolMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtocolMessage::InternalSwap(ProtocolMessage* other) {
  using std::swap;
  correlationid_.Swap(&other->correlationid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_url_.Swap(&other->type_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(peerid_, other->peerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtocolMessage::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerInfo::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Common::_PeerInfo_default_instance_._instance.get_mutable()->peerid_ = const_cast< ::Catalyst::Protocol::Common::PeerId*>(
      ::Catalyst::Protocol::Common::PeerId::internal_default_instance());
  ::Catalyst::Protocol::Common::_PeerInfo_default_instance_._instance.get_mutable()->inactivefor_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::Catalyst::Protocol::Common::_PeerInfo_default_instance_._instance.get_mutable()->lastseen_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::Catalyst::Protocol::Common::_PeerInfo_default_instance_._instance.get_mutable()->modified_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::Catalyst::Protocol::Common::_PeerInfo_default_instance_._instance.get_mutable()->created_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void PeerInfo::clear_inactivefor() {
  if (GetArenaNoVirtual() == NULL && inactivefor_ != NULL) {
    delete inactivefor_;
  }
  inactivefor_ = NULL;
}
void PeerInfo::clear_lastseen() {
  if (GetArenaNoVirtual() == NULL && lastseen_ != NULL) {
    delete lastseen_;
  }
  lastseen_ = NULL;
}
void PeerInfo::clear_modified() {
  if (GetArenaNoVirtual() == NULL && modified_ != NULL) {
    delete modified_;
  }
  modified_ = NULL;
}
void PeerInfo::clear_created() {
  if (GetArenaNoVirtual() == NULL && created_ != NULL) {
    delete created_;
  }
  created_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerInfo::kPeerIdFieldNumber;
const int PeerInfo::kReputationFieldNumber;
const int PeerInfo::kBlackListedFieldNumber;
const int PeerInfo::kIsAwolPeerFieldNumber;
const int PeerInfo::kInactiveForFieldNumber;
const int PeerInfo::kLastSeenFieldNumber;
const int PeerInfo::kModifiedFieldNumber;
const int PeerInfo::kCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerInfo::PeerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_PeerInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Common.PeerInfo)
}
PeerInfo::PeerInfo(const PeerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peerid()) {
    peerid_ = new ::Catalyst::Protocol::Common::PeerId(*from.peerid_);
  } else {
    peerid_ = NULL;
  }
  if (from.has_inactivefor()) {
    inactivefor_ = new ::google::protobuf::Duration(*from.inactivefor_);
  } else {
    inactivefor_ = NULL;
  }
  if (from.has_lastseen()) {
    lastseen_ = new ::google::protobuf::Timestamp(*from.lastseen_);
  } else {
    lastseen_ = NULL;
  }
  if (from.has_modified()) {
    modified_ = new ::google::protobuf::Timestamp(*from.modified_);
  } else {
    modified_ = NULL;
  }
  if (from.has_created()) {
    created_ = new ::google::protobuf::Timestamp(*from.created_);
  } else {
    created_ = NULL;
  }
  ::memcpy(&reputation_, &from.reputation_,
    static_cast<size_t>(reinterpret_cast<char*>(&isawolpeer_) -
    reinterpret_cast<char*>(&reputation_)) + sizeof(isawolpeer_));
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Common.PeerInfo)
}

void PeerInfo::SharedCtor() {
  ::memset(&peerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isawolpeer_) -
      reinterpret_cast<char*>(&peerid_)) + sizeof(isawolpeer_));
}

PeerInfo::~PeerInfo() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Common.PeerInfo)
  SharedDtor();
}

void PeerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete peerid_;
  if (this != internal_default_instance()) delete inactivefor_;
  if (this != internal_default_instance()) delete lastseen_;
  if (this != internal_default_instance()) delete modified_;
  if (this != internal_default_instance()) delete created_;
}

void PeerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerInfo::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerInfo& PeerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_PeerInfo.base);
  return *internal_default_instance();
}


void PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Common.PeerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peerid_ != NULL) {
    delete peerid_;
  }
  peerid_ = NULL;
  if (GetArenaNoVirtual() == NULL && inactivefor_ != NULL) {
    delete inactivefor_;
  }
  inactivefor_ = NULL;
  if (GetArenaNoVirtual() == NULL && lastseen_ != NULL) {
    delete lastseen_;
  }
  lastseen_ = NULL;
  if (GetArenaNoVirtual() == NULL && modified_ != NULL) {
    delete modified_;
  }
  modified_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_ != NULL) {
    delete created_;
  }
  created_ = NULL;
  ::memset(&reputation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isawolpeer_) -
      reinterpret_cast<char*>(&reputation_)) + sizeof(isawolpeer_));
  _internal_metadata_.Clear();
}

bool PeerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Common.PeerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Common.PeerId peerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peerid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reputation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool blackListed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blacklisted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isAwolPeer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isawolpeer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration inactiveFor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inactivefor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp lastSeen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lastseen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp modified = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modified()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Common.PeerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Common.PeerInfo)
  return false;
#undef DO_
}

void PeerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Common.PeerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Common.PeerId peerId = 1;
  if (this->has_peerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_peerid(), output);
  }

  // int32 reputation = 2;
  if (this->reputation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reputation(), output);
  }

  // bool blackListed = 3;
  if (this->blacklisted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->blacklisted(), output);
  }

  // bool isAwolPeer = 4;
  if (this->isawolpeer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isawolpeer(), output);
  }

  // .google.protobuf.Duration inactiveFor = 5;
  if (this->has_inactivefor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_inactivefor(), output);
  }

  // .google.protobuf.Timestamp lastSeen = 6;
  if (this->has_lastseen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_lastseen(), output);
  }

  // .google.protobuf.Timestamp modified = 7;
  if (this->has_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_modified(), output);
  }

  // .google.protobuf.Timestamp created = 8;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_created(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Common.PeerInfo)
}

::google::protobuf::uint8* PeerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Common.PeerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Common.PeerId peerId = 1;
  if (this->has_peerid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_peerid(), deterministic, target);
  }

  // int32 reputation = 2;
  if (this->reputation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reputation(), target);
  }

  // bool blackListed = 3;
  if (this->blacklisted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->blacklisted(), target);
  }

  // bool isAwolPeer = 4;
  if (this->isawolpeer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isawolpeer(), target);
  }

  // .google.protobuf.Duration inactiveFor = 5;
  if (this->has_inactivefor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_inactivefor(), deterministic, target);
  }

  // .google.protobuf.Timestamp lastSeen = 6;
  if (this->has_lastseen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_lastseen(), deterministic, target);
  }

  // .google.protobuf.Timestamp modified = 7;
  if (this->has_modified()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_modified(), deterministic, target);
  }

  // .google.protobuf.Timestamp created = 8;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_created(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Common.PeerInfo)
  return target;
}

size_t PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Common.PeerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Catalyst.Protocol.Common.PeerId peerId = 1;
  if (this->has_peerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peerid_);
  }

  // .google.protobuf.Duration inactiveFor = 5;
  if (this->has_inactivefor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inactivefor_);
  }

  // .google.protobuf.Timestamp lastSeen = 6;
  if (this->has_lastseen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lastseen_);
  }

  // .google.protobuf.Timestamp modified = 7;
  if (this->has_modified()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *modified_);
  }

  // .google.protobuf.Timestamp created = 8;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // int32 reputation = 2;
  if (this->reputation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reputation());
  }

  // bool blackListed = 3;
  if (this->blacklisted() != 0) {
    total_size += 1 + 1;
  }

  // bool isAwolPeer = 4;
  if (this->isawolpeer() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Common.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Common.PeerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Common.PeerInfo)
    MergeFrom(*source);
  }
}

void PeerInfo::MergeFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Common.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peerid()) {
    mutable_peerid()->::Catalyst::Protocol::Common::PeerId::MergeFrom(from.peerid());
  }
  if (from.has_inactivefor()) {
    mutable_inactivefor()->::google::protobuf::Duration::MergeFrom(from.inactivefor());
  }
  if (from.has_lastseen()) {
    mutable_lastseen()->::google::protobuf::Timestamp::MergeFrom(from.lastseen());
  }
  if (from.has_modified()) {
    mutable_modified()->::google::protobuf::Timestamp::MergeFrom(from.modified());
  }
  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
  if (from.reputation() != 0) {
    set_reputation(from.reputation());
  }
  if (from.blacklisted() != 0) {
    set_blacklisted(from.blacklisted());
  }
  if (from.isawolpeer() != 0) {
    set_isawolpeer(from.isawolpeer());
  }
}

void PeerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Common.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerInfo::CopyFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Common.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfo::IsInitialized() const {
  return true;
}

void PeerInfo::Swap(PeerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerInfo::InternalSwap(PeerInfo* other) {
  using std::swap;
  swap(peerid_, other->peerid_);
  swap(inactivefor_, other->inactivefor_);
  swap(lastseen_, other->lastseen_);
  swap(modified_, other->modified_);
  swap(created_, other->created_);
  swap(reputation_, other->reputation_);
  swap(blacklisted_, other->blacklisted_);
  swap(isawolpeer_, other->isawolpeer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerInfo::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SigningContext::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SigningContext::kNetworkFieldNumber;
const int SigningContext::kSignatureTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SigningContext::SigningContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Common_2eproto::scc_info_SigningContext.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Common.SigningContext)
}
SigningContext::SigningContext(const SigningContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&network_, &from.network_,
    static_cast<size_t>(reinterpret_cast<char*>(&signaturetype_) -
    reinterpret_cast<char*>(&network_)) + sizeof(signaturetype_));
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Common.SigningContext)
}

void SigningContext::SharedCtor() {
  ::memset(&network_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signaturetype_) -
      reinterpret_cast<char*>(&network_)) + sizeof(signaturetype_));
}

SigningContext::~SigningContext() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Common.SigningContext)
  SharedDtor();
}

void SigningContext::SharedDtor() {
}

void SigningContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SigningContext::descriptor() {
  ::protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SigningContext& SigningContext::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Common_2eproto::scc_info_SigningContext.base);
  return *internal_default_instance();
}


void SigningContext::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Common.SigningContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&network_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signaturetype_) -
      reinterpret_cast<char*>(&network_)) + sizeof(signaturetype_));
  _internal_metadata_.Clear();
}

bool SigningContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Common.SigningContext)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Common.Network network = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_network(static_cast< ::Catalyst::Protocol::Common::Network >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Common.SignatureType signatureType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_signaturetype(static_cast< ::Catalyst::Protocol::Common::SignatureType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Common.SigningContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Common.SigningContext)
  return false;
#undef DO_
}

void SigningContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Common.SigningContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Common.Network network = 1;
  if (this->network() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->network(), output);
  }

  // .Catalyst.Protocol.Common.SignatureType signatureType = 2;
  if (this->signaturetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->signaturetype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Common.SigningContext)
}

::google::protobuf::uint8* SigningContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Common.SigningContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Common.Network network = 1;
  if (this->network() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->network(), target);
  }

  // .Catalyst.Protocol.Common.SignatureType signatureType = 2;
  if (this->signaturetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->signaturetype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Common.SigningContext)
  return target;
}

size_t SigningContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Common.SigningContext)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Catalyst.Protocol.Common.Network network = 1;
  if (this->network() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->network());
  }

  // .Catalyst.Protocol.Common.SignatureType signatureType = 2;
  if (this->signaturetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->signaturetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Common.SigningContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SigningContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Common.SigningContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Common.SigningContext)
    MergeFrom(*source);
  }
}

void SigningContext::MergeFrom(const SigningContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Common.SigningContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.network() != 0) {
    set_network(from.network());
  }
  if (from.signaturetype() != 0) {
    set_signaturetype(from.signaturetype());
  }
}

void SigningContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Common.SigningContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningContext::CopyFrom(const SigningContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Common.SigningContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningContext::IsInitialized() const {
  return true;
}

void SigningContext::Swap(SigningContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SigningContext::InternalSwap(SigningContext* other) {
  using std::swap;
  swap(network_, other->network_);
  swap(signaturetype_, other->signaturetype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SigningContext::GetMetadata() const {
  protobuf_Common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Common
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::Common::PeerId* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Common::PeerId >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Common::PeerId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::Common::ProtocolErrorMessageSigned* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Common::ProtocolErrorMessageSigned >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Common::ProtocolErrorMessageSigned >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::Common::ProtocolMessageSigned* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Common::ProtocolMessageSigned >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Common::ProtocolMessageSigned >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::Common::ProtocolMessage* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Common::ProtocolMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Common::ProtocolMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::Common::PeerInfo* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Common::PeerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Common::PeerInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::Common::SigningContext* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Common::SigningContext >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Common::SigningContext >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
