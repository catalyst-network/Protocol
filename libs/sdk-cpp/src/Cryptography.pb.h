// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cryptography.proto

#ifndef PROTOBUF_Cryptography_2eproto__INCLUDED
#define PROTOBUF_Cryptography_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Network.pb.h"
// @@protoc_insertion_point(includes)
namespace Catalyst {
namespace Protocol {
namespace Cryptography {
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class SigningContext;
class SigningContextDefaultTypeInternal;
extern SigningContextDefaultTypeInternal _SigningContext_default_instance_;
}  // namespace Cryptography
namespace Network {
}  // namespace Network
}  // namespace Protocol
}  // namespace Catalyst

namespace Catalyst {
namespace Protocol {
namespace Cryptography {

namespace protobuf_Cryptography_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Cryptography_2eproto

enum SignatureType {
  SIGNATURE_TYPE_UNKNOWN = 0,
  TRANSACTION_PUBLIC = 1,
  TRANSACTION_CONFIDENTIAL = 2,
  PROTOCOL_RPC = 3,
  PROTOCOL_PEER = 4,
  SignatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SignatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SignatureType_IsValid(int value);
const SignatureType SignatureType_MIN = SIGNATURE_TYPE_UNKNOWN;
const SignatureType SignatureType_MAX = PROTOCOL_PEER;
const int SignatureType_ARRAYSIZE = SignatureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SignatureType_descriptor();
inline const ::std::string& SignatureType_Name(SignatureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SignatureType_descriptor(), value);
}
inline bool SignatureType_Parse(
    const ::std::string& name, SignatureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignatureType>(
    SignatureType_descriptor(), name, value);
}
enum ErrorCode {
  ERROR_CODE_UNKNOWN = 0,
  INVALID_SIGNATURE = 1,
  INVALID_PUBLIC_KEY = 2,
  INVALID_PRIVATE_KEY = 3,
  SIGNATURE_VERIFICATION_FAILURE = 4,
  INVALID_CONTEXT_LENGTH = 5,
  NO_ERROR = 418,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = ERROR_CODE_UNKNOWN;
const ErrorCode ErrorCode_MAX = NO_ERROR;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class Signature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Cryptography.Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signature& default_instance();

  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }

  void Swap(Signature* other);

  // implements Message ----------------------------------------------

  inline Signature* New() const PROTOBUF_FINAL { return New(NULL); }

  Signature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Signature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes raw_bytes = 2;
  void clear_raw_bytes();
  static const int kRawBytesFieldNumber = 2;
  const ::std::string& raw_bytes() const;
  void set_raw_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_bytes(::std::string&& value);
  #endif
  void set_raw_bytes(const char* value);
  void set_raw_bytes(const void* value, size_t size);
  ::std::string* mutable_raw_bytes();
  ::std::string* release_raw_bytes();
  void set_allocated_raw_bytes(::std::string* raw_bytes);

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 1;
  bool has_signing_context() const;
  void clear_signing_context();
  static const int kSigningContextFieldNumber = 1;
  const ::Catalyst::Protocol::Cryptography::SigningContext& signing_context() const;
  ::Catalyst::Protocol::Cryptography::SigningContext* mutable_signing_context();
  ::Catalyst::Protocol::Cryptography::SigningContext* release_signing_context();
  void set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Cryptography.Signature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr raw_bytes_;
  ::Catalyst::Protocol::Cryptography::SigningContext* signing_context_;
  mutable int _cached_size_;
  friend struct  protobuf_Cryptography_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SigningContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Cryptography.SigningContext) */ {
 public:
  SigningContext();
  virtual ~SigningContext();

  SigningContext(const SigningContext& from);

  inline SigningContext& operator=(const SigningContext& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigningContext& default_instance();

  static inline const SigningContext* internal_default_instance() {
    return reinterpret_cast<const SigningContext*>(
               &_SigningContext_default_instance_);
  }

  void Swap(SigningContext* other);

  // implements Message ----------------------------------------------

  inline SigningContext* New() const PROTOBUF_FINAL { return New(NULL); }

  SigningContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SigningContext& from);
  void MergeFrom(const SigningContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SigningContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Network.NetworkType network_type = 1;
  void clear_network_type();
  static const int kNetworkTypeFieldNumber = 1;
  ::Catalyst::Protocol::Network::NetworkType network_type() const;
  void set_network_type(::Catalyst::Protocol::Network::NetworkType value);

  // .Catalyst.Protocol.Cryptography.SignatureType signature_type = 2;
  void clear_signature_type();
  static const int kSignatureTypeFieldNumber = 2;
  ::Catalyst::Protocol::Cryptography::SignatureType signature_type() const;
  void set_signature_type(::Catalyst::Protocol::Cryptography::SignatureType value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Cryptography.SigningContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int network_type_;
  int signature_type_;
  mutable int _cached_size_;
  friend struct  protobuf_Cryptography_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Signature

// .Catalyst.Protocol.Cryptography.SigningContext signing_context = 1;
inline bool Signature::has_signing_context() const {
  return this != internal_default_instance() && signing_context_ != NULL;
}
inline void Signature::clear_signing_context() {
  if (GetArenaNoVirtual() == NULL && signing_context_ != NULL) delete signing_context_;
  signing_context_ = NULL;
}
inline const ::Catalyst::Protocol::Cryptography::SigningContext& Signature::signing_context() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.Signature.signing_context)
  return signing_context_ != NULL ? *signing_context_
                         : *::Catalyst::Protocol::Cryptography::SigningContext::internal_default_instance();
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* Signature::mutable_signing_context() {
  
  if (signing_context_ == NULL) {
    signing_context_ = new ::Catalyst::Protocol::Cryptography::SigningContext;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Cryptography.Signature.signing_context)
  return signing_context_;
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* Signature::release_signing_context() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Cryptography.Signature.signing_context)
  
  ::Catalyst::Protocol::Cryptography::SigningContext* temp = signing_context_;
  signing_context_ = NULL;
  return temp;
}
inline void Signature::set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context) {
  delete signing_context_;
  signing_context_ = signing_context;
  if (signing_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Cryptography.Signature.signing_context)
}

// bytes raw_bytes = 2;
inline void Signature::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Signature::raw_bytes() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
  return raw_bytes_.GetNoArena();
}
inline void Signature::set_raw_bytes(const ::std::string& value) {
  
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
}
#if LANG_CXX11
inline void Signature::set_raw_bytes(::std::string&& value) {
  
  raw_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
}
#endif
inline void Signature::set_raw_bytes(const char* value) {
  
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
}
inline void Signature::set_raw_bytes(const void* value, size_t size) {
  
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
}
inline ::std::string* Signature::mutable_raw_bytes() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
  return raw_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Signature::release_raw_bytes() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
  
  return raw_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Signature::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes != NULL) {
    
  } else {
    
  }
  raw_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
}

// -------------------------------------------------------------------

// SigningContext

// .Catalyst.Protocol.Network.NetworkType network_type = 1;
inline void SigningContext::clear_network_type() {
  network_type_ = 0;
}
inline ::Catalyst::Protocol::Network::NetworkType SigningContext::network_type() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.SigningContext.network_type)
  return static_cast< ::Catalyst::Protocol::Network::NetworkType >(network_type_);
}
inline void SigningContext::set_network_type(::Catalyst::Protocol::Network::NetworkType value) {
  
  network_type_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SigningContext.network_type)
}

// .Catalyst.Protocol.Cryptography.SignatureType signature_type = 2;
inline void SigningContext::clear_signature_type() {
  signature_type_ = 0;
}
inline ::Catalyst::Protocol::Cryptography::SignatureType SigningContext::signature_type() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.SigningContext.signature_type)
  return static_cast< ::Catalyst::Protocol::Cryptography::SignatureType >(signature_type_);
}
inline void SigningContext::set_signature_type(::Catalyst::Protocol::Cryptography::SignatureType value) {
  
  signature_type_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SigningContext.signature_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Cryptography
}  // namespace Protocol
}  // namespace Catalyst

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Catalyst::Protocol::Cryptography::SignatureType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Cryptography::SignatureType>() {
  return ::Catalyst::Protocol::Cryptography::SignatureType_descriptor();
}
template <> struct is_proto_enum< ::Catalyst::Protocol::Cryptography::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Cryptography::ErrorCode>() {
  return ::Catalyst::Protocol::Cryptography::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Cryptography_2eproto__INCLUDED
