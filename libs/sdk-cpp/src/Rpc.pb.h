// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rpc.proto

#ifndef PROTOBUF_Rpc_2eproto__INCLUDED
#define PROTOBUF_Rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Peer.pb.h"
#include "Cryptography.pb.h"
#include "Deltas.pb.h"
#include "Wire.pb.h"
#include "Transaction.pb.h"
// @@protoc_insertion_point(includes)
namespace Catalyst {
namespace Protocol {
namespace Cryptography {
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class SigningContext;
class SigningContextDefaultTypeInternal;
extern SigningContextDefaultTypeInternal _SigningContext_default_instance_;
}  // namespace Cryptography
namespace Deltas {
class Delta;
class DeltaDefaultTypeInternal;
extern DeltaDefaultTypeInternal _Delta_default_instance_;
class DeltaIndex;
class DeltaIndexDefaultTypeInternal;
extern DeltaIndexDefaultTypeInternal _DeltaIndex_default_instance_;
}  // namespace Deltas
namespace Peer {
class PeerId;
class PeerIdDefaultTypeInternal;
extern PeerIdDefaultTypeInternal _PeerId_default_instance_;
class PeerInfo;
class PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
}  // namespace Peer
namespace Rpc {
namespace Node {
class AddFileToDfsRequest;
class AddFileToDfsRequestDefaultTypeInternal;
extern AddFileToDfsRequestDefaultTypeInternal _AddFileToDfsRequest_default_instance_;
class AddFileToDfsResponse;
class AddFileToDfsResponseDefaultTypeInternal;
extern AddFileToDfsResponseDefaultTypeInternal _AddFileToDfsResponse_default_instance_;
class AddNodeRequest;
class AddNodeRequestDefaultTypeInternal;
extern AddNodeRequestDefaultTypeInternal _AddNodeRequest_default_instance_;
class AddNodeResponse;
class AddNodeResponseDefaultTypeInternal;
extern AddNodeResponseDefaultTypeInternal _AddNodeResponse_default_instance_;
class BroadcastRawTransactionRequest;
class BroadcastRawTransactionRequestDefaultTypeInternal;
extern BroadcastRawTransactionRequestDefaultTypeInternal _BroadcastRawTransactionRequest_default_instance_;
class BroadcastRawTransactionResponse;
class BroadcastRawTransactionResponseDefaultTypeInternal;
extern BroadcastRawTransactionResponseDefaultTypeInternal _BroadcastRawTransactionResponse_default_instance_;
class CreateAddressRequest;
class CreateAddressRequestDefaultTypeInternal;
extern CreateAddressRequestDefaultTypeInternal _CreateAddressRequest_default_instance_;
class CreateAddressResponse;
class CreateAddressResponseDefaultTypeInternal;
extern CreateAddressResponseDefaultTypeInternal _CreateAddressResponse_default_instance_;
class CreateRawTransactionRequest;
class CreateRawTransactionRequestDefaultTypeInternal;
extern CreateRawTransactionRequestDefaultTypeInternal _CreateRawTransactionRequest_default_instance_;
class CreateRawTransactionResponse;
class CreateRawTransactionResponseDefaultTypeInternal;
extern CreateRawTransactionResponseDefaultTypeInternal _CreateRawTransactionResponse_default_instance_;
class CreateWalletRequest;
class CreateWalletRequestDefaultTypeInternal;
extern CreateWalletRequestDefaultTypeInternal _CreateWalletRequest_default_instance_;
class CreateWalletResponse;
class CreateWalletResponseDefaultTypeInternal;
extern CreateWalletResponseDefaultTypeInternal _CreateWalletResponse_default_instance_;
class DecodeRawTransactionRequest;
class DecodeRawTransactionRequestDefaultTypeInternal;
extern DecodeRawTransactionRequestDefaultTypeInternal _DecodeRawTransactionRequest_default_instance_;
class DecodeRawTransactionResponse;
class DecodeRawTransactionResponseDefaultTypeInternal;
extern DecodeRawTransactionResponseDefaultTypeInternal _DecodeRawTransactionResponse_default_instance_;
class GetAddressRequest;
class GetAddressRequestDefaultTypeInternal;
extern GetAddressRequestDefaultTypeInternal _GetAddressRequest_default_instance_;
class GetAddressResponse;
class GetAddressResponseDefaultTypeInternal;
extern GetAddressResponseDefaultTypeInternal _GetAddressResponse_default_instance_;
class GetBalanceRequest;
class GetBalanceRequestDefaultTypeInternal;
extern GetBalanceRequestDefaultTypeInternal _GetBalanceRequest_default_instance_;
class GetBalanceResponse;
class GetBalanceResponseDefaultTypeInternal;
extern GetBalanceResponseDefaultTypeInternal _GetBalanceResponse_default_instance_;
class GetConnectionCountRequest;
class GetConnectionCountRequestDefaultTypeInternal;
extern GetConnectionCountRequestDefaultTypeInternal _GetConnectionCountRequest_default_instance_;
class GetConnectionCountResponse;
class GetConnectionCountResponseDefaultTypeInternal;
extern GetConnectionCountResponseDefaultTypeInternal _GetConnectionCountResponse_default_instance_;
class GetDeltaRequest;
class GetDeltaRequestDefaultTypeInternal;
extern GetDeltaRequestDefaultTypeInternal _GetDeltaRequest_default_instance_;
class GetDeltaResponse;
class GetDeltaResponseDefaultTypeInternal;
extern GetDeltaResponseDefaultTypeInternal _GetDeltaResponse_default_instance_;
class GetFileFromDfsRequest;
class GetFileFromDfsRequestDefaultTypeInternal;
extern GetFileFromDfsRequestDefaultTypeInternal _GetFileFromDfsRequest_default_instance_;
class GetFileFromDfsResponse;
class GetFileFromDfsResponseDefaultTypeInternal;
extern GetFileFromDfsResponseDefaultTypeInternal _GetFileFromDfsResponse_default_instance_;
class GetInfoRequest;
class GetInfoRequestDefaultTypeInternal;
extern GetInfoRequestDefaultTypeInternal _GetInfoRequest_default_instance_;
class GetInfoResponse;
class GetInfoResponseDefaultTypeInternal;
extern GetInfoResponseDefaultTypeInternal _GetInfoResponse_default_instance_;
class GetMempoolRequest;
class GetMempoolRequestDefaultTypeInternal;
extern GetMempoolRequestDefaultTypeInternal _GetMempoolRequest_default_instance_;
class GetMempoolResponse;
class GetMempoolResponseDefaultTypeInternal;
extern GetMempoolResponseDefaultTypeInternal _GetMempoolResponse_default_instance_;
class GetPeerCountRequest;
class GetPeerCountRequestDefaultTypeInternal;
extern GetPeerCountRequestDefaultTypeInternal _GetPeerCountRequest_default_instance_;
class GetPeerCountResponse;
class GetPeerCountResponseDefaultTypeInternal;
extern GetPeerCountResponseDefaultTypeInternal _GetPeerCountResponse_default_instance_;
class GetPeerInfoRequest;
class GetPeerInfoRequestDefaultTypeInternal;
extern GetPeerInfoRequestDefaultTypeInternal _GetPeerInfoRequest_default_instance_;
class GetPeerInfoResponse;
class GetPeerInfoResponseDefaultTypeInternal;
extern GetPeerInfoResponseDefaultTypeInternal _GetPeerInfoResponse_default_instance_;
class GetPeerListRequest;
class GetPeerListRequestDefaultTypeInternal;
extern GetPeerListRequestDefaultTypeInternal _GetPeerListRequest_default_instance_;
class GetPeerListResponse;
class GetPeerListResponseDefaultTypeInternal;
extern GetPeerListResponseDefaultTypeInternal _GetPeerListResponse_default_instance_;
class GetPeerReputationRequest;
class GetPeerReputationRequestDefaultTypeInternal;
extern GetPeerReputationRequestDefaultTypeInternal _GetPeerReputationRequest_default_instance_;
class GetPeerReputationResponse;
class GetPeerReputationResponseDefaultTypeInternal;
extern GetPeerReputationResponseDefaultTypeInternal _GetPeerReputationResponse_default_instance_;
class ListAddressRequest;
class ListAddressRequestDefaultTypeInternal;
extern ListAddressRequestDefaultTypeInternal _ListAddressRequest_default_instance_;
class ListAddressResponse;
class ListAddressResponseDefaultTypeInternal;
extern ListAddressResponseDefaultTypeInternal _ListAddressResponse_default_instance_;
class ListWalletRequest;
class ListWalletRequestDefaultTypeInternal;
extern ListWalletRequestDefaultTypeInternal _ListWalletRequest_default_instance_;
class ListWalletResponse;
class ListWalletResponseDefaultTypeInternal;
extern ListWalletResponseDefaultTypeInternal _ListWalletResponse_default_instance_;
class RemovePeerRequest;
class RemovePeerRequestDefaultTypeInternal;
extern RemovePeerRequestDefaultTypeInternal _RemovePeerRequest_default_instance_;
class RemovePeerResponse;
class RemovePeerResponseDefaultTypeInternal;
extern RemovePeerResponseDefaultTypeInternal _RemovePeerResponse_default_instance_;
class SendFromManyRequest;
class SendFromManyRequestDefaultTypeInternal;
extern SendFromManyRequestDefaultTypeInternal _SendFromManyRequest_default_instance_;
class SendFromManyResponse;
class SendFromManyResponseDefaultTypeInternal;
extern SendFromManyResponseDefaultTypeInternal _SendFromManyResponse_default_instance_;
class SendManyRequest;
class SendManyRequestDefaultTypeInternal;
extern SendManyRequestDefaultTypeInternal _SendManyRequest_default_instance_;
class SendManyResponse;
class SendManyResponseDefaultTypeInternal;
extern SendManyResponseDefaultTypeInternal _SendManyResponse_default_instance_;
class SendToFromRequest;
class SendToFromRequestDefaultTypeInternal;
extern SendToFromRequestDefaultTypeInternal _SendToFromRequest_default_instance_;
class SendToFromResponse;
class SendToFromResponseDefaultTypeInternal;
extern SendToFromResponseDefaultTypeInternal _SendToFromResponse_default_instance_;
class SendToRequest;
class SendToRequestDefaultTypeInternal;
extern SendToRequestDefaultTypeInternal _SendToRequest_default_instance_;
class SendToResponse;
class SendToResponseDefaultTypeInternal;
extern SendToResponseDefaultTypeInternal _SendToResponse_default_instance_;
class ServiceStatusRequest;
class ServiceStatusRequestDefaultTypeInternal;
extern ServiceStatusRequestDefaultTypeInternal _ServiceStatusRequest_default_instance_;
class ServiceStatusResponse;
class ServiceStatusResponseDefaultTypeInternal;
extern ServiceStatusResponseDefaultTypeInternal _ServiceStatusResponse_default_instance_;
class SetPeerBlacklistRequest;
class SetPeerBlacklistRequestDefaultTypeInternal;
extern SetPeerBlacklistRequestDefaultTypeInternal _SetPeerBlacklistRequest_default_instance_;
class SetPeerBlacklistResponse;
class SetPeerBlacklistResponseDefaultTypeInternal;
extern SetPeerBlacklistResponseDefaultTypeInternal _SetPeerBlacklistResponse_default_instance_;
class SetPeerDataFolderRequest;
class SetPeerDataFolderRequestDefaultTypeInternal;
extern SetPeerDataFolderRequestDefaultTypeInternal _SetPeerDataFolderRequest_default_instance_;
class SetPeerDataFolderResponse;
class SetPeerDataFolderResponseDefaultTypeInternal;
extern SetPeerDataFolderResponseDefaultTypeInternal _SetPeerDataFolderResponse_default_instance_;
class SignMessageRequest;
class SignMessageRequestDefaultTypeInternal;
extern SignMessageRequestDefaultTypeInternal _SignMessageRequest_default_instance_;
class SignMessageResponse;
class SignMessageResponseDefaultTypeInternal;
extern SignMessageResponseDefaultTypeInternal _SignMessageResponse_default_instance_;
class SignRawTransactionRequest;
class SignRawTransactionRequestDefaultTypeInternal;
extern SignRawTransactionRequestDefaultTypeInternal _SignRawTransactionRequest_default_instance_;
class SignRawTransactionResponse;
class SignRawTransactionResponseDefaultTypeInternal;
extern SignRawTransactionResponseDefaultTypeInternal _SignRawTransactionResponse_default_instance_;
class TransferFileBytesRequest;
class TransferFileBytesRequestDefaultTypeInternal;
extern TransferFileBytesRequestDefaultTypeInternal _TransferFileBytesRequest_default_instance_;
class TransferFileBytesResponse;
class TransferFileBytesResponseDefaultTypeInternal;
extern TransferFileBytesResponseDefaultTypeInternal _TransferFileBytesResponse_default_instance_;
class ValidateAddressRequest;
class ValidateAddressRequestDefaultTypeInternal;
extern ValidateAddressRequestDefaultTypeInternal _ValidateAddressRequest_default_instance_;
class ValidateAddressResponse;
class ValidateAddressResponseDefaultTypeInternal;
extern ValidateAddressResponseDefaultTypeInternal _ValidateAddressResponse_default_instance_;
class VerifyMessageRequest;
class VerifyMessageRequestDefaultTypeInternal;
extern VerifyMessageRequestDefaultTypeInternal _VerifyMessageRequest_default_instance_;
class VerifyMessageResponse;
class VerifyMessageResponseDefaultTypeInternal;
extern VerifyMessageResponseDefaultTypeInternal _VerifyMessageResponse_default_instance_;
class VersionRequest;
class VersionRequestDefaultTypeInternal;
extern VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
class VersionResponse;
class VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
}  // namespace Node
}  // namespace Rpc
namespace Transaction {
class BaseEntry;
class BaseEntryDefaultTypeInternal;
extern BaseEntryDefaultTypeInternal _BaseEntry_default_instance_;
class CoinbaseEntry;
class CoinbaseEntryDefaultTypeInternal;
extern CoinbaseEntryDefaultTypeInternal _CoinbaseEntry_default_instance_;
class ConfidentialEntry;
class ConfidentialEntryDefaultTypeInternal;
extern ConfidentialEntryDefaultTypeInternal _ConfidentialEntry_default_instance_;
class PublicEntry;
class PublicEntryDefaultTypeInternal;
extern PublicEntryDefaultTypeInternal _PublicEntry_default_instance_;
class RangeProof;
class RangeProofDefaultTypeInternal;
extern RangeProofDefaultTypeInternal _RangeProof_default_instance_;
}  // namespace Transaction
namespace Wire {
class CandidateDeltaBroadcast;
class CandidateDeltaBroadcastDefaultTypeInternal;
extern CandidateDeltaBroadcastDefaultTypeInternal _CandidateDeltaBroadcast_default_instance_;
class DeltaDfsHashBroadcast;
class DeltaDfsHashBroadcastDefaultTypeInternal;
extern DeltaDfsHashBroadcastDefaultTypeInternal _DeltaDfsHashBroadcast_default_instance_;
class FavouriteDeltaBroadcast;
class FavouriteDeltaBroadcastDefaultTypeInternal;
extern FavouriteDeltaBroadcastDefaultTypeInternal _FavouriteDeltaBroadcast_default_instance_;
class ProtocolErrorMessage;
class ProtocolErrorMessageDefaultTypeInternal;
extern ProtocolErrorMessageDefaultTypeInternal _ProtocolErrorMessage_default_instance_;
class ProtocolMessage;
class ProtocolMessageDefaultTypeInternal;
extern ProtocolMessageDefaultTypeInternal _ProtocolMessage_default_instance_;
class TransactionBroadcast;
class TransactionBroadcastDefaultTypeInternal;
extern TransactionBroadcastDefaultTypeInternal _TransactionBroadcast_default_instance_;
}  // namespace Wire
}  // namespace Protocol
}  // namespace Catalyst

namespace Catalyst {
namespace Protocol {
namespace Rpc {
namespace Node {

namespace protobuf_Rpc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Rpc_2eproto

enum ResponseCode {
  PENDING = 0,
  SUCCESSFUL = 1,
  ERROR = 2,
  FINISHED = 3,
  EXPIRED = 4,
  FAILED = 5,
  ResponseCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResponseCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResponseCode_IsValid(int value);
const ResponseCode ResponseCode_MIN = PENDING;
const ResponseCode ResponseCode_MAX = FAILED;
const int ResponseCode_ARRAYSIZE = ResponseCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseCode_descriptor();
inline const ::std::string& ResponseCode_Name(ResponseCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseCode_descriptor(), value);
}
inline bool ResponseCode_Parse(
    const ::std::string& name, ResponseCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseCode>(
    ResponseCode_descriptor(), name, value);
}
// ===================================================================

class VersionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VersionRequest) */ {
 public:
  VersionRequest();
  virtual ~VersionRequest();

  VersionRequest(const VersionRequest& from);

  inline VersionRequest& operator=(const VersionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionRequest& default_instance();

  static inline const VersionRequest* internal_default_instance() {
    return reinterpret_cast<const VersionRequest*>(
               &_VersionRequest_default_instance_);
  }

  void Swap(VersionRequest* other);

  // implements Message ----------------------------------------------

  inline VersionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  VersionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VersionRequest& from);
  void MergeFrom(const VersionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VersionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VersionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VersionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VersionResponse) */ {
 public:
  VersionResponse();
  virtual ~VersionResponse();

  VersionResponse(const VersionResponse& from);

  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionResponse& default_instance();

  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
               &_VersionResponse_default_instance_);
  }

  void Swap(VersionResponse* other);

  // implements Message ----------------------------------------------

  inline VersionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VersionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VersionResponse& from);
  void MergeFrom(const VersionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VersionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VersionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetInfoRequest) */ {
 public:
  GetInfoRequest();
  virtual ~GetInfoRequest();

  GetInfoRequest(const GetInfoRequest& from);

  inline GetInfoRequest& operator=(const GetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoRequest& default_instance();

  static inline const GetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequest*>(
               &_GetInfoRequest_default_instance_);
  }

  void Swap(GetInfoRequest* other);

  // implements Message ----------------------------------------------

  inline GetInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetInfoRequest& from);
  void MergeFrom(const GetInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetInfoResponse) */ {
 public:
  GetInfoResponse();
  virtual ~GetInfoResponse();

  GetInfoResponse(const GetInfoResponse& from);

  inline GetInfoResponse& operator=(const GetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoResponse& default_instance();

  static inline const GetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetInfoResponse*>(
               &_GetInfoResponse_default_instance_);
  }

  void Swap(GetInfoResponse* other);

  // implements Message ----------------------------------------------

  inline GetInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetInfoResponse& from);
  void MergeFrom(const GetInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateWalletRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateWalletRequest) */ {
 public:
  CreateWalletRequest();
  virtual ~CreateWalletRequest();

  CreateWalletRequest(const CreateWalletRequest& from);

  inline CreateWalletRequest& operator=(const CreateWalletRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateWalletRequest& default_instance();

  static inline const CreateWalletRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWalletRequest*>(
               &_CreateWalletRequest_default_instance_);
  }

  void Swap(CreateWalletRequest* other);

  // implements Message ----------------------------------------------

  inline CreateWalletRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateWalletRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateWalletRequest& from);
  void MergeFrom(const CreateWalletRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateWalletRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateWalletResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateWalletResponse) */ {
 public:
  CreateWalletResponse();
  virtual ~CreateWalletResponse();

  CreateWalletResponse(const CreateWalletResponse& from);

  inline CreateWalletResponse& operator=(const CreateWalletResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateWalletResponse& default_instance();

  static inline const CreateWalletResponse* internal_default_instance() {
    return reinterpret_cast<const CreateWalletResponse*>(
               &_CreateWalletResponse_default_instance_);
  }

  void Swap(CreateWalletResponse* other);

  // implements Message ----------------------------------------------

  inline CreateWalletResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateWalletResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateWalletResponse& from);
  void MergeFrom(const CreateWalletResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateWalletResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListWalletRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListWalletRequest) */ {
 public:
  ListWalletRequest();
  virtual ~ListWalletRequest();

  ListWalletRequest(const ListWalletRequest& from);

  inline ListWalletRequest& operator=(const ListWalletRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListWalletRequest& default_instance();

  static inline const ListWalletRequest* internal_default_instance() {
    return reinterpret_cast<const ListWalletRequest*>(
               &_ListWalletRequest_default_instance_);
  }

  void Swap(ListWalletRequest* other);

  // implements Message ----------------------------------------------

  inline ListWalletRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListWalletRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListWalletRequest& from);
  void MergeFrom(const ListWalletRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListWalletRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListWalletResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListWalletResponse) */ {
 public:
  ListWalletResponse();
  virtual ~ListWalletResponse();

  ListWalletResponse(const ListWalletResponse& from);

  inline ListWalletResponse& operator=(const ListWalletResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListWalletResponse& default_instance();

  static inline const ListWalletResponse* internal_default_instance() {
    return reinterpret_cast<const ListWalletResponse*>(
               &_ListWalletResponse_default_instance_);
  }

  void Swap(ListWalletResponse* other);

  // implements Message ----------------------------------------------

  inline ListWalletResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListWalletResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListWalletResponse& from);
  void MergeFrom(const ListWalletResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListWalletResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateAddressRequest) */ {
 public:
  CreateAddressRequest();
  virtual ~CreateAddressRequest();

  CreateAddressRequest(const CreateAddressRequest& from);

  inline CreateAddressRequest& operator=(const CreateAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAddressRequest& default_instance();

  static inline const CreateAddressRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAddressRequest*>(
               &_CreateAddressRequest_default_instance_);
  }

  void Swap(CreateAddressRequest* other);

  // implements Message ----------------------------------------------

  inline CreateAddressRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateAddressRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateAddressRequest& from);
  void MergeFrom(const CreateAddressRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateAddressResponse) */ {
 public:
  CreateAddressResponse();
  virtual ~CreateAddressResponse();

  CreateAddressResponse(const CreateAddressResponse& from);

  inline CreateAddressResponse& operator=(const CreateAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAddressResponse& default_instance();

  static inline const CreateAddressResponse* internal_default_instance() {
    return reinterpret_cast<const CreateAddressResponse*>(
               &_CreateAddressResponse_default_instance_);
  }

  void Swap(CreateAddressResponse* other);

  // implements Message ----------------------------------------------

  inline CreateAddressResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateAddressResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateAddressResponse& from);
  void MergeFrom(const CreateAddressResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetAddressRequest) */ {
 public:
  GetAddressRequest();
  virtual ~GetAddressRequest();

  GetAddressRequest(const GetAddressRequest& from);

  inline GetAddressRequest& operator=(const GetAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAddressRequest& default_instance();

  static inline const GetAddressRequest* internal_default_instance() {
    return reinterpret_cast<const GetAddressRequest*>(
               &_GetAddressRequest_default_instance_);
  }

  void Swap(GetAddressRequest* other);

  // implements Message ----------------------------------------------

  inline GetAddressRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetAddressRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetAddressRequest& from);
  void MergeFrom(const GetAddressRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetAddressResponse) */ {
 public:
  GetAddressResponse();
  virtual ~GetAddressResponse();

  GetAddressResponse(const GetAddressResponse& from);

  inline GetAddressResponse& operator=(const GetAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAddressResponse& default_instance();

  static inline const GetAddressResponse* internal_default_instance() {
    return reinterpret_cast<const GetAddressResponse*>(
               &_GetAddressResponse_default_instance_);
  }

  void Swap(GetAddressResponse* other);

  // implements Message ----------------------------------------------

  inline GetAddressResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetAddressResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetAddressResponse& from);
  void MergeFrom(const GetAddressResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListAddressRequest) */ {
 public:
  ListAddressRequest();
  virtual ~ListAddressRequest();

  ListAddressRequest(const ListAddressRequest& from);

  inline ListAddressRequest& operator=(const ListAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListAddressRequest& default_instance();

  static inline const ListAddressRequest* internal_default_instance() {
    return reinterpret_cast<const ListAddressRequest*>(
               &_ListAddressRequest_default_instance_);
  }

  void Swap(ListAddressRequest* other);

  // implements Message ----------------------------------------------

  inline ListAddressRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListAddressRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListAddressRequest& from);
  void MergeFrom(const ListAddressRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListAddressResponse) */ {
 public:
  ListAddressResponse();
  virtual ~ListAddressResponse();

  ListAddressResponse(const ListAddressResponse& from);

  inline ListAddressResponse& operator=(const ListAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListAddressResponse& default_instance();

  static inline const ListAddressResponse* internal_default_instance() {
    return reinterpret_cast<const ListAddressResponse*>(
               &_ListAddressResponse_default_instance_);
  }

  void Swap(ListAddressResponse* other);

  // implements Message ----------------------------------------------

  inline ListAddressResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListAddressResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListAddressResponse& from);
  void MergeFrom(const ListAddressResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValidateAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest) */ {
 public:
  ValidateAddressRequest();
  virtual ~ValidateAddressRequest();

  ValidateAddressRequest(const ValidateAddressRequest& from);

  inline ValidateAddressRequest& operator=(const ValidateAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateAddressRequest& default_instance();

  static inline const ValidateAddressRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateAddressRequest*>(
               &_ValidateAddressRequest_default_instance_);
  }

  void Swap(ValidateAddressRequest* other);

  // implements Message ----------------------------------------------

  inline ValidateAddressRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ValidateAddressRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValidateAddressRequest& from);
  void MergeFrom(const ValidateAddressRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValidateAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValidateAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse) */ {
 public:
  ValidateAddressResponse();
  virtual ~ValidateAddressResponse();

  ValidateAddressResponse(const ValidateAddressResponse& from);

  inline ValidateAddressResponse& operator=(const ValidateAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateAddressResponse& default_instance();

  static inline const ValidateAddressResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateAddressResponse*>(
               &_ValidateAddressResponse_default_instance_);
  }

  void Swap(ValidateAddressResponse* other);

  // implements Message ----------------------------------------------

  inline ValidateAddressResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ValidateAddressResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValidateAddressResponse& from);
  void MergeFrom(const ValidateAddressResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValidateAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBalanceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetBalanceRequest) */ {
 public:
  GetBalanceRequest();
  virtual ~GetBalanceRequest();

  GetBalanceRequest(const GetBalanceRequest& from);

  inline GetBalanceRequest& operator=(const GetBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBalanceRequest& default_instance();

  static inline const GetBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const GetBalanceRequest*>(
               &_GetBalanceRequest_default_instance_);
  }

  void Swap(GetBalanceRequest* other);

  // implements Message ----------------------------------------------

  inline GetBalanceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBalanceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBalanceRequest& from);
  void MergeFrom(const GetBalanceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBalanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBalanceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetBalanceResponse) */ {
 public:
  GetBalanceResponse();
  virtual ~GetBalanceResponse();

  GetBalanceResponse(const GetBalanceResponse& from);

  inline GetBalanceResponse& operator=(const GetBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBalanceResponse& default_instance();

  static inline const GetBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const GetBalanceResponse*>(
               &_GetBalanceResponse_default_instance_);
  }

  void Swap(GetBalanceResponse* other);

  // implements Message ----------------------------------------------

  inline GetBalanceResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBalanceResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBalanceResponse& from);
  void MergeFrom(const GetBalanceResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBalanceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest) */ {
 public:
  CreateRawTransactionRequest();
  virtual ~CreateRawTransactionRequest();

  CreateRawTransactionRequest(const CreateRawTransactionRequest& from);

  inline CreateRawTransactionRequest& operator=(const CreateRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRawTransactionRequest& default_instance();

  static inline const CreateRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRawTransactionRequest*>(
               &_CreateRawTransactionRequest_default_instance_);
  }

  void Swap(CreateRawTransactionRequest* other);

  // implements Message ----------------------------------------------

  inline CreateRawTransactionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateRawTransactionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateRawTransactionRequest& from);
  void MergeFrom(const CreateRawTransactionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse) */ {
 public:
  CreateRawTransactionResponse();
  virtual ~CreateRawTransactionResponse();

  CreateRawTransactionResponse(const CreateRawTransactionResponse& from);

  inline CreateRawTransactionResponse& operator=(const CreateRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRawTransactionResponse& default_instance();

  static inline const CreateRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRawTransactionResponse*>(
               &_CreateRawTransactionResponse_default_instance_);
  }

  void Swap(CreateRawTransactionResponse* other);

  // implements Message ----------------------------------------------

  inline CreateRawTransactionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateRawTransactionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateRawTransactionResponse& from);
  void MergeFrom(const CreateRawTransactionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest) */ {
 public:
  SignRawTransactionRequest();
  virtual ~SignRawTransactionRequest();

  SignRawTransactionRequest(const SignRawTransactionRequest& from);

  inline SignRawTransactionRequest& operator=(const SignRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignRawTransactionRequest& default_instance();

  static inline const SignRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SignRawTransactionRequest*>(
               &_SignRawTransactionRequest_default_instance_);
  }

  void Swap(SignRawTransactionRequest* other);

  // implements Message ----------------------------------------------

  inline SignRawTransactionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SignRawTransactionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignRawTransactionRequest& from);
  void MergeFrom(const SignRawTransactionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse) */ {
 public:
  SignRawTransactionResponse();
  virtual ~SignRawTransactionResponse();

  SignRawTransactionResponse(const SignRawTransactionResponse& from);

  inline SignRawTransactionResponse& operator=(const SignRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignRawTransactionResponse& default_instance();

  static inline const SignRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const SignRawTransactionResponse*>(
               &_SignRawTransactionResponse_default_instance_);
  }

  void Swap(SignRawTransactionResponse* other);

  // implements Message ----------------------------------------------

  inline SignRawTransactionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SignRawTransactionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignRawTransactionResponse& from);
  void MergeFrom(const SignRawTransactionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecodeRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest) */ {
 public:
  DecodeRawTransactionRequest();
  virtual ~DecodeRawTransactionRequest();

  DecodeRawTransactionRequest(const DecodeRawTransactionRequest& from);

  inline DecodeRawTransactionRequest& operator=(const DecodeRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecodeRawTransactionRequest& default_instance();

  static inline const DecodeRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const DecodeRawTransactionRequest*>(
               &_DecodeRawTransactionRequest_default_instance_);
  }

  void Swap(DecodeRawTransactionRequest* other);

  // implements Message ----------------------------------------------

  inline DecodeRawTransactionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DecodeRawTransactionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecodeRawTransactionRequest& from);
  void MergeFrom(const DecodeRawTransactionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecodeRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecodeRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse) */ {
 public:
  DecodeRawTransactionResponse();
  virtual ~DecodeRawTransactionResponse();

  DecodeRawTransactionResponse(const DecodeRawTransactionResponse& from);

  inline DecodeRawTransactionResponse& operator=(const DecodeRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecodeRawTransactionResponse& default_instance();

  static inline const DecodeRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const DecodeRawTransactionResponse*>(
               &_DecodeRawTransactionResponse_default_instance_);
  }

  void Swap(DecodeRawTransactionResponse* other);

  // implements Message ----------------------------------------------

  inline DecodeRawTransactionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DecodeRawTransactionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecodeRawTransactionResponse& from);
  void MergeFrom(const DecodeRawTransactionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecodeRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest) */ {
 public:
  BroadcastRawTransactionRequest();
  virtual ~BroadcastRawTransactionRequest();

  BroadcastRawTransactionRequest(const BroadcastRawTransactionRequest& from);

  inline BroadcastRawTransactionRequest& operator=(const BroadcastRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastRawTransactionRequest& default_instance();

  static inline const BroadcastRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastRawTransactionRequest*>(
               &_BroadcastRawTransactionRequest_default_instance_);
  }

  void Swap(BroadcastRawTransactionRequest* other);

  // implements Message ----------------------------------------------

  inline BroadcastRawTransactionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BroadcastRawTransactionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BroadcastRawTransactionRequest& from);
  void MergeFrom(const BroadcastRawTransactionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BroadcastRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
  bool has_transaction() const;
  void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  const ::Catalyst::Protocol::Wire::TransactionBroadcast& transaction() const;
  ::Catalyst::Protocol::Wire::TransactionBroadcast* mutable_transaction();
  ::Catalyst::Protocol::Wire::TransactionBroadcast* release_transaction();
  void set_allocated_transaction(::Catalyst::Protocol::Wire::TransactionBroadcast* transaction);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Wire::TransactionBroadcast* transaction_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse) */ {
 public:
  BroadcastRawTransactionResponse();
  virtual ~BroadcastRawTransactionResponse();

  BroadcastRawTransactionResponse(const BroadcastRawTransactionResponse& from);

  inline BroadcastRawTransactionResponse& operator=(const BroadcastRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastRawTransactionResponse& default_instance();

  static inline const BroadcastRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const BroadcastRawTransactionResponse*>(
               &_BroadcastRawTransactionResponse_default_instance_);
  }

  void Swap(BroadcastRawTransactionResponse* other);

  // implements Message ----------------------------------------------

  inline BroadcastRawTransactionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BroadcastRawTransactionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BroadcastRawTransactionResponse& from);
  void MergeFrom(const BroadcastRawTransactionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BroadcastRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
  void clear_response_code();
  static const int kResponseCodeFieldNumber = 1;
  ::Catalyst::Protocol::Rpc::Node::ResponseCode response_code() const;
  void set_response_code(::Catalyst::Protocol::Rpc::Node::ResponseCode value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int response_code_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToRequest) */ {
 public:
  SendToRequest();
  virtual ~SendToRequest();

  SendToRequest(const SendToRequest& from);

  inline SendToRequest& operator=(const SendToRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToRequest& default_instance();

  static inline const SendToRequest* internal_default_instance() {
    return reinterpret_cast<const SendToRequest*>(
               &_SendToRequest_default_instance_);
  }

  void Swap(SendToRequest* other);

  // implements Message ----------------------------------------------

  inline SendToRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendToRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendToRequest& from);
  void MergeFrom(const SendToRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendToRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToResponse) */ {
 public:
  SendToResponse();
  virtual ~SendToResponse();

  SendToResponse(const SendToResponse& from);

  inline SendToResponse& operator=(const SendToResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToResponse& default_instance();

  static inline const SendToResponse* internal_default_instance() {
    return reinterpret_cast<const SendToResponse*>(
               &_SendToResponse_default_instance_);
  }

  void Swap(SendToResponse* other);

  // implements Message ----------------------------------------------

  inline SendToResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendToResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendToResponse& from);
  void MergeFrom(const SendToResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendToResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToFromRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToFromRequest) */ {
 public:
  SendToFromRequest();
  virtual ~SendToFromRequest();

  SendToFromRequest(const SendToFromRequest& from);

  inline SendToFromRequest& operator=(const SendToFromRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToFromRequest& default_instance();

  static inline const SendToFromRequest* internal_default_instance() {
    return reinterpret_cast<const SendToFromRequest*>(
               &_SendToFromRequest_default_instance_);
  }

  void Swap(SendToFromRequest* other);

  // implements Message ----------------------------------------------

  inline SendToFromRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendToFromRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendToFromRequest& from);
  void MergeFrom(const SendToFromRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendToFromRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToFromResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToFromResponse) */ {
 public:
  SendToFromResponse();
  virtual ~SendToFromResponse();

  SendToFromResponse(const SendToFromResponse& from);

  inline SendToFromResponse& operator=(const SendToFromResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToFromResponse& default_instance();

  static inline const SendToFromResponse* internal_default_instance() {
    return reinterpret_cast<const SendToFromResponse*>(
               &_SendToFromResponse_default_instance_);
  }

  void Swap(SendToFromResponse* other);

  // implements Message ----------------------------------------------

  inline SendToFromResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendToFromResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendToFromResponse& from);
  void MergeFrom(const SendToFromResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendToFromResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendManyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendManyRequest) */ {
 public:
  SendManyRequest();
  virtual ~SendManyRequest();

  SendManyRequest(const SendManyRequest& from);

  inline SendManyRequest& operator=(const SendManyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendManyRequest& default_instance();

  static inline const SendManyRequest* internal_default_instance() {
    return reinterpret_cast<const SendManyRequest*>(
               &_SendManyRequest_default_instance_);
  }

  void Swap(SendManyRequest* other);

  // implements Message ----------------------------------------------

  inline SendManyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendManyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendManyRequest& from);
  void MergeFrom(const SendManyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendManyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendManyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendManyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendManyResponse) */ {
 public:
  SendManyResponse();
  virtual ~SendManyResponse();

  SendManyResponse(const SendManyResponse& from);

  inline SendManyResponse& operator=(const SendManyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendManyResponse& default_instance();

  static inline const SendManyResponse* internal_default_instance() {
    return reinterpret_cast<const SendManyResponse*>(
               &_SendManyResponse_default_instance_);
  }

  void Swap(SendManyResponse* other);

  // implements Message ----------------------------------------------

  inline SendManyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendManyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendManyResponse& from);
  void MergeFrom(const SendManyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendManyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendManyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendFromManyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendFromManyRequest) */ {
 public:
  SendFromManyRequest();
  virtual ~SendFromManyRequest();

  SendFromManyRequest(const SendFromManyRequest& from);

  inline SendFromManyRequest& operator=(const SendFromManyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFromManyRequest& default_instance();

  static inline const SendFromManyRequest* internal_default_instance() {
    return reinterpret_cast<const SendFromManyRequest*>(
               &_SendFromManyRequest_default_instance_);
  }

  void Swap(SendFromManyRequest* other);

  // implements Message ----------------------------------------------

  inline SendFromManyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendFromManyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendFromManyRequest& from);
  void MergeFrom(const SendFromManyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendFromManyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendFromManyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendFromManyResponse) */ {
 public:
  SendFromManyResponse();
  virtual ~SendFromManyResponse();

  SendFromManyResponse(const SendFromManyResponse& from);

  inline SendFromManyResponse& operator=(const SendFromManyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFromManyResponse& default_instance();

  static inline const SendFromManyResponse* internal_default_instance() {
    return reinterpret_cast<const SendFromManyResponse*>(
               &_SendFromManyResponse_default_instance_);
  }

  void Swap(SendFromManyResponse* other);

  // implements Message ----------------------------------------------

  inline SendFromManyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendFromManyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendFromManyResponse& from);
  void MergeFrom(const SendFromManyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendFromManyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddNodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddNodeRequest) */ {
 public:
  AddNodeRequest();
  virtual ~AddNodeRequest();

  AddNodeRequest(const AddNodeRequest& from);

  inline AddNodeRequest& operator=(const AddNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNodeRequest& default_instance();

  static inline const AddNodeRequest* internal_default_instance() {
    return reinterpret_cast<const AddNodeRequest*>(
               &_AddNodeRequest_default_instance_);
  }

  void Swap(AddNodeRequest* other);

  // implements Message ----------------------------------------------

  inline AddNodeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddNodeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddNodeRequest& from);
  void MergeFrom(const AddNodeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddNodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddNodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddNodeResponse) */ {
 public:
  AddNodeResponse();
  virtual ~AddNodeResponse();

  AddNodeResponse(const AddNodeResponse& from);

  inline AddNodeResponse& operator=(const AddNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNodeResponse& default_instance();

  static inline const AddNodeResponse* internal_default_instance() {
    return reinterpret_cast<const AddNodeResponse*>(
               &_AddNodeResponse_default_instance_);
  }

  void Swap(AddNodeResponse* other);

  // implements Message ----------------------------------------------

  inline AddNodeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddNodeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddNodeResponse& from);
  void MergeFrom(const AddNodeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddNodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerListRequest) */ {
 public:
  GetPeerListRequest();
  virtual ~GetPeerListRequest();

  GetPeerListRequest(const GetPeerListRequest& from);

  inline GetPeerListRequest& operator=(const GetPeerListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerListRequest& default_instance();

  static inline const GetPeerListRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerListRequest*>(
               &_GetPeerListRequest_default_instance_);
  }

  void Swap(GetPeerListRequest* other);

  // implements Message ----------------------------------------------

  inline GetPeerListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPeerListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPeerListRequest& from);
  void MergeFrom(const GetPeerListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPeerListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerListResponse) */ {
 public:
  GetPeerListResponse();
  virtual ~GetPeerListResponse();

  GetPeerListResponse(const GetPeerListResponse& from);

  inline GetPeerListResponse& operator=(const GetPeerListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerListResponse& default_instance();

  static inline const GetPeerListResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerListResponse*>(
               &_GetPeerListResponse_default_instance_);
  }

  void Swap(GetPeerListResponse* other);

  // implements Message ----------------------------------------------

  inline GetPeerListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPeerListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPeerListResponse& from);
  void MergeFrom(const GetPeerListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPeerListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 1;
  const ::Catalyst::Protocol::Peer::PeerId& peers(int index) const;
  ::Catalyst::Protocol::Peer::PeerId* mutable_peers(int index);
  ::Catalyst::Protocol::Peer::PeerId* add_peers();
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >*
      mutable_peers();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >&
      peers() const;

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId > peers_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerReputationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest) */ {
 public:
  GetPeerReputationRequest();
  virtual ~GetPeerReputationRequest();

  GetPeerReputationRequest(const GetPeerReputationRequest& from);

  inline GetPeerReputationRequest& operator=(const GetPeerReputationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerReputationRequest& default_instance();

  static inline const GetPeerReputationRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerReputationRequest*>(
               &_GetPeerReputationRequest_default_instance_);
  }

  void Swap(GetPeerReputationRequest* other);

  // implements Message ----------------------------------------------

  inline GetPeerReputationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPeerReputationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPeerReputationRequest& from);
  void MergeFrom(const GetPeerReputationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPeerReputationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // bytes ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerReputationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse) */ {
 public:
  GetPeerReputationResponse();
  virtual ~GetPeerReputationResponse();

  GetPeerReputationResponse(const GetPeerReputationResponse& from);

  inline GetPeerReputationResponse& operator=(const GetPeerReputationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerReputationResponse& default_instance();

  static inline const GetPeerReputationResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerReputationResponse*>(
               &_GetPeerReputationResponse_default_instance_);
  }

  void Swap(GetPeerReputationResponse* other);

  // implements Message ----------------------------------------------

  inline GetPeerReputationResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPeerReputationResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPeerReputationResponse& from);
  void MergeFrom(const GetPeerReputationResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPeerReputationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 reputation = 1;
  void clear_reputation();
  static const int kReputationFieldNumber = 1;
  ::google::protobuf::int32 reputation() const;
  void set_reputation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 reputation_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPeerBlacklistRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest) */ {
 public:
  SetPeerBlacklistRequest();
  virtual ~SetPeerBlacklistRequest();

  SetPeerBlacklistRequest(const SetPeerBlacklistRequest& from);

  inline SetPeerBlacklistRequest& operator=(const SetPeerBlacklistRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPeerBlacklistRequest& default_instance();

  static inline const SetPeerBlacklistRequest* internal_default_instance() {
    return reinterpret_cast<const SetPeerBlacklistRequest*>(
               &_SetPeerBlacklistRequest_default_instance_);
  }

  void Swap(SetPeerBlacklistRequest* other);

  // implements Message ----------------------------------------------

  inline SetPeerBlacklistRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetPeerBlacklistRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetPeerBlacklistRequest& from);
  void MergeFrom(const SetPeerBlacklistRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetPeerBlacklistRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // bytes ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // bool blacklist = 3;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 3;
  bool blacklist() const;
  void set_blacklist(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  bool blacklist_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPeerBlacklistResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse) */ {
 public:
  SetPeerBlacklistResponse();
  virtual ~SetPeerBlacklistResponse();

  SetPeerBlacklistResponse(const SetPeerBlacklistResponse& from);

  inline SetPeerBlacklistResponse& operator=(const SetPeerBlacklistResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPeerBlacklistResponse& default_instance();

  static inline const SetPeerBlacklistResponse* internal_default_instance() {
    return reinterpret_cast<const SetPeerBlacklistResponse*>(
               &_SetPeerBlacklistResponse_default_instance_);
  }

  void Swap(SetPeerBlacklistResponse* other);

  // implements Message ----------------------------------------------

  inline SetPeerBlacklistResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetPeerBlacklistResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetPeerBlacklistResponse& from);
  void MergeFrom(const SetPeerBlacklistResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetPeerBlacklistResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // bytes ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // bool blacklist = 3;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 3;
  bool blacklist() const;
  void set_blacklist(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  bool blacklist_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest) */ {
 public:
  GetPeerInfoRequest();
  virtual ~GetPeerInfoRequest();

  GetPeerInfoRequest(const GetPeerInfoRequest& from);

  inline GetPeerInfoRequest& operator=(const GetPeerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerInfoRequest& default_instance();

  static inline const GetPeerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerInfoRequest*>(
               &_GetPeerInfoRequest_default_instance_);
  }

  void Swap(GetPeerInfoRequest* other);

  // implements Message ----------------------------------------------

  inline GetPeerInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPeerInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPeerInfoRequest& from);
  void MergeFrom(const GetPeerInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPeerInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // bytes ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse) */ {
 public:
  GetPeerInfoResponse();
  virtual ~GetPeerInfoResponse();

  GetPeerInfoResponse(const GetPeerInfoResponse& from);

  inline GetPeerInfoResponse& operator=(const GetPeerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerInfoResponse& default_instance();

  static inline const GetPeerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerInfoResponse*>(
               &_GetPeerInfoResponse_default_instance_);
  }

  void Swap(GetPeerInfoResponse* other);

  // implements Message ----------------------------------------------

  inline GetPeerInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPeerInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPeerInfoResponse& from);
  void MergeFrom(const GetPeerInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPeerInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
  int peer_info_size() const;
  void clear_peer_info();
  static const int kPeerInfoFieldNumber = 1;
  const ::Catalyst::Protocol::Peer::PeerInfo& peer_info(int index) const;
  ::Catalyst::Protocol::Peer::PeerInfo* mutable_peer_info(int index);
  ::Catalyst::Protocol::Peer::PeerInfo* add_peer_info();
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo >*
      mutable_peer_info();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo >&
      peer_info() const;

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo > peer_info_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConnectionCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest) */ {
 public:
  GetConnectionCountRequest();
  virtual ~GetConnectionCountRequest();

  GetConnectionCountRequest(const GetConnectionCountRequest& from);

  inline GetConnectionCountRequest& operator=(const GetConnectionCountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConnectionCountRequest& default_instance();

  static inline const GetConnectionCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetConnectionCountRequest*>(
               &_GetConnectionCountRequest_default_instance_);
  }

  void Swap(GetConnectionCountRequest* other);

  // implements Message ----------------------------------------------

  inline GetConnectionCountRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetConnectionCountRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetConnectionCountRequest& from);
  void MergeFrom(const GetConnectionCountRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetConnectionCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConnectionCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse) */ {
 public:
  GetConnectionCountResponse();
  virtual ~GetConnectionCountResponse();

  GetConnectionCountResponse(const GetConnectionCountResponse& from);

  inline GetConnectionCountResponse& operator=(const GetConnectionCountResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConnectionCountResponse& default_instance();

  static inline const GetConnectionCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetConnectionCountResponse*>(
               &_GetConnectionCountResponse_default_instance_);
  }

  void Swap(GetConnectionCountResponse* other);

  // implements Message ----------------------------------------------

  inline GetConnectionCountResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetConnectionCountResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetConnectionCountResponse& from);
  void MergeFrom(const GetConnectionCountResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetConnectionCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDeltaRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetDeltaRequest) */ {
 public:
  GetDeltaRequest();
  virtual ~GetDeltaRequest();

  GetDeltaRequest(const GetDeltaRequest& from);

  inline GetDeltaRequest& operator=(const GetDeltaRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDeltaRequest& default_instance();

  static inline const GetDeltaRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeltaRequest*>(
               &_GetDeltaRequest_default_instance_);
  }

  void Swap(GetDeltaRequest* other);

  // implements Message ----------------------------------------------

  inline GetDeltaRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDeltaRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDeltaRequest& from);
  void MergeFrom(const GetDeltaRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDeltaRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes delta_dfs_hash = 1;
  void clear_delta_dfs_hash();
  static const int kDeltaDfsHashFieldNumber = 1;
  const ::std::string& delta_dfs_hash() const;
  void set_delta_dfs_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_delta_dfs_hash(::std::string&& value);
  #endif
  void set_delta_dfs_hash(const char* value);
  void set_delta_dfs_hash(const void* value, size_t size);
  ::std::string* mutable_delta_dfs_hash();
  ::std::string* release_delta_dfs_hash();
  void set_allocated_delta_dfs_hash(::std::string* delta_dfs_hash);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr delta_dfs_hash_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDeltaResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetDeltaResponse) */ {
 public:
  GetDeltaResponse();
  virtual ~GetDeltaResponse();

  GetDeltaResponse(const GetDeltaResponse& from);

  inline GetDeltaResponse& operator=(const GetDeltaResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDeltaResponse& default_instance();

  static inline const GetDeltaResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeltaResponse*>(
               &_GetDeltaResponse_default_instance_);
  }

  void Swap(GetDeltaResponse* other);

  // implements Message ----------------------------------------------

  inline GetDeltaResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDeltaResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDeltaResponse& from);
  void MergeFrom(const GetDeltaResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDeltaResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Deltas.Delta delta = 1;
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 1;
  const ::Catalyst::Protocol::Deltas::Delta& delta() const;
  ::Catalyst::Protocol::Deltas::Delta* mutable_delta();
  ::Catalyst::Protocol::Deltas::Delta* release_delta();
  void set_allocated_delta(::Catalyst::Protocol::Deltas::Delta* delta);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Deltas::Delta* delta_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMempoolRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetMempoolRequest) */ {
 public:
  GetMempoolRequest();
  virtual ~GetMempoolRequest();

  GetMempoolRequest(const GetMempoolRequest& from);

  inline GetMempoolRequest& operator=(const GetMempoolRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMempoolRequest& default_instance();

  static inline const GetMempoolRequest* internal_default_instance() {
    return reinterpret_cast<const GetMempoolRequest*>(
               &_GetMempoolRequest_default_instance_);
  }

  void Swap(GetMempoolRequest* other);

  // implements Message ----------------------------------------------

  inline GetMempoolRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMempoolRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMempoolRequest& from);
  void MergeFrom(const GetMempoolRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMempoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMempoolResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetMempoolResponse) */ {
 public:
  GetMempoolResponse();
  virtual ~GetMempoolResponse();

  GetMempoolResponse(const GetMempoolResponse& from);

  inline GetMempoolResponse& operator=(const GetMempoolResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMempoolResponse& default_instance();

  static inline const GetMempoolResponse* internal_default_instance() {
    return reinterpret_cast<const GetMempoolResponse*>(
               &_GetMempoolResponse_default_instance_);
  }

  void Swap(GetMempoolResponse* other);

  // implements Message ----------------------------------------------

  inline GetMempoolResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMempoolResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMempoolResponse& from);
  void MergeFrom(const GetMempoolResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMempoolResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 1;
  const ::Catalyst::Protocol::Transaction::PublicEntry& transactions(int index) const;
  ::Catalyst::Protocol::Transaction::PublicEntry* mutable_transactions(int index);
  ::Catalyst::Protocol::Transaction::PublicEntry* add_transactions();
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >*
      mutable_transactions();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry > transactions_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignMessageRequest) */ {
 public:
  SignMessageRequest();
  virtual ~SignMessageRequest();

  SignMessageRequest(const SignMessageRequest& from);

  inline SignMessageRequest& operator=(const SignMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignMessageRequest& default_instance();

  static inline const SignMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SignMessageRequest*>(
               &_SignMessageRequest_default_instance_);
  }

  void Swap(SignMessageRequest* other);

  // implements Message ----------------------------------------------

  inline SignMessageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SignMessageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignMessageRequest& from);
  void MergeFrom(const SignMessageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string key_id = 2;
  void clear_key_id();
  static const int kKeyIdFieldNumber = 2;
  const ::std::string& key_id() const;
  void set_key_id(const ::std::string& value);
  #if LANG_CXX11
  void set_key_id(::std::string&& value);
  #endif
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  ::std::string* mutable_key_id();
  ::std::string* release_key_id();
  void set_allocated_key_id(::std::string* key_id);

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
  bool has_signing_context() const;
  void clear_signing_context();
  static const int kSigningContextFieldNumber = 3;
  const ::Catalyst::Protocol::Cryptography::SigningContext& signing_context() const;
  ::Catalyst::Protocol::Cryptography::SigningContext* mutable_signing_context();
  ::Catalyst::Protocol::Cryptography::SigningContext* release_signing_context();
  void set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr key_id_;
  ::Catalyst::Protocol::Cryptography::SigningContext* signing_context_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignMessageResponse) */ {
 public:
  SignMessageResponse();
  virtual ~SignMessageResponse();

  SignMessageResponse(const SignMessageResponse& from);

  inline SignMessageResponse& operator=(const SignMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignMessageResponse& default_instance();

  static inline const SignMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SignMessageResponse*>(
               &_SignMessageResponse_default_instance_);
  }

  void Swap(SignMessageResponse* other);

  // implements Message ----------------------------------------------

  inline SignMessageResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SignMessageResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignMessageResponse& from);
  void MergeFrom(const SignMessageResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // bytes public_key = 2;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // bytes original_message = 3;
  void clear_original_message();
  static const int kOriginalMessageFieldNumber = 3;
  const ::std::string& original_message() const;
  void set_original_message(const ::std::string& value);
  #if LANG_CXX11
  void set_original_message(::std::string&& value);
  #endif
  void set_original_message(const char* value);
  void set_original_message(const void* value, size_t size);
  ::std::string* mutable_original_message();
  ::std::string* release_original_message();
  void set_allocated_original_message(::std::string* original_message);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr original_message_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest) */ {
 public:
  VerifyMessageRequest();
  virtual ~VerifyMessageRequest();

  VerifyMessageRequest(const VerifyMessageRequest& from);

  inline VerifyMessageRequest& operator=(const VerifyMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyMessageRequest& default_instance();

  static inline const VerifyMessageRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyMessageRequest*>(
               &_VerifyMessageRequest_default_instance_);
  }

  void Swap(VerifyMessageRequest* other);

  // implements Message ----------------------------------------------

  inline VerifyMessageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyMessageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyMessageRequest& from);
  void MergeFrom(const VerifyMessageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // bytes public_key = 2;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // bytes message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
  bool has_signing_context() const;
  void clear_signing_context();
  static const int kSigningContextFieldNumber = 4;
  const ::Catalyst::Protocol::Cryptography::SigningContext& signing_context() const;
  ::Catalyst::Protocol::Cryptography::SigningContext* mutable_signing_context();
  ::Catalyst::Protocol::Cryptography::SigningContext* release_signing_context();
  void set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::Catalyst::Protocol::Cryptography::SigningContext* signing_context_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse) */ {
 public:
  VerifyMessageResponse();
  virtual ~VerifyMessageResponse();

  VerifyMessageResponse(const VerifyMessageResponse& from);

  inline VerifyMessageResponse& operator=(const VerifyMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyMessageResponse& default_instance();

  static inline const VerifyMessageResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyMessageResponse*>(
               &_VerifyMessageResponse_default_instance_);
  }

  void Swap(VerifyMessageResponse* other);

  // implements Message ----------------------------------------------

  inline VerifyMessageResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyMessageResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyMessageResponse& from);
  void MergeFrom(const VerifyMessageResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_signed_by_key = 1;
  void clear_is_signed_by_key();
  static const int kIsSignedByKeyFieldNumber = 1;
  bool is_signed_by_key() const;
  void set_is_signed_by_key(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_signed_by_key_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest) */ {
 public:
  ServiceStatusRequest();
  virtual ~ServiceStatusRequest();

  ServiceStatusRequest(const ServiceStatusRequest& from);

  inline ServiceStatusRequest& operator=(const ServiceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceStatusRequest& default_instance();

  static inline const ServiceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusRequest*>(
               &_ServiceStatusRequest_default_instance_);
  }

  void Swap(ServiceStatusRequest* other);

  // implements Message ----------------------------------------------

  inline ServiceStatusRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceStatusRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceStatusRequest& from);
  void MergeFrom(const ServiceStatusRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse) */ {
 public:
  ServiceStatusResponse();
  virtual ~ServiceStatusResponse();

  ServiceStatusResponse(const ServiceStatusResponse& from);

  inline ServiceStatusResponse& operator=(const ServiceStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceStatusResponse& default_instance();

  static inline const ServiceStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusResponse*>(
               &_ServiceStatusResponse_default_instance_);
  }

  void Swap(ServiceStatusResponse* other);

  // implements Message ----------------------------------------------

  inline ServiceStatusResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceStatusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceStatusResponse& from);
  void MergeFrom(const ServiceStatusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddFileToDfsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest) */ {
 public:
  AddFileToDfsRequest();
  virtual ~AddFileToDfsRequest();

  AddFileToDfsRequest(const AddFileToDfsRequest& from);

  inline AddFileToDfsRequest& operator=(const AddFileToDfsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFileToDfsRequest& default_instance();

  static inline const AddFileToDfsRequest* internal_default_instance() {
    return reinterpret_cast<const AddFileToDfsRequest*>(
               &_AddFileToDfsRequest_default_instance_);
  }

  void Swap(AddFileToDfsRequest* other);

  // implements Message ----------------------------------------------

  inline AddFileToDfsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddFileToDfsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddFileToDfsRequest& from);
  void MergeFrom(const AddFileToDfsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddFileToDfsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 2;
  void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string node = 3;
  void clear_node();
  static const int kNodeFieldNumber = 3;
  const ::std::string& node() const;
  void set_node(const ::std::string& value);
  #if LANG_CXX11
  void set_node(::std::string&& value);
  #endif
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  ::std::string* mutable_node();
  ::std::string* release_node();
  void set_allocated_node(::std::string* node);

  // uint64 file_size = 1;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 1;
  ::google::protobuf::uint64 file_size() const;
  void set_file_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr node_;
  ::google::protobuf::uint64 file_size_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddFileToDfsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse) */ {
 public:
  AddFileToDfsResponse();
  virtual ~AddFileToDfsResponse();

  AddFileToDfsResponse(const AddFileToDfsResponse& from);

  inline AddFileToDfsResponse& operator=(const AddFileToDfsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFileToDfsResponse& default_instance();

  static inline const AddFileToDfsResponse* internal_default_instance() {
    return reinterpret_cast<const AddFileToDfsResponse*>(
               &_AddFileToDfsResponse_default_instance_);
  }

  void Swap(AddFileToDfsResponse* other);

  // implements Message ----------------------------------------------

  inline AddFileToDfsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddFileToDfsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddFileToDfsResponse& from);
  void MergeFrom(const AddFileToDfsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddFileToDfsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes response_code = 1;
  void clear_response_code();
  static const int kResponseCodeFieldNumber = 1;
  const ::std::string& response_code() const;
  void set_response_code(const ::std::string& value);
  #if LANG_CXX11
  void set_response_code(::std::string&& value);
  #endif
  void set_response_code(const char* value);
  void set_response_code(const void* value, size_t size);
  ::std::string* mutable_response_code();
  ::std::string* release_response_code();
  void set_allocated_response_code(::std::string* response_code);

  // string dfs_hash = 2;
  void clear_dfs_hash();
  static const int kDfsHashFieldNumber = 2;
  const ::std::string& dfs_hash() const;
  void set_dfs_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_dfs_hash(::std::string&& value);
  #endif
  void set_dfs_hash(const char* value);
  void set_dfs_hash(const char* value, size_t size);
  ::std::string* mutable_dfs_hash();
  ::std::string* release_dfs_hash();
  void set_allocated_dfs_hash(::std::string* dfs_hash);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr response_code_;
  ::google::protobuf::internal::ArenaStringPtr dfs_hash_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferFileBytesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest) */ {
 public:
  TransferFileBytesRequest();
  virtual ~TransferFileBytesRequest();

  TransferFileBytesRequest(const TransferFileBytesRequest& from);

  inline TransferFileBytesRequest& operator=(const TransferFileBytesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferFileBytesRequest& default_instance();

  static inline const TransferFileBytesRequest* internal_default_instance() {
    return reinterpret_cast<const TransferFileBytesRequest*>(
               &_TransferFileBytesRequest_default_instance_);
  }

  void Swap(TransferFileBytesRequest* other);

  // implements Message ----------------------------------------------

  inline TransferFileBytesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TransferFileBytesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransferFileBytesRequest& from);
  void MergeFrom(const TransferFileBytesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransferFileBytesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes chunk_bytes = 2;
  void clear_chunk_bytes();
  static const int kChunkBytesFieldNumber = 2;
  const ::std::string& chunk_bytes() const;
  void set_chunk_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_chunk_bytes(::std::string&& value);
  #endif
  void set_chunk_bytes(const char* value);
  void set_chunk_bytes(const void* value, size_t size);
  ::std::string* mutable_chunk_bytes();
  ::std::string* release_chunk_bytes();
  void set_allocated_chunk_bytes(::std::string* chunk_bytes);

  // bytes correlation_file_name = 3;
  void clear_correlation_file_name();
  static const int kCorrelationFileNameFieldNumber = 3;
  const ::std::string& correlation_file_name() const;
  void set_correlation_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_correlation_file_name(::std::string&& value);
  #endif
  void set_correlation_file_name(const char* value);
  void set_correlation_file_name(const void* value, size_t size);
  ::std::string* mutable_correlation_file_name();
  ::std::string* release_correlation_file_name();
  void set_allocated_correlation_file_name(::std::string* correlation_file_name);

  // uint32 chunk_id = 1;
  void clear_chunk_id();
  static const int kChunkIdFieldNumber = 1;
  ::google::protobuf::uint32 chunk_id() const;
  void set_chunk_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chunk_bytes_;
  ::google::protobuf::internal::ArenaStringPtr correlation_file_name_;
  ::google::protobuf::uint32 chunk_id_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferFileBytesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse) */ {
 public:
  TransferFileBytesResponse();
  virtual ~TransferFileBytesResponse();

  TransferFileBytesResponse(const TransferFileBytesResponse& from);

  inline TransferFileBytesResponse& operator=(const TransferFileBytesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferFileBytesResponse& default_instance();

  static inline const TransferFileBytesResponse* internal_default_instance() {
    return reinterpret_cast<const TransferFileBytesResponse*>(
               &_TransferFileBytesResponse_default_instance_);
  }

  void Swap(TransferFileBytesResponse* other);

  // implements Message ----------------------------------------------

  inline TransferFileBytesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TransferFileBytesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransferFileBytesResponse& from);
  void MergeFrom(const TransferFileBytesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransferFileBytesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes response_code = 1;
  void clear_response_code();
  static const int kResponseCodeFieldNumber = 1;
  const ::std::string& response_code() const;
  void set_response_code(const ::std::string& value);
  #if LANG_CXX11
  void set_response_code(::std::string&& value);
  #endif
  void set_response_code(const char* value);
  void set_response_code(const void* value, size_t size);
  ::std::string* mutable_response_code();
  ::std::string* release_response_code();
  void set_allocated_response_code(::std::string* response_code);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr response_code_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePeerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.RemovePeerRequest) */ {
 public:
  RemovePeerRequest();
  virtual ~RemovePeerRequest();

  RemovePeerRequest(const RemovePeerRequest& from);

  inline RemovePeerRequest& operator=(const RemovePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeerRequest& default_instance();

  static inline const RemovePeerRequest* internal_default_instance() {
    return reinterpret_cast<const RemovePeerRequest*>(
               &_RemovePeerRequest_default_instance_);
  }

  void Swap(RemovePeerRequest* other);

  // implements Message ----------------------------------------------

  inline RemovePeerRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RemovePeerRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemovePeerRequest& from);
  void MergeFrom(const RemovePeerRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemovePeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes peer_ip = 1;
  void clear_peer_ip();
  static const int kPeerIpFieldNumber = 1;
  const ::std::string& peer_ip() const;
  void set_peer_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_ip(::std::string&& value);
  #endif
  void set_peer_ip(const char* value);
  void set_peer_ip(const void* value, size_t size);
  ::std::string* mutable_peer_ip();
  ::std::string* release_peer_ip();
  void set_allocated_peer_ip(::std::string* peer_ip);

  // bytes public_key = 2;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr peer_ip_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePeerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.RemovePeerResponse) */ {
 public:
  RemovePeerResponse();
  virtual ~RemovePeerResponse();

  RemovePeerResponse(const RemovePeerResponse& from);

  inline RemovePeerResponse& operator=(const RemovePeerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeerResponse& default_instance();

  static inline const RemovePeerResponse* internal_default_instance() {
    return reinterpret_cast<const RemovePeerResponse*>(
               &_RemovePeerResponse_default_instance_);
  }

  void Swap(RemovePeerResponse* other);

  // implements Message ----------------------------------------------

  inline RemovePeerResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RemovePeerResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemovePeerResponse& from);
  void MergeFrom(const RemovePeerResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemovePeerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deleted_count = 1;
  void clear_deleted_count();
  static const int kDeletedCountFieldNumber = 1;
  ::google::protobuf::uint32 deleted_count() const;
  void set_deleted_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deleted_count_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest) */ {
 public:
  GetPeerCountRequest();
  virtual ~GetPeerCountRequest();

  GetPeerCountRequest(const GetPeerCountRequest& from);

  inline GetPeerCountRequest& operator=(const GetPeerCountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerCountRequest& default_instance();

  static inline const GetPeerCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerCountRequest*>(
               &_GetPeerCountRequest_default_instance_);
  }

  void Swap(GetPeerCountRequest* other);

  // implements Message ----------------------------------------------

  inline GetPeerCountRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPeerCountRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPeerCountRequest& from);
  void MergeFrom(const GetPeerCountRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPeerCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse) */ {
 public:
  GetPeerCountResponse();
  virtual ~GetPeerCountResponse();

  GetPeerCountResponse(const GetPeerCountResponse& from);

  inline GetPeerCountResponse& operator=(const GetPeerCountResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerCountResponse& default_instance();

  static inline const GetPeerCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerCountResponse*>(
               &_GetPeerCountResponse_default_instance_);
  }

  void Swap(GetPeerCountResponse* other);

  // implements Message ----------------------------------------------

  inline GetPeerCountResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPeerCountResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPeerCountResponse& from);
  void MergeFrom(const GetPeerCountResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPeerCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 peer_count = 1;
  void clear_peer_count();
  static const int kPeerCountFieldNumber = 1;
  ::google::protobuf::int32 peer_count() const;
  void set_peer_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 peer_count_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetFileFromDfsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest) */ {
 public:
  GetFileFromDfsRequest();
  virtual ~GetFileFromDfsRequest();

  GetFileFromDfsRequest(const GetFileFromDfsRequest& from);

  inline GetFileFromDfsRequest& operator=(const GetFileFromDfsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileFromDfsRequest& default_instance();

  static inline const GetFileFromDfsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileFromDfsRequest*>(
               &_GetFileFromDfsRequest_default_instance_);
  }

  void Swap(GetFileFromDfsRequest* other);

  // implements Message ----------------------------------------------

  inline GetFileFromDfsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFileFromDfsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFileFromDfsRequest& from);
  void MergeFrom(const GetFileFromDfsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFileFromDfsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dfs_hash = 1;
  void clear_dfs_hash();
  static const int kDfsHashFieldNumber = 1;
  const ::std::string& dfs_hash() const;
  void set_dfs_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_dfs_hash(::std::string&& value);
  #endif
  void set_dfs_hash(const char* value);
  void set_dfs_hash(const char* value, size_t size);
  ::std::string* mutable_dfs_hash();
  ::std::string* release_dfs_hash();
  void set_allocated_dfs_hash(::std::string* dfs_hash);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dfs_hash_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetFileFromDfsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse) */ {
 public:
  GetFileFromDfsResponse();
  virtual ~GetFileFromDfsResponse();

  GetFileFromDfsResponse(const GetFileFromDfsResponse& from);

  inline GetFileFromDfsResponse& operator=(const GetFileFromDfsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileFromDfsResponse& default_instance();

  static inline const GetFileFromDfsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFileFromDfsResponse*>(
               &_GetFileFromDfsResponse_default_instance_);
  }

  void Swap(GetFileFromDfsResponse* other);

  // implements Message ----------------------------------------------

  inline GetFileFromDfsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFileFromDfsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFileFromDfsResponse& from);
  void MergeFrom(const GetFileFromDfsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFileFromDfsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes response_code = 2;
  void clear_response_code();
  static const int kResponseCodeFieldNumber = 2;
  const ::std::string& response_code() const;
  void set_response_code(const ::std::string& value);
  #if LANG_CXX11
  void set_response_code(::std::string&& value);
  #endif
  void set_response_code(const char* value);
  void set_response_code(const void* value, size_t size);
  ::std::string* mutable_response_code();
  ::std::string* release_response_code();
  void set_allocated_response_code(::std::string* response_code);

  // uint64 file_size = 1;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 1;
  ::google::protobuf::uint64 file_size() const;
  void set_file_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr response_code_;
  ::google::protobuf::uint64 file_size_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPeerDataFolderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest) */ {
 public:
  SetPeerDataFolderRequest();
  virtual ~SetPeerDataFolderRequest();

  SetPeerDataFolderRequest(const SetPeerDataFolderRequest& from);

  inline SetPeerDataFolderRequest& operator=(const SetPeerDataFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPeerDataFolderRequest& default_instance();

  static inline const SetPeerDataFolderRequest* internal_default_instance() {
    return reinterpret_cast<const SetPeerDataFolderRequest*>(
               &_SetPeerDataFolderRequest_default_instance_);
  }

  void Swap(SetPeerDataFolderRequest* other);

  // implements Message ----------------------------------------------

  inline SetPeerDataFolderRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetPeerDataFolderRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetPeerDataFolderRequest& from);
  void MergeFrom(const SetPeerDataFolderRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetPeerDataFolderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data_folder = 1;
  void clear_data_folder();
  static const int kDataFolderFieldNumber = 1;
  const ::std::string& data_folder() const;
  void set_data_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_data_folder(::std::string&& value);
  #endif
  void set_data_folder(const char* value);
  void set_data_folder(const char* value, size_t size);
  ::std::string* mutable_data_folder();
  ::std::string* release_data_folder();
  void set_allocated_data_folder(::std::string* data_folder);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_folder_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPeerDataFolderResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse) */ {
 public:
  SetPeerDataFolderResponse();
  virtual ~SetPeerDataFolderResponse();

  SetPeerDataFolderResponse(const SetPeerDataFolderResponse& from);

  inline SetPeerDataFolderResponse& operator=(const SetPeerDataFolderResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPeerDataFolderResponse& default_instance();

  static inline const SetPeerDataFolderResponse* internal_default_instance() {
    return reinterpret_cast<const SetPeerDataFolderResponse*>(
               &_SetPeerDataFolderResponse_default_instance_);
  }

  void Swap(SetPeerDataFolderResponse* other);

  // implements Message ----------------------------------------------

  inline SetPeerDataFolderResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetPeerDataFolderResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetPeerDataFolderResponse& from);
  void MergeFrom(const SetPeerDataFolderResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetPeerDataFolderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable int _cached_size_;
  friend struct  protobuf_Rpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VersionRequest

// bool query = 1;
inline void VersionRequest::clear_query() {
  query_ = false;
}
inline bool VersionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VersionRequest.query)
  return query_;
}
inline void VersionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VersionRequest.query)
}

// -------------------------------------------------------------------

// VersionResponse

// string version = 1;
inline void VersionResponse::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VersionResponse::version() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  return version_.GetNoArena();
}
inline void VersionResponse::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
#if LANG_CXX11
inline void VersionResponse::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
#endif
inline void VersionResponse::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
inline ::std::string* VersionResponse::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionResponse::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}

// -------------------------------------------------------------------

// GetInfoRequest

// bool query = 1;
inline void GetInfoRequest::clear_query() {
  query_ = false;
}
inline bool GetInfoRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetInfoRequest.query)
  return query_;
}
inline void GetInfoRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetInfoRequest.query)
}

// -------------------------------------------------------------------

// GetInfoResponse

// string query = 1;
inline void GetInfoResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInfoResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  return query_.GetNoArena();
}
inline void GetInfoResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
#if LANG_CXX11
inline void GetInfoResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
#endif
inline void GetInfoResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
inline void GetInfoResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
inline ::std::string* GetInfoResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInfoResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}

// -------------------------------------------------------------------

// CreateWalletRequest

// bool query = 1;
inline void CreateWalletRequest::clear_query() {
  query_ = false;
}
inline bool CreateWalletRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateWalletRequest.query)
  return query_;
}
inline void CreateWalletRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateWalletRequest.query)
}

// -------------------------------------------------------------------

// CreateWalletResponse

// string query = 1;
inline void CreateWalletResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateWalletResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  return query_.GetNoArena();
}
inline void CreateWalletResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
#if LANG_CXX11
inline void CreateWalletResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
#endif
inline void CreateWalletResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
inline void CreateWalletResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
inline ::std::string* CreateWalletResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateWalletResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateWalletResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}

// -------------------------------------------------------------------

// ListWalletRequest

// bool query = 1;
inline void ListWalletRequest::clear_query() {
  query_ = false;
}
inline bool ListWalletRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListWalletRequest.query)
  return query_;
}
inline void ListWalletRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListWalletRequest.query)
}

// -------------------------------------------------------------------

// ListWalletResponse

// string query = 1;
inline void ListWalletResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListWalletResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  return query_.GetNoArena();
}
inline void ListWalletResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
#if LANG_CXX11
inline void ListWalletResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
#endif
inline void ListWalletResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
inline void ListWalletResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
inline ::std::string* ListWalletResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListWalletResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListWalletResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}

// -------------------------------------------------------------------

// CreateAddressRequest

// bool query = 1;
inline void CreateAddressRequest::clear_query() {
  query_ = false;
}
inline bool CreateAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateAddressRequest.query)
  return query_;
}
inline void CreateAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateAddressRequest.query)
}

// -------------------------------------------------------------------

// CreateAddressResponse

// string query = 1;
inline void CreateAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  return query_.GetNoArena();
}
inline void CreateAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
#if LANG_CXX11
inline void CreateAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
#endif
inline void CreateAddressResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
inline void CreateAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
inline ::std::string* CreateAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}

// -------------------------------------------------------------------

// GetAddressRequest

// bool query = 1;
inline void GetAddressRequest::clear_query() {
  query_ = false;
}
inline bool GetAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetAddressRequest.query)
  return query_;
}
inline void GetAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetAddressRequest.query)
}

// -------------------------------------------------------------------

// GetAddressResponse

// string query = 1;
inline void GetAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  return query_.GetNoArena();
}
inline void GetAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
#if LANG_CXX11
inline void GetAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
#endif
inline void GetAddressResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
inline void GetAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
inline ::std::string* GetAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}

// -------------------------------------------------------------------

// ListAddressRequest

// bool query = 1;
inline void ListAddressRequest::clear_query() {
  query_ = false;
}
inline bool ListAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListAddressRequest.query)
  return query_;
}
inline void ListAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListAddressRequest.query)
}

// -------------------------------------------------------------------

// ListAddressResponse

// string query = 1;
inline void ListAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  return query_.GetNoArena();
}
inline void ListAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
#if LANG_CXX11
inline void ListAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
#endif
inline void ListAddressResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
inline void ListAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
inline ::std::string* ListAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}

// -------------------------------------------------------------------

// ValidateAddressRequest

// bool query = 1;
inline void ValidateAddressRequest::clear_query() {
  query_ = false;
}
inline bool ValidateAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest.query)
  return query_;
}
inline void ValidateAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest.query)
}

// -------------------------------------------------------------------

// ValidateAddressResponse

// string query = 1;
inline void ValidateAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValidateAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  return query_.GetNoArena();
}
inline void ValidateAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
#if LANG_CXX11
inline void ValidateAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
#endif
inline void ValidateAddressResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
inline void ValidateAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
inline ::std::string* ValidateAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidateAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}

// -------------------------------------------------------------------

// GetBalanceRequest

// bool query = 1;
inline void GetBalanceRequest::clear_query() {
  query_ = false;
}
inline bool GetBalanceRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetBalanceRequest.query)
  return query_;
}
inline void GetBalanceRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetBalanceRequest.query)
}

// -------------------------------------------------------------------

// GetBalanceResponse

// string query = 1;
inline void GetBalanceResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBalanceResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  return query_.GetNoArena();
}
inline void GetBalanceResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
#if LANG_CXX11
inline void GetBalanceResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
#endif
inline void GetBalanceResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
inline void GetBalanceResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
inline ::std::string* GetBalanceResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBalanceResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalanceResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}

// -------------------------------------------------------------------

// CreateRawTransactionRequest

// bool query = 1;
inline void CreateRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool CreateRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest.query)
  return query_;
}
inline void CreateRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// CreateRawTransactionResponse

// string query = 1;
inline void CreateRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  return query_.GetNoArena();
}
inline void CreateRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
#if LANG_CXX11
inline void CreateRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
#endif
inline void CreateRawTransactionResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
inline void CreateRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
inline ::std::string* CreateRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// SignRawTransactionRequest

// bool query = 1;
inline void SignRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool SignRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest.query)
  return query_;
}
inline void SignRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// SignRawTransactionResponse

// string query = 1;
inline void SignRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  return query_.GetNoArena();
}
inline void SignRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
#if LANG_CXX11
inline void SignRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
#endif
inline void SignRawTransactionResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
inline void SignRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
inline ::std::string* SignRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// DecodeRawTransactionRequest

// bool query = 1;
inline void DecodeRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool DecodeRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest.query)
  return query_;
}
inline void DecodeRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// DecodeRawTransactionResponse

// string query = 1;
inline void DecodeRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DecodeRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  return query_.GetNoArena();
}
inline void DecodeRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
#if LANG_CXX11
inline void DecodeRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
#endif
inline void DecodeRawTransactionResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
inline void DecodeRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
inline ::std::string* DecodeRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecodeRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecodeRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// BroadcastRawTransactionRequest

// .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
inline bool BroadcastRawTransactionRequest::has_transaction() const {
  return this != internal_default_instance() && transaction_ != NULL;
}
inline void BroadcastRawTransactionRequest::clear_transaction() {
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) delete transaction_;
  transaction_ = NULL;
}
inline const ::Catalyst::Protocol::Wire::TransactionBroadcast& BroadcastRawTransactionRequest::transaction() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  return transaction_ != NULL ? *transaction_
                         : *::Catalyst::Protocol::Wire::TransactionBroadcast::internal_default_instance();
}
inline ::Catalyst::Protocol::Wire::TransactionBroadcast* BroadcastRawTransactionRequest::mutable_transaction() {
  
  if (transaction_ == NULL) {
    transaction_ = new ::Catalyst::Protocol::Wire::TransactionBroadcast;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  return transaction_;
}
inline ::Catalyst::Protocol::Wire::TransactionBroadcast* BroadcastRawTransactionRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  
  ::Catalyst::Protocol::Wire::TransactionBroadcast* temp = transaction_;
  transaction_ = NULL;
  return temp;
}
inline void BroadcastRawTransactionRequest::set_allocated_transaction(::Catalyst::Protocol::Wire::TransactionBroadcast* transaction) {
  delete transaction_;
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
}

// -------------------------------------------------------------------

// BroadcastRawTransactionResponse

// .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
inline void BroadcastRawTransactionResponse::clear_response_code() {
  response_code_ = 0;
}
inline ::Catalyst::Protocol::Rpc::Node::ResponseCode BroadcastRawTransactionResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse.response_code)
  return static_cast< ::Catalyst::Protocol::Rpc::Node::ResponseCode >(response_code_);
}
inline void BroadcastRawTransactionResponse::set_response_code(::Catalyst::Protocol::Rpc::Node::ResponseCode value) {
  
  response_code_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse.response_code)
}

// -------------------------------------------------------------------

// SendToRequest

// bool query = 1;
inline void SendToRequest::clear_query() {
  query_ = false;
}
inline bool SendToRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToRequest.query)
  return query_;
}
inline void SendToRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToRequest.query)
}

// -------------------------------------------------------------------

// SendToResponse

// string query = 1;
inline void SendToResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendToResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  return query_.GetNoArena();
}
inline void SendToResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
#if LANG_CXX11
inline void SendToResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
#endif
inline void SendToResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
inline void SendToResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
inline ::std::string* SendToResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendToResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendToResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}

// -------------------------------------------------------------------

// SendToFromRequest

// bool query = 1;
inline void SendToFromRequest::clear_query() {
  query_ = false;
}
inline bool SendToFromRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToFromRequest.query)
  return query_;
}
inline void SendToFromRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToFromRequest.query)
}

// -------------------------------------------------------------------

// SendToFromResponse

// string query = 1;
inline void SendToFromResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendToFromResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  return query_.GetNoArena();
}
inline void SendToFromResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
#if LANG_CXX11
inline void SendToFromResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
#endif
inline void SendToFromResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
inline void SendToFromResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
inline ::std::string* SendToFromResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendToFromResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendToFromResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}

// -------------------------------------------------------------------

// SendManyRequest

// bool query = 1;
inline void SendManyRequest::clear_query() {
  query_ = false;
}
inline bool SendManyRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendManyRequest.query)
  return query_;
}
inline void SendManyRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendManyRequest.query)
}

// -------------------------------------------------------------------

// SendManyResponse

// string query = 1;
inline void SendManyResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendManyResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  return query_.GetNoArena();
}
inline void SendManyResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
#if LANG_CXX11
inline void SendManyResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
#endif
inline void SendManyResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
inline void SendManyResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
inline ::std::string* SendManyResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendManyResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendManyResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}

// -------------------------------------------------------------------

// SendFromManyRequest

// bool query = 1;
inline void SendFromManyRequest::clear_query() {
  query_ = false;
}
inline bool SendFromManyRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendFromManyRequest.query)
  return query_;
}
inline void SendFromManyRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendFromManyRequest.query)
}

// -------------------------------------------------------------------

// SendFromManyResponse

// string query = 1;
inline void SendFromManyResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFromManyResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  return query_.GetNoArena();
}
inline void SendFromManyResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
#if LANG_CXX11
inline void SendFromManyResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
#endif
inline void SendFromManyResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
inline void SendFromManyResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
inline ::std::string* SendFromManyResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFromManyResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFromManyResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}

// -------------------------------------------------------------------

// AddNodeRequest

// bool query = 1;
inline void AddNodeRequest::clear_query() {
  query_ = false;
}
inline bool AddNodeRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddNodeRequest.query)
  return query_;
}
inline void AddNodeRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddNodeRequest.query)
}

// -------------------------------------------------------------------

// AddNodeResponse

// string query = 1;
inline void AddNodeResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddNodeResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  return query_.GetNoArena();
}
inline void AddNodeResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
#if LANG_CXX11
inline void AddNodeResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
#endif
inline void AddNodeResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
inline void AddNodeResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
inline ::std::string* AddNodeResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddNodeResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddNodeResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}

// -------------------------------------------------------------------

// GetPeerListRequest

// -------------------------------------------------------------------

// GetPeerListResponse

// repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
inline int GetPeerListResponse::peers_size() const {
  return peers_.size();
}
inline void GetPeerListResponse::clear_peers() {
  peers_.Clear();
}
inline const ::Catalyst::Protocol::Peer::PeerId& GetPeerListResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return peers_.Get(index);
}
inline ::Catalyst::Protocol::Peer::PeerId* GetPeerListResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return peers_.Mutable(index);
}
inline ::Catalyst::Protocol::Peer::PeerId* GetPeerListResponse::add_peers() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >*
GetPeerListResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return &peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >&
GetPeerListResponse::peers() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return peers_;
}

// -------------------------------------------------------------------

// GetPeerReputationRequest

// bytes public_key = 1;
inline void GetPeerReputationRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerReputationRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
  return public_key_.GetNoArena();
}
inline void GetPeerReputationRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
#if LANG_CXX11
inline void GetPeerReputationRequest::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
#endif
inline void GetPeerReputationRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
inline void GetPeerReputationRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
inline ::std::string* GetPeerReputationRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerReputationRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerReputationRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}

// bytes ip = 2;
inline void GetPeerReputationRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerReputationRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  return ip_.GetNoArena();
}
inline void GetPeerReputationRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
#if LANG_CXX11
inline void GetPeerReputationRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
#endif
inline void GetPeerReputationRequest::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
inline void GetPeerReputationRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
inline ::std::string* GetPeerReputationRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerReputationRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerReputationRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}

// -------------------------------------------------------------------

// GetPeerReputationResponse

// int32 reputation = 1;
inline void GetPeerReputationResponse::clear_reputation() {
  reputation_ = 0;
}
inline ::google::protobuf::int32 GetPeerReputationResponse::reputation() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse.reputation)
  return reputation_;
}
inline void GetPeerReputationResponse::set_reputation(::google::protobuf::int32 value) {
  
  reputation_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse.reputation)
}

// -------------------------------------------------------------------

// SetPeerBlacklistRequest

// bytes public_key = 1;
inline void SetPeerBlacklistRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPeerBlacklistRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
  return public_key_.GetNoArena();
}
inline void SetPeerBlacklistRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
#if LANG_CXX11
inline void SetPeerBlacklistRequest::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
#endif
inline void SetPeerBlacklistRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
inline void SetPeerBlacklistRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
inline ::std::string* SetPeerBlacklistRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPeerBlacklistRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlacklistRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}

// bytes ip = 2;
inline void SetPeerBlacklistRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPeerBlacklistRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
  return ip_.GetNoArena();
}
inline void SetPeerBlacklistRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
#if LANG_CXX11
inline void SetPeerBlacklistRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
#endif
inline void SetPeerBlacklistRequest::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
inline void SetPeerBlacklistRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
inline ::std::string* SetPeerBlacklistRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPeerBlacklistRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlacklistRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}

// bool blacklist = 3;
inline void SetPeerBlacklistRequest::clear_blacklist() {
  blacklist_ = false;
}
inline bool SetPeerBlacklistRequest::blacklist() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.blacklist)
  return blacklist_;
}
inline void SetPeerBlacklistRequest::set_blacklist(bool value) {
  
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.blacklist)
}

// -------------------------------------------------------------------

// SetPeerBlacklistResponse

// bytes public_key = 1;
inline void SetPeerBlacklistResponse::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPeerBlacklistResponse::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
  return public_key_.GetNoArena();
}
inline void SetPeerBlacklistResponse::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
#if LANG_CXX11
inline void SetPeerBlacklistResponse::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
#endif
inline void SetPeerBlacklistResponse::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
inline void SetPeerBlacklistResponse::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
inline ::std::string* SetPeerBlacklistResponse::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPeerBlacklistResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlacklistResponse::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}

// bytes ip = 2;
inline void SetPeerBlacklistResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPeerBlacklistResponse::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
  return ip_.GetNoArena();
}
inline void SetPeerBlacklistResponse::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
#if LANG_CXX11
inline void SetPeerBlacklistResponse::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
#endif
inline void SetPeerBlacklistResponse::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
inline void SetPeerBlacklistResponse::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
inline ::std::string* SetPeerBlacklistResponse::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPeerBlacklistResponse::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlacklistResponse::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}

// bool blacklist = 3;
inline void SetPeerBlacklistResponse::clear_blacklist() {
  blacklist_ = false;
}
inline bool SetPeerBlacklistResponse::blacklist() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.blacklist)
  return blacklist_;
}
inline void SetPeerBlacklistResponse::set_blacklist(bool value) {
  
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.blacklist)
}

// -------------------------------------------------------------------

// GetPeerInfoRequest

// bytes public_key = 1;
inline void GetPeerInfoRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerInfoRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
  return public_key_.GetNoArena();
}
inline void GetPeerInfoRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
#if LANG_CXX11
inline void GetPeerInfoRequest::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
#endif
inline void GetPeerInfoRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
inline void GetPeerInfoRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
inline ::std::string* GetPeerInfoRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerInfoRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerInfoRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}

// bytes ip = 2;
inline void GetPeerInfoRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerInfoRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  return ip_.GetNoArena();
}
inline void GetPeerInfoRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
#if LANG_CXX11
inline void GetPeerInfoRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
#endif
inline void GetPeerInfoRequest::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
inline void GetPeerInfoRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
inline ::std::string* GetPeerInfoRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerInfoRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerInfoRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}

// -------------------------------------------------------------------

// GetPeerInfoResponse

// repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
inline int GetPeerInfoResponse::peer_info_size() const {
  return peer_info_.size();
}
inline void GetPeerInfoResponse::clear_peer_info() {
  peer_info_.Clear();
}
inline const ::Catalyst::Protocol::Peer::PeerInfo& GetPeerInfoResponse::peer_info(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return peer_info_.Get(index);
}
inline ::Catalyst::Protocol::Peer::PeerInfo* GetPeerInfoResponse::mutable_peer_info(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return peer_info_.Mutable(index);
}
inline ::Catalyst::Protocol::Peer::PeerInfo* GetPeerInfoResponse::add_peer_info() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return peer_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo >*
GetPeerInfoResponse::mutable_peer_info() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return &peer_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo >&
GetPeerInfoResponse::peer_info() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return peer_info_;
}

// -------------------------------------------------------------------

// GetConnectionCountRequest

// bool query = 1;
inline void GetConnectionCountRequest::clear_query() {
  query_ = false;
}
inline bool GetConnectionCountRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest.query)
  return query_;
}
inline void GetConnectionCountRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest.query)
}

// -------------------------------------------------------------------

// GetConnectionCountResponse

// string query = 1;
inline void GetConnectionCountResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetConnectionCountResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  return query_.GetNoArena();
}
inline void GetConnectionCountResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
#if LANG_CXX11
inline void GetConnectionCountResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
#endif
inline void GetConnectionCountResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
inline void GetConnectionCountResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
inline ::std::string* GetConnectionCountResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectionCountResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectionCountResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}

// -------------------------------------------------------------------

// GetDeltaRequest

// bytes delta_dfs_hash = 1;
inline void GetDeltaRequest::clear_delta_dfs_hash() {
  delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDeltaRequest::delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
  return delta_dfs_hash_.GetNoArena();
}
inline void GetDeltaRequest::set_delta_dfs_hash(const ::std::string& value) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
#if LANG_CXX11
inline void GetDeltaRequest::set_delta_dfs_hash(::std::string&& value) {
  
  delta_dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
#endif
inline void GetDeltaRequest::set_delta_dfs_hash(const char* value) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
inline void GetDeltaRequest::set_delta_dfs_hash(const void* value, size_t size) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
inline ::std::string* GetDeltaRequest::mutable_delta_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
  return delta_dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDeltaRequest::release_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
  
  return delta_dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDeltaRequest::set_allocated_delta_dfs_hash(::std::string* delta_dfs_hash) {
  if (delta_dfs_hash != NULL) {
    
  } else {
    
  }
  delta_dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}

// -------------------------------------------------------------------

// GetDeltaResponse

// .Catalyst.Protocol.Deltas.Delta delta = 1;
inline bool GetDeltaResponse::has_delta() const {
  return this != internal_default_instance() && delta_ != NULL;
}
inline void GetDeltaResponse::clear_delta() {
  if (GetArenaNoVirtual() == NULL && delta_ != NULL) delete delta_;
  delta_ = NULL;
}
inline const ::Catalyst::Protocol::Deltas::Delta& GetDeltaResponse::delta() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
  return delta_ != NULL ? *delta_
                         : *::Catalyst::Protocol::Deltas::Delta::internal_default_instance();
}
inline ::Catalyst::Protocol::Deltas::Delta* GetDeltaResponse::mutable_delta() {
  
  if (delta_ == NULL) {
    delta_ = new ::Catalyst::Protocol::Deltas::Delta;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
  return delta_;
}
inline ::Catalyst::Protocol::Deltas::Delta* GetDeltaResponse::release_delta() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
  
  ::Catalyst::Protocol::Deltas::Delta* temp = delta_;
  delta_ = NULL;
  return temp;
}
inline void GetDeltaResponse::set_allocated_delta(::Catalyst::Protocol::Deltas::Delta* delta) {
  delete delta_;
  delta_ = delta;
  if (delta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
}

// -------------------------------------------------------------------

// GetMempoolRequest

// bool query = 1;
inline void GetMempoolRequest::clear_query() {
  query_ = false;
}
inline bool GetMempoolRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetMempoolRequest.query)
  return query_;
}
inline void GetMempoolRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetMempoolRequest.query)
}

// -------------------------------------------------------------------

// GetMempoolResponse

// repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
inline int GetMempoolResponse::transactions_size() const {
  return transactions_.size();
}
inline void GetMempoolResponse::clear_transactions() {
  transactions_.Clear();
}
inline const ::Catalyst::Protocol::Transaction::PublicEntry& GetMempoolResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_.Get(index);
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* GetMempoolResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_.Mutable(index);
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* GetMempoolResponse::add_transactions() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >*
GetMempoolResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return &transactions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >&
GetMempoolResponse::transactions() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// SignMessageRequest

// bytes message = 1;
inline void SignMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  return message_.GetNoArena();
}
inline void SignMessageRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
#if LANG_CXX11
inline void SignMessageRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
#endif
inline void SignMessageRequest::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
inline void SignMessageRequest::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
inline ::std::string* SignMessageRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}

// string key_id = 2;
inline void SignMessageRequest::clear_key_id() {
  key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageRequest::key_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
  return key_id_.GetNoArena();
}
inline void SignMessageRequest::set_key_id(const ::std::string& value) {
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
#if LANG_CXX11
inline void SignMessageRequest::set_key_id(::std::string&& value) {
  
  key_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
#endif
inline void SignMessageRequest::set_key_id(const char* value) {
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
inline void SignMessageRequest::set_key_id(const char* value, size_t size) {
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
inline ::std::string* SignMessageRequest::mutable_key_id() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
  return key_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageRequest::release_key_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
  
  return key_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageRequest::set_allocated_key_id(::std::string* key_id) {
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_id);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}

// .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
inline bool SignMessageRequest::has_signing_context() const {
  return this != internal_default_instance() && signing_context_ != NULL;
}
inline void SignMessageRequest::clear_signing_context() {
  if (GetArenaNoVirtual() == NULL && signing_context_ != NULL) delete signing_context_;
  signing_context_ = NULL;
}
inline const ::Catalyst::Protocol::Cryptography::SigningContext& SignMessageRequest::signing_context() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
  return signing_context_ != NULL ? *signing_context_
                         : *::Catalyst::Protocol::Cryptography::SigningContext::internal_default_instance();
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* SignMessageRequest::mutable_signing_context() {
  
  if (signing_context_ == NULL) {
    signing_context_ = new ::Catalyst::Protocol::Cryptography::SigningContext;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
  return signing_context_;
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* SignMessageRequest::release_signing_context() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
  
  ::Catalyst::Protocol::Cryptography::SigningContext* temp = signing_context_;
  signing_context_ = NULL;
  return temp;
}
inline void SignMessageRequest::set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context) {
  delete signing_context_;
  signing_context_ = signing_context;
  if (signing_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
}

// -------------------------------------------------------------------

// SignMessageResponse

// bytes signature = 1;
inline void SignMessageResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageResponse::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  return signature_.GetNoArena();
}
inline void SignMessageResponse::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
#if LANG_CXX11
inline void SignMessageResponse::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
#endif
inline void SignMessageResponse::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
inline void SignMessageResponse::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
inline ::std::string* SignMessageResponse::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageResponse::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}

// bytes public_key = 2;
inline void SignMessageResponse::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageResponse::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
  return public_key_.GetNoArena();
}
inline void SignMessageResponse::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
#if LANG_CXX11
inline void SignMessageResponse::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
#endif
inline void SignMessageResponse::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
inline void SignMessageResponse::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
inline ::std::string* SignMessageResponse::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}

// bytes original_message = 3;
inline void SignMessageResponse::clear_original_message() {
  original_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageResponse::original_message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
  return original_message_.GetNoArena();
}
inline void SignMessageResponse::set_original_message(const ::std::string& value) {
  
  original_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
#if LANG_CXX11
inline void SignMessageResponse::set_original_message(::std::string&& value) {
  
  original_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
#endif
inline void SignMessageResponse::set_original_message(const char* value) {
  
  original_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
inline void SignMessageResponse::set_original_message(const void* value, size_t size) {
  
  original_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
inline ::std::string* SignMessageResponse::mutable_original_message() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
  return original_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageResponse::release_original_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
  
  return original_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_original_message(::std::string* original_message) {
  if (original_message != NULL) {
    
  } else {
    
  }
  original_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}

// -------------------------------------------------------------------

// VerifyMessageRequest

// bytes signature = 1;
inline void VerifyMessageRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyMessageRequest::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  return signature_.GetNoArena();
}
inline void VerifyMessageRequest::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
#if LANG_CXX11
inline void VerifyMessageRequest::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
#endif
inline void VerifyMessageRequest::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
inline void VerifyMessageRequest::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
inline ::std::string* VerifyMessageRequest::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyMessageRequest::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}

// bytes public_key = 2;
inline void VerifyMessageRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyMessageRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
  return public_key_.GetNoArena();
}
inline void VerifyMessageRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
#if LANG_CXX11
inline void VerifyMessageRequest::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
#endif
inline void VerifyMessageRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
inline void VerifyMessageRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
inline ::std::string* VerifyMessageRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyMessageRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}

// bytes message = 3;
inline void VerifyMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  return message_.GetNoArena();
}
inline void VerifyMessageRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
#if LANG_CXX11
inline void VerifyMessageRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
#endif
inline void VerifyMessageRequest::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
inline void VerifyMessageRequest::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
inline ::std::string* VerifyMessageRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}

// .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
inline bool VerifyMessageRequest::has_signing_context() const {
  return this != internal_default_instance() && signing_context_ != NULL;
}
inline void VerifyMessageRequest::clear_signing_context() {
  if (GetArenaNoVirtual() == NULL && signing_context_ != NULL) delete signing_context_;
  signing_context_ = NULL;
}
inline const ::Catalyst::Protocol::Cryptography::SigningContext& VerifyMessageRequest::signing_context() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
  return signing_context_ != NULL ? *signing_context_
                         : *::Catalyst::Protocol::Cryptography::SigningContext::internal_default_instance();
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* VerifyMessageRequest::mutable_signing_context() {
  
  if (signing_context_ == NULL) {
    signing_context_ = new ::Catalyst::Protocol::Cryptography::SigningContext;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
  return signing_context_;
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* VerifyMessageRequest::release_signing_context() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
  
  ::Catalyst::Protocol::Cryptography::SigningContext* temp = signing_context_;
  signing_context_ = NULL;
  return temp;
}
inline void VerifyMessageRequest::set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context) {
  delete signing_context_;
  signing_context_ = signing_context;
  if (signing_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
}

// -------------------------------------------------------------------

// VerifyMessageResponse

// bool is_signed_by_key = 1;
inline void VerifyMessageResponse::clear_is_signed_by_key() {
  is_signed_by_key_ = false;
}
inline bool VerifyMessageResponse::is_signed_by_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse.is_signed_by_key)
  return is_signed_by_key_;
}
inline void VerifyMessageResponse::set_is_signed_by_key(bool value) {
  
  is_signed_by_key_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse.is_signed_by_key)
}

// -------------------------------------------------------------------

// ServiceStatusRequest

// bool query = 1;
inline void ServiceStatusRequest::clear_query() {
  query_ = false;
}
inline bool ServiceStatusRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest.query)
  return query_;
}
inline void ServiceStatusRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest.query)
}

// -------------------------------------------------------------------

// ServiceStatusResponse

// string query = 1;
inline void ServiceStatusResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceStatusResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  return query_.GetNoArena();
}
inline void ServiceStatusResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
#if LANG_CXX11
inline void ServiceStatusResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
#endif
inline void ServiceStatusResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
inline void ServiceStatusResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
inline ::std::string* ServiceStatusResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceStatusResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceStatusResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}

// -------------------------------------------------------------------

// AddFileToDfsRequest

// uint64 file_size = 1;
inline void AddFileToDfsRequest::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddFileToDfsRequest::file_size() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_size)
  return file_size_;
}
inline void AddFileToDfsRequest::set_file_size(::google::protobuf::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_size)
}

// string file_name = 2;
inline void AddFileToDfsRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFileToDfsRequest::file_name() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
  return file_name_.GetNoArena();
}
inline void AddFileToDfsRequest::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
#if LANG_CXX11
inline void AddFileToDfsRequest::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
#endif
inline void AddFileToDfsRequest::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
inline void AddFileToDfsRequest::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
inline ::std::string* AddFileToDfsRequest::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFileToDfsRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}

// string node = 3;
inline void AddFileToDfsRequest::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFileToDfsRequest::node() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  return node_.GetNoArena();
}
inline void AddFileToDfsRequest::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
#if LANG_CXX11
inline void AddFileToDfsRequest::set_node(::std::string&& value) {
  
  node_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
#endif
inline void AddFileToDfsRequest::set_node(const char* value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
inline void AddFileToDfsRequest::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
inline ::std::string* AddFileToDfsRequest::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFileToDfsRequest::release_node() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsRequest::set_allocated_node(::std::string* node) {
  if (node != NULL) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}

// -------------------------------------------------------------------

// AddFileToDfsResponse

// bytes response_code = 1;
inline void AddFileToDfsResponse::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFileToDfsResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
  return response_code_.GetNoArena();
}
inline void AddFileToDfsResponse::set_response_code(const ::std::string& value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
#if LANG_CXX11
inline void AddFileToDfsResponse::set_response_code(::std::string&& value) {
  
  response_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
#endif
inline void AddFileToDfsResponse::set_response_code(const char* value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
inline void AddFileToDfsResponse::set_response_code(const void* value, size_t size) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
inline ::std::string* AddFileToDfsResponse::mutable_response_code() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
  return response_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFileToDfsResponse::release_response_code() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
  
  return response_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsResponse::set_allocated_response_code(::std::string* response_code) {
  if (response_code != NULL) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}

// string dfs_hash = 2;
inline void AddFileToDfsResponse::clear_dfs_hash() {
  dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFileToDfsResponse::dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
  return dfs_hash_.GetNoArena();
}
inline void AddFileToDfsResponse::set_dfs_hash(const ::std::string& value) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
#if LANG_CXX11
inline void AddFileToDfsResponse::set_dfs_hash(::std::string&& value) {
  
  dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
#endif
inline void AddFileToDfsResponse::set_dfs_hash(const char* value) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
inline void AddFileToDfsResponse::set_dfs_hash(const char* value, size_t size) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
inline ::std::string* AddFileToDfsResponse::mutable_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
  return dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFileToDfsResponse::release_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
  
  return dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsResponse::set_allocated_dfs_hash(::std::string* dfs_hash) {
  if (dfs_hash != NULL) {
    
  } else {
    
  }
  dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}

// -------------------------------------------------------------------

// TransferFileBytesRequest

// uint32 chunk_id = 1;
inline void TransferFileBytesRequest::clear_chunk_id() {
  chunk_id_ = 0u;
}
inline ::google::protobuf::uint32 TransferFileBytesRequest::chunk_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_id)
  return chunk_id_;
}
inline void TransferFileBytesRequest::set_chunk_id(::google::protobuf::uint32 value) {
  
  chunk_id_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_id)
}

// bytes chunk_bytes = 2;
inline void TransferFileBytesRequest::clear_chunk_bytes() {
  chunk_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferFileBytesRequest::chunk_bytes() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
  return chunk_bytes_.GetNoArena();
}
inline void TransferFileBytesRequest::set_chunk_bytes(const ::std::string& value) {
  
  chunk_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
#if LANG_CXX11
inline void TransferFileBytesRequest::set_chunk_bytes(::std::string&& value) {
  
  chunk_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
#endif
inline void TransferFileBytesRequest::set_chunk_bytes(const char* value) {
  
  chunk_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
inline void TransferFileBytesRequest::set_chunk_bytes(const void* value, size_t size) {
  
  chunk_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
inline ::std::string* TransferFileBytesRequest::mutable_chunk_bytes() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
  return chunk_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferFileBytesRequest::release_chunk_bytes() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
  
  return chunk_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferFileBytesRequest::set_allocated_chunk_bytes(::std::string* chunk_bytes) {
  if (chunk_bytes != NULL) {
    
  } else {
    
  }
  chunk_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chunk_bytes);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}

// bytes correlation_file_name = 3;
inline void TransferFileBytesRequest::clear_correlation_file_name() {
  correlation_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferFileBytesRequest::correlation_file_name() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
  return correlation_file_name_.GetNoArena();
}
inline void TransferFileBytesRequest::set_correlation_file_name(const ::std::string& value) {
  
  correlation_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
#if LANG_CXX11
inline void TransferFileBytesRequest::set_correlation_file_name(::std::string&& value) {
  
  correlation_file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
#endif
inline void TransferFileBytesRequest::set_correlation_file_name(const char* value) {
  
  correlation_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
inline void TransferFileBytesRequest::set_correlation_file_name(const void* value, size_t size) {
  
  correlation_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
inline ::std::string* TransferFileBytesRequest::mutable_correlation_file_name() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
  return correlation_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferFileBytesRequest::release_correlation_file_name() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
  
  return correlation_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferFileBytesRequest::set_allocated_correlation_file_name(::std::string* correlation_file_name) {
  if (correlation_file_name != NULL) {
    
  } else {
    
  }
  correlation_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlation_file_name);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}

// -------------------------------------------------------------------

// TransferFileBytesResponse

// bytes response_code = 1;
inline void TransferFileBytesResponse::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferFileBytesResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
  return response_code_.GetNoArena();
}
inline void TransferFileBytesResponse::set_response_code(const ::std::string& value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
#if LANG_CXX11
inline void TransferFileBytesResponse::set_response_code(::std::string&& value) {
  
  response_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
#endif
inline void TransferFileBytesResponse::set_response_code(const char* value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
inline void TransferFileBytesResponse::set_response_code(const void* value, size_t size) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
inline ::std::string* TransferFileBytesResponse::mutable_response_code() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
  return response_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferFileBytesResponse::release_response_code() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
  
  return response_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferFileBytesResponse::set_allocated_response_code(::std::string* response_code) {
  if (response_code != NULL) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}

// -------------------------------------------------------------------

// RemovePeerRequest

// bytes peer_ip = 1;
inline void RemovePeerRequest::clear_peer_ip() {
  peer_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemovePeerRequest::peer_ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
  return peer_ip_.GetNoArena();
}
inline void RemovePeerRequest::set_peer_ip(const ::std::string& value) {
  
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
#if LANG_CXX11
inline void RemovePeerRequest::set_peer_ip(::std::string&& value) {
  
  peer_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
#endif
inline void RemovePeerRequest::set_peer_ip(const char* value) {
  
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
inline void RemovePeerRequest::set_peer_ip(const void* value, size_t size) {
  
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
inline ::std::string* RemovePeerRequest::mutable_peer_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
  return peer_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePeerRequest::release_peer_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
  
  return peer_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeerRequest::set_allocated_peer_ip(::std::string* peer_ip) {
  if (peer_ip != NULL) {
    
  } else {
    
  }
  peer_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}

// bytes public_key = 2;
inline void RemovePeerRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemovePeerRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
  return public_key_.GetNoArena();
}
inline void RemovePeerRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
#if LANG_CXX11
inline void RemovePeerRequest::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
#endif
inline void RemovePeerRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
inline void RemovePeerRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
inline ::std::string* RemovePeerRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePeerRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeerRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}

// -------------------------------------------------------------------

// RemovePeerResponse

// uint32 deleted_count = 1;
inline void RemovePeerResponse::clear_deleted_count() {
  deleted_count_ = 0u;
}
inline ::google::protobuf::uint32 RemovePeerResponse::deleted_count() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerResponse.deleted_count)
  return deleted_count_;
}
inline void RemovePeerResponse::set_deleted_count(::google::protobuf::uint32 value) {
  
  deleted_count_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerResponse.deleted_count)
}

// -------------------------------------------------------------------

// GetPeerCountRequest

// -------------------------------------------------------------------

// GetPeerCountResponse

// int32 peer_count = 1;
inline void GetPeerCountResponse::clear_peer_count() {
  peer_count_ = 0;
}
inline ::google::protobuf::int32 GetPeerCountResponse::peer_count() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse.peer_count)
  return peer_count_;
}
inline void GetPeerCountResponse::set_peer_count(::google::protobuf::int32 value) {
  
  peer_count_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse.peer_count)
}

// -------------------------------------------------------------------

// GetFileFromDfsRequest

// string dfs_hash = 1;
inline void GetFileFromDfsRequest::clear_dfs_hash() {
  dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFileFromDfsRequest::dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
  return dfs_hash_.GetNoArena();
}
inline void GetFileFromDfsRequest::set_dfs_hash(const ::std::string& value) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
#if LANG_CXX11
inline void GetFileFromDfsRequest::set_dfs_hash(::std::string&& value) {
  
  dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
#endif
inline void GetFileFromDfsRequest::set_dfs_hash(const char* value) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
inline void GetFileFromDfsRequest::set_dfs_hash(const char* value, size_t size) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
inline ::std::string* GetFileFromDfsRequest::mutable_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
  return dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFileFromDfsRequest::release_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
  
  return dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileFromDfsRequest::set_allocated_dfs_hash(::std::string* dfs_hash) {
  if (dfs_hash != NULL) {
    
  } else {
    
  }
  dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}

// -------------------------------------------------------------------

// GetFileFromDfsResponse

// uint64 file_size = 1;
inline void GetFileFromDfsResponse::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetFileFromDfsResponse::file_size() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.file_size)
  return file_size_;
}
inline void GetFileFromDfsResponse::set_file_size(::google::protobuf::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.file_size)
}

// bytes response_code = 2;
inline void GetFileFromDfsResponse::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFileFromDfsResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
  return response_code_.GetNoArena();
}
inline void GetFileFromDfsResponse::set_response_code(const ::std::string& value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
#if LANG_CXX11
inline void GetFileFromDfsResponse::set_response_code(::std::string&& value) {
  
  response_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
#endif
inline void GetFileFromDfsResponse::set_response_code(const char* value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
inline void GetFileFromDfsResponse::set_response_code(const void* value, size_t size) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
inline ::std::string* GetFileFromDfsResponse::mutable_response_code() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
  return response_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFileFromDfsResponse::release_response_code() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
  
  return response_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileFromDfsResponse::set_allocated_response_code(::std::string* response_code) {
  if (response_code != NULL) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}

// -------------------------------------------------------------------

// SetPeerDataFolderRequest

// string data_folder = 1;
inline void SetPeerDataFolderRequest::clear_data_folder() {
  data_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPeerDataFolderRequest::data_folder() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
  return data_folder_.GetNoArena();
}
inline void SetPeerDataFolderRequest::set_data_folder(const ::std::string& value) {
  
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
#if LANG_CXX11
inline void SetPeerDataFolderRequest::set_data_folder(::std::string&& value) {
  
  data_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
#endif
inline void SetPeerDataFolderRequest::set_data_folder(const char* value) {
  
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
inline void SetPeerDataFolderRequest::set_data_folder(const char* value, size_t size) {
  
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
inline ::std::string* SetPeerDataFolderRequest::mutable_data_folder() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
  return data_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPeerDataFolderRequest::release_data_folder() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
  
  return data_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerDataFolderRequest::set_allocated_data_folder(::std::string* data_folder) {
  if (data_folder != NULL) {
    
  } else {
    
  }
  data_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_folder);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}

// -------------------------------------------------------------------

// SetPeerDataFolderResponse

// bool query = 1;
inline void SetPeerDataFolderResponse::clear_query() {
  query_ = false;
}
inline bool SetPeerDataFolderResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse.query)
  return query_;
}
inline void SetPeerDataFolderResponse::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse.query)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Node
}  // namespace Rpc
}  // namespace Protocol
}  // namespace Catalyst

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Catalyst::Protocol::Rpc::Node::ResponseCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Rpc::Node::ResponseCode>() {
  return ::Catalyst::Protocol::Rpc::Node::ResponseCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Rpc_2eproto__INCLUDED
