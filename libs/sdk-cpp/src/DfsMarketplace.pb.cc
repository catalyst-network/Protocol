// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DfsMarketplace.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DfsMarketplace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {
class BlockChallengeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockChallengeRequest> {
} _BlockChallengeRequest_default_instance_;
class BlockChallengeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockChallengeResponse> {
} _BlockChallengeResponse_default_instance_;
class BlockChallengeBroadcastDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockChallengeBroadcast> {
} _BlockChallengeBroadcast_default_instance_;

namespace protobuf_DfsMarketplace_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeRequest, challenge_salt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeRequest, main_file_cid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeRequest, block_idx_random_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeResponse, answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeResponse, block_challenge_request_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeBroadcast, original_challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeBroadcast, answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeBroadcast, challenged_peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChallengeBroadcast, challenged_by_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(BlockChallengeRequest)},
  { 7, -1, sizeof(BlockChallengeResponse)},
  { 13, -1, sizeof(BlockChallengeBroadcast)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockChallengeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockChallengeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockChallengeBroadcast_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "DfsMarketplace.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _BlockChallengeRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BlockChallengeResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BlockChallengeBroadcast_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Catalyst::Protocol::Peer::protobuf_Peer_2eproto::InitDefaults();
  _BlockChallengeRequest_default_instance_.DefaultConstruct();
  _BlockChallengeResponse_default_instance_.DefaultConstruct();
  _BlockChallengeBroadcast_default_instance_.DefaultConstruct();
  _BlockChallengeBroadcast_default_instance_.get_mutable()->original_challenge_ = const_cast< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest*>(
      ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest::internal_default_instance());
  _BlockChallengeBroadcast_default_instance_.get_mutable()->challenged_peer_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
  _BlockChallengeBroadcast_default_instance_.get_mutable()->challenged_by_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024DfsMarketplace.proto\022 Catalyst.Protoco"
      "l.DfsMarketplace\032\nPeer.proto\"e\n\025BlockCha"
      "llengeRequest\022\026\n\016challenge_salt\030\001 \001(\t\022\025\n"
      "\rmain_file_cid\030\002 \001(\t\022\035\n\025block_idx_random"
      "_guid\030\003 \001(\014\"N\n\026BlockChallengeResponse\022\016\n"
      "\006answer\030\001 \001(\t\022$\n\034block_challenge_request"
      "_hash\030\002 \001(\t\"\356\001\n\027BlockChallengeBroadcast\022"
      "S\n\022original_challenge\030\001 \001(\01327.Catalyst.P"
      "rotocol.DfsMarketplace.BlockChallengeReq"
      "uest\022\016\n\006answer\030\002 \001(\t\0227\n\017challenged_peer\030"
      "\003 \001(\0132\036.Catalyst.Protocol.Peer.PeerId\0225\n"
      "\rchallenged_by\030\004 \001(\0132\036.Catalyst.Protocol"
      ".Peer.PeerIdB\002P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DfsMarketplace.proto", &protobuf_RegisterTypes);
  ::Catalyst::Protocol::Peer::protobuf_Peer_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_DfsMarketplace_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockChallengeRequest::kChallengeSaltFieldNumber;
const int BlockChallengeRequest::kMainFileCidFieldNumber;
const int BlockChallengeRequest::kBlockIdxRandomGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockChallengeRequest::BlockChallengeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DfsMarketplace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
}
BlockChallengeRequest::BlockChallengeRequest(const BlockChallengeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  challenge_salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.challenge_salt().size() > 0) {
    challenge_salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_salt_);
  }
  main_file_cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.main_file_cid().size() > 0) {
    main_file_cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_file_cid_);
  }
  block_idx_random_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.block_idx_random_guid().size() > 0) {
    block_idx_random_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_idx_random_guid_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
}

void BlockChallengeRequest::SharedCtor() {
  challenge_salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  main_file_cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_idx_random_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BlockChallengeRequest::~BlockChallengeRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  SharedDtor();
}

void BlockChallengeRequest::SharedDtor() {
  challenge_salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  main_file_cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_idx_random_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlockChallengeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockChallengeRequest::descriptor() {
  protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DfsMarketplace_2eproto::file_level_metadata[0].descriptor;
}

const BlockChallengeRequest& BlockChallengeRequest::default_instance() {
  protobuf_DfsMarketplace_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockChallengeRequest* BlockChallengeRequest::New(::google::protobuf::Arena* arena) const {
  BlockChallengeRequest* n = new BlockChallengeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockChallengeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  challenge_salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  main_file_cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_idx_random_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BlockChallengeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string challenge_salt = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenge_salt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->challenge_salt().data(), this->challenge_salt().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string main_file_cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_file_cid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->main_file_cid().data(), this->main_file_cid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes block_idx_random_guid = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block_idx_random_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  return false;
#undef DO_
}

void BlockChallengeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  // string challenge_salt = 1;
  if (this->challenge_salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->challenge_salt().data(), this->challenge_salt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->challenge_salt(), output);
  }

  // string main_file_cid = 2;
  if (this->main_file_cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->main_file_cid().data(), this->main_file_cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->main_file_cid(), output);
  }

  // bytes block_idx_random_guid = 3;
  if (this->block_idx_random_guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->block_idx_random_guid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
}

::google::protobuf::uint8* BlockChallengeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  // string challenge_salt = 1;
  if (this->challenge_salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->challenge_salt().data(), this->challenge_salt().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->challenge_salt(), target);
  }

  // string main_file_cid = 2;
  if (this->main_file_cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->main_file_cid().data(), this->main_file_cid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->main_file_cid(), target);
  }

  // bytes block_idx_random_guid = 3;
  if (this->block_idx_random_guid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->block_idx_random_guid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  return target;
}

size_t BlockChallengeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  size_t total_size = 0;

  // string challenge_salt = 1;
  if (this->challenge_salt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->challenge_salt());
  }

  // string main_file_cid = 2;
  if (this->main_file_cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->main_file_cid());
  }

  // bytes block_idx_random_guid = 3;
  if (this->block_idx_random_guid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->block_idx_random_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockChallengeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockChallengeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockChallengeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
    MergeFrom(*source);
  }
}

void BlockChallengeRequest::MergeFrom(const BlockChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.challenge_salt().size() > 0) {

    challenge_salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_salt_);
  }
  if (from.main_file_cid().size() > 0) {

    main_file_cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_file_cid_);
  }
  if (from.block_idx_random_guid().size() > 0) {

    block_idx_random_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_idx_random_guid_);
  }
}

void BlockChallengeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChallengeRequest::CopyFrom(const BlockChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChallengeRequest::IsInitialized() const {
  return true;
}

void BlockChallengeRequest::Swap(BlockChallengeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockChallengeRequest::InternalSwap(BlockChallengeRequest* other) {
  challenge_salt_.Swap(&other->challenge_salt_);
  main_file_cid_.Swap(&other->main_file_cid_);
  block_idx_random_guid_.Swap(&other->block_idx_random_guid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockChallengeRequest::GetMetadata() const {
  protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DfsMarketplace_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockChallengeRequest

// string challenge_salt = 1;
void BlockChallengeRequest::clear_challenge_salt() {
  challenge_salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockChallengeRequest::challenge_salt() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
  return challenge_salt_.GetNoArena();
}
void BlockChallengeRequest::set_challenge_salt(const ::std::string& value) {
  
  challenge_salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
#if LANG_CXX11
void BlockChallengeRequest::set_challenge_salt(::std::string&& value) {
  
  challenge_salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
#endif
void BlockChallengeRequest::set_challenge_salt(const char* value) {
  
  challenge_salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
void BlockChallengeRequest::set_challenge_salt(const char* value, size_t size) {
  
  challenge_salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
::std::string* BlockChallengeRequest::mutable_challenge_salt() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
  return challenge_salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockChallengeRequest::release_challenge_salt() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
  
  return challenge_salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockChallengeRequest::set_allocated_challenge_salt(::std::string* challenge_salt) {
  if (challenge_salt != NULL) {
    
  } else {
    
  }
  challenge_salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), challenge_salt);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}

// string main_file_cid = 2;
void BlockChallengeRequest::clear_main_file_cid() {
  main_file_cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockChallengeRequest::main_file_cid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
  return main_file_cid_.GetNoArena();
}
void BlockChallengeRequest::set_main_file_cid(const ::std::string& value) {
  
  main_file_cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
#if LANG_CXX11
void BlockChallengeRequest::set_main_file_cid(::std::string&& value) {
  
  main_file_cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
#endif
void BlockChallengeRequest::set_main_file_cid(const char* value) {
  
  main_file_cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
void BlockChallengeRequest::set_main_file_cid(const char* value, size_t size) {
  
  main_file_cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
::std::string* BlockChallengeRequest::mutable_main_file_cid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
  return main_file_cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockChallengeRequest::release_main_file_cid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
  
  return main_file_cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockChallengeRequest::set_allocated_main_file_cid(::std::string* main_file_cid) {
  if (main_file_cid != NULL) {
    
  } else {
    
  }
  main_file_cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_file_cid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}

// bytes block_idx_random_guid = 3;
void BlockChallengeRequest::clear_block_idx_random_guid() {
  block_idx_random_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockChallengeRequest::block_idx_random_guid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
  return block_idx_random_guid_.GetNoArena();
}
void BlockChallengeRequest::set_block_idx_random_guid(const ::std::string& value) {
  
  block_idx_random_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
#if LANG_CXX11
void BlockChallengeRequest::set_block_idx_random_guid(::std::string&& value) {
  
  block_idx_random_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
#endif
void BlockChallengeRequest::set_block_idx_random_guid(const char* value) {
  
  block_idx_random_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
void BlockChallengeRequest::set_block_idx_random_guid(const void* value, size_t size) {
  
  block_idx_random_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
::std::string* BlockChallengeRequest::mutable_block_idx_random_guid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
  return block_idx_random_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockChallengeRequest::release_block_idx_random_guid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
  
  return block_idx_random_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockChallengeRequest::set_allocated_block_idx_random_guid(::std::string* block_idx_random_guid) {
  if (block_idx_random_guid != NULL) {
    
  } else {
    
  }
  block_idx_random_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_idx_random_guid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockChallengeResponse::kAnswerFieldNumber;
const int BlockChallengeResponse::kBlockChallengeRequestHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockChallengeResponse::BlockChallengeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DfsMarketplace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
}
BlockChallengeResponse::BlockChallengeResponse(const BlockChallengeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.answer().size() > 0) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  block_challenge_request_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.block_challenge_request_hash().size() > 0) {
    block_challenge_request_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_challenge_request_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
}

void BlockChallengeResponse::SharedCtor() {
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_challenge_request_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BlockChallengeResponse::~BlockChallengeResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  SharedDtor();
}

void BlockChallengeResponse::SharedDtor() {
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_challenge_request_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlockChallengeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockChallengeResponse::descriptor() {
  protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DfsMarketplace_2eproto::file_level_metadata[1].descriptor;
}

const BlockChallengeResponse& BlockChallengeResponse::default_instance() {
  protobuf_DfsMarketplace_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockChallengeResponse* BlockChallengeResponse::New(::google::protobuf::Arena* arena) const {
  BlockChallengeResponse* n = new BlockChallengeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_challenge_request_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BlockChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string answer = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string block_challenge_request_hash = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_challenge_request_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->block_challenge_request_hash().data(), this->block_challenge_request_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  return false;
#undef DO_
}

void BlockChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  // string answer = 1;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->answer(), output);
  }

  // string block_challenge_request_hash = 2;
  if (this->block_challenge_request_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->block_challenge_request_hash().data(), this->block_challenge_request_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->block_challenge_request_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
}

::google::protobuf::uint8* BlockChallengeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  // string answer = 1;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer(), target);
  }

  // string block_challenge_request_hash = 2;
  if (this->block_challenge_request_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->block_challenge_request_hash().data(), this->block_challenge_request_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->block_challenge_request_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  return target;
}

size_t BlockChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  size_t total_size = 0;

  // string answer = 1;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->answer());
  }

  // string block_challenge_request_hash = 2;
  if (this->block_challenge_request_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->block_challenge_request_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockChallengeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockChallengeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
    MergeFrom(*source);
  }
}

void BlockChallengeResponse::MergeFrom(const BlockChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.block_challenge_request_hash().size() > 0) {

    block_challenge_request_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_challenge_request_hash_);
  }
}

void BlockChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChallengeResponse::CopyFrom(const BlockChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChallengeResponse::IsInitialized() const {
  return true;
}

void BlockChallengeResponse::Swap(BlockChallengeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockChallengeResponse::InternalSwap(BlockChallengeResponse* other) {
  answer_.Swap(&other->answer_);
  block_challenge_request_hash_.Swap(&other->block_challenge_request_hash_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockChallengeResponse::GetMetadata() const {
  protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DfsMarketplace_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockChallengeResponse

// string answer = 1;
void BlockChallengeResponse::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockChallengeResponse::answer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  return answer_.GetNoArena();
}
void BlockChallengeResponse::set_answer(const ::std::string& value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
#if LANG_CXX11
void BlockChallengeResponse::set_answer(::std::string&& value) {
  
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
#endif
void BlockChallengeResponse::set_answer(const char* value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
void BlockChallengeResponse::set_answer(const char* value, size_t size) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
::std::string* BlockChallengeResponse::mutable_answer() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockChallengeResponse::release_answer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockChallengeResponse::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}

// string block_challenge_request_hash = 2;
void BlockChallengeResponse::clear_block_challenge_request_hash() {
  block_challenge_request_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockChallengeResponse::block_challenge_request_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
  return block_challenge_request_hash_.GetNoArena();
}
void BlockChallengeResponse::set_block_challenge_request_hash(const ::std::string& value) {
  
  block_challenge_request_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
#if LANG_CXX11
void BlockChallengeResponse::set_block_challenge_request_hash(::std::string&& value) {
  
  block_challenge_request_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
#endif
void BlockChallengeResponse::set_block_challenge_request_hash(const char* value) {
  
  block_challenge_request_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
void BlockChallengeResponse::set_block_challenge_request_hash(const char* value, size_t size) {
  
  block_challenge_request_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
::std::string* BlockChallengeResponse::mutable_block_challenge_request_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
  return block_challenge_request_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockChallengeResponse::release_block_challenge_request_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
  
  return block_challenge_request_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockChallengeResponse::set_allocated_block_challenge_request_hash(::std::string* block_challenge_request_hash) {
  if (block_challenge_request_hash != NULL) {
    
  } else {
    
  }
  block_challenge_request_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_challenge_request_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockChallengeBroadcast::kOriginalChallengeFieldNumber;
const int BlockChallengeBroadcast::kAnswerFieldNumber;
const int BlockChallengeBroadcast::kChallengedPeerFieldNumber;
const int BlockChallengeBroadcast::kChallengedByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockChallengeBroadcast::BlockChallengeBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DfsMarketplace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
}
BlockChallengeBroadcast::BlockChallengeBroadcast(const BlockChallengeBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.answer().size() > 0) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.has_original_challenge()) {
    original_challenge_ = new ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest(*from.original_challenge_);
  } else {
    original_challenge_ = NULL;
  }
  if (from.has_challenged_peer()) {
    challenged_peer_ = new ::Catalyst::Protocol::Peer::PeerId(*from.challenged_peer_);
  } else {
    challenged_peer_ = NULL;
  }
  if (from.has_challenged_by()) {
    challenged_by_ = new ::Catalyst::Protocol::Peer::PeerId(*from.challenged_by_);
  } else {
    challenged_by_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
}

void BlockChallengeBroadcast::SharedCtor() {
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&original_challenge_, 0, reinterpret_cast<char*>(&challenged_by_) -
    reinterpret_cast<char*>(&original_challenge_) + sizeof(challenged_by_));
  _cached_size_ = 0;
}

BlockChallengeBroadcast::~BlockChallengeBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  SharedDtor();
}

void BlockChallengeBroadcast::SharedDtor() {
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete original_challenge_;
  }
  if (this != internal_default_instance()) {
    delete challenged_peer_;
  }
  if (this != internal_default_instance()) {
    delete challenged_by_;
  }
}

void BlockChallengeBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockChallengeBroadcast::descriptor() {
  protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DfsMarketplace_2eproto::file_level_metadata[2].descriptor;
}

const BlockChallengeBroadcast& BlockChallengeBroadcast::default_instance() {
  protobuf_DfsMarketplace_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockChallengeBroadcast* BlockChallengeBroadcast::New(::google::protobuf::Arena* arena) const {
  BlockChallengeBroadcast* n = new BlockChallengeBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockChallengeBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && original_challenge_ != NULL) {
    delete original_challenge_;
  }
  original_challenge_ = NULL;
  if (GetArenaNoVirtual() == NULL && challenged_peer_ != NULL) {
    delete challenged_peer_;
  }
  challenged_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && challenged_by_ != NULL) {
    delete challenged_by_;
  }
  challenged_by_ = NULL;
}

bool BlockChallengeBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string answer = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenged_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenged_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  return false;
#undef DO_
}

void BlockChallengeBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
  if (this->has_original_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->original_challenge_, output);
  }

  // string answer = 2;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->answer(), output);
  }

  // .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
  if (this->has_challenged_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->challenged_peer_, output);
  }

  // .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
  if (this->has_challenged_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->challenged_by_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
}

::google::protobuf::uint8* BlockChallengeBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
  if (this->has_original_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->original_challenge_, false, target);
  }

  // string answer = 2;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->answer(), target);
  }

  // .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
  if (this->has_challenged_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->challenged_peer_, false, target);
  }

  // .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
  if (this->has_challenged_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->challenged_by_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  return target;
}

size_t BlockChallengeBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  size_t total_size = 0;

  // string answer = 2;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->answer());
  }

  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
  if (this->has_original_challenge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->original_challenge_);
  }

  // .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
  if (this->has_challenged_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->challenged_peer_);
  }

  // .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
  if (this->has_challenged_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->challenged_by_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockChallengeBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockChallengeBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockChallengeBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
    MergeFrom(*source);
  }
}

void BlockChallengeBroadcast::MergeFrom(const BlockChallengeBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.has_original_challenge()) {
    mutable_original_challenge()->::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest::MergeFrom(from.original_challenge());
  }
  if (from.has_challenged_peer()) {
    mutable_challenged_peer()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from.challenged_peer());
  }
  if (from.has_challenged_by()) {
    mutable_challenged_by()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from.challenged_by());
  }
}

void BlockChallengeBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChallengeBroadcast::CopyFrom(const BlockChallengeBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChallengeBroadcast::IsInitialized() const {
  return true;
}

void BlockChallengeBroadcast::Swap(BlockChallengeBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockChallengeBroadcast::InternalSwap(BlockChallengeBroadcast* other) {
  answer_.Swap(&other->answer_);
  std::swap(original_challenge_, other->original_challenge_);
  std::swap(challenged_peer_, other->challenged_peer_);
  std::swap(challenged_by_, other->challenged_by_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockChallengeBroadcast::GetMetadata() const {
  protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DfsMarketplace_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockChallengeBroadcast

// .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
bool BlockChallengeBroadcast::has_original_challenge() const {
  return this != internal_default_instance() && original_challenge_ != NULL;
}
void BlockChallengeBroadcast::clear_original_challenge() {
  if (GetArenaNoVirtual() == NULL && original_challenge_ != NULL) delete original_challenge_;
  original_challenge_ = NULL;
}
const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& BlockChallengeBroadcast::original_challenge() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
  return original_challenge_ != NULL ? *original_challenge_
                         : *::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest::internal_default_instance();
}
::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* BlockChallengeBroadcast::mutable_original_challenge() {
  
  if (original_challenge_ == NULL) {
    original_challenge_ = new ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
  return original_challenge_;
}
::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* BlockChallengeBroadcast::release_original_challenge() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
  
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* temp = original_challenge_;
  original_challenge_ = NULL;
  return temp;
}
void BlockChallengeBroadcast::set_allocated_original_challenge(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* original_challenge) {
  delete original_challenge_;
  original_challenge_ = original_challenge;
  if (original_challenge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
}

// string answer = 2;
void BlockChallengeBroadcast::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockChallengeBroadcast::answer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  return answer_.GetNoArena();
}
void BlockChallengeBroadcast::set_answer(const ::std::string& value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
#if LANG_CXX11
void BlockChallengeBroadcast::set_answer(::std::string&& value) {
  
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
#endif
void BlockChallengeBroadcast::set_answer(const char* value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
void BlockChallengeBroadcast::set_answer(const char* value, size_t size) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
::std::string* BlockChallengeBroadcast::mutable_answer() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockChallengeBroadcast::release_answer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockChallengeBroadcast::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}

// .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
bool BlockChallengeBroadcast::has_challenged_peer() const {
  return this != internal_default_instance() && challenged_peer_ != NULL;
}
void BlockChallengeBroadcast::clear_challenged_peer() {
  if (GetArenaNoVirtual() == NULL && challenged_peer_ != NULL) delete challenged_peer_;
  challenged_peer_ = NULL;
}
const ::Catalyst::Protocol::Peer::PeerId& BlockChallengeBroadcast::challenged_peer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
  return challenged_peer_ != NULL ? *challenged_peer_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::mutable_challenged_peer() {
  
  if (challenged_peer_ == NULL) {
    challenged_peer_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
  return challenged_peer_;
}
::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::release_challenged_peer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = challenged_peer_;
  challenged_peer_ = NULL;
  return temp;
}
void BlockChallengeBroadcast::set_allocated_challenged_peer(::Catalyst::Protocol::Peer::PeerId* challenged_peer) {
  delete challenged_peer_;
  challenged_peer_ = challenged_peer;
  if (challenged_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
}

// .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
bool BlockChallengeBroadcast::has_challenged_by() const {
  return this != internal_default_instance() && challenged_by_ != NULL;
}
void BlockChallengeBroadcast::clear_challenged_by() {
  if (GetArenaNoVirtual() == NULL && challenged_by_ != NULL) delete challenged_by_;
  challenged_by_ = NULL;
}
const ::Catalyst::Protocol::Peer::PeerId& BlockChallengeBroadcast::challenged_by() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
  return challenged_by_ != NULL ? *challenged_by_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::mutable_challenged_by() {
  
  if (challenged_by_ == NULL) {
    challenged_by_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
  return challenged_by_;
}
::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::release_challenged_by() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = challenged_by_;
  challenged_by_ = NULL;
  return temp;
}
void BlockChallengeBroadcast::set_allocated_challenged_by(::Catalyst::Protocol::Peer::PeerId* challenged_by) {
  delete challenged_by_;
  challenged_by_ = challenged_by;
  if (challenged_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace DfsMarketplace
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)
