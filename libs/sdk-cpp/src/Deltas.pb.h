// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Deltas.proto

#ifndef PROTOBUF_Deltas_2eproto__INCLUDED
#define PROTOBUF_Deltas_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Transaction.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace Catalyst {
namespace Protocol {
namespace Deltas {
class Delta;
class DeltaDefaultTypeInternal;
extern DeltaDefaultTypeInternal _Delta_default_instance_;
class DeltaIndex;
class DeltaIndexDefaultTypeInternal;
extern DeltaIndexDefaultTypeInternal _DeltaIndex_default_instance_;
}  // namespace Deltas
namespace Transaction {
class BaseEntry;
class BaseEntryDefaultTypeInternal;
extern BaseEntryDefaultTypeInternal _BaseEntry_default_instance_;
class CoinbaseEntry;
class CoinbaseEntryDefaultTypeInternal;
extern CoinbaseEntryDefaultTypeInternal _CoinbaseEntry_default_instance_;
class ConfidentialEntry;
class ConfidentialEntryDefaultTypeInternal;
extern ConfidentialEntryDefaultTypeInternal _ConfidentialEntry_default_instance_;
class PublicEntry;
class PublicEntryDefaultTypeInternal;
extern PublicEntryDefaultTypeInternal _PublicEntry_default_instance_;
class RangeProof;
class RangeProofDefaultTypeInternal;
extern RangeProofDefaultTypeInternal _RangeProof_default_instance_;
}  // namespace Transaction
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace Catalyst {
namespace Protocol {
namespace Deltas {

namespace protobuf_Deltas_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Deltas_2eproto

// ===================================================================

class DeltaIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Deltas.DeltaIndex) */ {
 public:
  DeltaIndex();
  virtual ~DeltaIndex();

  DeltaIndex(const DeltaIndex& from);

  inline DeltaIndex& operator=(const DeltaIndex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeltaIndex& default_instance();

  static inline const DeltaIndex* internal_default_instance() {
    return reinterpret_cast<const DeltaIndex*>(
               &_DeltaIndex_default_instance_);
  }

  void Swap(DeltaIndex* other);

  // implements Message ----------------------------------------------

  inline DeltaIndex* New() const PROTOBUF_FINAL { return New(NULL); }

  DeltaIndex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeltaIndex& from);
  void MergeFrom(const DeltaIndex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeltaIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes cid = 2;
  void clear_cid();
  static const int kCidFieldNumber = 2;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const void* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // uint32 height = 1;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Deltas.DeltaIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct  protobuf_Deltas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Delta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Deltas.Delta) */ {
 public:
  Delta();
  virtual ~Delta();

  Delta(const Delta& from);

  inline Delta& operator=(const Delta& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Delta& default_instance();

  static inline const Delta* internal_default_instance() {
    return reinterpret_cast<const Delta*>(
               &_Delta_default_instance_);
  }

  void Swap(Delta* other);

  // implements Message ----------------------------------------------

  inline Delta* New() const PROTOBUF_FINAL { return New(NULL); }

  Delta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Delta& from);
  void MergeFrom(const Delta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Delta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Catalyst.Protocol.Transaction.PublicEntry public_entries = 5;
  int public_entries_size() const;
  void clear_public_entries();
  static const int kPublicEntriesFieldNumber = 5;
  const ::Catalyst::Protocol::Transaction::PublicEntry& public_entries(int index) const;
  ::Catalyst::Protocol::Transaction::PublicEntry* mutable_public_entries(int index);
  ::Catalyst::Protocol::Transaction::PublicEntry* add_public_entries();
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >*
      mutable_public_entries();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >&
      public_entries() const;

  // repeated .Catalyst.Protocol.Transaction.ConfidentialEntry confidential_entries = 6;
  int confidential_entries_size() const;
  void clear_confidential_entries();
  static const int kConfidentialEntriesFieldNumber = 6;
  const ::Catalyst::Protocol::Transaction::ConfidentialEntry& confidential_entries(int index) const;
  ::Catalyst::Protocol::Transaction::ConfidentialEntry* mutable_confidential_entries(int index);
  ::Catalyst::Protocol::Transaction::ConfidentialEntry* add_confidential_entries();
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry >*
      mutable_confidential_entries();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry >&
      confidential_entries() const;

  // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry coinbase_entries = 7;
  int coinbase_entries_size() const;
  void clear_coinbase_entries();
  static const int kCoinbaseEntriesFieldNumber = 7;
  const ::Catalyst::Protocol::Transaction::CoinbaseEntry& coinbase_entries(int index) const;
  ::Catalyst::Protocol::Transaction::CoinbaseEntry* mutable_coinbase_entries(int index);
  ::Catalyst::Protocol::Transaction::CoinbaseEntry* add_coinbase_entries();
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >*
      mutable_coinbase_entries();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >&
      coinbase_entries() const;

  // bytes previous_delta_dfs_hash = 1;
  void clear_previous_delta_dfs_hash();
  static const int kPreviousDeltaDfsHashFieldNumber = 1;
  const ::std::string& previous_delta_dfs_hash() const;
  void set_previous_delta_dfs_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_previous_delta_dfs_hash(::std::string&& value);
  #endif
  void set_previous_delta_dfs_hash(const char* value);
  void set_previous_delta_dfs_hash(const void* value, size_t size);
  ::std::string* mutable_previous_delta_dfs_hash();
  ::std::string* release_previous_delta_dfs_hash();
  void set_allocated_previous_delta_dfs_hash(::std::string* previous_delta_dfs_hash);

  // bytes merkle_root = 2;
  void clear_merkle_root();
  static const int kMerkleRootFieldNumber = 2;
  const ::std::string& merkle_root() const;
  void set_merkle_root(const ::std::string& value);
  #if LANG_CXX11
  void set_merkle_root(::std::string&& value);
  #endif
  void set_merkle_root(const char* value);
  void set_merkle_root(const void* value, size_t size);
  ::std::string* mutable_merkle_root();
  ::std::string* release_merkle_root();
  void set_allocated_merkle_root(::std::string* merkle_root);

  // bytes merkle_poda = 3;
  void clear_merkle_poda();
  static const int kMerklePodaFieldNumber = 3;
  const ::std::string& merkle_poda() const;
  void set_merkle_poda(const ::std::string& value);
  #if LANG_CXX11
  void set_merkle_poda(::std::string&& value);
  #endif
  void set_merkle_poda(const char* value);
  void set_merkle_poda(const void* value, size_t size);
  ::std::string* mutable_merkle_poda();
  ::std::string* release_merkle_poda();
  void set_allocated_merkle_poda(::std::string* merkle_poda);

  // .google.protobuf.Timestamp time_stamp = 4;
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 4;
  const ::google::protobuf::Timestamp& time_stamp() const;
  ::google::protobuf::Timestamp* mutable_time_stamp();
  ::google::protobuf::Timestamp* release_time_stamp();
  void set_allocated_time_stamp(::google::protobuf::Timestamp* time_stamp);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Deltas.Delta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry > public_entries_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry > confidential_entries_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry > coinbase_entries_;
  ::google::protobuf::internal::ArenaStringPtr previous_delta_dfs_hash_;
  ::google::protobuf::internal::ArenaStringPtr merkle_root_;
  ::google::protobuf::internal::ArenaStringPtr merkle_poda_;
  ::google::protobuf::Timestamp* time_stamp_;
  mutable int _cached_size_;
  friend struct  protobuf_Deltas_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DeltaIndex

// uint32 height = 1;
inline void DeltaIndex::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 DeltaIndex::height() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.DeltaIndex.height)
  return height_;
}
inline void DeltaIndex::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.DeltaIndex.height)
}

// bytes cid = 2;
inline void DeltaIndex::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeltaIndex::cid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.DeltaIndex.cid)
  return cid_.GetNoArena();
}
inline void DeltaIndex::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
#if LANG_CXX11
inline void DeltaIndex::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
#endif
inline void DeltaIndex::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
inline void DeltaIndex::set_cid(const void* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
inline ::std::string* DeltaIndex::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.DeltaIndex.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeltaIndex::release_cid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.DeltaIndex.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeltaIndex::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}

// -------------------------------------------------------------------

// Delta

// bytes previous_delta_dfs_hash = 1;
inline void Delta::clear_previous_delta_dfs_hash() {
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Delta::previous_delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.GetNoArena();
}
inline void Delta::set_previous_delta_dfs_hash(const ::std::string& value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
#if LANG_CXX11
inline void Delta::set_previous_delta_dfs_hash(::std::string&& value) {
  
  previous_delta_dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
#endif
inline void Delta::set_previous_delta_dfs_hash(const char* value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
inline void Delta::set_previous_delta_dfs_hash(const void* value, size_t size) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
inline ::std::string* Delta::mutable_previous_delta_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Delta::release_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
  
  return previous_delta_dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_previous_delta_dfs_hash(::std::string* previous_delta_dfs_hash) {
  if (previous_delta_dfs_hash != NULL) {
    
  } else {
    
  }
  previous_delta_dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}

// bytes merkle_root = 2;
inline void Delta::clear_merkle_root() {
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Delta::merkle_root() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.merkle_root)
  return merkle_root_.GetNoArena();
}
inline void Delta::set_merkle_root(const ::std::string& value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
#if LANG_CXX11
inline void Delta::set_merkle_root(::std::string&& value) {
  
  merkle_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
#endif
inline void Delta::set_merkle_root(const char* value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
inline void Delta::set_merkle_root(const void* value, size_t size) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
inline ::std::string* Delta::mutable_merkle_root() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.merkle_root)
  return merkle_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Delta::release_merkle_root() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.merkle_root)
  
  return merkle_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_merkle_root(::std::string* merkle_root) {
  if (merkle_root != NULL) {
    
  } else {
    
  }
  merkle_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle_root);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.merkle_root)
}

// bytes merkle_poda = 3;
inline void Delta::clear_merkle_poda() {
  merkle_poda_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Delta::merkle_poda() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.merkle_poda)
  return merkle_poda_.GetNoArena();
}
inline void Delta::set_merkle_poda(const ::std::string& value) {
  
  merkle_poda_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
#if LANG_CXX11
inline void Delta::set_merkle_poda(::std::string&& value) {
  
  merkle_poda_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
#endif
inline void Delta::set_merkle_poda(const char* value) {
  
  merkle_poda_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
inline void Delta::set_merkle_poda(const void* value, size_t size) {
  
  merkle_poda_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
inline ::std::string* Delta::mutable_merkle_poda() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.merkle_poda)
  return merkle_poda_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Delta::release_merkle_poda() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.merkle_poda)
  
  return merkle_poda_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_merkle_poda(::std::string* merkle_poda) {
  if (merkle_poda != NULL) {
    
  } else {
    
  }
  merkle_poda_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle_poda);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}

// .google.protobuf.Timestamp time_stamp = 4;
inline bool Delta::has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != NULL;
}
inline void Delta::clear_time_stamp() {
  if (GetArenaNoVirtual() == NULL && time_stamp_ != NULL) delete time_stamp_;
  time_stamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& Delta::time_stamp() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.time_stamp)
  return time_stamp_ != NULL ? *time_stamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* Delta::mutable_time_stamp() {
  
  if (time_stamp_ == NULL) {
    time_stamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.time_stamp)
  return time_stamp_;
}
inline ::google::protobuf::Timestamp* Delta::release_time_stamp() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.time_stamp)
  
  ::google::protobuf::Timestamp* temp = time_stamp_;
  time_stamp_ = NULL;
  return temp;
}
inline void Delta::set_allocated_time_stamp(::google::protobuf::Timestamp* time_stamp) {
  delete time_stamp_;
  if (time_stamp != NULL && time_stamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_time_stamp = new ::google::protobuf::Timestamp;
    new_time_stamp->CopyFrom(*time_stamp);
    time_stamp = new_time_stamp;
  }
  time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.time_stamp)
}

// repeated .Catalyst.Protocol.Transaction.PublicEntry public_entries = 5;
inline int Delta::public_entries_size() const {
  return public_entries_.size();
}
inline void Delta::clear_public_entries() {
  public_entries_.Clear();
}
inline const ::Catalyst::Protocol::Transaction::PublicEntry& Delta::public_entries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.public_entries)
  return public_entries_.Get(index);
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* Delta::mutable_public_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.public_entries)
  return public_entries_.Mutable(index);
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* Delta::add_public_entries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.public_entries)
  return public_entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >*
Delta::mutable_public_entries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.public_entries)
  return &public_entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >&
Delta::public_entries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.public_entries)
  return public_entries_;
}

// repeated .Catalyst.Protocol.Transaction.ConfidentialEntry confidential_entries = 6;
inline int Delta::confidential_entries_size() const {
  return confidential_entries_.size();
}
inline void Delta::clear_confidential_entries() {
  confidential_entries_.Clear();
}
inline const ::Catalyst::Protocol::Transaction::ConfidentialEntry& Delta::confidential_entries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return confidential_entries_.Get(index);
}
inline ::Catalyst::Protocol::Transaction::ConfidentialEntry* Delta::mutable_confidential_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return confidential_entries_.Mutable(index);
}
inline ::Catalyst::Protocol::Transaction::ConfidentialEntry* Delta::add_confidential_entries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return confidential_entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry >*
Delta::mutable_confidential_entries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return &confidential_entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry >&
Delta::confidential_entries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return confidential_entries_;
}

// repeated .Catalyst.Protocol.Transaction.CoinbaseEntry coinbase_entries = 7;
inline int Delta::coinbase_entries_size() const {
  return coinbase_entries_.size();
}
inline void Delta::clear_coinbase_entries() {
  coinbase_entries_.Clear();
}
inline const ::Catalyst::Protocol::Transaction::CoinbaseEntry& Delta::coinbase_entries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return coinbase_entries_.Get(index);
}
inline ::Catalyst::Protocol::Transaction::CoinbaseEntry* Delta::mutable_coinbase_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return coinbase_entries_.Mutable(index);
}
inline ::Catalyst::Protocol::Transaction::CoinbaseEntry* Delta::add_coinbase_entries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return coinbase_entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >*
Delta::mutable_coinbase_entries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return &coinbase_entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >&
Delta::coinbase_entries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return coinbase_entries_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Deltas
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Deltas_2eproto__INCLUDED
