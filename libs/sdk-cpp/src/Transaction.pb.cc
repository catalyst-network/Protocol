// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transaction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Transaction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Catalyst {
namespace Protocol {
namespace Transaction {
class PublicEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublicEntry> {
} _PublicEntry_default_instance_;
class ConfidentialEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfidentialEntry> {
} _ConfidentialEntry_default_instance_;
class BaseEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BaseEntry> {
} _BaseEntry_default_instance_;
class CoinbaseEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CoinbaseEntry> {
} _CoinbaseEntry_default_instance_;
class RangeProofDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RangeProof> {
} _RangeProof_default_instance_;

namespace protobuf_Transaction_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicEntry, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicEntry, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicEntry, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicEntry, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicEntry, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicEntry, gas_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicEntry, gas_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentialEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentialEntry, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentialEntry, pedersen_commitment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfidentialEntry, range_proof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEntry, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEntry, receiver_public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEntry, sender_public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEntry, transaction_fees_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinbaseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinbaseEntry, receiver_public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinbaseEntry, amount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, value_commitment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, bit_commitment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, per_bit_blinding_factor_commitment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, poly_commitment_t1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, poly_commitment_t2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, proof_of_share_tau_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, proof_of_share_mu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, aggregated_vector_polynomial_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, aggregated_vector_polynomial_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, a_prime_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, b_prime_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeProof, t_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PublicEntry)},
  { 11, -1, sizeof(ConfidentialEntry)},
  { 18, -1, sizeof(BaseEntry)},
  { 26, -1, sizeof(CoinbaseEntry)},
  { 32, -1, sizeof(RangeProof)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublicEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfidentialEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BaseEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CoinbaseEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeProof_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Transaction.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _PublicEntry_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ConfidentialEntry_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BaseEntry_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CoinbaseEntry_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RangeProof_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Catalyst::Protocol::Cryptography::protobuf_Cryptography_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _PublicEntry_default_instance_.DefaultConstruct();
  _ConfidentialEntry_default_instance_.DefaultConstruct();
  _BaseEntry_default_instance_.DefaultConstruct();
  _CoinbaseEntry_default_instance_.DefaultConstruct();
  _RangeProof_default_instance_.DefaultConstruct();
  _PublicEntry_default_instance_.get_mutable()->base_ = const_cast< ::Catalyst::Protocol::Transaction::BaseEntry*>(
      ::Catalyst::Protocol::Transaction::BaseEntry::internal_default_instance());
  _PublicEntry_default_instance_.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _PublicEntry_default_instance_.get_mutable()->signature_ = const_cast< ::Catalyst::Protocol::Cryptography::Signature*>(
      ::Catalyst::Protocol::Cryptography::Signature::internal_default_instance());
  _ConfidentialEntry_default_instance_.get_mutable()->base_ = const_cast< ::Catalyst::Protocol::Transaction::BaseEntry*>(
      ::Catalyst::Protocol::Transaction::BaseEntry::internal_default_instance());
  _ConfidentialEntry_default_instance_.get_mutable()->range_proof_ = const_cast< ::Catalyst::Protocol::Transaction::RangeProof*>(
      ::Catalyst::Protocol::Transaction::RangeProof::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021Transaction.proto\022\035Catalyst.Protocol.T"
      "ransaction\032\022Cryptography.proto\032\037google/p"
      "rotobuf/timestamp.proto\"\366\001\n\013PublicEntry\022"
      "6\n\004base\030\001 \001(\0132(.Catalyst.Protocol.Transa"
      "ction.BaseEntry\022\016\n\006amount\030\002 \001(\014\022\014\n\004data\030"
      "\003 \001(\014\022-\n\ttimestamp\030\004 \001(\0132\032.google.protob"
      "uf.Timestamp\022<\n\tsignature\030\005 \001(\0132).Cataly"
      "st.Protocol.Cryptography.Signature\022\021\n\tga"
      "s_price\030\006 \001(\014\022\021\n\tgas_limit\030\007 \001(\004\"\250\001\n\021Con"
      "fidentialEntry\0226\n\004base\030\001 \001(\0132(.Catalyst."
      "Protocol.Transaction.BaseEntry\022\033\n\023peders"
      "en_commitment\030\002 \001(\014\022>\n\013range_proof\030\003 \001(\013"
      "2).Catalyst.Protocol.Transaction.RangePr"
      "oof\"l\n\tBaseEntry\022\r\n\005nonce\030\001 \001(\004\022\033\n\023recei"
      "ver_public_key\030\002 \001(\014\022\031\n\021sender_public_ke"
      "y\030\003 \001(\014\022\030\n\020transaction_fees\030\004 \001(\014\"<\n\rCoi"
      "nbaseEntry\022\033\n\023receiver_public_key\030\001 \001(\014\022"
      "\016\n\006amount\030\002 \001(\014\"\332\002\n\nRangeProof\022\030\n\020value_"
      "commitment\030\001 \003(\014\022\026\n\016bit_commitment\030\002 \001(\014"
      "\022*\n\"per_bit_blinding_factor_commitment\030\003"
      " \001(\014\022\032\n\022poly_commitment_t1\030\004 \001(\014\022\032\n\022poly"
      "_commitment_t2\030\005 \001(\014\022\032\n\022proof_of_share_t"
      "au\030\006 \001(\014\022\031\n\021proof_of_share_mu\030\007 \001(\014\022&\n\036a"
      "ggregated_vector_polynomial_l\030\010 \003(\014\022&\n\036a"
      "ggregated_vector_polynomial_r\030\t \003(\014\022\021\n\ta"
      "_prime_0\030\n \001(\014\022\021\n\tb_prime_0\030\013 \001(\014\022\t\n\001t\030\014"
      " \001(\014*M\n\017TransactionType\022\034\n\030TRANSACTION_T"
      "YPE_UNKNOWN\020\000\022\n\n\006PUBLIC\020\001\022\020\n\014CONFIDENTIA"
      "L\020\002B\002P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Transaction.proto", &protobuf_RegisterTypes);
  ::Catalyst::Protocol::Cryptography::protobuf_Cryptography_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Transaction_2eproto

const ::google::protobuf::EnumDescriptor* TransactionType_descriptor() {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_enum_descriptors[0];
}
bool TransactionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicEntry::kBaseFieldNumber;
const int PublicEntry::kAmountFieldNumber;
const int PublicEntry::kDataFieldNumber;
const int PublicEntry::kTimestampFieldNumber;
const int PublicEntry::kSignatureFieldNumber;
const int PublicEntry::kGasPriceFieldNumber;
const int PublicEntry::kGasLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicEntry::PublicEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Transaction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Transaction.PublicEntry)
}
PublicEntry::PublicEntry(const PublicEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.amount().size() > 0) {
    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  gas_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gas_price().size() > 0) {
    gas_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gas_price_);
  }
  if (from.has_base()) {
    base_ = new ::Catalyst::Protocol::Transaction::BaseEntry(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_signature()) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  gas_limit_ = from.gas_limit_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Transaction.PublicEntry)
}

void PublicEntry::SharedCtor() {
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, reinterpret_cast<char*>(&gas_limit_) -
    reinterpret_cast<char*>(&base_) + sizeof(gas_limit_));
  _cached_size_ = 0;
}

PublicEntry::~PublicEntry() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Transaction.PublicEntry)
  SharedDtor();
}

void PublicEntry::SharedDtor() {
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete timestamp_;
  }
  if (this != internal_default_instance()) {
    delete signature_;
  }
}

void PublicEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicEntry::descriptor() {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_metadata[0].descriptor;
}

const PublicEntry& PublicEntry::default_instance() {
  protobuf_Transaction_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublicEntry* PublicEntry::New(::google::protobuf::Arena* arena) const {
  PublicEntry* n = new PublicEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublicEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Transaction.PublicEntry)
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
  gas_limit_ = GOOGLE_ULONGLONG(0);
}

bool PublicEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Transaction.PublicEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Transaction.BaseEntry base = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes amount = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Cryptography.Signature signature = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes gas_price = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gas_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 gas_limit = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Transaction.PublicEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Transaction.PublicEntry)
  return false;
#undef DO_
}

void PublicEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Transaction.PublicEntry)
  // .Catalyst.Protocol.Transaction.BaseEntry base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->amount(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->timestamp_, output);
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 5;
  if (this->has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->signature_, output);
  }

  // bytes gas_price = 6;
  if (this->gas_price().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->gas_price(), output);
  }

  // uint64 gas_limit = 7;
  if (this->gas_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->gas_limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Transaction.PublicEntry)
}

::google::protobuf::uint8* PublicEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Transaction.PublicEntry)
  // .Catalyst.Protocol.Transaction.BaseEntry base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->amount(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->timestamp_, false, target);
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 5;
  if (this->has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->signature_, false, target);
  }

  // bytes gas_price = 6;
  if (this->gas_price().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->gas_price(), target);
  }

  // uint64 gas_limit = 7;
  if (this->gas_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->gas_limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Transaction.PublicEntry)
  return target;
}

size_t PublicEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Transaction.PublicEntry)
  size_t total_size = 0;

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->amount());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bytes gas_price = 6;
  if (this->gas_price().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gas_price());
  }

  // .Catalyst.Protocol.Transaction.BaseEntry base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 5;
  if (this->has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  // uint64 gas_limit = 7;
  if (this->gas_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gas_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Transaction.PublicEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Transaction.PublicEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Transaction.PublicEntry)
    MergeFrom(*source);
  }
}

void PublicEntry::MergeFrom(const PublicEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Transaction.PublicEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.gas_price().size() > 0) {

    gas_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gas_price_);
  }
  if (from.has_base()) {
    mutable_base()->::Catalyst::Protocol::Transaction::BaseEntry::MergeFrom(from.base());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_signature()) {
    mutable_signature()->::Catalyst::Protocol::Cryptography::Signature::MergeFrom(from.signature());
  }
  if (from.gas_limit() != 0) {
    set_gas_limit(from.gas_limit());
  }
}

void PublicEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Transaction.PublicEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicEntry::CopyFrom(const PublicEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Transaction.PublicEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicEntry::IsInitialized() const {
  return true;
}

void PublicEntry::Swap(PublicEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicEntry::InternalSwap(PublicEntry* other) {
  amount_.Swap(&other->amount_);
  data_.Swap(&other->data_);
  gas_price_.Swap(&other->gas_price_);
  std::swap(base_, other->base_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(signature_, other->signature_);
  std::swap(gas_limit_, other->gas_limit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublicEntry::GetMetadata() const {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublicEntry

// .Catalyst.Protocol.Transaction.BaseEntry base = 1;
bool PublicEntry::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
void PublicEntry::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::Catalyst::Protocol::Transaction::BaseEntry& PublicEntry::base() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.base)
  return base_ != NULL ? *base_
                         : *::Catalyst::Protocol::Transaction::BaseEntry::internal_default_instance();
}
::Catalyst::Protocol::Transaction::BaseEntry* PublicEntry::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::Catalyst::Protocol::Transaction::BaseEntry;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.base)
  return base_;
}
::Catalyst::Protocol::Transaction::BaseEntry* PublicEntry::release_base() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.base)
  
  ::Catalyst::Protocol::Transaction::BaseEntry* temp = base_;
  base_ = NULL;
  return temp;
}
void PublicEntry::set_allocated_base(::Catalyst::Protocol::Transaction::BaseEntry* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.base)
}

// bytes amount = 2;
void PublicEntry::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PublicEntry::amount() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.amount)
  return amount_.GetNoArena();
}
void PublicEntry::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.amount)
}
#if LANG_CXX11
void PublicEntry::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.PublicEntry.amount)
}
#endif
void PublicEntry::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.PublicEntry.amount)
}
void PublicEntry::set_amount(const void* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.PublicEntry.amount)
}
::std::string* PublicEntry::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicEntry::release_amount() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicEntry::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.amount)
}

// bytes data = 3;
void PublicEntry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PublicEntry::data() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.data)
  return data_.GetNoArena();
}
void PublicEntry::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.data)
}
#if LANG_CXX11
void PublicEntry::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.PublicEntry.data)
}
#endif
void PublicEntry::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.PublicEntry.data)
}
void PublicEntry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.PublicEntry.data)
}
::std::string* PublicEntry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicEntry::release_data() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicEntry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.data)
}

// .google.protobuf.Timestamp timestamp = 4;
bool PublicEntry::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void PublicEntry::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& PublicEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* PublicEntry::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* PublicEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void PublicEntry::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.timestamp)
}

// .Catalyst.Protocol.Cryptography.Signature signature = 5;
bool PublicEntry::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
void PublicEntry::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) delete signature_;
  signature_ = NULL;
}
const ::Catalyst::Protocol::Cryptography::Signature& PublicEntry::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.signature)
  return signature_ != NULL ? *signature_
                         : *::Catalyst::Protocol::Cryptography::Signature::internal_default_instance();
}
::Catalyst::Protocol::Cryptography::Signature* PublicEntry::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.signature)
  return signature_;
}
::Catalyst::Protocol::Cryptography::Signature* PublicEntry::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.signature)
  
  ::Catalyst::Protocol::Cryptography::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void PublicEntry::set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.signature)
}

// bytes gas_price = 6;
void PublicEntry::clear_gas_price() {
  gas_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PublicEntry::gas_price() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
  return gas_price_.GetNoArena();
}
void PublicEntry::set_gas_price(const ::std::string& value) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
}
#if LANG_CXX11
void PublicEntry::set_gas_price(::std::string&& value) {
  
  gas_price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
}
#endif
void PublicEntry::set_gas_price(const char* value) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
}
void PublicEntry::set_gas_price(const void* value, size_t size) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
}
::std::string* PublicEntry::mutable_gas_price() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
  return gas_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicEntry::release_gas_price() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
  
  return gas_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicEntry::set_allocated_gas_price(::std::string* gas_price) {
  if (gas_price != NULL) {
    
  } else {
    
  }
  gas_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gas_price);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
}

// uint64 gas_limit = 7;
void PublicEntry::clear_gas_limit() {
  gas_limit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PublicEntry::gas_limit() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.gas_limit)
  return gas_limit_;
}
void PublicEntry::set_gas_limit(::google::protobuf::uint64 value) {
  
  gas_limit_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.gas_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfidentialEntry::kBaseFieldNumber;
const int ConfidentialEntry::kPedersenCommitmentFieldNumber;
const int ConfidentialEntry::kRangeProofFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfidentialEntry::ConfidentialEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Transaction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Transaction.ConfidentialEntry)
}
ConfidentialEntry::ConfidentialEntry(const ConfidentialEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pedersen_commitment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pedersen_commitment().size() > 0) {
    pedersen_commitment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pedersen_commitment_);
  }
  if (from.has_base()) {
    base_ = new ::Catalyst::Protocol::Transaction::BaseEntry(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_range_proof()) {
    range_proof_ = new ::Catalyst::Protocol::Transaction::RangeProof(*from.range_proof_);
  } else {
    range_proof_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Transaction.ConfidentialEntry)
}

void ConfidentialEntry::SharedCtor() {
  pedersen_commitment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, reinterpret_cast<char*>(&range_proof_) -
    reinterpret_cast<char*>(&base_) + sizeof(range_proof_));
  _cached_size_ = 0;
}

ConfidentialEntry::~ConfidentialEntry() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Transaction.ConfidentialEntry)
  SharedDtor();
}

void ConfidentialEntry::SharedDtor() {
  pedersen_commitment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete range_proof_;
  }
}

void ConfidentialEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfidentialEntry::descriptor() {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_metadata[1].descriptor;
}

const ConfidentialEntry& ConfidentialEntry::default_instance() {
  protobuf_Transaction_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfidentialEntry* ConfidentialEntry::New(::google::protobuf::Arena* arena) const {
  ConfidentialEntry* n = new ConfidentialEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfidentialEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  pedersen_commitment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && base_ != NULL) {
    delete base_;
  }
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && range_proof_ != NULL) {
    delete range_proof_;
  }
  range_proof_ = NULL;
}

bool ConfidentialEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Transaction.BaseEntry base = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pedersen_commitment = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pedersen_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Transaction.RangeProof range_proof = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_proof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Transaction.ConfidentialEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Transaction.ConfidentialEntry)
  return false;
#undef DO_
}

void ConfidentialEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  // .Catalyst.Protocol.Transaction.BaseEntry base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // bytes pedersen_commitment = 2;
  if (this->pedersen_commitment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pedersen_commitment(), output);
  }

  // .Catalyst.Protocol.Transaction.RangeProof range_proof = 3;
  if (this->has_range_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->range_proof_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Transaction.ConfidentialEntry)
}

::google::protobuf::uint8* ConfidentialEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  // .Catalyst.Protocol.Transaction.BaseEntry base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // bytes pedersen_commitment = 2;
  if (this->pedersen_commitment().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pedersen_commitment(), target);
  }

  // .Catalyst.Protocol.Transaction.RangeProof range_proof = 3;
  if (this->has_range_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->range_proof_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Transaction.ConfidentialEntry)
  return target;
}

size_t ConfidentialEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  size_t total_size = 0;

  // bytes pedersen_commitment = 2;
  if (this->pedersen_commitment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pedersen_commitment());
  }

  // .Catalyst.Protocol.Transaction.BaseEntry base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // .Catalyst.Protocol.Transaction.RangeProof range_proof = 3;
  if (this->has_range_proof()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_proof_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfidentialEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfidentialEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfidentialEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Transaction.ConfidentialEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Transaction.ConfidentialEntry)
    MergeFrom(*source);
  }
}

void ConfidentialEntry::MergeFrom(const ConfidentialEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.pedersen_commitment().size() > 0) {

    pedersen_commitment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pedersen_commitment_);
  }
  if (from.has_base()) {
    mutable_base()->::Catalyst::Protocol::Transaction::BaseEntry::MergeFrom(from.base());
  }
  if (from.has_range_proof()) {
    mutable_range_proof()->::Catalyst::Protocol::Transaction::RangeProof::MergeFrom(from.range_proof());
  }
}

void ConfidentialEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfidentialEntry::CopyFrom(const ConfidentialEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfidentialEntry::IsInitialized() const {
  return true;
}

void ConfidentialEntry::Swap(ConfidentialEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfidentialEntry::InternalSwap(ConfidentialEntry* other) {
  pedersen_commitment_.Swap(&other->pedersen_commitment_);
  std::swap(base_, other->base_);
  std::swap(range_proof_, other->range_proof_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfidentialEntry::GetMetadata() const {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfidentialEntry

// .Catalyst.Protocol.Transaction.BaseEntry base = 1;
bool ConfidentialEntry::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
void ConfidentialEntry::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::Catalyst::Protocol::Transaction::BaseEntry& ConfidentialEntry::base() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.ConfidentialEntry.base)
  return base_ != NULL ? *base_
                         : *::Catalyst::Protocol::Transaction::BaseEntry::internal_default_instance();
}
::Catalyst::Protocol::Transaction::BaseEntry* ConfidentialEntry::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::Catalyst::Protocol::Transaction::BaseEntry;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.ConfidentialEntry.base)
  return base_;
}
::Catalyst::Protocol::Transaction::BaseEntry* ConfidentialEntry::release_base() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.ConfidentialEntry.base)
  
  ::Catalyst::Protocol::Transaction::BaseEntry* temp = base_;
  base_ = NULL;
  return temp;
}
void ConfidentialEntry::set_allocated_base(::Catalyst::Protocol::Transaction::BaseEntry* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.ConfidentialEntry.base)
}

// bytes pedersen_commitment = 2;
void ConfidentialEntry::clear_pedersen_commitment() {
  pedersen_commitment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfidentialEntry::pedersen_commitment() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
  return pedersen_commitment_.GetNoArena();
}
void ConfidentialEntry::set_pedersen_commitment(const ::std::string& value) {
  
  pedersen_commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
}
#if LANG_CXX11
void ConfidentialEntry::set_pedersen_commitment(::std::string&& value) {
  
  pedersen_commitment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
}
#endif
void ConfidentialEntry::set_pedersen_commitment(const char* value) {
  
  pedersen_commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
}
void ConfidentialEntry::set_pedersen_commitment(const void* value, size_t size) {
  
  pedersen_commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
}
::std::string* ConfidentialEntry::mutable_pedersen_commitment() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
  return pedersen_commitment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfidentialEntry::release_pedersen_commitment() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
  
  return pedersen_commitment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfidentialEntry::set_allocated_pedersen_commitment(::std::string* pedersen_commitment) {
  if (pedersen_commitment != NULL) {
    
  } else {
    
  }
  pedersen_commitment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pedersen_commitment);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
}

// .Catalyst.Protocol.Transaction.RangeProof range_proof = 3;
bool ConfidentialEntry::has_range_proof() const {
  return this != internal_default_instance() && range_proof_ != NULL;
}
void ConfidentialEntry::clear_range_proof() {
  if (GetArenaNoVirtual() == NULL && range_proof_ != NULL) delete range_proof_;
  range_proof_ = NULL;
}
const ::Catalyst::Protocol::Transaction::RangeProof& ConfidentialEntry::range_proof() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.ConfidentialEntry.range_proof)
  return range_proof_ != NULL ? *range_proof_
                         : *::Catalyst::Protocol::Transaction::RangeProof::internal_default_instance();
}
::Catalyst::Protocol::Transaction::RangeProof* ConfidentialEntry::mutable_range_proof() {
  
  if (range_proof_ == NULL) {
    range_proof_ = new ::Catalyst::Protocol::Transaction::RangeProof;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.ConfidentialEntry.range_proof)
  return range_proof_;
}
::Catalyst::Protocol::Transaction::RangeProof* ConfidentialEntry::release_range_proof() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.ConfidentialEntry.range_proof)
  
  ::Catalyst::Protocol::Transaction::RangeProof* temp = range_proof_;
  range_proof_ = NULL;
  return temp;
}
void ConfidentialEntry::set_allocated_range_proof(::Catalyst::Protocol::Transaction::RangeProof* range_proof) {
  delete range_proof_;
  range_proof_ = range_proof;
  if (range_proof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.ConfidentialEntry.range_proof)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseEntry::kNonceFieldNumber;
const int BaseEntry::kReceiverPublicKeyFieldNumber;
const int BaseEntry::kSenderPublicKeyFieldNumber;
const int BaseEntry::kTransactionFeesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseEntry::BaseEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Transaction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Transaction.BaseEntry)
}
BaseEntry::BaseEntry(const BaseEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  receiver_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.receiver_public_key().size() > 0) {
    receiver_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_public_key_);
  }
  sender_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender_public_key().size() > 0) {
    sender_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_public_key_);
  }
  transaction_fees_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transaction_fees().size() > 0) {
    transaction_fees_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_fees_);
  }
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Transaction.BaseEntry)
}

void BaseEntry::SharedCtor() {
  receiver_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_fees_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

BaseEntry::~BaseEntry() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Transaction.BaseEntry)
  SharedDtor();
}

void BaseEntry::SharedDtor() {
  receiver_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_fees_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BaseEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseEntry::descriptor() {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_metadata[2].descriptor;
}

const BaseEntry& BaseEntry::default_instance() {
  protobuf_Transaction_2eproto::InitDefaults();
  return *internal_default_instance();
}

BaseEntry* BaseEntry::New(::google::protobuf::Arena* arena) const {
  BaseEntry* n = new BaseEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Transaction.BaseEntry)
  receiver_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_fees_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_ = GOOGLE_ULONGLONG(0);
}

bool BaseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Transaction.BaseEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 nonce = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes receiver_public_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_receiver_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sender_public_key = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction_fees = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_fees()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Transaction.BaseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Transaction.BaseEntry)
  return false;
#undef DO_
}

void BaseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Transaction.BaseEntry)
  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nonce(), output);
  }

  // bytes receiver_public_key = 2;
  if (this->receiver_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->receiver_public_key(), output);
  }

  // bytes sender_public_key = 3;
  if (this->sender_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sender_public_key(), output);
  }

  // bytes transaction_fees = 4;
  if (this->transaction_fees().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->transaction_fees(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Transaction.BaseEntry)
}

::google::protobuf::uint8* BaseEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Transaction.BaseEntry)
  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nonce(), target);
  }

  // bytes receiver_public_key = 2;
  if (this->receiver_public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->receiver_public_key(), target);
  }

  // bytes sender_public_key = 3;
  if (this->sender_public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sender_public_key(), target);
  }

  // bytes transaction_fees = 4;
  if (this->transaction_fees().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->transaction_fees(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Transaction.BaseEntry)
  return target;
}

size_t BaseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Transaction.BaseEntry)
  size_t total_size = 0;

  // bytes receiver_public_key = 2;
  if (this->receiver_public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->receiver_public_key());
  }

  // bytes sender_public_key = 3;
  if (this->sender_public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sender_public_key());
  }

  // bytes transaction_fees = 4;
  if (this->transaction_fees().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction_fees());
  }

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nonce());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Transaction.BaseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Transaction.BaseEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Transaction.BaseEntry)
    MergeFrom(*source);
  }
}

void BaseEntry::MergeFrom(const BaseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Transaction.BaseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.receiver_public_key().size() > 0) {

    receiver_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_public_key_);
  }
  if (from.sender_public_key().size() > 0) {

    sender_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_public_key_);
  }
  if (from.transaction_fees().size() > 0) {

    transaction_fees_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_fees_);
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
}

void BaseEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Transaction.BaseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseEntry::CopyFrom(const BaseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Transaction.BaseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseEntry::IsInitialized() const {
  return true;
}

void BaseEntry::Swap(BaseEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseEntry::InternalSwap(BaseEntry* other) {
  receiver_public_key_.Swap(&other->receiver_public_key_);
  sender_public_key_.Swap(&other->sender_public_key_);
  transaction_fees_.Swap(&other->transaction_fees_);
  std::swap(nonce_, other->nonce_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseEntry::GetMetadata() const {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseEntry

// uint64 nonce = 1;
void BaseEntry::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BaseEntry::nonce() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.BaseEntry.nonce)
  return nonce_;
}
void BaseEntry::set_nonce(::google::protobuf::uint64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.BaseEntry.nonce)
}

// bytes receiver_public_key = 2;
void BaseEntry::clear_receiver_public_key() {
  receiver_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BaseEntry::receiver_public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.BaseEntry.receiver_public_key)
  return receiver_public_key_.GetNoArena();
}
void BaseEntry::set_receiver_public_key(const ::std::string& value) {
  
  receiver_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.BaseEntry.receiver_public_key)
}
#if LANG_CXX11
void BaseEntry::set_receiver_public_key(::std::string&& value) {
  
  receiver_public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.BaseEntry.receiver_public_key)
}
#endif
void BaseEntry::set_receiver_public_key(const char* value) {
  
  receiver_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.BaseEntry.receiver_public_key)
}
void BaseEntry::set_receiver_public_key(const void* value, size_t size) {
  
  receiver_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.BaseEntry.receiver_public_key)
}
::std::string* BaseEntry::mutable_receiver_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.BaseEntry.receiver_public_key)
  return receiver_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BaseEntry::release_receiver_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.BaseEntry.receiver_public_key)
  
  return receiver_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BaseEntry::set_allocated_receiver_public_key(::std::string* receiver_public_key) {
  if (receiver_public_key != NULL) {
    
  } else {
    
  }
  receiver_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver_public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.BaseEntry.receiver_public_key)
}

// bytes sender_public_key = 3;
void BaseEntry::clear_sender_public_key() {
  sender_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BaseEntry::sender_public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.BaseEntry.sender_public_key)
  return sender_public_key_.GetNoArena();
}
void BaseEntry::set_sender_public_key(const ::std::string& value) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.BaseEntry.sender_public_key)
}
#if LANG_CXX11
void BaseEntry::set_sender_public_key(::std::string&& value) {
  
  sender_public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.BaseEntry.sender_public_key)
}
#endif
void BaseEntry::set_sender_public_key(const char* value) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.BaseEntry.sender_public_key)
}
void BaseEntry::set_sender_public_key(const void* value, size_t size) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.BaseEntry.sender_public_key)
}
::std::string* BaseEntry::mutable_sender_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.BaseEntry.sender_public_key)
  return sender_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BaseEntry::release_sender_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.BaseEntry.sender_public_key)
  
  return sender_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BaseEntry::set_allocated_sender_public_key(::std::string* sender_public_key) {
  if (sender_public_key != NULL) {
    
  } else {
    
  }
  sender_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.BaseEntry.sender_public_key)
}

// bytes transaction_fees = 4;
void BaseEntry::clear_transaction_fees() {
  transaction_fees_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BaseEntry::transaction_fees() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.BaseEntry.transaction_fees)
  return transaction_fees_.GetNoArena();
}
void BaseEntry::set_transaction_fees(const ::std::string& value) {
  
  transaction_fees_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.BaseEntry.transaction_fees)
}
#if LANG_CXX11
void BaseEntry::set_transaction_fees(::std::string&& value) {
  
  transaction_fees_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.BaseEntry.transaction_fees)
}
#endif
void BaseEntry::set_transaction_fees(const char* value) {
  
  transaction_fees_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.BaseEntry.transaction_fees)
}
void BaseEntry::set_transaction_fees(const void* value, size_t size) {
  
  transaction_fees_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.BaseEntry.transaction_fees)
}
::std::string* BaseEntry::mutable_transaction_fees() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.BaseEntry.transaction_fees)
  return transaction_fees_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BaseEntry::release_transaction_fees() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.BaseEntry.transaction_fees)
  
  return transaction_fees_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BaseEntry::set_allocated_transaction_fees(::std::string* transaction_fees) {
  if (transaction_fees != NULL) {
    
  } else {
    
  }
  transaction_fees_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_fees);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.BaseEntry.transaction_fees)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoinbaseEntry::kReceiverPublicKeyFieldNumber;
const int CoinbaseEntry::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoinbaseEntry::CoinbaseEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Transaction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Transaction.CoinbaseEntry)
}
CoinbaseEntry::CoinbaseEntry(const CoinbaseEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  receiver_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.receiver_public_key().size() > 0) {
    receiver_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_public_key_);
  }
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.amount().size() > 0) {
    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Transaction.CoinbaseEntry)
}

void CoinbaseEntry::SharedCtor() {
  receiver_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CoinbaseEntry::~CoinbaseEntry() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Transaction.CoinbaseEntry)
  SharedDtor();
}

void CoinbaseEntry::SharedDtor() {
  receiver_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CoinbaseEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoinbaseEntry::descriptor() {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_metadata[3].descriptor;
}

const CoinbaseEntry& CoinbaseEntry::default_instance() {
  protobuf_Transaction_2eproto::InitDefaults();
  return *internal_default_instance();
}

CoinbaseEntry* CoinbaseEntry::New(::google::protobuf::Arena* arena) const {
  CoinbaseEntry* n = new CoinbaseEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoinbaseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  receiver_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CoinbaseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes receiver_public_key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_receiver_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes amount = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Transaction.CoinbaseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Transaction.CoinbaseEntry)
  return false;
#undef DO_
}

void CoinbaseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  // bytes receiver_public_key = 1;
  if (this->receiver_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->receiver_public_key(), output);
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Transaction.CoinbaseEntry)
}

::google::protobuf::uint8* CoinbaseEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  // bytes receiver_public_key = 1;
  if (this->receiver_public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->receiver_public_key(), target);
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Transaction.CoinbaseEntry)
  return target;
}

size_t CoinbaseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  size_t total_size = 0;

  // bytes receiver_public_key = 1;
  if (this->receiver_public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->receiver_public_key());
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoinbaseEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CoinbaseEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoinbaseEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Transaction.CoinbaseEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Transaction.CoinbaseEntry)
    MergeFrom(*source);
  }
}

void CoinbaseEntry::MergeFrom(const CoinbaseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.receiver_public_key().size() > 0) {

    receiver_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_public_key_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
}

void CoinbaseEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinbaseEntry::CopyFrom(const CoinbaseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinbaseEntry::IsInitialized() const {
  return true;
}

void CoinbaseEntry::Swap(CoinbaseEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoinbaseEntry::InternalSwap(CoinbaseEntry* other) {
  receiver_public_key_.Swap(&other->receiver_public_key_);
  amount_.Swap(&other->amount_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoinbaseEntry::GetMetadata() const {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoinbaseEntry

// bytes receiver_public_key = 1;
void CoinbaseEntry::clear_receiver_public_key() {
  receiver_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CoinbaseEntry::receiver_public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
  return receiver_public_key_.GetNoArena();
}
void CoinbaseEntry::set_receiver_public_key(const ::std::string& value) {
  
  receiver_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
}
#if LANG_CXX11
void CoinbaseEntry::set_receiver_public_key(::std::string&& value) {
  
  receiver_public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
}
#endif
void CoinbaseEntry::set_receiver_public_key(const char* value) {
  
  receiver_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
}
void CoinbaseEntry::set_receiver_public_key(const void* value, size_t size) {
  
  receiver_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
}
::std::string* CoinbaseEntry::mutable_receiver_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
  return receiver_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CoinbaseEntry::release_receiver_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
  
  return receiver_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CoinbaseEntry::set_allocated_receiver_public_key(::std::string* receiver_public_key) {
  if (receiver_public_key != NULL) {
    
  } else {
    
  }
  receiver_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver_public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
}

// bytes amount = 2;
void CoinbaseEntry::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CoinbaseEntry::amount() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
  return amount_.GetNoArena();
}
void CoinbaseEntry::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
}
#if LANG_CXX11
void CoinbaseEntry::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
}
#endif
void CoinbaseEntry::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
}
void CoinbaseEntry::set_amount(const void* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
}
::std::string* CoinbaseEntry::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CoinbaseEntry::release_amount() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CoinbaseEntry::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeProof::kValueCommitmentFieldNumber;
const int RangeProof::kBitCommitmentFieldNumber;
const int RangeProof::kPerBitBlindingFactorCommitmentFieldNumber;
const int RangeProof::kPolyCommitmentT1FieldNumber;
const int RangeProof::kPolyCommitmentT2FieldNumber;
const int RangeProof::kProofOfShareTauFieldNumber;
const int RangeProof::kProofOfShareMuFieldNumber;
const int RangeProof::kAggregatedVectorPolynomialLFieldNumber;
const int RangeProof::kAggregatedVectorPolynomialRFieldNumber;
const int RangeProof::kAPrime0FieldNumber;
const int RangeProof::kBPrime0FieldNumber;
const int RangeProof::kTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeProof::RangeProof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Transaction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Transaction.RangeProof)
}
RangeProof::RangeProof(const RangeProof& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_commitment_(from.value_commitment_),
      aggregated_vector_polynomial_l_(from.aggregated_vector_polynomial_l_),
      aggregated_vector_polynomial_r_(from.aggregated_vector_polynomial_r_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bit_commitment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bit_commitment().size() > 0) {
    bit_commitment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bit_commitment_);
  }
  per_bit_blinding_factor_commitment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.per_bit_blinding_factor_commitment().size() > 0) {
    per_bit_blinding_factor_commitment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.per_bit_blinding_factor_commitment_);
  }
  poly_commitment_t1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.poly_commitment_t1().size() > 0) {
    poly_commitment_t1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poly_commitment_t1_);
  }
  poly_commitment_t2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.poly_commitment_t2().size() > 0) {
    poly_commitment_t2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poly_commitment_t2_);
  }
  proof_of_share_tau_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proof_of_share_tau().size() > 0) {
    proof_of_share_tau_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proof_of_share_tau_);
  }
  proof_of_share_mu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proof_of_share_mu().size() > 0) {
    proof_of_share_mu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proof_of_share_mu_);
  }
  a_prime_0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.a_prime_0().size() > 0) {
    a_prime_0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_prime_0_);
  }
  b_prime_0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.b_prime_0().size() > 0) {
    b_prime_0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_prime_0_);
  }
  t_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.t().size() > 0) {
    t_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.t_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Transaction.RangeProof)
}

void RangeProof::SharedCtor() {
  bit_commitment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  per_bit_blinding_factor_commitment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_of_share_tau_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_of_share_mu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_prime_0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_prime_0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  t_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RangeProof::~RangeProof() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Transaction.RangeProof)
  SharedDtor();
}

void RangeProof::SharedDtor() {
  bit_commitment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  per_bit_blinding_factor_commitment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_of_share_tau_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_of_share_mu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_prime_0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_prime_0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  t_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RangeProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeProof::descriptor() {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_metadata[4].descriptor;
}

const RangeProof& RangeProof::default_instance() {
  protobuf_Transaction_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeProof* RangeProof::New(::google::protobuf::Arena* arena) const {
  RangeProof* n = new RangeProof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeProof::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Transaction.RangeProof)
  value_commitment_.Clear();
  aggregated_vector_polynomial_l_.Clear();
  aggregated_vector_polynomial_r_.Clear();
  bit_commitment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  per_bit_blinding_factor_commitment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_of_share_tau_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_of_share_mu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  a_prime_0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_prime_0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  t_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RangeProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Transaction.RangeProof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes value_commitment = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes bit_commitment = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bit_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes per_bit_blinding_factor_commitment = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_per_bit_blinding_factor_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes poly_commitment_t1 = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_poly_commitment_t1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes poly_commitment_t2 = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_poly_commitment_t2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes proof_of_share_tau = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proof_of_share_tau()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes proof_of_share_mu = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proof_of_share_mu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes aggregated_vector_polynomial_l = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_aggregated_vector_polynomial_l()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes aggregated_vector_polynomial_r = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_aggregated_vector_polynomial_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes a_prime_0 = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_a_prime_0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes b_prime_0 = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_b_prime_0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes t = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_t()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Transaction.RangeProof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Transaction.RangeProof)
  return false;
#undef DO_
}

void RangeProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Transaction.RangeProof)
  // repeated bytes value_commitment = 1;
  for (int i = 0; i < this->value_commitment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->value_commitment(i), output);
  }

  // bytes bit_commitment = 2;
  if (this->bit_commitment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bit_commitment(), output);
  }

  // bytes per_bit_blinding_factor_commitment = 3;
  if (this->per_bit_blinding_factor_commitment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->per_bit_blinding_factor_commitment(), output);
  }

  // bytes poly_commitment_t1 = 4;
  if (this->poly_commitment_t1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->poly_commitment_t1(), output);
  }

  // bytes poly_commitment_t2 = 5;
  if (this->poly_commitment_t2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->poly_commitment_t2(), output);
  }

  // bytes proof_of_share_tau = 6;
  if (this->proof_of_share_tau().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->proof_of_share_tau(), output);
  }

  // bytes proof_of_share_mu = 7;
  if (this->proof_of_share_mu().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->proof_of_share_mu(), output);
  }

  // repeated bytes aggregated_vector_polynomial_l = 8;
  for (int i = 0; i < this->aggregated_vector_polynomial_l_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->aggregated_vector_polynomial_l(i), output);
  }

  // repeated bytes aggregated_vector_polynomial_r = 9;
  for (int i = 0; i < this->aggregated_vector_polynomial_r_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->aggregated_vector_polynomial_r(i), output);
  }

  // bytes a_prime_0 = 10;
  if (this->a_prime_0().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->a_prime_0(), output);
  }

  // bytes b_prime_0 = 11;
  if (this->b_prime_0().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->b_prime_0(), output);
  }

  // bytes t = 12;
  if (this->t().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->t(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Transaction.RangeProof)
}

::google::protobuf::uint8* RangeProof::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Transaction.RangeProof)
  // repeated bytes value_commitment = 1;
  for (int i = 0; i < this->value_commitment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->value_commitment(i), target);
  }

  // bytes bit_commitment = 2;
  if (this->bit_commitment().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bit_commitment(), target);
  }

  // bytes per_bit_blinding_factor_commitment = 3;
  if (this->per_bit_blinding_factor_commitment().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->per_bit_blinding_factor_commitment(), target);
  }

  // bytes poly_commitment_t1 = 4;
  if (this->poly_commitment_t1().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->poly_commitment_t1(), target);
  }

  // bytes poly_commitment_t2 = 5;
  if (this->poly_commitment_t2().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->poly_commitment_t2(), target);
  }

  // bytes proof_of_share_tau = 6;
  if (this->proof_of_share_tau().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->proof_of_share_tau(), target);
  }

  // bytes proof_of_share_mu = 7;
  if (this->proof_of_share_mu().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->proof_of_share_mu(), target);
  }

  // repeated bytes aggregated_vector_polynomial_l = 8;
  for (int i = 0; i < this->aggregated_vector_polynomial_l_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->aggregated_vector_polynomial_l(i), target);
  }

  // repeated bytes aggregated_vector_polynomial_r = 9;
  for (int i = 0; i < this->aggregated_vector_polynomial_r_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(9, this->aggregated_vector_polynomial_r(i), target);
  }

  // bytes a_prime_0 = 10;
  if (this->a_prime_0().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->a_prime_0(), target);
  }

  // bytes b_prime_0 = 11;
  if (this->b_prime_0().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->b_prime_0(), target);
  }

  // bytes t = 12;
  if (this->t().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->t(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Transaction.RangeProof)
  return target;
}

size_t RangeProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Transaction.RangeProof)
  size_t total_size = 0;

  // repeated bytes value_commitment = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_commitment_size());
  for (int i = 0; i < this->value_commitment_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value_commitment(i));
  }

  // repeated bytes aggregated_vector_polynomial_l = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->aggregated_vector_polynomial_l_size());
  for (int i = 0; i < this->aggregated_vector_polynomial_l_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->aggregated_vector_polynomial_l(i));
  }

  // repeated bytes aggregated_vector_polynomial_r = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->aggregated_vector_polynomial_r_size());
  for (int i = 0; i < this->aggregated_vector_polynomial_r_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->aggregated_vector_polynomial_r(i));
  }

  // bytes bit_commitment = 2;
  if (this->bit_commitment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bit_commitment());
  }

  // bytes per_bit_blinding_factor_commitment = 3;
  if (this->per_bit_blinding_factor_commitment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->per_bit_blinding_factor_commitment());
  }

  // bytes poly_commitment_t1 = 4;
  if (this->poly_commitment_t1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->poly_commitment_t1());
  }

  // bytes poly_commitment_t2 = 5;
  if (this->poly_commitment_t2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->poly_commitment_t2());
  }

  // bytes proof_of_share_tau = 6;
  if (this->proof_of_share_tau().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proof_of_share_tau());
  }

  // bytes proof_of_share_mu = 7;
  if (this->proof_of_share_mu().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proof_of_share_mu());
  }

  // bytes a_prime_0 = 10;
  if (this->a_prime_0().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->a_prime_0());
  }

  // bytes b_prime_0 = 11;
  if (this->b_prime_0().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->b_prime_0());
  }

  // bytes t = 12;
  if (this->t().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->t());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeProof::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Transaction.RangeProof)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeProof* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeProof>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Transaction.RangeProof)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Transaction.RangeProof)
    MergeFrom(*source);
  }
}

void RangeProof::MergeFrom(const RangeProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Transaction.RangeProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_commitment_.MergeFrom(from.value_commitment_);
  aggregated_vector_polynomial_l_.MergeFrom(from.aggregated_vector_polynomial_l_);
  aggregated_vector_polynomial_r_.MergeFrom(from.aggregated_vector_polynomial_r_);
  if (from.bit_commitment().size() > 0) {

    bit_commitment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bit_commitment_);
  }
  if (from.per_bit_blinding_factor_commitment().size() > 0) {

    per_bit_blinding_factor_commitment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.per_bit_blinding_factor_commitment_);
  }
  if (from.poly_commitment_t1().size() > 0) {

    poly_commitment_t1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poly_commitment_t1_);
  }
  if (from.poly_commitment_t2().size() > 0) {

    poly_commitment_t2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poly_commitment_t2_);
  }
  if (from.proof_of_share_tau().size() > 0) {

    proof_of_share_tau_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proof_of_share_tau_);
  }
  if (from.proof_of_share_mu().size() > 0) {

    proof_of_share_mu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proof_of_share_mu_);
  }
  if (from.a_prime_0().size() > 0) {

    a_prime_0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_prime_0_);
  }
  if (from.b_prime_0().size() > 0) {

    b_prime_0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_prime_0_);
  }
  if (from.t().size() > 0) {

    t_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.t_);
  }
}

void RangeProof::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Transaction.RangeProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeProof::CopyFrom(const RangeProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Transaction.RangeProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeProof::IsInitialized() const {
  return true;
}

void RangeProof::Swap(RangeProof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeProof::InternalSwap(RangeProof* other) {
  value_commitment_.UnsafeArenaSwap(&other->value_commitment_);
  aggregated_vector_polynomial_l_.UnsafeArenaSwap(&other->aggregated_vector_polynomial_l_);
  aggregated_vector_polynomial_r_.UnsafeArenaSwap(&other->aggregated_vector_polynomial_r_);
  bit_commitment_.Swap(&other->bit_commitment_);
  per_bit_blinding_factor_commitment_.Swap(&other->per_bit_blinding_factor_commitment_);
  poly_commitment_t1_.Swap(&other->poly_commitment_t1_);
  poly_commitment_t2_.Swap(&other->poly_commitment_t2_);
  proof_of_share_tau_.Swap(&other->proof_of_share_tau_);
  proof_of_share_mu_.Swap(&other->proof_of_share_mu_);
  a_prime_0_.Swap(&other->a_prime_0_);
  b_prime_0_.Swap(&other->b_prime_0_);
  t_.Swap(&other->t_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeProof::GetMetadata() const {
  protobuf_Transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Transaction_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeProof

// repeated bytes value_commitment = 1;
int RangeProof::value_commitment_size() const {
  return value_commitment_.size();
}
void RangeProof::clear_value_commitment() {
  value_commitment_.Clear();
}
const ::std::string& RangeProof::value_commitment(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  return value_commitment_.Get(index);
}
::std::string* RangeProof::mutable_value_commitment(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  return value_commitment_.Mutable(index);
}
void RangeProof::set_value_commitment(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  value_commitment_.Mutable(index)->assign(value);
}
void RangeProof::set_value_commitment(int index, const char* value) {
  value_commitment_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
void RangeProof::set_value_commitment(int index, const void* value, size_t size) {
  value_commitment_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
::std::string* RangeProof::add_value_commitment() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  return value_commitment_.Add();
}
void RangeProof::add_value_commitment(const ::std::string& value) {
  value_commitment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
void RangeProof::add_value_commitment(const char* value) {
  value_commitment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
void RangeProof::add_value_commitment(const void* value, size_t size) {
  value_commitment_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RangeProof::value_commitment() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  return value_commitment_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RangeProof::mutable_value_commitment() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  return &value_commitment_;
}

// bytes bit_commitment = 2;
void RangeProof::clear_bit_commitment() {
  bit_commitment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeProof::bit_commitment() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
  return bit_commitment_.GetNoArena();
}
void RangeProof::set_bit_commitment(const ::std::string& value) {
  
  bit_commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
}
#if LANG_CXX11
void RangeProof::set_bit_commitment(::std::string&& value) {
  
  bit_commitment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
}
#endif
void RangeProof::set_bit_commitment(const char* value) {
  
  bit_commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
}
void RangeProof::set_bit_commitment(const void* value, size_t size) {
  
  bit_commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
}
::std::string* RangeProof::mutable_bit_commitment() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
  return bit_commitment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeProof::release_bit_commitment() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
  
  return bit_commitment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeProof::set_allocated_bit_commitment(::std::string* bit_commitment) {
  if (bit_commitment != NULL) {
    
  } else {
    
  }
  bit_commitment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bit_commitment);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
}

// bytes per_bit_blinding_factor_commitment = 3;
void RangeProof::clear_per_bit_blinding_factor_commitment() {
  per_bit_blinding_factor_commitment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeProof::per_bit_blinding_factor_commitment() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
  return per_bit_blinding_factor_commitment_.GetNoArena();
}
void RangeProof::set_per_bit_blinding_factor_commitment(const ::std::string& value) {
  
  per_bit_blinding_factor_commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
}
#if LANG_CXX11
void RangeProof::set_per_bit_blinding_factor_commitment(::std::string&& value) {
  
  per_bit_blinding_factor_commitment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
}
#endif
void RangeProof::set_per_bit_blinding_factor_commitment(const char* value) {
  
  per_bit_blinding_factor_commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
}
void RangeProof::set_per_bit_blinding_factor_commitment(const void* value, size_t size) {
  
  per_bit_blinding_factor_commitment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
}
::std::string* RangeProof::mutable_per_bit_blinding_factor_commitment() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
  return per_bit_blinding_factor_commitment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeProof::release_per_bit_blinding_factor_commitment() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
  
  return per_bit_blinding_factor_commitment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeProof::set_allocated_per_bit_blinding_factor_commitment(::std::string* per_bit_blinding_factor_commitment) {
  if (per_bit_blinding_factor_commitment != NULL) {
    
  } else {
    
  }
  per_bit_blinding_factor_commitment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), per_bit_blinding_factor_commitment);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
}

// bytes poly_commitment_t1 = 4;
void RangeProof::clear_poly_commitment_t1() {
  poly_commitment_t1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeProof::poly_commitment_t1() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
  return poly_commitment_t1_.GetNoArena();
}
void RangeProof::set_poly_commitment_t1(const ::std::string& value) {
  
  poly_commitment_t1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
}
#if LANG_CXX11
void RangeProof::set_poly_commitment_t1(::std::string&& value) {
  
  poly_commitment_t1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
}
#endif
void RangeProof::set_poly_commitment_t1(const char* value) {
  
  poly_commitment_t1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
}
void RangeProof::set_poly_commitment_t1(const void* value, size_t size) {
  
  poly_commitment_t1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
}
::std::string* RangeProof::mutable_poly_commitment_t1() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
  return poly_commitment_t1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeProof::release_poly_commitment_t1() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
  
  return poly_commitment_t1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeProof::set_allocated_poly_commitment_t1(::std::string* poly_commitment_t1) {
  if (poly_commitment_t1 != NULL) {
    
  } else {
    
  }
  poly_commitment_t1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poly_commitment_t1);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
}

// bytes poly_commitment_t2 = 5;
void RangeProof::clear_poly_commitment_t2() {
  poly_commitment_t2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeProof::poly_commitment_t2() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
  return poly_commitment_t2_.GetNoArena();
}
void RangeProof::set_poly_commitment_t2(const ::std::string& value) {
  
  poly_commitment_t2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
}
#if LANG_CXX11
void RangeProof::set_poly_commitment_t2(::std::string&& value) {
  
  poly_commitment_t2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
}
#endif
void RangeProof::set_poly_commitment_t2(const char* value) {
  
  poly_commitment_t2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
}
void RangeProof::set_poly_commitment_t2(const void* value, size_t size) {
  
  poly_commitment_t2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
}
::std::string* RangeProof::mutable_poly_commitment_t2() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
  return poly_commitment_t2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeProof::release_poly_commitment_t2() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
  
  return poly_commitment_t2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeProof::set_allocated_poly_commitment_t2(::std::string* poly_commitment_t2) {
  if (poly_commitment_t2 != NULL) {
    
  } else {
    
  }
  poly_commitment_t2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poly_commitment_t2);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
}

// bytes proof_of_share_tau = 6;
void RangeProof::clear_proof_of_share_tau() {
  proof_of_share_tau_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeProof::proof_of_share_tau() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
  return proof_of_share_tau_.GetNoArena();
}
void RangeProof::set_proof_of_share_tau(const ::std::string& value) {
  
  proof_of_share_tau_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
}
#if LANG_CXX11
void RangeProof::set_proof_of_share_tau(::std::string&& value) {
  
  proof_of_share_tau_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
}
#endif
void RangeProof::set_proof_of_share_tau(const char* value) {
  
  proof_of_share_tau_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
}
void RangeProof::set_proof_of_share_tau(const void* value, size_t size) {
  
  proof_of_share_tau_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
}
::std::string* RangeProof::mutable_proof_of_share_tau() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
  return proof_of_share_tau_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeProof::release_proof_of_share_tau() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
  
  return proof_of_share_tau_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeProof::set_allocated_proof_of_share_tau(::std::string* proof_of_share_tau) {
  if (proof_of_share_tau != NULL) {
    
  } else {
    
  }
  proof_of_share_tau_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proof_of_share_tau);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
}

// bytes proof_of_share_mu = 7;
void RangeProof::clear_proof_of_share_mu() {
  proof_of_share_mu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeProof::proof_of_share_mu() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
  return proof_of_share_mu_.GetNoArena();
}
void RangeProof::set_proof_of_share_mu(const ::std::string& value) {
  
  proof_of_share_mu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
}
#if LANG_CXX11
void RangeProof::set_proof_of_share_mu(::std::string&& value) {
  
  proof_of_share_mu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
}
#endif
void RangeProof::set_proof_of_share_mu(const char* value) {
  
  proof_of_share_mu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
}
void RangeProof::set_proof_of_share_mu(const void* value, size_t size) {
  
  proof_of_share_mu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
}
::std::string* RangeProof::mutable_proof_of_share_mu() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
  return proof_of_share_mu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeProof::release_proof_of_share_mu() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
  
  return proof_of_share_mu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeProof::set_allocated_proof_of_share_mu(::std::string* proof_of_share_mu) {
  if (proof_of_share_mu != NULL) {
    
  } else {
    
  }
  proof_of_share_mu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proof_of_share_mu);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
}

// repeated bytes aggregated_vector_polynomial_l = 8;
int RangeProof::aggregated_vector_polynomial_l_size() const {
  return aggregated_vector_polynomial_l_.size();
}
void RangeProof::clear_aggregated_vector_polynomial_l() {
  aggregated_vector_polynomial_l_.Clear();
}
const ::std::string& RangeProof::aggregated_vector_polynomial_l(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  return aggregated_vector_polynomial_l_.Get(index);
}
::std::string* RangeProof::mutable_aggregated_vector_polynomial_l(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  return aggregated_vector_polynomial_l_.Mutable(index);
}
void RangeProof::set_aggregated_vector_polynomial_l(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  aggregated_vector_polynomial_l_.Mutable(index)->assign(value);
}
void RangeProof::set_aggregated_vector_polynomial_l(int index, const char* value) {
  aggregated_vector_polynomial_l_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
void RangeProof::set_aggregated_vector_polynomial_l(int index, const void* value, size_t size) {
  aggregated_vector_polynomial_l_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
::std::string* RangeProof::add_aggregated_vector_polynomial_l() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  return aggregated_vector_polynomial_l_.Add();
}
void RangeProof::add_aggregated_vector_polynomial_l(const ::std::string& value) {
  aggregated_vector_polynomial_l_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
void RangeProof::add_aggregated_vector_polynomial_l(const char* value) {
  aggregated_vector_polynomial_l_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
void RangeProof::add_aggregated_vector_polynomial_l(const void* value, size_t size) {
  aggregated_vector_polynomial_l_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RangeProof::aggregated_vector_polynomial_l() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  return aggregated_vector_polynomial_l_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RangeProof::mutable_aggregated_vector_polynomial_l() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  return &aggregated_vector_polynomial_l_;
}

// repeated bytes aggregated_vector_polynomial_r = 9;
int RangeProof::aggregated_vector_polynomial_r_size() const {
  return aggregated_vector_polynomial_r_.size();
}
void RangeProof::clear_aggregated_vector_polynomial_r() {
  aggregated_vector_polynomial_r_.Clear();
}
const ::std::string& RangeProof::aggregated_vector_polynomial_r(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  return aggregated_vector_polynomial_r_.Get(index);
}
::std::string* RangeProof::mutable_aggregated_vector_polynomial_r(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  return aggregated_vector_polynomial_r_.Mutable(index);
}
void RangeProof::set_aggregated_vector_polynomial_r(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  aggregated_vector_polynomial_r_.Mutable(index)->assign(value);
}
void RangeProof::set_aggregated_vector_polynomial_r(int index, const char* value) {
  aggregated_vector_polynomial_r_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
void RangeProof::set_aggregated_vector_polynomial_r(int index, const void* value, size_t size) {
  aggregated_vector_polynomial_r_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
::std::string* RangeProof::add_aggregated_vector_polynomial_r() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  return aggregated_vector_polynomial_r_.Add();
}
void RangeProof::add_aggregated_vector_polynomial_r(const ::std::string& value) {
  aggregated_vector_polynomial_r_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
void RangeProof::add_aggregated_vector_polynomial_r(const char* value) {
  aggregated_vector_polynomial_r_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
void RangeProof::add_aggregated_vector_polynomial_r(const void* value, size_t size) {
  aggregated_vector_polynomial_r_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RangeProof::aggregated_vector_polynomial_r() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  return aggregated_vector_polynomial_r_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RangeProof::mutable_aggregated_vector_polynomial_r() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  return &aggregated_vector_polynomial_r_;
}

// bytes a_prime_0 = 10;
void RangeProof::clear_a_prime_0() {
  a_prime_0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeProof::a_prime_0() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
  return a_prime_0_.GetNoArena();
}
void RangeProof::set_a_prime_0(const ::std::string& value) {
  
  a_prime_0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
}
#if LANG_CXX11
void RangeProof::set_a_prime_0(::std::string&& value) {
  
  a_prime_0_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
}
#endif
void RangeProof::set_a_prime_0(const char* value) {
  
  a_prime_0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
}
void RangeProof::set_a_prime_0(const void* value, size_t size) {
  
  a_prime_0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
}
::std::string* RangeProof::mutable_a_prime_0() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
  return a_prime_0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeProof::release_a_prime_0() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
  
  return a_prime_0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeProof::set_allocated_a_prime_0(::std::string* a_prime_0) {
  if (a_prime_0 != NULL) {
    
  } else {
    
  }
  a_prime_0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a_prime_0);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
}

// bytes b_prime_0 = 11;
void RangeProof::clear_b_prime_0() {
  b_prime_0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeProof::b_prime_0() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
  return b_prime_0_.GetNoArena();
}
void RangeProof::set_b_prime_0(const ::std::string& value) {
  
  b_prime_0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
}
#if LANG_CXX11
void RangeProof::set_b_prime_0(::std::string&& value) {
  
  b_prime_0_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
}
#endif
void RangeProof::set_b_prime_0(const char* value) {
  
  b_prime_0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
}
void RangeProof::set_b_prime_0(const void* value, size_t size) {
  
  b_prime_0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
}
::std::string* RangeProof::mutable_b_prime_0() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
  return b_prime_0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeProof::release_b_prime_0() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
  
  return b_prime_0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeProof::set_allocated_b_prime_0(::std::string* b_prime_0) {
  if (b_prime_0 != NULL) {
    
  } else {
    
  }
  b_prime_0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), b_prime_0);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
}

// bytes t = 12;
void RangeProof::clear_t() {
  t_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RangeProof::t() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.t)
  return t_.GetNoArena();
}
void RangeProof::set_t(const ::std::string& value) {
  
  t_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.t)
}
#if LANG_CXX11
void RangeProof::set_t(::std::string&& value) {
  
  t_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.t)
}
#endif
void RangeProof::set_t(const char* value) {
  
  t_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.t)
}
void RangeProof::set_t(const void* value, size_t size) {
  
  t_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.t)
}
::std::string* RangeProof::mutable_t() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.t)
  return t_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeProof::release_t() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.t)
  
  return t_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeProof::set_allocated_t(::std::string* t) {
  if (t != NULL) {
    
  } else {
    
  }
  t_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), t);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.t)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Transaction
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)
