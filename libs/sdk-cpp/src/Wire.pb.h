// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wire.proto

#ifndef PROTOBUF_Wire_2eproto__INCLUDED
#define PROTOBUF_Wire_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Cryptography.pb.h"
#include "Peer.pb.h"
#include "Transaction.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace Catalyst {
namespace Protocol {
namespace Cryptography {
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class SigningContext;
class SigningContextDefaultTypeInternal;
extern SigningContextDefaultTypeInternal _SigningContext_default_instance_;
}  // namespace Cryptography
namespace Peer {
class PeerId;
class PeerIdDefaultTypeInternal;
extern PeerIdDefaultTypeInternal _PeerId_default_instance_;
class PeerInfo;
class PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
}  // namespace Peer
namespace Transaction {
class BaseEntry;
class BaseEntryDefaultTypeInternal;
extern BaseEntryDefaultTypeInternal _BaseEntry_default_instance_;
class CoinbaseEntry;
class CoinbaseEntryDefaultTypeInternal;
extern CoinbaseEntryDefaultTypeInternal _CoinbaseEntry_default_instance_;
class ConfidentialEntry;
class ConfidentialEntryDefaultTypeInternal;
extern ConfidentialEntryDefaultTypeInternal _ConfidentialEntry_default_instance_;
class PublicEntry;
class PublicEntryDefaultTypeInternal;
extern PublicEntryDefaultTypeInternal _PublicEntry_default_instance_;
class RangeProof;
class RangeProofDefaultTypeInternal;
extern RangeProofDefaultTypeInternal _RangeProof_default_instance_;
}  // namespace Transaction
namespace Wire {
class CandidateDeltaBroadcast;
class CandidateDeltaBroadcastDefaultTypeInternal;
extern CandidateDeltaBroadcastDefaultTypeInternal _CandidateDeltaBroadcast_default_instance_;
class DeltaDfsHashBroadcast;
class DeltaDfsHashBroadcastDefaultTypeInternal;
extern DeltaDfsHashBroadcastDefaultTypeInternal _DeltaDfsHashBroadcast_default_instance_;
class FavouriteDeltaBroadcast;
class FavouriteDeltaBroadcastDefaultTypeInternal;
extern FavouriteDeltaBroadcastDefaultTypeInternal _FavouriteDeltaBroadcast_default_instance_;
class ProtocolErrorMessage;
class ProtocolErrorMessageDefaultTypeInternal;
extern ProtocolErrorMessageDefaultTypeInternal _ProtocolErrorMessage_default_instance_;
class ProtocolMessage;
class ProtocolMessageDefaultTypeInternal;
extern ProtocolMessageDefaultTypeInternal _ProtocolMessage_default_instance_;
class TransactionBroadcast;
class TransactionBroadcastDefaultTypeInternal;
extern TransactionBroadcastDefaultTypeInternal _TransactionBroadcast_default_instance_;
}  // namespace Wire
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace Catalyst {
namespace Protocol {
namespace Wire {

namespace protobuf_Wire_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Wire_2eproto

// ===================================================================

class ProtocolErrorMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.ProtocolErrorMessage) */ {
 public:
  ProtocolErrorMessage();
  virtual ~ProtocolErrorMessage();

  ProtocolErrorMessage(const ProtocolErrorMessage& from);

  inline ProtocolErrorMessage& operator=(const ProtocolErrorMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolErrorMessage& default_instance();

  static inline const ProtocolErrorMessage* internal_default_instance() {
    return reinterpret_cast<const ProtocolErrorMessage*>(
               &_ProtocolErrorMessage_default_instance_);
  }

  void Swap(ProtocolErrorMessage* other);

  // implements Message ----------------------------------------------

  inline ProtocolErrorMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtocolErrorMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtocolErrorMessage& from);
  void MergeFrom(const ProtocolErrorMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtocolErrorMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes correlation_id = 3;
  void clear_correlation_id();
  static const int kCorrelationIdFieldNumber = 3;
  const ::std::string& correlation_id() const;
  void set_correlation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_correlation_id(::std::string&& value);
  #endif
  void set_correlation_id(const char* value);
  void set_correlation_id(const void* value, size_t size);
  ::std::string* mutable_correlation_id();
  ::std::string* release_correlation_id();
  void set_allocated_correlation_id(::std::string* correlation_id);

  // .Catalyst.Protocol.Cryptography.Signature signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::Catalyst::Protocol::Cryptography::Signature& signature() const;
  ::Catalyst::Protocol::Cryptography::Signature* mutable_signature();
  ::Catalyst::Protocol::Cryptography::Signature* release_signature();
  void set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature);

  // .Catalyst.Protocol.Peer.PeerId peer_id = 2;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 2;
  const ::Catalyst::Protocol::Peer::PeerId& peer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* mutable_peer_id();
  ::Catalyst::Protocol::Peer::PeerId* release_peer_id();
  void set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id);

  // int32 code = 4;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.ProtocolErrorMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr correlation_id_;
  ::Catalyst::Protocol::Cryptography::Signature* signature_;
  ::Catalyst::Protocol::Peer::PeerId* peer_id_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct  protobuf_Wire_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtocolMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.ProtocolMessage) */ {
 public:
  ProtocolMessage();
  virtual ~ProtocolMessage();

  ProtocolMessage(const ProtocolMessage& from);

  inline ProtocolMessage& operator=(const ProtocolMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolMessage& default_instance();

  static inline const ProtocolMessage* internal_default_instance() {
    return reinterpret_cast<const ProtocolMessage*>(
               &_ProtocolMessage_default_instance_);
  }

  void Swap(ProtocolMessage* other);

  // implements Message ----------------------------------------------

  inline ProtocolMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtocolMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtocolMessage& from);
  void MergeFrom(const ProtocolMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtocolMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes correlation_id = 2;
  void clear_correlation_id();
  static const int kCorrelationIdFieldNumber = 2;
  const ::std::string& correlation_id() const;
  void set_correlation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_correlation_id(::std::string&& value);
  #endif
  void set_correlation_id(const char* value);
  void set_correlation_id(const void* value, size_t size);
  ::std::string* mutable_correlation_id();
  ::std::string* release_correlation_id();
  void set_allocated_correlation_id(::std::string* correlation_id);

  // string type_url = 3;
  void clear_type_url();
  static const int kTypeUrlFieldNumber = 3;
  const ::std::string& type_url() const;
  void set_type_url(const ::std::string& value);
  #if LANG_CXX11
  void set_type_url(::std::string&& value);
  #endif
  void set_type_url(const char* value);
  void set_type_url(const char* value, size_t size);
  ::std::string* mutable_type_url();
  ::std::string* release_type_url();
  void set_allocated_type_url(::std::string* type_url);

  // bytes value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 1;
  const ::Catalyst::Protocol::Peer::PeerId& peer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* mutable_peer_id();
  ::Catalyst::Protocol::Peer::PeerId* release_peer_id();
  void set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id);

  // .Catalyst.Protocol.Cryptography.Signature signature = 5;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::Catalyst::Protocol::Cryptography::Signature& signature() const;
  ::Catalyst::Protocol::Cryptography::Signature* mutable_signature();
  ::Catalyst::Protocol::Cryptography::Signature* release_signature();
  void set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.ProtocolMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr correlation_id_;
  ::google::protobuf::internal::ArenaStringPtr type_url_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::Catalyst::Protocol::Peer::PeerId* peer_id_;
  ::Catalyst::Protocol::Cryptography::Signature* signature_;
  mutable int _cached_size_;
  friend struct  protobuf_Wire_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransactionBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.TransactionBroadcast) */ {
 public:
  TransactionBroadcast();
  virtual ~TransactionBroadcast();

  TransactionBroadcast(const TransactionBroadcast& from);

  inline TransactionBroadcast& operator=(const TransactionBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionBroadcast& default_instance();

  static inline const TransactionBroadcast* internal_default_instance() {
    return reinterpret_cast<const TransactionBroadcast*>(
               &_TransactionBroadcast_default_instance_);
  }

  void Swap(TransactionBroadcast* other);

  // implements Message ----------------------------------------------

  inline TransactionBroadcast* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionBroadcast* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionBroadcast& from);
  void MergeFrom(const TransactionBroadcast& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
  bool has_public_entry() const;
  void clear_public_entry();
  static const int kPublicEntryFieldNumber = 1;
  const ::Catalyst::Protocol::Transaction::PublicEntry& public_entry() const;
  ::Catalyst::Protocol::Transaction::PublicEntry* mutable_public_entry();
  ::Catalyst::Protocol::Transaction::PublicEntry* release_public_entry();
  void set_allocated_public_entry(::Catalyst::Protocol::Transaction::PublicEntry* public_entry);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.TransactionBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Transaction::PublicEntry* public_entry_;
  mutable int _cached_size_;
  friend struct  protobuf_Wire_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CandidateDeltaBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.CandidateDeltaBroadcast) */ {
 public:
  CandidateDeltaBroadcast();
  virtual ~CandidateDeltaBroadcast();

  CandidateDeltaBroadcast(const CandidateDeltaBroadcast& from);

  inline CandidateDeltaBroadcast& operator=(const CandidateDeltaBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CandidateDeltaBroadcast& default_instance();

  static inline const CandidateDeltaBroadcast* internal_default_instance() {
    return reinterpret_cast<const CandidateDeltaBroadcast*>(
               &_CandidateDeltaBroadcast_default_instance_);
  }

  void Swap(CandidateDeltaBroadcast* other);

  // implements Message ----------------------------------------------

  inline CandidateDeltaBroadcast* New() const PROTOBUF_FINAL { return New(NULL); }

  CandidateDeltaBroadcast* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CandidateDeltaBroadcast& from);
  void MergeFrom(const CandidateDeltaBroadcast& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CandidateDeltaBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // bytes previous_delta_dfs_hash = 3;
  void clear_previous_delta_dfs_hash();
  static const int kPreviousDeltaDfsHashFieldNumber = 3;
  const ::std::string& previous_delta_dfs_hash() const;
  void set_previous_delta_dfs_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_previous_delta_dfs_hash(::std::string&& value);
  #endif
  void set_previous_delta_dfs_hash(const char* value);
  void set_previous_delta_dfs_hash(const void* value, size_t size);
  ::std::string* mutable_previous_delta_dfs_hash();
  ::std::string* release_previous_delta_dfs_hash();
  void set_allocated_previous_delta_dfs_hash(::std::string* previous_delta_dfs_hash);

  // .Catalyst.Protocol.Peer.PeerId producer_id = 2;
  bool has_producer_id() const;
  void clear_producer_id();
  static const int kProducerIdFieldNumber = 2;
  const ::Catalyst::Protocol::Peer::PeerId& producer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* mutable_producer_id();
  ::Catalyst::Protocol::Peer::PeerId* release_producer_id();
  void set_allocated_producer_id(::Catalyst::Protocol::Peer::PeerId* producer_id);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr previous_delta_dfs_hash_;
  ::Catalyst::Protocol::Peer::PeerId* producer_id_;
  mutable int _cached_size_;
  friend struct  protobuf_Wire_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FavouriteDeltaBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast) */ {
 public:
  FavouriteDeltaBroadcast();
  virtual ~FavouriteDeltaBroadcast();

  FavouriteDeltaBroadcast(const FavouriteDeltaBroadcast& from);

  inline FavouriteDeltaBroadcast& operator=(const FavouriteDeltaBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FavouriteDeltaBroadcast& default_instance();

  static inline const FavouriteDeltaBroadcast* internal_default_instance() {
    return reinterpret_cast<const FavouriteDeltaBroadcast*>(
               &_FavouriteDeltaBroadcast_default_instance_);
  }

  void Swap(FavouriteDeltaBroadcast* other);

  // implements Message ----------------------------------------------

  inline FavouriteDeltaBroadcast* New() const PROTOBUF_FINAL { return New(NULL); }

  FavouriteDeltaBroadcast* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FavouriteDeltaBroadcast& from);
  void MergeFrom(const FavouriteDeltaBroadcast& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FavouriteDeltaBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
  bool has_candidate() const;
  void clear_candidate();
  static const int kCandidateFieldNumber = 1;
  const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast& candidate() const;
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* mutable_candidate();
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* release_candidate();
  void set_allocated_candidate(::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* candidate);

  // .Catalyst.Protocol.Peer.PeerId voter_id = 2;
  bool has_voter_id() const;
  void clear_voter_id();
  static const int kVoterIdFieldNumber = 2;
  const ::Catalyst::Protocol::Peer::PeerId& voter_id() const;
  ::Catalyst::Protocol::Peer::PeerId* mutable_voter_id();
  ::Catalyst::Protocol::Peer::PeerId* release_voter_id();
  void set_allocated_voter_id(::Catalyst::Protocol::Peer::PeerId* voter_id);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* candidate_;
  ::Catalyst::Protocol::Peer::PeerId* voter_id_;
  mutable int _cached_size_;
  friend struct  protobuf_Wire_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeltaDfsHashBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast) */ {
 public:
  DeltaDfsHashBroadcast();
  virtual ~DeltaDfsHashBroadcast();

  DeltaDfsHashBroadcast(const DeltaDfsHashBroadcast& from);

  inline DeltaDfsHashBroadcast& operator=(const DeltaDfsHashBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeltaDfsHashBroadcast& default_instance();

  static inline const DeltaDfsHashBroadcast* internal_default_instance() {
    return reinterpret_cast<const DeltaDfsHashBroadcast*>(
               &_DeltaDfsHashBroadcast_default_instance_);
  }

  void Swap(DeltaDfsHashBroadcast* other);

  // implements Message ----------------------------------------------

  inline DeltaDfsHashBroadcast* New() const PROTOBUF_FINAL { return New(NULL); }

  DeltaDfsHashBroadcast* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeltaDfsHashBroadcast& from);
  void MergeFrom(const DeltaDfsHashBroadcast& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeltaDfsHashBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes delta_dfs_hash = 1;
  void clear_delta_dfs_hash();
  static const int kDeltaDfsHashFieldNumber = 1;
  const ::std::string& delta_dfs_hash() const;
  void set_delta_dfs_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_delta_dfs_hash(::std::string&& value);
  #endif
  void set_delta_dfs_hash(const char* value);
  void set_delta_dfs_hash(const void* value, size_t size);
  ::std::string* mutable_delta_dfs_hash();
  ::std::string* release_delta_dfs_hash();
  void set_allocated_delta_dfs_hash(::std::string* delta_dfs_hash);

  // bytes previous_delta_dfs_hash = 2;
  void clear_previous_delta_dfs_hash();
  static const int kPreviousDeltaDfsHashFieldNumber = 2;
  const ::std::string& previous_delta_dfs_hash() const;
  void set_previous_delta_dfs_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_previous_delta_dfs_hash(::std::string&& value);
  #endif
  void set_previous_delta_dfs_hash(const char* value);
  void set_previous_delta_dfs_hash(const void* value, size_t size);
  ::std::string* mutable_previous_delta_dfs_hash();
  ::std::string* release_previous_delta_dfs_hash();
  void set_allocated_previous_delta_dfs_hash(::std::string* previous_delta_dfs_hash);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr delta_dfs_hash_;
  ::google::protobuf::internal::ArenaStringPtr previous_delta_dfs_hash_;
  mutable int _cached_size_;
  friend struct  protobuf_Wire_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtocolErrorMessage

// .Catalyst.Protocol.Cryptography.Signature signature = 1;
inline bool ProtocolErrorMessage::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
inline void ProtocolErrorMessage::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) delete signature_;
  signature_ = NULL;
}
inline const ::Catalyst::Protocol::Cryptography::Signature& ProtocolErrorMessage::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
  return signature_ != NULL ? *signature_
                         : *::Catalyst::Protocol::Cryptography::Signature::internal_default_instance();
}
inline ::Catalyst::Protocol::Cryptography::Signature* ProtocolErrorMessage::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
  return signature_;
}
inline ::Catalyst::Protocol::Cryptography::Signature* ProtocolErrorMessage::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
  
  ::Catalyst::Protocol::Cryptography::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline void ProtocolErrorMessage::set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
}

// .Catalyst.Protocol.Peer.PeerId peer_id = 2;
inline bool ProtocolErrorMessage::has_peer_id() const {
  return this != internal_default_instance() && peer_id_ != NULL;
}
inline void ProtocolErrorMessage::clear_peer_id() {
  if (GetArenaNoVirtual() == NULL && peer_id_ != NULL) delete peer_id_;
  peer_id_ = NULL;
}
inline const ::Catalyst::Protocol::Peer::PeerId& ProtocolErrorMessage::peer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
  return peer_id_ != NULL ? *peer_id_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
inline ::Catalyst::Protocol::Peer::PeerId* ProtocolErrorMessage::mutable_peer_id() {
  
  if (peer_id_ == NULL) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
  return peer_id_;
}
inline ::Catalyst::Protocol::Peer::PeerId* ProtocolErrorMessage::release_peer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = peer_id_;
  peer_id_ = NULL;
  return temp;
}
inline void ProtocolErrorMessage::set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id) {
  delete peer_id_;
  peer_id_ = peer_id;
  if (peer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
}

// bytes correlation_id = 3;
inline void ProtocolErrorMessage::clear_correlation_id() {
  correlation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolErrorMessage::correlation_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
  return correlation_id_.GetNoArena();
}
inline void ProtocolErrorMessage::set_correlation_id(const ::std::string& value) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
#if LANG_CXX11
inline void ProtocolErrorMessage::set_correlation_id(::std::string&& value) {
  
  correlation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
#endif
inline void ProtocolErrorMessage::set_correlation_id(const char* value) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
inline void ProtocolErrorMessage::set_correlation_id(const void* value, size_t size) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
inline ::std::string* ProtocolErrorMessage::mutable_correlation_id() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
  return correlation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolErrorMessage::release_correlation_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
  
  return correlation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolErrorMessage::set_allocated_correlation_id(::std::string* correlation_id) {
  if (correlation_id != NULL) {
    
  } else {
    
  }
  correlation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlation_id);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}

// int32 code = 4;
inline void ProtocolErrorMessage::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ProtocolErrorMessage::code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.code)
  return code_;
}
inline void ProtocolErrorMessage::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolErrorMessage.code)
}

// -------------------------------------------------------------------

// ProtocolMessage

// .Catalyst.Protocol.Peer.PeerId peer_id = 1;
inline bool ProtocolMessage::has_peer_id() const {
  return this != internal_default_instance() && peer_id_ != NULL;
}
inline void ProtocolMessage::clear_peer_id() {
  if (GetArenaNoVirtual() == NULL && peer_id_ != NULL) delete peer_id_;
  peer_id_ = NULL;
}
inline const ::Catalyst::Protocol::Peer::PeerId& ProtocolMessage::peer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
  return peer_id_ != NULL ? *peer_id_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
inline ::Catalyst::Protocol::Peer::PeerId* ProtocolMessage::mutable_peer_id() {
  
  if (peer_id_ == NULL) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
  return peer_id_;
}
inline ::Catalyst::Protocol::Peer::PeerId* ProtocolMessage::release_peer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = peer_id_;
  peer_id_ = NULL;
  return temp;
}
inline void ProtocolMessage::set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id) {
  delete peer_id_;
  peer_id_ = peer_id;
  if (peer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
}

// bytes correlation_id = 2;
inline void ProtocolMessage::clear_correlation_id() {
  correlation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolMessage::correlation_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
  return correlation_id_.GetNoArena();
}
inline void ProtocolMessage::set_correlation_id(const ::std::string& value) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
#if LANG_CXX11
inline void ProtocolMessage::set_correlation_id(::std::string&& value) {
  
  correlation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
#endif
inline void ProtocolMessage::set_correlation_id(const char* value) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
inline void ProtocolMessage::set_correlation_id(const void* value, size_t size) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
inline ::std::string* ProtocolMessage::mutable_correlation_id() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
  return correlation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolMessage::release_correlation_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
  
  return correlation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolMessage::set_allocated_correlation_id(::std::string* correlation_id) {
  if (correlation_id != NULL) {
    
  } else {
    
  }
  correlation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlation_id);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}

// string type_url = 3;
inline void ProtocolMessage::clear_type_url() {
  type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolMessage::type_url() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
  return type_url_.GetNoArena();
}
inline void ProtocolMessage::set_type_url(const ::std::string& value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
#if LANG_CXX11
inline void ProtocolMessage::set_type_url(::std::string&& value) {
  
  type_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
#endif
inline void ProtocolMessage::set_type_url(const char* value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
inline void ProtocolMessage::set_type_url(const char* value, size_t size) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
inline ::std::string* ProtocolMessage::mutable_type_url() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
  return type_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolMessage::release_type_url() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
  
  return type_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolMessage::set_allocated_type_url(::std::string* type_url) {
  if (type_url != NULL) {
    
  } else {
    
  }
  type_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_url);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}

// bytes value = 4;
inline void ProtocolMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolMessage::value() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.value)
  return value_.GetNoArena();
}
inline void ProtocolMessage::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
#if LANG_CXX11
inline void ProtocolMessage::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
#endif
inline void ProtocolMessage::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
inline void ProtocolMessage::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
inline ::std::string* ProtocolMessage::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolMessage::release_value() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolMessage::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.value)
}

// .Catalyst.Protocol.Cryptography.Signature signature = 5;
inline bool ProtocolMessage::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
inline void ProtocolMessage::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) delete signature_;
  signature_ = NULL;
}
inline const ::Catalyst::Protocol::Cryptography::Signature& ProtocolMessage::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.signature)
  return signature_ != NULL ? *signature_
                         : *::Catalyst::Protocol::Cryptography::Signature::internal_default_instance();
}
inline ::Catalyst::Protocol::Cryptography::Signature* ProtocolMessage::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.signature)
  return signature_;
}
inline ::Catalyst::Protocol::Cryptography::Signature* ProtocolMessage::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.signature)
  
  ::Catalyst::Protocol::Cryptography::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline void ProtocolMessage::set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.signature)
}

// -------------------------------------------------------------------

// TransactionBroadcast

// .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
inline bool TransactionBroadcast::has_public_entry() const {
  return this != internal_default_instance() && public_entry_ != NULL;
}
inline void TransactionBroadcast::clear_public_entry() {
  if (GetArenaNoVirtual() == NULL && public_entry_ != NULL) delete public_entry_;
  public_entry_ = NULL;
}
inline const ::Catalyst::Protocol::Transaction::PublicEntry& TransactionBroadcast::public_entry() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
  return public_entry_ != NULL ? *public_entry_
                         : *::Catalyst::Protocol::Transaction::PublicEntry::internal_default_instance();
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* TransactionBroadcast::mutable_public_entry() {
  
  if (public_entry_ == NULL) {
    public_entry_ = new ::Catalyst::Protocol::Transaction::PublicEntry;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
  return public_entry_;
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* TransactionBroadcast::release_public_entry() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
  
  ::Catalyst::Protocol::Transaction::PublicEntry* temp = public_entry_;
  public_entry_ = NULL;
  return temp;
}
inline void TransactionBroadcast::set_allocated_public_entry(::Catalyst::Protocol::Transaction::PublicEntry* public_entry) {
  delete public_entry_;
  public_entry_ = public_entry;
  if (public_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
}

// -------------------------------------------------------------------

// CandidateDeltaBroadcast

// bytes hash = 1;
inline void CandidateDeltaBroadcast::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CandidateDeltaBroadcast::hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
  return hash_.GetNoArena();
}
inline void CandidateDeltaBroadcast::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
#if LANG_CXX11
inline void CandidateDeltaBroadcast::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
#endif
inline void CandidateDeltaBroadcast::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
inline void CandidateDeltaBroadcast::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
inline ::std::string* CandidateDeltaBroadcast::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CandidateDeltaBroadcast::release_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CandidateDeltaBroadcast::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}

// .Catalyst.Protocol.Peer.PeerId producer_id = 2;
inline bool CandidateDeltaBroadcast::has_producer_id() const {
  return this != internal_default_instance() && producer_id_ != NULL;
}
inline void CandidateDeltaBroadcast::clear_producer_id() {
  if (GetArenaNoVirtual() == NULL && producer_id_ != NULL) delete producer_id_;
  producer_id_ = NULL;
}
inline const ::Catalyst::Protocol::Peer::PeerId& CandidateDeltaBroadcast::producer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
  return producer_id_ != NULL ? *producer_id_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
inline ::Catalyst::Protocol::Peer::PeerId* CandidateDeltaBroadcast::mutable_producer_id() {
  
  if (producer_id_ == NULL) {
    producer_id_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
  return producer_id_;
}
inline ::Catalyst::Protocol::Peer::PeerId* CandidateDeltaBroadcast::release_producer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = producer_id_;
  producer_id_ = NULL;
  return temp;
}
inline void CandidateDeltaBroadcast::set_allocated_producer_id(::Catalyst::Protocol::Peer::PeerId* producer_id) {
  delete producer_id_;
  producer_id_ = producer_id;
  if (producer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
}

// bytes previous_delta_dfs_hash = 3;
inline void CandidateDeltaBroadcast::clear_previous_delta_dfs_hash() {
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CandidateDeltaBroadcast::previous_delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.GetNoArena();
}
inline void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(const ::std::string& value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
#if LANG_CXX11
inline void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(::std::string&& value) {
  
  previous_delta_dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
#endif
inline void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(const char* value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
inline void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(const void* value, size_t size) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
inline ::std::string* CandidateDeltaBroadcast::mutable_previous_delta_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CandidateDeltaBroadcast::release_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
  
  return previous_delta_dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CandidateDeltaBroadcast::set_allocated_previous_delta_dfs_hash(::std::string* previous_delta_dfs_hash) {
  if (previous_delta_dfs_hash != NULL) {
    
  } else {
    
  }
  previous_delta_dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}

// -------------------------------------------------------------------

// FavouriteDeltaBroadcast

// .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
inline bool FavouriteDeltaBroadcast::has_candidate() const {
  return this != internal_default_instance() && candidate_ != NULL;
}
inline void FavouriteDeltaBroadcast::clear_candidate() {
  if (GetArenaNoVirtual() == NULL && candidate_ != NULL) delete candidate_;
  candidate_ = NULL;
}
inline const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast& FavouriteDeltaBroadcast::candidate() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
  return candidate_ != NULL ? *candidate_
                         : *::Catalyst::Protocol::Wire::CandidateDeltaBroadcast::internal_default_instance();
}
inline ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* FavouriteDeltaBroadcast::mutable_candidate() {
  
  if (candidate_ == NULL) {
    candidate_ = new ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
  return candidate_;
}
inline ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* FavouriteDeltaBroadcast::release_candidate() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
  
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* temp = candidate_;
  candidate_ = NULL;
  return temp;
}
inline void FavouriteDeltaBroadcast::set_allocated_candidate(::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* candidate) {
  delete candidate_;
  candidate_ = candidate;
  if (candidate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
}

// .Catalyst.Protocol.Peer.PeerId voter_id = 2;
inline bool FavouriteDeltaBroadcast::has_voter_id() const {
  return this != internal_default_instance() && voter_id_ != NULL;
}
inline void FavouriteDeltaBroadcast::clear_voter_id() {
  if (GetArenaNoVirtual() == NULL && voter_id_ != NULL) delete voter_id_;
  voter_id_ = NULL;
}
inline const ::Catalyst::Protocol::Peer::PeerId& FavouriteDeltaBroadcast::voter_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
  return voter_id_ != NULL ? *voter_id_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
inline ::Catalyst::Protocol::Peer::PeerId* FavouriteDeltaBroadcast::mutable_voter_id() {
  
  if (voter_id_ == NULL) {
    voter_id_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
  return voter_id_;
}
inline ::Catalyst::Protocol::Peer::PeerId* FavouriteDeltaBroadcast::release_voter_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = voter_id_;
  voter_id_ = NULL;
  return temp;
}
inline void FavouriteDeltaBroadcast::set_allocated_voter_id(::Catalyst::Protocol::Peer::PeerId* voter_id) {
  delete voter_id_;
  voter_id_ = voter_id;
  if (voter_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
}

// -------------------------------------------------------------------

// DeltaDfsHashBroadcast

// bytes delta_dfs_hash = 1;
inline void DeltaDfsHashBroadcast::clear_delta_dfs_hash() {
  delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeltaDfsHashBroadcast::delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
  return delta_dfs_hash_.GetNoArena();
}
inline void DeltaDfsHashBroadcast::set_delta_dfs_hash(const ::std::string& value) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
#if LANG_CXX11
inline void DeltaDfsHashBroadcast::set_delta_dfs_hash(::std::string&& value) {
  
  delta_dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
#endif
inline void DeltaDfsHashBroadcast::set_delta_dfs_hash(const char* value) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
inline void DeltaDfsHashBroadcast::set_delta_dfs_hash(const void* value, size_t size) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
inline ::std::string* DeltaDfsHashBroadcast::mutable_delta_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
  return delta_dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeltaDfsHashBroadcast::release_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
  
  return delta_dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeltaDfsHashBroadcast::set_allocated_delta_dfs_hash(::std::string* delta_dfs_hash) {
  if (delta_dfs_hash != NULL) {
    
  } else {
    
  }
  delta_dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}

// bytes previous_delta_dfs_hash = 2;
inline void DeltaDfsHashBroadcast::clear_previous_delta_dfs_hash() {
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeltaDfsHashBroadcast::previous_delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.GetNoArena();
}
inline void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(const ::std::string& value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
#if LANG_CXX11
inline void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(::std::string&& value) {
  
  previous_delta_dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
#endif
inline void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(const char* value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
inline void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(const void* value, size_t size) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
inline ::std::string* DeltaDfsHashBroadcast::mutable_previous_delta_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeltaDfsHashBroadcast::release_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
  
  return previous_delta_dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeltaDfsHashBroadcast::set_allocated_previous_delta_dfs_hash(::std::string* previous_delta_dfs_hash) {
  if (previous_delta_dfs_hash != NULL) {
    
  } else {
    
  }
  previous_delta_dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Wire
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Wire_2eproto__INCLUDED
