// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Catalyst {
namespace Protocol {
namespace Rpc {
namespace Node {
class VersionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VersionRequest> {
} _VersionRequest_default_instance_;
class VersionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VersionResponse> {
} _VersionResponse_default_instance_;
class GetInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetInfoRequest> {
} _GetInfoRequest_default_instance_;
class GetInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetInfoResponse> {
} _GetInfoResponse_default_instance_;
class CreateWalletRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateWalletRequest> {
} _CreateWalletRequest_default_instance_;
class CreateWalletResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateWalletResponse> {
} _CreateWalletResponse_default_instance_;
class ListWalletRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListWalletRequest> {
} _ListWalletRequest_default_instance_;
class ListWalletResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListWalletResponse> {
} _ListWalletResponse_default_instance_;
class CreateAddressRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateAddressRequest> {
} _CreateAddressRequest_default_instance_;
class CreateAddressResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateAddressResponse> {
} _CreateAddressResponse_default_instance_;
class GetAddressRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetAddressRequest> {
} _GetAddressRequest_default_instance_;
class GetAddressResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetAddressResponse> {
} _GetAddressResponse_default_instance_;
class ListAddressRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListAddressRequest> {
} _ListAddressRequest_default_instance_;
class ListAddressResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListAddressResponse> {
} _ListAddressResponse_default_instance_;
class ValidateAddressRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ValidateAddressRequest> {
} _ValidateAddressRequest_default_instance_;
class ValidateAddressResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ValidateAddressResponse> {
} _ValidateAddressResponse_default_instance_;
class GetBalanceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetBalanceRequest> {
} _GetBalanceRequest_default_instance_;
class GetBalanceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetBalanceResponse> {
} _GetBalanceResponse_default_instance_;
class CreateRawTransactionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateRawTransactionRequest> {
} _CreateRawTransactionRequest_default_instance_;
class CreateRawTransactionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateRawTransactionResponse> {
} _CreateRawTransactionResponse_default_instance_;
class SignRawTransactionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignRawTransactionRequest> {
} _SignRawTransactionRequest_default_instance_;
class SignRawTransactionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignRawTransactionResponse> {
} _SignRawTransactionResponse_default_instance_;
class DecodeRawTransactionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DecodeRawTransactionRequest> {
} _DecodeRawTransactionRequest_default_instance_;
class DecodeRawTransactionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DecodeRawTransactionResponse> {
} _DecodeRawTransactionResponse_default_instance_;
class BroadcastRawTransactionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BroadcastRawTransactionRequest> {
} _BroadcastRawTransactionRequest_default_instance_;
class BroadcastRawTransactionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BroadcastRawTransactionResponse> {
} _BroadcastRawTransactionResponse_default_instance_;
class SendToRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendToRequest> {
} _SendToRequest_default_instance_;
class SendToResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendToResponse> {
} _SendToResponse_default_instance_;
class SendToFromRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendToFromRequest> {
} _SendToFromRequest_default_instance_;
class SendToFromResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendToFromResponse> {
} _SendToFromResponse_default_instance_;
class SendManyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendManyRequest> {
} _SendManyRequest_default_instance_;
class SendManyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendManyResponse> {
} _SendManyResponse_default_instance_;
class SendFromManyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendFromManyRequest> {
} _SendFromManyRequest_default_instance_;
class SendFromManyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendFromManyResponse> {
} _SendFromManyResponse_default_instance_;
class AddNodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddNodeRequest> {
} _AddNodeRequest_default_instance_;
class AddNodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddNodeResponse> {
} _AddNodeResponse_default_instance_;
class GetPeerListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPeerListRequest> {
} _GetPeerListRequest_default_instance_;
class GetPeerListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPeerListResponse> {
} _GetPeerListResponse_default_instance_;
class GetPeerReputationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPeerReputationRequest> {
} _GetPeerReputationRequest_default_instance_;
class GetPeerReputationResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPeerReputationResponse> {
} _GetPeerReputationResponse_default_instance_;
class SetPeerBlacklistRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetPeerBlacklistRequest> {
} _SetPeerBlacklistRequest_default_instance_;
class SetPeerBlacklistResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetPeerBlacklistResponse> {
} _SetPeerBlacklistResponse_default_instance_;
class GetPeerInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPeerInfoRequest> {
} _GetPeerInfoRequest_default_instance_;
class GetPeerInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPeerInfoResponse> {
} _GetPeerInfoResponse_default_instance_;
class GetConnectionCountRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetConnectionCountRequest> {
} _GetConnectionCountRequest_default_instance_;
class GetConnectionCountResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetConnectionCountResponse> {
} _GetConnectionCountResponse_default_instance_;
class GetDeltaRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDeltaRequest> {
} _GetDeltaRequest_default_instance_;
class GetDeltaResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDeltaResponse> {
} _GetDeltaResponse_default_instance_;
class GetMempoolRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetMempoolRequest> {
} _GetMempoolRequest_default_instance_;
class GetMempoolResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetMempoolResponse> {
} _GetMempoolResponse_default_instance_;
class SignMessageRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignMessageRequest> {
} _SignMessageRequest_default_instance_;
class SignMessageResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignMessageResponse> {
} _SignMessageResponse_default_instance_;
class VerifyMessageRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyMessageRequest> {
} _VerifyMessageRequest_default_instance_;
class VerifyMessageResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VerifyMessageResponse> {
} _VerifyMessageResponse_default_instance_;
class ServiceStatusRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceStatusRequest> {
} _ServiceStatusRequest_default_instance_;
class ServiceStatusResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceStatusResponse> {
} _ServiceStatusResponse_default_instance_;
class AddFileToDfsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddFileToDfsRequest> {
} _AddFileToDfsRequest_default_instance_;
class AddFileToDfsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddFileToDfsResponse> {
} _AddFileToDfsResponse_default_instance_;
class TransferFileBytesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferFileBytesRequest> {
} _TransferFileBytesRequest_default_instance_;
class TransferFileBytesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransferFileBytesResponse> {
} _TransferFileBytesResponse_default_instance_;
class RemovePeerRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemovePeerRequest> {
} _RemovePeerRequest_default_instance_;
class RemovePeerResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemovePeerResponse> {
} _RemovePeerResponse_default_instance_;
class GetPeerCountRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPeerCountRequest> {
} _GetPeerCountRequest_default_instance_;
class GetPeerCountResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPeerCountResponse> {
} _GetPeerCountResponse_default_instance_;
class GetFileFromDfsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetFileFromDfsRequest> {
} _GetFileFromDfsRequest_default_instance_;
class GetFileFromDfsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetFileFromDfsResponse> {
} _GetFileFromDfsResponse_default_instance_;
class SetPeerDataFolderRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetPeerDataFolderRequest> {
} _SetPeerDataFolderRequest_default_instance_;
class SetPeerDataFolderResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetPeerDataFolderResponse> {
} _SetPeerDataFolderResponse_default_instance_;

namespace protobuf_Rpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[68];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionResponse, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfoResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWalletRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWalletRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWalletResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateWalletResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListWalletRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListWalletRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListWalletResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListWalletResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateAddressRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidateAddressResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBalanceResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRawTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRawTransactionRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRawTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRawTransactionResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRawTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRawTransactionRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRawTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRawTransactionResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeRawTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeRawTransactionRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeRawTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeRawTransactionResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastRawTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastRawTransactionRequest, transaction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastRawTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastRawTransactionResponse, response_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToFromRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToFromRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToFromResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendToFromResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendManyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendManyRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendManyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendManyResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFromManyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFromManyRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFromManyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFromManyResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNodeRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNodeResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerListResponse, peers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerReputationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerReputationRequest, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerReputationRequest, ip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerReputationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerReputationResponse, reputation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerBlacklistRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerBlacklistRequest, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerBlacklistRequest, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerBlacklistRequest, blacklist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerBlacklistResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerBlacklistResponse, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerBlacklistResponse, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerBlacklistResponse, blacklist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoRequest, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoRequest, ip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerInfoResponse, peer_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectionCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectionCountRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectionCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectionCountResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeltaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeltaRequest, delta_dfs_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeltaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeltaResponse, delta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMempoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMempoolRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMempoolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMempoolResponse, transactions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMessageRequest, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMessageRequest, key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMessageRequest, signing_context_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMessageResponse, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMessageResponse, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMessageResponse, original_message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyMessageRequest, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyMessageRequest, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyMessageRequest, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyMessageRequest, signing_context_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyMessageResponse, is_signed_by_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatusRequest, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatusResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileToDfsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileToDfsRequest, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileToDfsRequest, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileToDfsRequest, node_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileToDfsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileToDfsResponse, response_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFileToDfsResponse, dfs_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFileBytesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFileBytesRequest, chunk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFileBytesRequest, chunk_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFileBytesRequest, correlation_file_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFileBytesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferFileBytesResponse, response_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerRequest, peer_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerRequest, public_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePeerResponse, deleted_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPeerCountResponse, peer_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileFromDfsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileFromDfsRequest, dfs_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileFromDfsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileFromDfsResponse, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileFromDfsResponse, response_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerDataFolderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerDataFolderRequest, data_folder_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerDataFolderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPeerDataFolderResponse, query_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(VersionRequest)},
  { 5, -1, sizeof(VersionResponse)},
  { 10, -1, sizeof(GetInfoRequest)},
  { 15, -1, sizeof(GetInfoResponse)},
  { 20, -1, sizeof(CreateWalletRequest)},
  { 25, -1, sizeof(CreateWalletResponse)},
  { 30, -1, sizeof(ListWalletRequest)},
  { 35, -1, sizeof(ListWalletResponse)},
  { 40, -1, sizeof(CreateAddressRequest)},
  { 45, -1, sizeof(CreateAddressResponse)},
  { 50, -1, sizeof(GetAddressRequest)},
  { 55, -1, sizeof(GetAddressResponse)},
  { 60, -1, sizeof(ListAddressRequest)},
  { 65, -1, sizeof(ListAddressResponse)},
  { 70, -1, sizeof(ValidateAddressRequest)},
  { 75, -1, sizeof(ValidateAddressResponse)},
  { 80, -1, sizeof(GetBalanceRequest)},
  { 85, -1, sizeof(GetBalanceResponse)},
  { 90, -1, sizeof(CreateRawTransactionRequest)},
  { 95, -1, sizeof(CreateRawTransactionResponse)},
  { 100, -1, sizeof(SignRawTransactionRequest)},
  { 105, -1, sizeof(SignRawTransactionResponse)},
  { 110, -1, sizeof(DecodeRawTransactionRequest)},
  { 115, -1, sizeof(DecodeRawTransactionResponse)},
  { 120, -1, sizeof(BroadcastRawTransactionRequest)},
  { 125, -1, sizeof(BroadcastRawTransactionResponse)},
  { 130, -1, sizeof(SendToRequest)},
  { 135, -1, sizeof(SendToResponse)},
  { 140, -1, sizeof(SendToFromRequest)},
  { 145, -1, sizeof(SendToFromResponse)},
  { 150, -1, sizeof(SendManyRequest)},
  { 155, -1, sizeof(SendManyResponse)},
  { 160, -1, sizeof(SendFromManyRequest)},
  { 165, -1, sizeof(SendFromManyResponse)},
  { 170, -1, sizeof(AddNodeRequest)},
  { 175, -1, sizeof(AddNodeResponse)},
  { 180, -1, sizeof(GetPeerListRequest)},
  { 184, -1, sizeof(GetPeerListResponse)},
  { 189, -1, sizeof(GetPeerReputationRequest)},
  { 195, -1, sizeof(GetPeerReputationResponse)},
  { 200, -1, sizeof(SetPeerBlacklistRequest)},
  { 207, -1, sizeof(SetPeerBlacklistResponse)},
  { 214, -1, sizeof(GetPeerInfoRequest)},
  { 220, -1, sizeof(GetPeerInfoResponse)},
  { 225, -1, sizeof(GetConnectionCountRequest)},
  { 230, -1, sizeof(GetConnectionCountResponse)},
  { 235, -1, sizeof(GetDeltaRequest)},
  { 240, -1, sizeof(GetDeltaResponse)},
  { 245, -1, sizeof(GetMempoolRequest)},
  { 250, -1, sizeof(GetMempoolResponse)},
  { 255, -1, sizeof(SignMessageRequest)},
  { 262, -1, sizeof(SignMessageResponse)},
  { 269, -1, sizeof(VerifyMessageRequest)},
  { 277, -1, sizeof(VerifyMessageResponse)},
  { 282, -1, sizeof(ServiceStatusRequest)},
  { 287, -1, sizeof(ServiceStatusResponse)},
  { 292, -1, sizeof(AddFileToDfsRequest)},
  { 299, -1, sizeof(AddFileToDfsResponse)},
  { 305, -1, sizeof(TransferFileBytesRequest)},
  { 312, -1, sizeof(TransferFileBytesResponse)},
  { 317, -1, sizeof(RemovePeerRequest)},
  { 323, -1, sizeof(RemovePeerResponse)},
  { 328, -1, sizeof(GetPeerCountRequest)},
  { 332, -1, sizeof(GetPeerCountResponse)},
  { 337, -1, sizeof(GetFileFromDfsRequest)},
  { 342, -1, sizeof(GetFileFromDfsResponse)},
  { 348, -1, sizeof(SetPeerDataFolderRequest)},
  { 353, -1, sizeof(SetPeerDataFolderResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VersionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VersionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateWalletRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateWalletResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListWalletRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListWalletResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateAddressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateAddressResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAddressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAddressResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListAddressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListAddressResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ValidateAddressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ValidateAddressResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetBalanceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetBalanceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRawTransactionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateRawTransactionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignRawTransactionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignRawTransactionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecodeRawTransactionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecodeRawTransactionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BroadcastRawTransactionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BroadcastRawTransactionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendToRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendToResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendToFromRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendToFromResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendManyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendManyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendFromManyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendFromManyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddNodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddNodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerReputationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerReputationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetPeerBlacklistRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetPeerBlacklistResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetConnectionCountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetConnectionCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDeltaRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDeltaResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMempoolRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMempoolResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignMessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyMessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VerifyMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceStatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddFileToDfsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddFileToDfsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferFileBytesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransferFileBytesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemovePeerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemovePeerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerCountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPeerCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetFileFromDfsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetFileFromDfsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetPeerDataFolderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetPeerDataFolderResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Rpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 68);
}

}  // namespace

void TableStruct::Shutdown() {
  _VersionRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _VersionResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GetInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GetInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CreateWalletRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CreateWalletResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ListWalletRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ListWalletResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CreateAddressRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CreateAddressResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GetAddressRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _GetAddressResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ListAddressRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ListAddressResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _ValidateAddressRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ValidateAddressResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GetBalanceRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _GetBalanceResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CreateRawTransactionRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CreateRawTransactionResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _SignRawTransactionRequest_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _SignRawTransactionResponse_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _DecodeRawTransactionRequest_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _DecodeRawTransactionResponse_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _BroadcastRawTransactionRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _BroadcastRawTransactionResponse_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _SendToRequest_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _SendToResponse_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _SendToFromRequest_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _SendToFromResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _SendManyRequest_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _SendManyResponse_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _SendFromManyRequest_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _SendFromManyResponse_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _AddNodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _AddNodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _GetPeerListRequest_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _GetPeerListResponse_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _GetPeerReputationRequest_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _GetPeerReputationResponse_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _SetPeerBlacklistRequest_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _SetPeerBlacklistResponse_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _GetPeerInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _GetPeerInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _GetConnectionCountRequest_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _GetConnectionCountResponse_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _GetDeltaRequest_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _GetDeltaResponse_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _GetMempoolRequest_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _GetMempoolResponse_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _SignMessageRequest_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _SignMessageResponse_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _VerifyMessageRequest_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _VerifyMessageResponse_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _ServiceStatusRequest_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _ServiceStatusResponse_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _AddFileToDfsRequest_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _AddFileToDfsResponse_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _TransferFileBytesRequest_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _TransferFileBytesResponse_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _RemovePeerRequest_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _RemovePeerResponse_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _GetPeerCountRequest_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _GetPeerCountResponse_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _GetFileFromDfsRequest_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _GetFileFromDfsResponse_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _SetPeerDataFolderRequest_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _SetPeerDataFolderResponse_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Catalyst::Protocol::Peer::protobuf_Peer_2eproto::InitDefaults();
  ::Catalyst::Protocol::Cryptography::protobuf_Cryptography_2eproto::InitDefaults();
  ::Catalyst::Protocol::Deltas::protobuf_Deltas_2eproto::InitDefaults();
  ::Catalyst::Protocol::Wire::protobuf_Wire_2eproto::InitDefaults();
  ::Catalyst::Protocol::Transaction::protobuf_Transaction_2eproto::InitDefaults();
  _VersionRequest_default_instance_.DefaultConstruct();
  _VersionResponse_default_instance_.DefaultConstruct();
  _GetInfoRequest_default_instance_.DefaultConstruct();
  _GetInfoResponse_default_instance_.DefaultConstruct();
  _CreateWalletRequest_default_instance_.DefaultConstruct();
  _CreateWalletResponse_default_instance_.DefaultConstruct();
  _ListWalletRequest_default_instance_.DefaultConstruct();
  _ListWalletResponse_default_instance_.DefaultConstruct();
  _CreateAddressRequest_default_instance_.DefaultConstruct();
  _CreateAddressResponse_default_instance_.DefaultConstruct();
  _GetAddressRequest_default_instance_.DefaultConstruct();
  _GetAddressResponse_default_instance_.DefaultConstruct();
  _ListAddressRequest_default_instance_.DefaultConstruct();
  _ListAddressResponse_default_instance_.DefaultConstruct();
  _ValidateAddressRequest_default_instance_.DefaultConstruct();
  _ValidateAddressResponse_default_instance_.DefaultConstruct();
  _GetBalanceRequest_default_instance_.DefaultConstruct();
  _GetBalanceResponse_default_instance_.DefaultConstruct();
  _CreateRawTransactionRequest_default_instance_.DefaultConstruct();
  _CreateRawTransactionResponse_default_instance_.DefaultConstruct();
  _SignRawTransactionRequest_default_instance_.DefaultConstruct();
  _SignRawTransactionResponse_default_instance_.DefaultConstruct();
  _DecodeRawTransactionRequest_default_instance_.DefaultConstruct();
  _DecodeRawTransactionResponse_default_instance_.DefaultConstruct();
  _BroadcastRawTransactionRequest_default_instance_.DefaultConstruct();
  _BroadcastRawTransactionResponse_default_instance_.DefaultConstruct();
  _SendToRequest_default_instance_.DefaultConstruct();
  _SendToResponse_default_instance_.DefaultConstruct();
  _SendToFromRequest_default_instance_.DefaultConstruct();
  _SendToFromResponse_default_instance_.DefaultConstruct();
  _SendManyRequest_default_instance_.DefaultConstruct();
  _SendManyResponse_default_instance_.DefaultConstruct();
  _SendFromManyRequest_default_instance_.DefaultConstruct();
  _SendFromManyResponse_default_instance_.DefaultConstruct();
  _AddNodeRequest_default_instance_.DefaultConstruct();
  _AddNodeResponse_default_instance_.DefaultConstruct();
  _GetPeerListRequest_default_instance_.DefaultConstruct();
  _GetPeerListResponse_default_instance_.DefaultConstruct();
  _GetPeerReputationRequest_default_instance_.DefaultConstruct();
  _GetPeerReputationResponse_default_instance_.DefaultConstruct();
  _SetPeerBlacklistRequest_default_instance_.DefaultConstruct();
  _SetPeerBlacklistResponse_default_instance_.DefaultConstruct();
  _GetPeerInfoRequest_default_instance_.DefaultConstruct();
  _GetPeerInfoResponse_default_instance_.DefaultConstruct();
  _GetConnectionCountRequest_default_instance_.DefaultConstruct();
  _GetConnectionCountResponse_default_instance_.DefaultConstruct();
  _GetDeltaRequest_default_instance_.DefaultConstruct();
  _GetDeltaResponse_default_instance_.DefaultConstruct();
  _GetMempoolRequest_default_instance_.DefaultConstruct();
  _GetMempoolResponse_default_instance_.DefaultConstruct();
  _SignMessageRequest_default_instance_.DefaultConstruct();
  _SignMessageResponse_default_instance_.DefaultConstruct();
  _VerifyMessageRequest_default_instance_.DefaultConstruct();
  _VerifyMessageResponse_default_instance_.DefaultConstruct();
  _ServiceStatusRequest_default_instance_.DefaultConstruct();
  _ServiceStatusResponse_default_instance_.DefaultConstruct();
  _AddFileToDfsRequest_default_instance_.DefaultConstruct();
  _AddFileToDfsResponse_default_instance_.DefaultConstruct();
  _TransferFileBytesRequest_default_instance_.DefaultConstruct();
  _TransferFileBytesResponse_default_instance_.DefaultConstruct();
  _RemovePeerRequest_default_instance_.DefaultConstruct();
  _RemovePeerResponse_default_instance_.DefaultConstruct();
  _GetPeerCountRequest_default_instance_.DefaultConstruct();
  _GetPeerCountResponse_default_instance_.DefaultConstruct();
  _GetFileFromDfsRequest_default_instance_.DefaultConstruct();
  _GetFileFromDfsResponse_default_instance_.DefaultConstruct();
  _SetPeerDataFolderRequest_default_instance_.DefaultConstruct();
  _SetPeerDataFolderResponse_default_instance_.DefaultConstruct();
  _BroadcastRawTransactionRequest_default_instance_.get_mutable()->transaction_ = const_cast< ::Catalyst::Protocol::Wire::TransactionBroadcast*>(
      ::Catalyst::Protocol::Wire::TransactionBroadcast::internal_default_instance());
  _GetDeltaResponse_default_instance_.get_mutable()->delta_ = const_cast< ::Catalyst::Protocol::Deltas::Delta*>(
      ::Catalyst::Protocol::Deltas::Delta::internal_default_instance());
  _SignMessageRequest_default_instance_.get_mutable()->signing_context_ = const_cast< ::Catalyst::Protocol::Cryptography::SigningContext*>(
      ::Catalyst::Protocol::Cryptography::SigningContext::internal_default_instance());
  _VerifyMessageRequest_default_instance_.get_mutable()->signing_context_ = const_cast< ::Catalyst::Protocol::Cryptography::SigningContext*>(
      ::Catalyst::Protocol::Cryptography::SigningContext::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\tRpc.proto\022\032Catalyst.Protocol.Rpc.Node\032"
      "\nPeer.proto\032\022Cryptography.proto\032\014Deltas."
      "proto\032\nWire.proto\032\021Transaction.proto\"\037\n\016"
      "VersionRequest\022\r\n\005query\030\001 \001(\010\"\"\n\017Version"
      "Response\022\017\n\007version\030\001 \001(\t\"\037\n\016GetInfoRequ"
      "est\022\r\n\005query\030\001 \001(\010\" \n\017GetInfoResponse\022\r\n"
      "\005query\030\001 \001(\t\"$\n\023CreateWalletRequest\022\r\n\005q"
      "uery\030\001 \001(\010\"%\n\024CreateWalletResponse\022\r\n\005qu"
      "ery\030\001 \001(\t\"\"\n\021ListWalletRequest\022\r\n\005query\030"
      "\001 \001(\010\"#\n\022ListWalletResponse\022\r\n\005query\030\001 \001"
      "(\t\"%\n\024CreateAddressRequest\022\r\n\005query\030\001 \001("
      "\010\"&\n\025CreateAddressResponse\022\r\n\005query\030\001 \001("
      "\t\"\"\n\021GetAddressRequest\022\r\n\005query\030\001 \001(\010\"#\n"
      "\022GetAddressResponse\022\r\n\005query\030\001 \001(\t\"#\n\022Li"
      "stAddressRequest\022\r\n\005query\030\001 \001(\010\"$\n\023ListA"
      "ddressResponse\022\r\n\005query\030\001 \001(\t\"\'\n\026Validat"
      "eAddressRequest\022\r\n\005query\030\001 \001(\010\"(\n\027Valida"
      "teAddressResponse\022\r\n\005query\030\001 \001(\t\"\"\n\021GetB"
      "alanceRequest\022\r\n\005query\030\001 \001(\010\"#\n\022GetBalan"
      "ceResponse\022\r\n\005query\030\001 \001(\t\",\n\033CreateRawTr"
      "ansactionRequest\022\r\n\005query\030\001 \001(\010\"-\n\034Creat"
      "eRawTransactionResponse\022\r\n\005query\030\001 \001(\t\"*"
      "\n\031SignRawTransactionRequest\022\r\n\005query\030\001 \001"
      "(\010\"+\n\032SignRawTransactionResponse\022\r\n\005quer"
      "y\030\001 \001(\t\",\n\033DecodeRawTransactionRequest\022\r"
      "\n\005query\030\001 \001(\010\"-\n\034DecodeRawTransactionRes"
      "ponse\022\r\n\005query\030\001 \001(\t\"c\n\036BroadcastRawTran"
      "sactionRequest\022A\n\013transaction\030\001 \001(\0132,.Ca"
      "talyst.Protocol.Wire.TransactionBroadcas"
      "t\"b\n\037BroadcastRawTransactionResponse\022\?\n\r"
      "response_code\030\001 \001(\0162(.Catalyst.Protocol."
      "Rpc.Node.ResponseCode\"\036\n\rSendToRequest\022\r"
      "\n\005query\030\001 \001(\010\"\037\n\016SendToResponse\022\r\n\005query"
      "\030\001 \001(\t\"\"\n\021SendToFromRequest\022\r\n\005query\030\001 \001"
      "(\010\"#\n\022SendToFromResponse\022\r\n\005query\030\001 \001(\t\""
      " \n\017SendManyRequest\022\r\n\005query\030\001 \001(\010\"!\n\020Sen"
      "dManyResponse\022\r\n\005query\030\001 \001(\t\"$\n\023SendFrom"
      "ManyRequest\022\r\n\005query\030\001 \001(\010\"%\n\024SendFromMa"
      "nyResponse\022\r\n\005query\030\001 \001(\t\"\037\n\016AddNodeRequ"
      "est\022\r\n\005query\030\001 \001(\010\" \n\017AddNodeResponse\022\r\n"
      "\005query\030\001 \001(\t\"\024\n\022GetPeerListRequest\"D\n\023Ge"
      "tPeerListResponse\022-\n\005peers\030\001 \003(\0132\036.Catal"
      "yst.Protocol.Peer.PeerId\":\n\030GetPeerReput"
      "ationRequest\022\022\n\npublic_key\030\001 \001(\014\022\n\n\002ip\030\002"
      " \001(\014\"/\n\031GetPeerReputationResponse\022\022\n\nrep"
      "utation\030\001 \001(\005\"L\n\027SetPeerBlacklistRequest"
      "\022\022\n\npublic_key\030\001 \001(\014\022\n\n\002ip\030\002 \001(\014\022\021\n\tblac"
      "klist\030\003 \001(\010\"M\n\030SetPeerBlacklistResponse\022"
      "\022\n\npublic_key\030\001 \001(\014\022\n\n\002ip\030\002 \001(\014\022\021\n\tblack"
      "list\030\003 \001(\010\"4\n\022GetPeerInfoRequest\022\022\n\npubl"
      "ic_key\030\001 \001(\014\022\n\n\002ip\030\002 \001(\014\"J\n\023GetPeerInfoR"
      "esponse\0223\n\tpeer_info\030\001 \003(\0132 .Catalyst.Pr"
      "otocol.Peer.PeerInfo\"*\n\031GetConnectionCou"
      "ntRequest\022\r\n\005query\030\001 \001(\010\"+\n\032GetConnectio"
      "nCountResponse\022\r\n\005query\030\001 \001(\t\")\n\017GetDelt"
      "aRequest\022\026\n\016delta_dfs_hash\030\001 \001(\014\"B\n\020GetD"
      "eltaResponse\022.\n\005delta\030\001 \001(\0132\037.Catalyst.P"
      "rotocol.Deltas.Delta\"\"\n\021GetMempoolReques"
      "t\022\r\n\005query\030\001 \001(\010\"V\n\022GetMempoolResponse\022@"
      "\n\014transactions\030\001 \003(\0132*.Catalyst.Protocol"
      ".Transaction.PublicEntry\"~\n\022SignMessageR"
      "equest\022\017\n\007message\030\001 \001(\014\022\016\n\006key_id\030\002 \001(\t\022"
      "G\n\017signing_context\030\003 \001(\0132..Catalyst.Prot"
      "ocol.Cryptography.SigningContext\"V\n\023Sign"
      "MessageResponse\022\021\n\tsignature\030\001 \001(\014\022\022\n\npu"
      "blic_key\030\002 \001(\014\022\030\n\020original_message\030\003 \001(\014"
      "\"\227\001\n\024VerifyMessageRequest\022\021\n\tsignature\030\001"
      " \001(\014\022\022\n\npublic_key\030\002 \001(\014\022\017\n\007message\030\003 \001("
      "\014\022G\n\017signing_context\030\004 \001(\0132..Catalyst.Pr"
      "otocol.Cryptography.SigningContext\"1\n\025Ve"
      "rifyMessageResponse\022\030\n\020is_signed_by_key\030"
      "\001 \001(\010\"%\n\024ServiceStatusRequest\022\r\n\005query\030\001"
      " \001(\010\"&\n\025ServiceStatusResponse\022\r\n\005query\030\001"
      " \001(\t\"I\n\023AddFileToDfsRequest\022\021\n\tfile_size"
      "\030\001 \001(\004\022\021\n\tfile_name\030\002 \001(\t\022\014\n\004node\030\003 \001(\t\""
      "\?\n\024AddFileToDfsResponse\022\025\n\rresponse_code"
      "\030\001 \001(\014\022\020\n\010dfs_hash\030\002 \001(\t\"`\n\030TransferFile"
      "BytesRequest\022\020\n\010chunk_id\030\001 \001(\r\022\023\n\013chunk_"
      "bytes\030\002 \001(\014\022\035\n\025correlation_file_name\030\003 \001"
      "(\014\"2\n\031TransferFileBytesResponse\022\025\n\rrespo"
      "nse_code\030\001 \001(\014\"8\n\021RemovePeerRequest\022\017\n\007p"
      "eer_ip\030\001 \001(\014\022\022\n\npublic_key\030\002 \001(\014\"+\n\022Remo"
      "vePeerResponse\022\025\n\rdeleted_count\030\001 \001(\r\"\025\n"
      "\023GetPeerCountRequest\"*\n\024GetPeerCountResp"
      "onse\022\022\n\npeer_count\030\001 \001(\005\")\n\025GetFileFromD"
      "fsRequest\022\020\n\010dfs_hash\030\001 \001(\t\"B\n\026GetFileFr"
      "omDfsResponse\022\021\n\tfile_size\030\001 \001(\004\022\025\n\rresp"
      "onse_code\030\002 \001(\014\"/\n\030SetPeerDataFolderRequ"
      "est\022\023\n\013data_folder\030\001 \001(\t\"*\n\031SetPeerDataF"
      "olderResponse\022\r\n\005query\030\001 \001(\010*]\n\014Response"
      "Code\022\013\n\007PENDING\020\000\022\016\n\nSUCCESSFUL\020\001\022\t\n\005ERR"
      "OR\020\002\022\014\n\010FINISHED\020\003\022\013\n\007EXPIRED\020\004\022\n\n\006FAILE"
      "D\020\005B\002P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3695);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Rpc.proto", &protobuf_RegisterTypes);
  ::Catalyst::Protocol::Peer::protobuf_Peer_2eproto::AddDescriptors();
  ::Catalyst::Protocol::Cryptography::protobuf_Cryptography_2eproto::AddDescriptors();
  ::Catalyst::Protocol::Deltas::protobuf_Deltas_2eproto::AddDescriptors();
  ::Catalyst::Protocol::Wire::protobuf_Wire_2eproto::AddDescriptors();
  ::Catalyst::Protocol::Transaction::protobuf_Transaction_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Rpc_2eproto

const ::google::protobuf::EnumDescriptor* ResponseCode_descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_enum_descriptors[0];
}
bool ResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VersionRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VersionRequest::VersionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.VersionRequest)
}
VersionRequest::VersionRequest(const VersionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.VersionRequest)
}

void VersionRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

VersionRequest::~VersionRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.VersionRequest)
  SharedDtor();
}

void VersionRequest::SharedDtor() {
}

void VersionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[0].descriptor;
}

const VersionRequest& VersionRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

VersionRequest* VersionRequest::New(::google::protobuf::Arena* arena) const {
  VersionRequest* n = new VersionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  query_ = false;
}

bool VersionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.VersionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.VersionRequest)
  return false;
#undef DO_
}

void VersionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.VersionRequest)
}

::google::protobuf::uint8* VersionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.VersionRequest)
  return target;
}

size_t VersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VersionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.VersionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.VersionRequest)
    MergeFrom(*source);
  }
}

void VersionRequest::MergeFrom(const VersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void VersionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionRequest::CopyFrom(const VersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionRequest::IsInitialized() const {
  return true;
}

void VersionRequest::Swap(VersionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VersionRequest::InternalSwap(VersionRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VersionRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VersionRequest

// bool query = 1;
void VersionRequest::clear_query() {
  query_ = false;
}
bool VersionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VersionRequest.query)
  return query_;
}
void VersionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VersionRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VersionResponse::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VersionResponse::VersionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.VersionResponse)
}
VersionResponse::VersionResponse(const VersionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.VersionResponse)
}

void VersionResponse::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VersionResponse::~VersionResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.VersionResponse)
  SharedDtor();
}

void VersionResponse::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VersionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[1].descriptor;
}

const VersionResponse& VersionResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

VersionResponse* VersionResponse::New(::google::protobuf::Arena* arena) const {
  VersionResponse* n = new VersionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VersionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.VersionResponse.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.VersionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.VersionResponse)
  return false;
#undef DO_
}

void VersionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.VersionResponse.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.VersionResponse)
}

::google::protobuf::uint8* VersionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.VersionResponse.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.VersionResponse)
  return target;
}

size_t VersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  size_t total_size = 0;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VersionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.VersionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.VersionResponse)
    MergeFrom(*source);
  }
}

void VersionResponse::MergeFrom(const VersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void VersionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionResponse::CopyFrom(const VersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionResponse::IsInitialized() const {
  return true;
}

void VersionResponse::Swap(VersionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VersionResponse::InternalSwap(VersionResponse* other) {
  version_.Swap(&other->version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VersionResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VersionResponse

// string version = 1;
void VersionResponse::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VersionResponse::version() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  return version_.GetNoArena();
}
void VersionResponse::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
#if LANG_CXX11
void VersionResponse::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
#endif
void VersionResponse::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
void VersionResponse::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
::std::string* VersionResponse::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VersionResponse::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInfoRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoRequest::GetInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
}
GetInfoRequest::GetInfoRequest(const GetInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
}

void GetInfoRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

GetInfoRequest::~GetInfoRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  SharedDtor();
}

void GetInfoRequest::SharedDtor() {
}

void GetInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[2].descriptor;
}

const GetInfoRequest& GetInfoRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetInfoRequest* GetInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetInfoRequest* n = new GetInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  query_ = false;
}

bool GetInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  return false;
#undef DO_
}

void GetInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
}

::google::protobuf::uint8* GetInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  return target;
}

size_t GetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
    MergeFrom(*source);
  }
}

void GetInfoRequest::MergeFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void GetInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoRequest::CopyFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoRequest::IsInitialized() const {
  return true;
}

void GetInfoRequest::Swap(GetInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInfoRequest::InternalSwap(GetInfoRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInfoRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInfoRequest

// bool query = 1;
void GetInfoRequest::clear_query() {
  query_ = false;
}
bool GetInfoRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetInfoRequest.query)
  return query_;
}
void GetInfoRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetInfoRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInfoResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoResponse::GetInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
}
GetInfoResponse::GetInfoResponse(const GetInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
}

void GetInfoResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetInfoResponse::~GetInfoResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  SharedDtor();
}

void GetInfoResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfoResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[3].descriptor;
}

const GetInfoResponse& GetInfoResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetInfoResponse* GetInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetInfoResponse* n = new GetInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.GetInfoResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  return false;
#undef DO_
}

void GetInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetInfoResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
}

::google::protobuf::uint8* GetInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetInfoResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  return target;
}

size_t GetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
    MergeFrom(*source);
  }
}

void GetInfoResponse::MergeFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void GetInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResponse::CopyFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResponse::IsInitialized() const {
  return true;
}

void GetInfoResponse::Swap(GetInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInfoResponse::InternalSwap(GetInfoResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInfoResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInfoResponse

// string query = 1;
void GetInfoResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInfoResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  return query_.GetNoArena();
}
void GetInfoResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
#if LANG_CXX11
void GetInfoResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
#endif
void GetInfoResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
void GetInfoResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
::std::string* GetInfoResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInfoResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInfoResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateWalletRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWalletRequest::CreateWalletRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
}
CreateWalletRequest::CreateWalletRequest(const CreateWalletRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
}

void CreateWalletRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

CreateWalletRequest::~CreateWalletRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  SharedDtor();
}

void CreateWalletRequest::SharedDtor() {
}

void CreateWalletRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateWalletRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[4].descriptor;
}

const CreateWalletRequest& CreateWalletRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateWalletRequest* CreateWalletRequest::New(::google::protobuf::Arena* arena) const {
  CreateWalletRequest* n = new CreateWalletRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateWalletRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  query_ = false;
}

bool CreateWalletRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  return false;
#undef DO_
}

void CreateWalletRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
}

::google::protobuf::uint8* CreateWalletRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  return target;
}

size_t CreateWalletRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateWalletRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWalletRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateWalletRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
    MergeFrom(*source);
  }
}

void CreateWalletRequest::MergeFrom(const CreateWalletRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void CreateWalletRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWalletRequest::CopyFrom(const CreateWalletRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWalletRequest::IsInitialized() const {
  return true;
}

void CreateWalletRequest::Swap(CreateWalletRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateWalletRequest::InternalSwap(CreateWalletRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateWalletRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateWalletRequest

// bool query = 1;
void CreateWalletRequest::clear_query() {
  query_ = false;
}
bool CreateWalletRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateWalletRequest.query)
  return query_;
}
void CreateWalletRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateWalletRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateWalletResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWalletResponse::CreateWalletResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
}
CreateWalletResponse::CreateWalletResponse(const CreateWalletResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
}

void CreateWalletResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateWalletResponse::~CreateWalletResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  SharedDtor();
}

void CreateWalletResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateWalletResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateWalletResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[5].descriptor;
}

const CreateWalletResponse& CreateWalletResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateWalletResponse* CreateWalletResponse::New(::google::protobuf::Arena* arena) const {
  CreateWalletResponse* n = new CreateWalletResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateWalletResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateWalletResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  return false;
#undef DO_
}

void CreateWalletResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
}

::google::protobuf::uint8* CreateWalletResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  return target;
}

size_t CreateWalletResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateWalletResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWalletResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateWalletResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
    MergeFrom(*source);
  }
}

void CreateWalletResponse::MergeFrom(const CreateWalletResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void CreateWalletResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWalletResponse::CopyFrom(const CreateWalletResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWalletResponse::IsInitialized() const {
  return true;
}

void CreateWalletResponse::Swap(CreateWalletResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateWalletResponse::InternalSwap(CreateWalletResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateWalletResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateWalletResponse

// string query = 1;
void CreateWalletResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateWalletResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  return query_.GetNoArena();
}
void CreateWalletResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
#if LANG_CXX11
void CreateWalletResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
#endif
void CreateWalletResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
void CreateWalletResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
::std::string* CreateWalletResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateWalletResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateWalletResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListWalletRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListWalletRequest::ListWalletRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
}
ListWalletRequest::ListWalletRequest(const ListWalletRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
}

void ListWalletRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

ListWalletRequest::~ListWalletRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  SharedDtor();
}

void ListWalletRequest::SharedDtor() {
}

void ListWalletRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListWalletRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[6].descriptor;
}

const ListWalletRequest& ListWalletRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListWalletRequest* ListWalletRequest::New(::google::protobuf::Arena* arena) const {
  ListWalletRequest* n = new ListWalletRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListWalletRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  query_ = false;
}

bool ListWalletRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  return false;
#undef DO_
}

void ListWalletRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
}

::google::protobuf::uint8* ListWalletRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  return target;
}

size_t ListWalletRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListWalletRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListWalletRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListWalletRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
    MergeFrom(*source);
  }
}

void ListWalletRequest::MergeFrom(const ListWalletRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void ListWalletRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListWalletRequest::CopyFrom(const ListWalletRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWalletRequest::IsInitialized() const {
  return true;
}

void ListWalletRequest::Swap(ListWalletRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListWalletRequest::InternalSwap(ListWalletRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListWalletRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListWalletRequest

// bool query = 1;
void ListWalletRequest::clear_query() {
  query_ = false;
}
bool ListWalletRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListWalletRequest.query)
  return query_;
}
void ListWalletRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListWalletRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListWalletResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListWalletResponse::ListWalletResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
}
ListWalletResponse::ListWalletResponse(const ListWalletResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
}

void ListWalletResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListWalletResponse::~ListWalletResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  SharedDtor();
}

void ListWalletResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListWalletResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListWalletResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[7].descriptor;
}

const ListWalletResponse& ListWalletResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListWalletResponse* ListWalletResponse::New(::google::protobuf::Arena* arena) const {
  ListWalletResponse* n = new ListWalletResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListWalletResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListWalletResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.ListWalletResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  return false;
#undef DO_
}

void ListWalletResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ListWalletResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
}

::google::protobuf::uint8* ListWalletResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ListWalletResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  return target;
}

size_t ListWalletResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListWalletResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListWalletResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListWalletResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
    MergeFrom(*source);
  }
}

void ListWalletResponse::MergeFrom(const ListWalletResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ListWalletResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListWalletResponse::CopyFrom(const ListWalletResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWalletResponse::IsInitialized() const {
  return true;
}

void ListWalletResponse::Swap(ListWalletResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListWalletResponse::InternalSwap(ListWalletResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListWalletResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListWalletResponse

// string query = 1;
void ListWalletResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListWalletResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  return query_.GetNoArena();
}
void ListWalletResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
#if LANG_CXX11
void ListWalletResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
#endif
void ListWalletResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
void ListWalletResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
::std::string* ListWalletResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListWalletResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListWalletResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateAddressRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAddressRequest::CreateAddressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
}
CreateAddressRequest::CreateAddressRequest(const CreateAddressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
}

void CreateAddressRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

CreateAddressRequest::~CreateAddressRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  SharedDtor();
}

void CreateAddressRequest::SharedDtor() {
}

void CreateAddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAddressRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[8].descriptor;
}

const CreateAddressRequest& CreateAddressRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateAddressRequest* CreateAddressRequest::New(::google::protobuf::Arena* arena) const {
  CreateAddressRequest* n = new CreateAddressRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  query_ = false;
}

bool CreateAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  return false;
#undef DO_
}

void CreateAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
}

::google::protobuf::uint8* CreateAddressRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  return target;
}

size_t CreateAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAddressRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateAddressRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
    MergeFrom(*source);
  }
}

void CreateAddressRequest::MergeFrom(const CreateAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void CreateAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAddressRequest::CopyFrom(const CreateAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAddressRequest::IsInitialized() const {
  return true;
}

void CreateAddressRequest::Swap(CreateAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAddressRequest::InternalSwap(CreateAddressRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateAddressRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateAddressRequest

// bool query = 1;
void CreateAddressRequest::clear_query() {
  query_ = false;
}
bool CreateAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateAddressRequest.query)
  return query_;
}
void CreateAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateAddressRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateAddressResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAddressResponse::CreateAddressResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
}
CreateAddressResponse::CreateAddressResponse(const CreateAddressResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
}

void CreateAddressResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateAddressResponse::~CreateAddressResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  SharedDtor();
}

void CreateAddressResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateAddressResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAddressResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[9].descriptor;
}

const CreateAddressResponse& CreateAddressResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateAddressResponse* CreateAddressResponse::New(::google::protobuf::Arena* arena) const {
  CreateAddressResponse* n = new CreateAddressResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateAddressResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  return false;
#undef DO_
}

void CreateAddressResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
}

::google::protobuf::uint8* CreateAddressResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  return target;
}

size_t CreateAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAddressResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAddressResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateAddressResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
    MergeFrom(*source);
  }
}

void CreateAddressResponse::MergeFrom(const CreateAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void CreateAddressResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAddressResponse::CopyFrom(const CreateAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAddressResponse::IsInitialized() const {
  return true;
}

void CreateAddressResponse::Swap(CreateAddressResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAddressResponse::InternalSwap(CreateAddressResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateAddressResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateAddressResponse

// string query = 1;
void CreateAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  return query_.GetNoArena();
}
void CreateAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
#if LANG_CXX11
void CreateAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
#endif
void CreateAddressResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
void CreateAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
::std::string* CreateAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAddressRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAddressRequest::GetAddressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
}
GetAddressRequest::GetAddressRequest(const GetAddressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
}

void GetAddressRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

GetAddressRequest::~GetAddressRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  SharedDtor();
}

void GetAddressRequest::SharedDtor() {
}

void GetAddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAddressRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[10].descriptor;
}

const GetAddressRequest& GetAddressRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAddressRequest* GetAddressRequest::New(::google::protobuf::Arena* arena) const {
  GetAddressRequest* n = new GetAddressRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  query_ = false;
}

bool GetAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  return false;
#undef DO_
}

void GetAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
}

::google::protobuf::uint8* GetAddressRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  return target;
}

size_t GetAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddressRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAddressRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
    MergeFrom(*source);
  }
}

void GetAddressRequest::MergeFrom(const GetAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void GetAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddressRequest::CopyFrom(const GetAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressRequest::IsInitialized() const {
  return true;
}

void GetAddressRequest::Swap(GetAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAddressRequest::InternalSwap(GetAddressRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAddressRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAddressRequest

// bool query = 1;
void GetAddressRequest::clear_query() {
  query_ = false;
}
bool GetAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetAddressRequest.query)
  return query_;
}
void GetAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetAddressRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAddressResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAddressResponse::GetAddressResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
}
GetAddressResponse::GetAddressResponse(const GetAddressResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
}

void GetAddressResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetAddressResponse::~GetAddressResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  SharedDtor();
}

void GetAddressResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetAddressResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAddressResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[11].descriptor;
}

const GetAddressResponse& GetAddressResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAddressResponse* GetAddressResponse::New(::google::protobuf::Arena* arena) const {
  GetAddressResponse* n = new GetAddressResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetAddressResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.GetAddressResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  return false;
#undef DO_
}

void GetAddressResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetAddressResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
}

::google::protobuf::uint8* GetAddressResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetAddressResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  return target;
}

size_t GetAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAddressResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddressResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAddressResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
    MergeFrom(*source);
  }
}

void GetAddressResponse::MergeFrom(const GetAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void GetAddressResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddressResponse::CopyFrom(const GetAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressResponse::IsInitialized() const {
  return true;
}

void GetAddressResponse::Swap(GetAddressResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAddressResponse::InternalSwap(GetAddressResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAddressResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAddressResponse

// string query = 1;
void GetAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  return query_.GetNoArena();
}
void GetAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
#if LANG_CXX11
void GetAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
#endif
void GetAddressResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
void GetAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
::std::string* GetAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListAddressRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListAddressRequest::ListAddressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
}
ListAddressRequest::ListAddressRequest(const ListAddressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
}

void ListAddressRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

ListAddressRequest::~ListAddressRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  SharedDtor();
}

void ListAddressRequest::SharedDtor() {
}

void ListAddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListAddressRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[12].descriptor;
}

const ListAddressRequest& ListAddressRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListAddressRequest* ListAddressRequest::New(::google::protobuf::Arena* arena) const {
  ListAddressRequest* n = new ListAddressRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  query_ = false;
}

bool ListAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  return false;
#undef DO_
}

void ListAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
}

::google::protobuf::uint8* ListAddressRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  return target;
}

size_t ListAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAddressRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListAddressRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
    MergeFrom(*source);
  }
}

void ListAddressRequest::MergeFrom(const ListAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void ListAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAddressRequest::CopyFrom(const ListAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAddressRequest::IsInitialized() const {
  return true;
}

void ListAddressRequest::Swap(ListAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListAddressRequest::InternalSwap(ListAddressRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListAddressRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListAddressRequest

// bool query = 1;
void ListAddressRequest::clear_query() {
  query_ = false;
}
bool ListAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListAddressRequest.query)
  return query_;
}
void ListAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListAddressRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListAddressResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListAddressResponse::ListAddressResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
}
ListAddressResponse::ListAddressResponse(const ListAddressResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
}

void ListAddressResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListAddressResponse::~ListAddressResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  SharedDtor();
}

void ListAddressResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListAddressResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListAddressResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[13].descriptor;
}

const ListAddressResponse& ListAddressResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListAddressResponse* ListAddressResponse::New(::google::protobuf::Arena* arena) const {
  ListAddressResponse* n = new ListAddressResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListAddressResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.ListAddressResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  return false;
#undef DO_
}

void ListAddressResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ListAddressResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
}

::google::protobuf::uint8* ListAddressResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ListAddressResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  return target;
}

size_t ListAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListAddressResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAddressResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListAddressResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
    MergeFrom(*source);
  }
}

void ListAddressResponse::MergeFrom(const ListAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ListAddressResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAddressResponse::CopyFrom(const ListAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAddressResponse::IsInitialized() const {
  return true;
}

void ListAddressResponse::Swap(ListAddressResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListAddressResponse::InternalSwap(ListAddressResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListAddressResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListAddressResponse

// string query = 1;
void ListAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  return query_.GetNoArena();
}
void ListAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
#if LANG_CXX11
void ListAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
#endif
void ListAddressResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
void ListAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
::std::string* ListAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidateAddressRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidateAddressRequest::ValidateAddressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
}
ValidateAddressRequest::ValidateAddressRequest(const ValidateAddressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
}

void ValidateAddressRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

ValidateAddressRequest::~ValidateAddressRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  SharedDtor();
}

void ValidateAddressRequest::SharedDtor() {
}

void ValidateAddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidateAddressRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[14].descriptor;
}

const ValidateAddressRequest& ValidateAddressRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ValidateAddressRequest* ValidateAddressRequest::New(::google::protobuf::Arena* arena) const {
  ValidateAddressRequest* n = new ValidateAddressRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValidateAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  query_ = false;
}

bool ValidateAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  return false;
#undef DO_
}

void ValidateAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
}

::google::protobuf::uint8* ValidateAddressRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  return target;
}

size_t ValidateAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidateAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateAddressRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidateAddressRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
    MergeFrom(*source);
  }
}

void ValidateAddressRequest::MergeFrom(const ValidateAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void ValidateAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateAddressRequest::CopyFrom(const ValidateAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateAddressRequest::IsInitialized() const {
  return true;
}

void ValidateAddressRequest::Swap(ValidateAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidateAddressRequest::InternalSwap(ValidateAddressRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValidateAddressRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValidateAddressRequest

// bool query = 1;
void ValidateAddressRequest::clear_query() {
  query_ = false;
}
bool ValidateAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest.query)
  return query_;
}
void ValidateAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidateAddressResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidateAddressResponse::ValidateAddressResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
}
ValidateAddressResponse::ValidateAddressResponse(const ValidateAddressResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
}

void ValidateAddressResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ValidateAddressResponse::~ValidateAddressResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  SharedDtor();
}

void ValidateAddressResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ValidateAddressResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidateAddressResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[15].descriptor;
}

const ValidateAddressResponse& ValidateAddressResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ValidateAddressResponse* ValidateAddressResponse::New(::google::protobuf::Arena* arena) const {
  ValidateAddressResponse* n = new ValidateAddressResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValidateAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ValidateAddressResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  return false;
#undef DO_
}

void ValidateAddressResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
}

::google::protobuf::uint8* ValidateAddressResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  return target;
}

size_t ValidateAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidateAddressResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateAddressResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidateAddressResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
    MergeFrom(*source);
  }
}

void ValidateAddressResponse::MergeFrom(const ValidateAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ValidateAddressResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateAddressResponse::CopyFrom(const ValidateAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateAddressResponse::IsInitialized() const {
  return true;
}

void ValidateAddressResponse::Swap(ValidateAddressResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidateAddressResponse::InternalSwap(ValidateAddressResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValidateAddressResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValidateAddressResponse

// string query = 1;
void ValidateAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ValidateAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  return query_.GetNoArena();
}
void ValidateAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
#if LANG_CXX11
void ValidateAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
#endif
void ValidateAddressResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
void ValidateAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
::std::string* ValidateAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ValidateAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ValidateAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBalanceRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBalanceRequest::GetBalanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
}
GetBalanceRequest::GetBalanceRequest(const GetBalanceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
}

void GetBalanceRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

GetBalanceRequest::~GetBalanceRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  SharedDtor();
}

void GetBalanceRequest::SharedDtor() {
}

void GetBalanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBalanceRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[16].descriptor;
}

const GetBalanceRequest& GetBalanceRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetBalanceRequest* GetBalanceRequest::New(::google::protobuf::Arena* arena) const {
  GetBalanceRequest* n = new GetBalanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  query_ = false;
}

bool GetBalanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  return false;
#undef DO_
}

void GetBalanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
}

::google::protobuf::uint8* GetBalanceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  return target;
}

size_t GetBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBalanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalanceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBalanceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
    MergeFrom(*source);
  }
}

void GetBalanceRequest::MergeFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void GetBalanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceRequest::CopyFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceRequest::IsInitialized() const {
  return true;
}

void GetBalanceRequest::Swap(GetBalanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBalanceRequest::InternalSwap(GetBalanceRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBalanceRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBalanceRequest

// bool query = 1;
void GetBalanceRequest::clear_query() {
  query_ = false;
}
bool GetBalanceRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetBalanceRequest.query)
  return query_;
}
void GetBalanceRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetBalanceRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBalanceResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBalanceResponse::GetBalanceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
}
GetBalanceResponse::GetBalanceResponse(const GetBalanceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
}

void GetBalanceResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetBalanceResponse::~GetBalanceResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  SharedDtor();
}

void GetBalanceResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetBalanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBalanceResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[17].descriptor;
}

const GetBalanceResponse& GetBalanceResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetBalanceResponse* GetBalanceResponse::New(::google::protobuf::Arena* arena) const {
  GetBalanceResponse* n = new GetBalanceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetBalanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  return false;
#undef DO_
}

void GetBalanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
}

::google::protobuf::uint8* GetBalanceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  return target;
}

size_t GetBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBalanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalanceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBalanceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
    MergeFrom(*source);
  }
}

void GetBalanceResponse::MergeFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void GetBalanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceResponse::CopyFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceResponse::IsInitialized() const {
  return true;
}

void GetBalanceResponse::Swap(GetBalanceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBalanceResponse::InternalSwap(GetBalanceResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBalanceResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBalanceResponse

// string query = 1;
void GetBalanceResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetBalanceResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  return query_.GetNoArena();
}
void GetBalanceResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
#if LANG_CXX11
void GetBalanceResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
#endif
void GetBalanceResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
void GetBalanceResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
::std::string* GetBalanceResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetBalanceResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetBalanceResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRawTransactionRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRawTransactionRequest::CreateRawTransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
}
CreateRawTransactionRequest::CreateRawTransactionRequest(const CreateRawTransactionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
}

void CreateRawTransactionRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

CreateRawTransactionRequest::~CreateRawTransactionRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  SharedDtor();
}

void CreateRawTransactionRequest::SharedDtor() {
}

void CreateRawTransactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRawTransactionRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[18].descriptor;
}

const CreateRawTransactionRequest& CreateRawTransactionRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRawTransactionRequest* CreateRawTransactionRequest::New(::google::protobuf::Arena* arena) const {
  CreateRawTransactionRequest* n = new CreateRawTransactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRawTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  query_ = false;
}

bool CreateRawTransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  return false;
#undef DO_
}

void CreateRawTransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
}

::google::protobuf::uint8* CreateRawTransactionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  return target;
}

size_t CreateRawTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRawTransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRawTransactionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRawTransactionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
    MergeFrom(*source);
  }
}

void CreateRawTransactionRequest::MergeFrom(const CreateRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void CreateRawTransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRawTransactionRequest::CopyFrom(const CreateRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRawTransactionRequest::IsInitialized() const {
  return true;
}

void CreateRawTransactionRequest::Swap(CreateRawTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRawTransactionRequest::InternalSwap(CreateRawTransactionRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRawTransactionRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRawTransactionRequest

// bool query = 1;
void CreateRawTransactionRequest::clear_query() {
  query_ = false;
}
bool CreateRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest.query)
  return query_;
}
void CreateRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRawTransactionResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRawTransactionResponse::CreateRawTransactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
}
CreateRawTransactionResponse::CreateRawTransactionResponse(const CreateRawTransactionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
}

void CreateRawTransactionResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateRawTransactionResponse::~CreateRawTransactionResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  SharedDtor();
}

void CreateRawTransactionResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateRawTransactionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRawTransactionResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[19].descriptor;
}

const CreateRawTransactionResponse& CreateRawTransactionResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateRawTransactionResponse* CreateRawTransactionResponse::New(::google::protobuf::Arena* arena) const {
  CreateRawTransactionResponse* n = new CreateRawTransactionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRawTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateRawTransactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  return false;
#undef DO_
}

void CreateRawTransactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
}

::google::protobuf::uint8* CreateRawTransactionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  return target;
}

size_t CreateRawTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRawTransactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRawTransactionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRawTransactionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
    MergeFrom(*source);
  }
}

void CreateRawTransactionResponse::MergeFrom(const CreateRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void CreateRawTransactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRawTransactionResponse::CopyFrom(const CreateRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRawTransactionResponse::IsInitialized() const {
  return true;
}

void CreateRawTransactionResponse::Swap(CreateRawTransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRawTransactionResponse::InternalSwap(CreateRawTransactionResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRawTransactionResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRawTransactionResponse

// string query = 1;
void CreateRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  return query_.GetNoArena();
}
void CreateRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
#if LANG_CXX11
void CreateRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
#endif
void CreateRawTransactionResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
void CreateRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
::std::string* CreateRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignRawTransactionRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignRawTransactionRequest::SignRawTransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
}
SignRawTransactionRequest::SignRawTransactionRequest(const SignRawTransactionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
}

void SignRawTransactionRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

SignRawTransactionRequest::~SignRawTransactionRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  SharedDtor();
}

void SignRawTransactionRequest::SharedDtor() {
}

void SignRawTransactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignRawTransactionRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[20].descriptor;
}

const SignRawTransactionRequest& SignRawTransactionRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignRawTransactionRequest* SignRawTransactionRequest::New(::google::protobuf::Arena* arena) const {
  SignRawTransactionRequest* n = new SignRawTransactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignRawTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  query_ = false;
}

bool SignRawTransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  return false;
#undef DO_
}

void SignRawTransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
}

::google::protobuf::uint8* SignRawTransactionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  return target;
}

size_t SignRawTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignRawTransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignRawTransactionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignRawTransactionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
    MergeFrom(*source);
  }
}

void SignRawTransactionRequest::MergeFrom(const SignRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void SignRawTransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignRawTransactionRequest::CopyFrom(const SignRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRawTransactionRequest::IsInitialized() const {
  return true;
}

void SignRawTransactionRequest::Swap(SignRawTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignRawTransactionRequest::InternalSwap(SignRawTransactionRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignRawTransactionRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignRawTransactionRequest

// bool query = 1;
void SignRawTransactionRequest::clear_query() {
  query_ = false;
}
bool SignRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest.query)
  return query_;
}
void SignRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignRawTransactionResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignRawTransactionResponse::SignRawTransactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
}
SignRawTransactionResponse::SignRawTransactionResponse(const SignRawTransactionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
}

void SignRawTransactionResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SignRawTransactionResponse::~SignRawTransactionResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  SharedDtor();
}

void SignRawTransactionResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignRawTransactionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignRawTransactionResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[21].descriptor;
}

const SignRawTransactionResponse& SignRawTransactionResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignRawTransactionResponse* SignRawTransactionResponse::New(::google::protobuf::Arena* arena) const {
  SignRawTransactionResponse* n = new SignRawTransactionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignRawTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SignRawTransactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  return false;
#undef DO_
}

void SignRawTransactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
}

::google::protobuf::uint8* SignRawTransactionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  return target;
}

size_t SignRawTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignRawTransactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SignRawTransactionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignRawTransactionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
    MergeFrom(*source);
  }
}

void SignRawTransactionResponse::MergeFrom(const SignRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SignRawTransactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignRawTransactionResponse::CopyFrom(const SignRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRawTransactionResponse::IsInitialized() const {
  return true;
}

void SignRawTransactionResponse::Swap(SignRawTransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignRawTransactionResponse::InternalSwap(SignRawTransactionResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignRawTransactionResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignRawTransactionResponse

// string query = 1;
void SignRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  return query_.GetNoArena();
}
void SignRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
#if LANG_CXX11
void SignRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
#endif
void SignRawTransactionResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
void SignRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
::std::string* SignRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecodeRawTransactionRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecodeRawTransactionRequest::DecodeRawTransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
}
DecodeRawTransactionRequest::DecodeRawTransactionRequest(const DecodeRawTransactionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
}

void DecodeRawTransactionRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

DecodeRawTransactionRequest::~DecodeRawTransactionRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  SharedDtor();
}

void DecodeRawTransactionRequest::SharedDtor() {
}

void DecodeRawTransactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecodeRawTransactionRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[22].descriptor;
}

const DecodeRawTransactionRequest& DecodeRawTransactionRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecodeRawTransactionRequest* DecodeRawTransactionRequest::New(::google::protobuf::Arena* arena) const {
  DecodeRawTransactionRequest* n = new DecodeRawTransactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecodeRawTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  query_ = false;
}

bool DecodeRawTransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  return false;
#undef DO_
}

void DecodeRawTransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
}

::google::protobuf::uint8* DecodeRawTransactionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  return target;
}

size_t DecodeRawTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecodeRawTransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DecodeRawTransactionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecodeRawTransactionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
    MergeFrom(*source);
  }
}

void DecodeRawTransactionRequest::MergeFrom(const DecodeRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void DecodeRawTransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecodeRawTransactionRequest::CopyFrom(const DecodeRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecodeRawTransactionRequest::IsInitialized() const {
  return true;
}

void DecodeRawTransactionRequest::Swap(DecodeRawTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecodeRawTransactionRequest::InternalSwap(DecodeRawTransactionRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecodeRawTransactionRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecodeRawTransactionRequest

// bool query = 1;
void DecodeRawTransactionRequest::clear_query() {
  query_ = false;
}
bool DecodeRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest.query)
  return query_;
}
void DecodeRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecodeRawTransactionResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecodeRawTransactionResponse::DecodeRawTransactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
}
DecodeRawTransactionResponse::DecodeRawTransactionResponse(const DecodeRawTransactionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
}

void DecodeRawTransactionResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DecodeRawTransactionResponse::~DecodeRawTransactionResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  SharedDtor();
}

void DecodeRawTransactionResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DecodeRawTransactionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecodeRawTransactionResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[23].descriptor;
}

const DecodeRawTransactionResponse& DecodeRawTransactionResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecodeRawTransactionResponse* DecodeRawTransactionResponse::New(::google::protobuf::Arena* arena) const {
  DecodeRawTransactionResponse* n = new DecodeRawTransactionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecodeRawTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DecodeRawTransactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  return false;
#undef DO_
}

void DecodeRawTransactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
}

::google::protobuf::uint8* DecodeRawTransactionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  return target;
}

size_t DecodeRawTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecodeRawTransactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DecodeRawTransactionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecodeRawTransactionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
    MergeFrom(*source);
  }
}

void DecodeRawTransactionResponse::MergeFrom(const DecodeRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void DecodeRawTransactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecodeRawTransactionResponse::CopyFrom(const DecodeRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecodeRawTransactionResponse::IsInitialized() const {
  return true;
}

void DecodeRawTransactionResponse::Swap(DecodeRawTransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecodeRawTransactionResponse::InternalSwap(DecodeRawTransactionResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecodeRawTransactionResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecodeRawTransactionResponse

// string query = 1;
void DecodeRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DecodeRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  return query_.GetNoArena();
}
void DecodeRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
#if LANG_CXX11
void DecodeRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
#endif
void DecodeRawTransactionResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
void DecodeRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
::std::string* DecodeRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DecodeRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DecodeRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastRawTransactionRequest::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastRawTransactionRequest::BroadcastRawTransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
}
BroadcastRawTransactionRequest::BroadcastRawTransactionRequest(const BroadcastRawTransactionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction()) {
    transaction_ = new ::Catalyst::Protocol::Wire::TransactionBroadcast(*from.transaction_);
  } else {
    transaction_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
}

void BroadcastRawTransactionRequest::SharedCtor() {
  transaction_ = NULL;
  _cached_size_ = 0;
}

BroadcastRawTransactionRequest::~BroadcastRawTransactionRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  SharedDtor();
}

void BroadcastRawTransactionRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete transaction_;
  }
}

void BroadcastRawTransactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastRawTransactionRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[24].descriptor;
}

const BroadcastRawTransactionRequest& BroadcastRawTransactionRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

BroadcastRawTransactionRequest* BroadcastRawTransactionRequest::New(::google::protobuf::Arena* arena) const {
  BroadcastRawTransactionRequest* n = new BroadcastRawTransactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BroadcastRawTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) {
    delete transaction_;
  }
  transaction_ = NULL;
}

bool BroadcastRawTransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  return false;
#undef DO_
}

void BroadcastRawTransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  // .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
  if (this->has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transaction_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
}

::google::protobuf::uint8* BroadcastRawTransactionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  // .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
  if (this->has_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transaction_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  return target;
}

size_t BroadcastRawTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  size_t total_size = 0;

  // .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transaction_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastRawTransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastRawTransactionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastRawTransactionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
    MergeFrom(*source);
  }
}

void BroadcastRawTransactionRequest::MergeFrom(const BroadcastRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction()) {
    mutable_transaction()->::Catalyst::Protocol::Wire::TransactionBroadcast::MergeFrom(from.transaction());
  }
}

void BroadcastRawTransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRawTransactionRequest::CopyFrom(const BroadcastRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRawTransactionRequest::IsInitialized() const {
  return true;
}

void BroadcastRawTransactionRequest::Swap(BroadcastRawTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BroadcastRawTransactionRequest::InternalSwap(BroadcastRawTransactionRequest* other) {
  std::swap(transaction_, other->transaction_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BroadcastRawTransactionRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastRawTransactionRequest

// .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
bool BroadcastRawTransactionRequest::has_transaction() const {
  return this != internal_default_instance() && transaction_ != NULL;
}
void BroadcastRawTransactionRequest::clear_transaction() {
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) delete transaction_;
  transaction_ = NULL;
}
const ::Catalyst::Protocol::Wire::TransactionBroadcast& BroadcastRawTransactionRequest::transaction() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  return transaction_ != NULL ? *transaction_
                         : *::Catalyst::Protocol::Wire::TransactionBroadcast::internal_default_instance();
}
::Catalyst::Protocol::Wire::TransactionBroadcast* BroadcastRawTransactionRequest::mutable_transaction() {
  
  if (transaction_ == NULL) {
    transaction_ = new ::Catalyst::Protocol::Wire::TransactionBroadcast;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  return transaction_;
}
::Catalyst::Protocol::Wire::TransactionBroadcast* BroadcastRawTransactionRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  
  ::Catalyst::Protocol::Wire::TransactionBroadcast* temp = transaction_;
  transaction_ = NULL;
  return temp;
}
void BroadcastRawTransactionRequest::set_allocated_transaction(::Catalyst::Protocol::Wire::TransactionBroadcast* transaction) {
  delete transaction_;
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastRawTransactionResponse::kResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastRawTransactionResponse::BroadcastRawTransactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
}
BroadcastRawTransactionResponse::BroadcastRawTransactionResponse(const BroadcastRawTransactionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_code_ = from.response_code_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
}

void BroadcastRawTransactionResponse::SharedCtor() {
  response_code_ = 0;
  _cached_size_ = 0;
}

BroadcastRawTransactionResponse::~BroadcastRawTransactionResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  SharedDtor();
}

void BroadcastRawTransactionResponse::SharedDtor() {
}

void BroadcastRawTransactionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastRawTransactionResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[25].descriptor;
}

const BroadcastRawTransactionResponse& BroadcastRawTransactionResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

BroadcastRawTransactionResponse* BroadcastRawTransactionResponse::New(::google::protobuf::Arena* arena) const {
  BroadcastRawTransactionResponse* n = new BroadcastRawTransactionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BroadcastRawTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  response_code_ = 0;
}

bool BroadcastRawTransactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response_code(static_cast< ::Catalyst::Protocol::Rpc::Node::ResponseCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  return false;
#undef DO_
}

void BroadcastRawTransactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  // .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
  if (this->response_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
}

::google::protobuf::uint8* BroadcastRawTransactionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  // .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
  if (this->response_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  return target;
}

size_t BroadcastRawTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  size_t total_size = 0;

  // .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastRawTransactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastRawTransactionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastRawTransactionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
    MergeFrom(*source);
  }
}

void BroadcastRawTransactionResponse::MergeFrom(const BroadcastRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.response_code() != 0) {
    set_response_code(from.response_code());
  }
}

void BroadcastRawTransactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRawTransactionResponse::CopyFrom(const BroadcastRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRawTransactionResponse::IsInitialized() const {
  return true;
}

void BroadcastRawTransactionResponse::Swap(BroadcastRawTransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BroadcastRawTransactionResponse::InternalSwap(BroadcastRawTransactionResponse* other) {
  std::swap(response_code_, other->response_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BroadcastRawTransactionResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastRawTransactionResponse

// .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
void BroadcastRawTransactionResponse::clear_response_code() {
  response_code_ = 0;
}
::Catalyst::Protocol::Rpc::Node::ResponseCode BroadcastRawTransactionResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse.response_code)
  return static_cast< ::Catalyst::Protocol::Rpc::Node::ResponseCode >(response_code_);
}
void BroadcastRawTransactionResponse::set_response_code(::Catalyst::Protocol::Rpc::Node::ResponseCode value) {
  
  response_code_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse.response_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendToRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendToRequest::SendToRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendToRequest)
}
SendToRequest::SendToRequest(const SendToRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendToRequest)
}

void SendToRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

SendToRequest::~SendToRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendToRequest)
  SharedDtor();
}

void SendToRequest::SharedDtor() {
}

void SendToRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendToRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[26].descriptor;
}

const SendToRequest& SendToRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendToRequest* SendToRequest::New(::google::protobuf::Arena* arena) const {
  SendToRequest* n = new SendToRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendToRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  query_ = false;
}

bool SendToRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SendToRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SendToRequest)
  return false;
#undef DO_
}

void SendToRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SendToRequest)
}

::google::protobuf::uint8* SendToRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendToRequest)
  return target;
}

size_t SendToRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendToRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendToRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendToRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendToRequest)
    MergeFrom(*source);
  }
}

void SendToRequest::MergeFrom(const SendToRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void SendToRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToRequest::CopyFrom(const SendToRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToRequest::IsInitialized() const {
  return true;
}

void SendToRequest::Swap(SendToRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendToRequest::InternalSwap(SendToRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendToRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendToRequest

// bool query = 1;
void SendToRequest::clear_query() {
  query_ = false;
}
bool SendToRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToRequest.query)
  return query_;
}
void SendToRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendToResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendToResponse::SendToResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendToResponse)
}
SendToResponse::SendToResponse(const SendToResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendToResponse)
}

void SendToResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SendToResponse::~SendToResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendToResponse)
  SharedDtor();
}

void SendToResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendToResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendToResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[27].descriptor;
}

const SendToResponse& SendToResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendToResponse* SendToResponse::New(::google::protobuf::Arena* arena) const {
  SendToResponse* n = new SendToResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendToResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendToResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.SendToResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SendToResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SendToResponse)
  return false;
#undef DO_
}

void SendToResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendToResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SendToResponse)
}

::google::protobuf::uint8* SendToResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendToResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendToResponse)
  return target;
}

size_t SendToResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendToResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendToResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendToResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendToResponse)
    MergeFrom(*source);
  }
}

void SendToResponse::MergeFrom(const SendToResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SendToResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToResponse::CopyFrom(const SendToResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToResponse::IsInitialized() const {
  return true;
}

void SendToResponse::Swap(SendToResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendToResponse::InternalSwap(SendToResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendToResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendToResponse

// string query = 1;
void SendToResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendToResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  return query_.GetNoArena();
}
void SendToResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
#if LANG_CXX11
void SendToResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
#endif
void SendToResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
void SendToResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
::std::string* SendToResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendToResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendToResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendToFromRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendToFromRequest::SendToFromRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
}
SendToFromRequest::SendToFromRequest(const SendToFromRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
}

void SendToFromRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

SendToFromRequest::~SendToFromRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  SharedDtor();
}

void SendToFromRequest::SharedDtor() {
}

void SendToFromRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendToFromRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[28].descriptor;
}

const SendToFromRequest& SendToFromRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendToFromRequest* SendToFromRequest::New(::google::protobuf::Arena* arena) const {
  SendToFromRequest* n = new SendToFromRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendToFromRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  query_ = false;
}

bool SendToFromRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  return false;
#undef DO_
}

void SendToFromRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
}

::google::protobuf::uint8* SendToFromRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  return target;
}

size_t SendToFromRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendToFromRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToFromRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendToFromRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
    MergeFrom(*source);
  }
}

void SendToFromRequest::MergeFrom(const SendToFromRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void SendToFromRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToFromRequest::CopyFrom(const SendToFromRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToFromRequest::IsInitialized() const {
  return true;
}

void SendToFromRequest::Swap(SendToFromRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendToFromRequest::InternalSwap(SendToFromRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendToFromRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendToFromRequest

// bool query = 1;
void SendToFromRequest::clear_query() {
  query_ = false;
}
bool SendToFromRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToFromRequest.query)
  return query_;
}
void SendToFromRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToFromRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendToFromResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendToFromResponse::SendToFromResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
}
SendToFromResponse::SendToFromResponse(const SendToFromResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
}

void SendToFromResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SendToFromResponse::~SendToFromResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  SharedDtor();
}

void SendToFromResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendToFromResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendToFromResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[29].descriptor;
}

const SendToFromResponse& SendToFromResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendToFromResponse* SendToFromResponse::New(::google::protobuf::Arena* arena) const {
  SendToFromResponse* n = new SendToFromResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendToFromResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendToFromResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.SendToFromResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  return false;
#undef DO_
}

void SendToFromResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendToFromResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
}

::google::protobuf::uint8* SendToFromResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendToFromResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  return target;
}

size_t SendToFromResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendToFromResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToFromResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendToFromResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
    MergeFrom(*source);
  }
}

void SendToFromResponse::MergeFrom(const SendToFromResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SendToFromResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToFromResponse::CopyFrom(const SendToFromResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToFromResponse::IsInitialized() const {
  return true;
}

void SendToFromResponse::Swap(SendToFromResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendToFromResponse::InternalSwap(SendToFromResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendToFromResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendToFromResponse

// string query = 1;
void SendToFromResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendToFromResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  return query_.GetNoArena();
}
void SendToFromResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
#if LANG_CXX11
void SendToFromResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
#endif
void SendToFromResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
void SendToFromResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
::std::string* SendToFromResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendToFromResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendToFromResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendManyRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendManyRequest::SendManyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendManyRequest)
}
SendManyRequest::SendManyRequest(const SendManyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendManyRequest)
}

void SendManyRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

SendManyRequest::~SendManyRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  SharedDtor();
}

void SendManyRequest::SharedDtor() {
}

void SendManyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendManyRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[30].descriptor;
}

const SendManyRequest& SendManyRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendManyRequest* SendManyRequest::New(::google::protobuf::Arena* arena) const {
  SendManyRequest* n = new SendManyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendManyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  query_ = false;
}

bool SendManyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  return false;
#undef DO_
}

void SendManyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SendManyRequest)
}

::google::protobuf::uint8* SendManyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  return target;
}

size_t SendManyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendManyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendManyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendManyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendManyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendManyRequest)
    MergeFrom(*source);
  }
}

void SendManyRequest::MergeFrom(const SendManyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void SendManyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendManyRequest::CopyFrom(const SendManyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendManyRequest::IsInitialized() const {
  return true;
}

void SendManyRequest::Swap(SendManyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendManyRequest::InternalSwap(SendManyRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendManyRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendManyRequest

// bool query = 1;
void SendManyRequest::clear_query() {
  query_ = false;
}
bool SendManyRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendManyRequest.query)
  return query_;
}
void SendManyRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendManyRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendManyResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendManyResponse::SendManyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendManyResponse)
}
SendManyResponse::SendManyResponse(const SendManyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendManyResponse)
}

void SendManyResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SendManyResponse::~SendManyResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  SharedDtor();
}

void SendManyResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendManyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendManyResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[31].descriptor;
}

const SendManyResponse& SendManyResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendManyResponse* SendManyResponse::New(::google::protobuf::Arena* arena) const {
  SendManyResponse* n = new SendManyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendManyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendManyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.SendManyResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  return false;
#undef DO_
}

void SendManyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendManyResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SendManyResponse)
}

::google::protobuf::uint8* SendManyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendManyResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  return target;
}

size_t SendManyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendManyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendManyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendManyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendManyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendManyResponse)
    MergeFrom(*source);
  }
}

void SendManyResponse::MergeFrom(const SendManyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SendManyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendManyResponse::CopyFrom(const SendManyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendManyResponse::IsInitialized() const {
  return true;
}

void SendManyResponse::Swap(SendManyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendManyResponse::InternalSwap(SendManyResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendManyResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendManyResponse

// string query = 1;
void SendManyResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendManyResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  return query_.GetNoArena();
}
void SendManyResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
#if LANG_CXX11
void SendManyResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
#endif
void SendManyResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
void SendManyResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
::std::string* SendManyResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendManyResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendManyResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendFromManyRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendFromManyRequest::SendFromManyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
}
SendFromManyRequest::SendFromManyRequest(const SendFromManyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
}

void SendFromManyRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

SendFromManyRequest::~SendFromManyRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  SharedDtor();
}

void SendFromManyRequest::SharedDtor() {
}

void SendFromManyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFromManyRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[32].descriptor;
}

const SendFromManyRequest& SendFromManyRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendFromManyRequest* SendFromManyRequest::New(::google::protobuf::Arena* arena) const {
  SendFromManyRequest* n = new SendFromManyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendFromManyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  query_ = false;
}

bool SendFromManyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  return false;
#undef DO_
}

void SendFromManyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
}

::google::protobuf::uint8* SendFromManyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  return target;
}

size_t SendFromManyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFromManyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendFromManyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendFromManyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
    MergeFrom(*source);
  }
}

void SendFromManyRequest::MergeFrom(const SendFromManyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void SendFromManyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFromManyRequest::CopyFrom(const SendFromManyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFromManyRequest::IsInitialized() const {
  return true;
}

void SendFromManyRequest::Swap(SendFromManyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendFromManyRequest::InternalSwap(SendFromManyRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendFromManyRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendFromManyRequest

// bool query = 1;
void SendFromManyRequest::clear_query() {
  query_ = false;
}
bool SendFromManyRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendFromManyRequest.query)
  return query_;
}
void SendFromManyRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendFromManyRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendFromManyResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendFromManyResponse::SendFromManyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
}
SendFromManyResponse::SendFromManyResponse(const SendFromManyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
}

void SendFromManyResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SendFromManyResponse::~SendFromManyResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  SharedDtor();
}

void SendFromManyResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendFromManyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFromManyResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[33].descriptor;
}

const SendFromManyResponse& SendFromManyResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendFromManyResponse* SendFromManyResponse::New(::google::protobuf::Arena* arena) const {
  SendFromManyResponse* n = new SendFromManyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendFromManyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SendFromManyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  return false;
#undef DO_
}

void SendFromManyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
}

::google::protobuf::uint8* SendFromManyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  return target;
}

size_t SendFromManyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFromManyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendFromManyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendFromManyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
    MergeFrom(*source);
  }
}

void SendFromManyResponse::MergeFrom(const SendFromManyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SendFromManyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFromManyResponse::CopyFrom(const SendFromManyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFromManyResponse::IsInitialized() const {
  return true;
}

void SendFromManyResponse::Swap(SendFromManyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendFromManyResponse::InternalSwap(SendFromManyResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendFromManyResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendFromManyResponse

// string query = 1;
void SendFromManyResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendFromManyResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  return query_.GetNoArena();
}
void SendFromManyResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
#if LANG_CXX11
void SendFromManyResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
#endif
void SendFromManyResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
void SendFromManyResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
::std::string* SendFromManyResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendFromManyResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendFromManyResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddNodeRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddNodeRequest::AddNodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
}
AddNodeRequest::AddNodeRequest(const AddNodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
}

void AddNodeRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

AddNodeRequest::~AddNodeRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  SharedDtor();
}

void AddNodeRequest::SharedDtor() {
}

void AddNodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNodeRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[34].descriptor;
}

const AddNodeRequest& AddNodeRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddNodeRequest* AddNodeRequest::New(::google::protobuf::Arena* arena) const {
  AddNodeRequest* n = new AddNodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  query_ = false;
}

bool AddNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  return false;
#undef DO_
}

void AddNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
}

::google::protobuf::uint8* AddNodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  return target;
}

size_t AddNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddNodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
    MergeFrom(*source);
  }
}

void AddNodeRequest::MergeFrom(const AddNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void AddNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNodeRequest::CopyFrom(const AddNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNodeRequest::IsInitialized() const {
  return true;
}

void AddNodeRequest::Swap(AddNodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddNodeRequest::InternalSwap(AddNodeRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddNodeRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddNodeRequest

// bool query = 1;
void AddNodeRequest::clear_query() {
  query_ = false;
}
bool AddNodeRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddNodeRequest.query)
  return query_;
}
void AddNodeRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddNodeRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddNodeResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddNodeResponse::AddNodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
}
AddNodeResponse::AddNodeResponse(const AddNodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
}

void AddNodeResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AddNodeResponse::~AddNodeResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  SharedDtor();
}

void AddNodeResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddNodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNodeResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[35].descriptor;
}

const AddNodeResponse& AddNodeResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddNodeResponse* AddNodeResponse::New(::google::protobuf::Arena* arena) const {
  AddNodeResponse* n = new AddNodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AddNodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.AddNodeResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  return false;
#undef DO_
}

void AddNodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddNodeResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
}

::google::protobuf::uint8* AddNodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddNodeResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  return target;
}

size_t AddNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddNodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
    MergeFrom(*source);
  }
}

void AddNodeResponse::MergeFrom(const AddNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void AddNodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNodeResponse::CopyFrom(const AddNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNodeResponse::IsInitialized() const {
  return true;
}

void AddNodeResponse::Swap(AddNodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddNodeResponse::InternalSwap(AddNodeResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddNodeResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddNodeResponse

// string query = 1;
void AddNodeResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddNodeResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  return query_.GetNoArena();
}
void AddNodeResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
#if LANG_CXX11
void AddNodeResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
#endif
void AddNodeResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
void AddNodeResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
::std::string* AddNodeResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddNodeResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddNodeResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerListRequest::GetPeerListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
}
GetPeerListRequest::GetPeerListRequest(const GetPeerListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
}

void GetPeerListRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetPeerListRequest::~GetPeerListRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  SharedDtor();
}

void GetPeerListRequest::SharedDtor() {
}

void GetPeerListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerListRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[36].descriptor;
}

const GetPeerListRequest& GetPeerListRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerListRequest* GetPeerListRequest::New(::google::protobuf::Arena* arena) const {
  GetPeerListRequest* n = new GetPeerListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
}

bool GetPeerListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  return false;
#undef DO_
}

void GetPeerListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
}

::google::protobuf::uint8* GetPeerListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  return target;
}

size_t GetPeerListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
    MergeFrom(*source);
  }
}

void GetPeerListRequest::MergeFrom(const GetPeerListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void GetPeerListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerListRequest::CopyFrom(const GetPeerListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerListRequest::IsInitialized() const {
  return true;
}

void GetPeerListRequest::Swap(GetPeerListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerListRequest::InternalSwap(GetPeerListRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerListRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerListRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerListResponse::kPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerListResponse::GetPeerListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
}
GetPeerListResponse::GetPeerListResponse(const GetPeerListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peers_(from.peers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
}

void GetPeerListResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetPeerListResponse::~GetPeerListResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  SharedDtor();
}

void GetPeerListResponse::SharedDtor() {
}

void GetPeerListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerListResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[37].descriptor;
}

const GetPeerListResponse& GetPeerListResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerListResponse* GetPeerListResponse::New(::google::protobuf::Arena* arena) const {
  GetPeerListResponse* n = new GetPeerListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  peers_.Clear();
}

bool GetPeerListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  return false;
#undef DO_
}

void GetPeerListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
}

::google::protobuf::uint8* GetPeerListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->peers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  return target;
}

size_t GetPeerListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  size_t total_size = 0;

  // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
  {
    unsigned int count = this->peers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
    MergeFrom(*source);
  }
}

void GetPeerListResponse::MergeFrom(const GetPeerListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peers_.MergeFrom(from.peers_);
}

void GetPeerListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerListResponse::CopyFrom(const GetPeerListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerListResponse::IsInitialized() const {
  return true;
}

void GetPeerListResponse::Swap(GetPeerListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerListResponse::InternalSwap(GetPeerListResponse* other) {
  peers_.UnsafeArenaSwap(&other->peers_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerListResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerListResponse

// repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
int GetPeerListResponse::peers_size() const {
  return peers_.size();
}
void GetPeerListResponse::clear_peers() {
  peers_.Clear();
}
const ::Catalyst::Protocol::Peer::PeerId& GetPeerListResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return peers_.Get(index);
}
::Catalyst::Protocol::Peer::PeerId* GetPeerListResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return peers_.Mutable(index);
}
::Catalyst::Protocol::Peer::PeerId* GetPeerListResponse::add_peers() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >*
GetPeerListResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return &peers_;
}
const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >&
GetPeerListResponse::peers() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return peers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerReputationRequest::kPublicKeyFieldNumber;
const int GetPeerReputationRequest::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerReputationRequest::GetPeerReputationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
}
GetPeerReputationRequest::GetPeerReputationRequest(const GetPeerReputationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
}

void GetPeerReputationRequest::SharedCtor() {
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetPeerReputationRequest::~GetPeerReputationRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  SharedDtor();
}

void GetPeerReputationRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetPeerReputationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerReputationRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[38].descriptor;
}

const GetPeerReputationRequest& GetPeerReputationRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerReputationRequest* GetPeerReputationRequest::New(::google::protobuf::Arena* arena) const {
  GetPeerReputationRequest* n = new GetPeerReputationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerReputationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetPeerReputationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes public_key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ip = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  return false;
#undef DO_
}

void GetPeerReputationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
}

::google::protobuf::uint8* GetPeerReputationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  return target;
}

size_t GetPeerReputationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  size_t total_size = 0;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerReputationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerReputationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerReputationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
    MergeFrom(*source);
  }
}

void GetPeerReputationRequest::MergeFrom(const GetPeerReputationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
}

void GetPeerReputationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerReputationRequest::CopyFrom(const GetPeerReputationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerReputationRequest::IsInitialized() const {
  return true;
}

void GetPeerReputationRequest::Swap(GetPeerReputationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerReputationRequest::InternalSwap(GetPeerReputationRequest* other) {
  public_key_.Swap(&other->public_key_);
  ip_.Swap(&other->ip_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerReputationRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerReputationRequest

// bytes public_key = 1;
void GetPeerReputationRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetPeerReputationRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
  return public_key_.GetNoArena();
}
void GetPeerReputationRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
#if LANG_CXX11
void GetPeerReputationRequest::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
#endif
void GetPeerReputationRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
void GetPeerReputationRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
::std::string* GetPeerReputationRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPeerReputationRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPeerReputationRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}

// bytes ip = 2;
void GetPeerReputationRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetPeerReputationRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  return ip_.GetNoArena();
}
void GetPeerReputationRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
#if LANG_CXX11
void GetPeerReputationRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
#endif
void GetPeerReputationRequest::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
void GetPeerReputationRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
::std::string* GetPeerReputationRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPeerReputationRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPeerReputationRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerReputationResponse::kReputationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerReputationResponse::GetPeerReputationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
}
GetPeerReputationResponse::GetPeerReputationResponse(const GetPeerReputationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reputation_ = from.reputation_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
}

void GetPeerReputationResponse::SharedCtor() {
  reputation_ = 0;
  _cached_size_ = 0;
}

GetPeerReputationResponse::~GetPeerReputationResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  SharedDtor();
}

void GetPeerReputationResponse::SharedDtor() {
}

void GetPeerReputationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerReputationResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[39].descriptor;
}

const GetPeerReputationResponse& GetPeerReputationResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerReputationResponse* GetPeerReputationResponse::New(::google::protobuf::Arena* arena) const {
  GetPeerReputationResponse* n = new GetPeerReputationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerReputationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  reputation_ = 0;
}

bool GetPeerReputationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 reputation = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  return false;
#undef DO_
}

void GetPeerReputationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  // int32 reputation = 1;
  if (this->reputation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reputation(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
}

::google::protobuf::uint8* GetPeerReputationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  // int32 reputation = 1;
  if (this->reputation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reputation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  return target;
}

size_t GetPeerReputationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  size_t total_size = 0;

  // int32 reputation = 1;
  if (this->reputation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reputation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerReputationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerReputationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerReputationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
    MergeFrom(*source);
  }
}

void GetPeerReputationResponse::MergeFrom(const GetPeerReputationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.reputation() != 0) {
    set_reputation(from.reputation());
  }
}

void GetPeerReputationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerReputationResponse::CopyFrom(const GetPeerReputationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerReputationResponse::IsInitialized() const {
  return true;
}

void GetPeerReputationResponse::Swap(GetPeerReputationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerReputationResponse::InternalSwap(GetPeerReputationResponse* other) {
  std::swap(reputation_, other->reputation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerReputationResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerReputationResponse

// int32 reputation = 1;
void GetPeerReputationResponse::clear_reputation() {
  reputation_ = 0;
}
::google::protobuf::int32 GetPeerReputationResponse::reputation() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse.reputation)
  return reputation_;
}
void GetPeerReputationResponse::set_reputation(::google::protobuf::int32 value) {
  
  reputation_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse.reputation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPeerBlacklistRequest::kPublicKeyFieldNumber;
const int SetPeerBlacklistRequest::kIpFieldNumber;
const int SetPeerBlacklistRequest::kBlacklistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPeerBlacklistRequest::SetPeerBlacklistRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
}
SetPeerBlacklistRequest::SetPeerBlacklistRequest(const SetPeerBlacklistRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  blacklist_ = from.blacklist_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
}

void SetPeerBlacklistRequest::SharedCtor() {
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blacklist_ = false;
  _cached_size_ = 0;
}

SetPeerBlacklistRequest::~SetPeerBlacklistRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  SharedDtor();
}

void SetPeerBlacklistRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetPeerBlacklistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPeerBlacklistRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[40].descriptor;
}

const SetPeerBlacklistRequest& SetPeerBlacklistRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetPeerBlacklistRequest* SetPeerBlacklistRequest::New(::google::protobuf::Arena* arena) const {
  SetPeerBlacklistRequest* n = new SetPeerBlacklistRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetPeerBlacklistRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blacklist_ = false;
}

bool SetPeerBlacklistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes public_key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ip = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool blacklist = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blacklist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  return false;
#undef DO_
}

void SetPeerBlacklistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  // bool blacklist = 3;
  if (this->blacklist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->blacklist(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
}

::google::protobuf::uint8* SetPeerBlacklistRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // bool blacklist = 3;
  if (this->blacklist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->blacklist(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  return target;
}

size_t SetPeerBlacklistRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  size_t total_size = 0;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  // bool blacklist = 3;
  if (this->blacklist() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPeerBlacklistRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPeerBlacklistRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetPeerBlacklistRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
    MergeFrom(*source);
  }
}

void SetPeerBlacklistRequest::MergeFrom(const SetPeerBlacklistRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.blacklist() != 0) {
    set_blacklist(from.blacklist());
  }
}

void SetPeerBlacklistRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPeerBlacklistRequest::CopyFrom(const SetPeerBlacklistRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPeerBlacklistRequest::IsInitialized() const {
  return true;
}

void SetPeerBlacklistRequest::Swap(SetPeerBlacklistRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPeerBlacklistRequest::InternalSwap(SetPeerBlacklistRequest* other) {
  public_key_.Swap(&other->public_key_);
  ip_.Swap(&other->ip_);
  std::swap(blacklist_, other->blacklist_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetPeerBlacklistRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetPeerBlacklistRequest

// bytes public_key = 1;
void SetPeerBlacklistRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetPeerBlacklistRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
  return public_key_.GetNoArena();
}
void SetPeerBlacklistRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
#if LANG_CXX11
void SetPeerBlacklistRequest::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
#endif
void SetPeerBlacklistRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
void SetPeerBlacklistRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
::std::string* SetPeerBlacklistRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetPeerBlacklistRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetPeerBlacklistRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}

// bytes ip = 2;
void SetPeerBlacklistRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetPeerBlacklistRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
  return ip_.GetNoArena();
}
void SetPeerBlacklistRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
#if LANG_CXX11
void SetPeerBlacklistRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
#endif
void SetPeerBlacklistRequest::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
void SetPeerBlacklistRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
::std::string* SetPeerBlacklistRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetPeerBlacklistRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetPeerBlacklistRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}

// bool blacklist = 3;
void SetPeerBlacklistRequest::clear_blacklist() {
  blacklist_ = false;
}
bool SetPeerBlacklistRequest::blacklist() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.blacklist)
  return blacklist_;
}
void SetPeerBlacklistRequest::set_blacklist(bool value) {
  
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.blacklist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPeerBlacklistResponse::kPublicKeyFieldNumber;
const int SetPeerBlacklistResponse::kIpFieldNumber;
const int SetPeerBlacklistResponse::kBlacklistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPeerBlacklistResponse::SetPeerBlacklistResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
}
SetPeerBlacklistResponse::SetPeerBlacklistResponse(const SetPeerBlacklistResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  blacklist_ = from.blacklist_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
}

void SetPeerBlacklistResponse::SharedCtor() {
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blacklist_ = false;
  _cached_size_ = 0;
}

SetPeerBlacklistResponse::~SetPeerBlacklistResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  SharedDtor();
}

void SetPeerBlacklistResponse::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetPeerBlacklistResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPeerBlacklistResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[41].descriptor;
}

const SetPeerBlacklistResponse& SetPeerBlacklistResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetPeerBlacklistResponse* SetPeerBlacklistResponse::New(::google::protobuf::Arena* arena) const {
  SetPeerBlacklistResponse* n = new SetPeerBlacklistResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetPeerBlacklistResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blacklist_ = false;
}

bool SetPeerBlacklistResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes public_key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ip = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool blacklist = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blacklist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  return false;
#undef DO_
}

void SetPeerBlacklistResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  // bool blacklist = 3;
  if (this->blacklist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->blacklist(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
}

::google::protobuf::uint8* SetPeerBlacklistResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // bool blacklist = 3;
  if (this->blacklist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->blacklist(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  return target;
}

size_t SetPeerBlacklistResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  size_t total_size = 0;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  // bool blacklist = 3;
  if (this->blacklist() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPeerBlacklistResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPeerBlacklistResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetPeerBlacklistResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
    MergeFrom(*source);
  }
}

void SetPeerBlacklistResponse::MergeFrom(const SetPeerBlacklistResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.blacklist() != 0) {
    set_blacklist(from.blacklist());
  }
}

void SetPeerBlacklistResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPeerBlacklistResponse::CopyFrom(const SetPeerBlacklistResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPeerBlacklistResponse::IsInitialized() const {
  return true;
}

void SetPeerBlacklistResponse::Swap(SetPeerBlacklistResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPeerBlacklistResponse::InternalSwap(SetPeerBlacklistResponse* other) {
  public_key_.Swap(&other->public_key_);
  ip_.Swap(&other->ip_);
  std::swap(blacklist_, other->blacklist_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetPeerBlacklistResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[41];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetPeerBlacklistResponse

// bytes public_key = 1;
void SetPeerBlacklistResponse::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetPeerBlacklistResponse::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
  return public_key_.GetNoArena();
}
void SetPeerBlacklistResponse::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
#if LANG_CXX11
void SetPeerBlacklistResponse::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
#endif
void SetPeerBlacklistResponse::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
void SetPeerBlacklistResponse::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
::std::string* SetPeerBlacklistResponse::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetPeerBlacklistResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetPeerBlacklistResponse::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}

// bytes ip = 2;
void SetPeerBlacklistResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetPeerBlacklistResponse::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
  return ip_.GetNoArena();
}
void SetPeerBlacklistResponse::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
#if LANG_CXX11
void SetPeerBlacklistResponse::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
#endif
void SetPeerBlacklistResponse::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
void SetPeerBlacklistResponse::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
::std::string* SetPeerBlacklistResponse::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetPeerBlacklistResponse::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetPeerBlacklistResponse::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}

// bool blacklist = 3;
void SetPeerBlacklistResponse::clear_blacklist() {
  blacklist_ = false;
}
bool SetPeerBlacklistResponse::blacklist() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.blacklist)
  return blacklist_;
}
void SetPeerBlacklistResponse::set_blacklist(bool value) {
  
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.blacklist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerInfoRequest::kPublicKeyFieldNumber;
const int GetPeerInfoRequest::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerInfoRequest::GetPeerInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
}
GetPeerInfoRequest::GetPeerInfoRequest(const GetPeerInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
}

void GetPeerInfoRequest::SharedCtor() {
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetPeerInfoRequest::~GetPeerInfoRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  SharedDtor();
}

void GetPeerInfoRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetPeerInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerInfoRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[42].descriptor;
}

const GetPeerInfoRequest& GetPeerInfoRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerInfoRequest* GetPeerInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetPeerInfoRequest* n = new GetPeerInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetPeerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes public_key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ip = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  return false;
#undef DO_
}

void GetPeerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
}

::google::protobuf::uint8* GetPeerInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  return target;
}

size_t GetPeerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  size_t total_size = 0;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
    MergeFrom(*source);
  }
}

void GetPeerInfoRequest::MergeFrom(const GetPeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
}

void GetPeerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerInfoRequest::CopyFrom(const GetPeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerInfoRequest::IsInitialized() const {
  return true;
}

void GetPeerInfoRequest::Swap(GetPeerInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerInfoRequest::InternalSwap(GetPeerInfoRequest* other) {
  public_key_.Swap(&other->public_key_);
  ip_.Swap(&other->ip_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerInfoRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[42];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerInfoRequest

// bytes public_key = 1;
void GetPeerInfoRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetPeerInfoRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
  return public_key_.GetNoArena();
}
void GetPeerInfoRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
#if LANG_CXX11
void GetPeerInfoRequest::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
#endif
void GetPeerInfoRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
void GetPeerInfoRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
::std::string* GetPeerInfoRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPeerInfoRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPeerInfoRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}

// bytes ip = 2;
void GetPeerInfoRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetPeerInfoRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  return ip_.GetNoArena();
}
void GetPeerInfoRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
#if LANG_CXX11
void GetPeerInfoRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
#endif
void GetPeerInfoRequest::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
void GetPeerInfoRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
::std::string* GetPeerInfoRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPeerInfoRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPeerInfoRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerInfoResponse::kPeerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerInfoResponse::GetPeerInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
}
GetPeerInfoResponse::GetPeerInfoResponse(const GetPeerInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peer_info_(from.peer_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
}

void GetPeerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetPeerInfoResponse::~GetPeerInfoResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  SharedDtor();
}

void GetPeerInfoResponse::SharedDtor() {
}

void GetPeerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerInfoResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[43].descriptor;
}

const GetPeerInfoResponse& GetPeerInfoResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerInfoResponse* GetPeerInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetPeerInfoResponse* n = new GetPeerInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  peer_info_.Clear();
}

bool GetPeerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_peer_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  return false;
#undef DO_
}

void GetPeerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  // repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
  for (unsigned int i = 0, n = this->peer_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peer_info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
}

::google::protobuf::uint8* GetPeerInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  // repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
  for (unsigned int i = 0, n = this->peer_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->peer_info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  return target;
}

size_t GetPeerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  size_t total_size = 0;

  // repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
  {
    unsigned int count = this->peer_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer_info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
    MergeFrom(*source);
  }
}

void GetPeerInfoResponse::MergeFrom(const GetPeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_info_.MergeFrom(from.peer_info_);
}

void GetPeerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerInfoResponse::CopyFrom(const GetPeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerInfoResponse::IsInitialized() const {
  return true;
}

void GetPeerInfoResponse::Swap(GetPeerInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerInfoResponse::InternalSwap(GetPeerInfoResponse* other) {
  peer_info_.UnsafeArenaSwap(&other->peer_info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerInfoResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[43];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerInfoResponse

// repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
int GetPeerInfoResponse::peer_info_size() const {
  return peer_info_.size();
}
void GetPeerInfoResponse::clear_peer_info() {
  peer_info_.Clear();
}
const ::Catalyst::Protocol::Peer::PeerInfo& GetPeerInfoResponse::peer_info(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return peer_info_.Get(index);
}
::Catalyst::Protocol::Peer::PeerInfo* GetPeerInfoResponse::mutable_peer_info(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return peer_info_.Mutable(index);
}
::Catalyst::Protocol::Peer::PeerInfo* GetPeerInfoResponse::add_peer_info() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return peer_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo >*
GetPeerInfoResponse::mutable_peer_info() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return &peer_info_;
}
const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo >&
GetPeerInfoResponse::peer_info() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return peer_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetConnectionCountRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetConnectionCountRequest::GetConnectionCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
}
GetConnectionCountRequest::GetConnectionCountRequest(const GetConnectionCountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
}

void GetConnectionCountRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

GetConnectionCountRequest::~GetConnectionCountRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  SharedDtor();
}

void GetConnectionCountRequest::SharedDtor() {
}

void GetConnectionCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConnectionCountRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[44].descriptor;
}

const GetConnectionCountRequest& GetConnectionCountRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetConnectionCountRequest* GetConnectionCountRequest::New(::google::protobuf::Arena* arena) const {
  GetConnectionCountRequest* n = new GetConnectionCountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetConnectionCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  query_ = false;
}

bool GetConnectionCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  return false;
#undef DO_
}

void GetConnectionCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
}

::google::protobuf::uint8* GetConnectionCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  return target;
}

size_t GetConnectionCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConnectionCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnectionCountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetConnectionCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
    MergeFrom(*source);
  }
}

void GetConnectionCountRequest::MergeFrom(const GetConnectionCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void GetConnectionCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnectionCountRequest::CopyFrom(const GetConnectionCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnectionCountRequest::IsInitialized() const {
  return true;
}

void GetConnectionCountRequest::Swap(GetConnectionCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetConnectionCountRequest::InternalSwap(GetConnectionCountRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetConnectionCountRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[44];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetConnectionCountRequest

// bool query = 1;
void GetConnectionCountRequest::clear_query() {
  query_ = false;
}
bool GetConnectionCountRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest.query)
  return query_;
}
void GetConnectionCountRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetConnectionCountResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetConnectionCountResponse::GetConnectionCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
}
GetConnectionCountResponse::GetConnectionCountResponse(const GetConnectionCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
}

void GetConnectionCountResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetConnectionCountResponse::~GetConnectionCountResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  SharedDtor();
}

void GetConnectionCountResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetConnectionCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConnectionCountResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[45].descriptor;
}

const GetConnectionCountResponse& GetConnectionCountResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetConnectionCountResponse* GetConnectionCountResponse::New(::google::protobuf::Arena* arena) const {
  GetConnectionCountResponse* n = new GetConnectionCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetConnectionCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetConnectionCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  return false;
#undef DO_
}

void GetConnectionCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
}

::google::protobuf::uint8* GetConnectionCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  return target;
}

size_t GetConnectionCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConnectionCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnectionCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetConnectionCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
    MergeFrom(*source);
  }
}

void GetConnectionCountResponse::MergeFrom(const GetConnectionCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void GetConnectionCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnectionCountResponse::CopyFrom(const GetConnectionCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnectionCountResponse::IsInitialized() const {
  return true;
}

void GetConnectionCountResponse::Swap(GetConnectionCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetConnectionCountResponse::InternalSwap(GetConnectionCountResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetConnectionCountResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[45];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetConnectionCountResponse

// string query = 1;
void GetConnectionCountResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetConnectionCountResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  return query_.GetNoArena();
}
void GetConnectionCountResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
#if LANG_CXX11
void GetConnectionCountResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
#endif
void GetConnectionCountResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
void GetConnectionCountResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
::std::string* GetConnectionCountResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConnectionCountResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConnectionCountResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDeltaRequest::kDeltaDfsHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDeltaRequest::GetDeltaRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
}
GetDeltaRequest::GetDeltaRequest(const GetDeltaRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delta_dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.delta_dfs_hash().size() > 0) {
    delta_dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delta_dfs_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
}

void GetDeltaRequest::SharedCtor() {
  delta_dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetDeltaRequest::~GetDeltaRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  SharedDtor();
}

void GetDeltaRequest::SharedDtor() {
  delta_dfs_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetDeltaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeltaRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[46].descriptor;
}

const GetDeltaRequest& GetDeltaRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDeltaRequest* GetDeltaRequest::New(::google::protobuf::Arena* arena) const {
  GetDeltaRequest* n = new GetDeltaRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDeltaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetDeltaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes delta_dfs_hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_delta_dfs_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  return false;
#undef DO_
}

void GetDeltaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  // bytes delta_dfs_hash = 1;
  if (this->delta_dfs_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->delta_dfs_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
}

::google::protobuf::uint8* GetDeltaRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  // bytes delta_dfs_hash = 1;
  if (this->delta_dfs_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->delta_dfs_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  return target;
}

size_t GetDeltaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  size_t total_size = 0;

  // bytes delta_dfs_hash = 1;
  if (this->delta_dfs_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->delta_dfs_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeltaRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeltaRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDeltaRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
    MergeFrom(*source);
  }
}

void GetDeltaRequest::MergeFrom(const GetDeltaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.delta_dfs_hash().size() > 0) {

    delta_dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delta_dfs_hash_);
  }
}

void GetDeltaRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeltaRequest::CopyFrom(const GetDeltaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeltaRequest::IsInitialized() const {
  return true;
}

void GetDeltaRequest::Swap(GetDeltaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDeltaRequest::InternalSwap(GetDeltaRequest* other) {
  delta_dfs_hash_.Swap(&other->delta_dfs_hash_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDeltaRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[46];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDeltaRequest

// bytes delta_dfs_hash = 1;
void GetDeltaRequest::clear_delta_dfs_hash() {
  delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetDeltaRequest::delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
  return delta_dfs_hash_.GetNoArena();
}
void GetDeltaRequest::set_delta_dfs_hash(const ::std::string& value) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
#if LANG_CXX11
void GetDeltaRequest::set_delta_dfs_hash(::std::string&& value) {
  
  delta_dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
#endif
void GetDeltaRequest::set_delta_dfs_hash(const char* value) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
void GetDeltaRequest::set_delta_dfs_hash(const void* value, size_t size) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
::std::string* GetDeltaRequest::mutable_delta_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
  return delta_dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetDeltaRequest::release_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
  
  return delta_dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetDeltaRequest::set_allocated_delta_dfs_hash(::std::string* delta_dfs_hash) {
  if (delta_dfs_hash != NULL) {
    
  } else {
    
  }
  delta_dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDeltaResponse::kDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDeltaResponse::GetDeltaResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
}
GetDeltaResponse::GetDeltaResponse(const GetDeltaResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_delta()) {
    delta_ = new ::Catalyst::Protocol::Deltas::Delta(*from.delta_);
  } else {
    delta_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
}

void GetDeltaResponse::SharedCtor() {
  delta_ = NULL;
  _cached_size_ = 0;
}

GetDeltaResponse::~GetDeltaResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  SharedDtor();
}

void GetDeltaResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete delta_;
  }
}

void GetDeltaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeltaResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[47].descriptor;
}

const GetDeltaResponse& GetDeltaResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDeltaResponse* GetDeltaResponse::New(::google::protobuf::Arena* arena) const {
  GetDeltaResponse* n = new GetDeltaResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDeltaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  if (GetArenaNoVirtual() == NULL && delta_ != NULL) {
    delete delta_;
  }
  delta_ = NULL;
}

bool GetDeltaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Deltas.Delta delta = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  return false;
#undef DO_
}

void GetDeltaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  // .Catalyst.Protocol.Deltas.Delta delta = 1;
  if (this->has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->delta_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
}

::google::protobuf::uint8* GetDeltaResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  // .Catalyst.Protocol.Deltas.Delta delta = 1;
  if (this->has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->delta_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  return target;
}

size_t GetDeltaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  size_t total_size = 0;

  // .Catalyst.Protocol.Deltas.Delta delta = 1;
  if (this->has_delta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delta_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeltaResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeltaResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDeltaResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
    MergeFrom(*source);
  }
}

void GetDeltaResponse::MergeFrom(const GetDeltaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_delta()) {
    mutable_delta()->::Catalyst::Protocol::Deltas::Delta::MergeFrom(from.delta());
  }
}

void GetDeltaResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeltaResponse::CopyFrom(const GetDeltaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeltaResponse::IsInitialized() const {
  return true;
}

void GetDeltaResponse::Swap(GetDeltaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDeltaResponse::InternalSwap(GetDeltaResponse* other) {
  std::swap(delta_, other->delta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDeltaResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[47];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDeltaResponse

// .Catalyst.Protocol.Deltas.Delta delta = 1;
bool GetDeltaResponse::has_delta() const {
  return this != internal_default_instance() && delta_ != NULL;
}
void GetDeltaResponse::clear_delta() {
  if (GetArenaNoVirtual() == NULL && delta_ != NULL) delete delta_;
  delta_ = NULL;
}
const ::Catalyst::Protocol::Deltas::Delta& GetDeltaResponse::delta() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
  return delta_ != NULL ? *delta_
                         : *::Catalyst::Protocol::Deltas::Delta::internal_default_instance();
}
::Catalyst::Protocol::Deltas::Delta* GetDeltaResponse::mutable_delta() {
  
  if (delta_ == NULL) {
    delta_ = new ::Catalyst::Protocol::Deltas::Delta;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
  return delta_;
}
::Catalyst::Protocol::Deltas::Delta* GetDeltaResponse::release_delta() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
  
  ::Catalyst::Protocol::Deltas::Delta* temp = delta_;
  delta_ = NULL;
  return temp;
}
void GetDeltaResponse::set_allocated_delta(::Catalyst::Protocol::Deltas::Delta* delta) {
  delete delta_;
  delta_ = delta;
  if (delta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMempoolRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMempoolRequest::GetMempoolRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
}
GetMempoolRequest::GetMempoolRequest(const GetMempoolRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
}

void GetMempoolRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

GetMempoolRequest::~GetMempoolRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  SharedDtor();
}

void GetMempoolRequest::SharedDtor() {
}

void GetMempoolRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMempoolRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[48].descriptor;
}

const GetMempoolRequest& GetMempoolRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMempoolRequest* GetMempoolRequest::New(::google::protobuf::Arena* arena) const {
  GetMempoolRequest* n = new GetMempoolRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMempoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  query_ = false;
}

bool GetMempoolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  return false;
#undef DO_
}

void GetMempoolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
}

::google::protobuf::uint8* GetMempoolRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  return target;
}

size_t GetMempoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMempoolRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMempoolRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMempoolRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
    MergeFrom(*source);
  }
}

void GetMempoolRequest::MergeFrom(const GetMempoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void GetMempoolRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMempoolRequest::CopyFrom(const GetMempoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMempoolRequest::IsInitialized() const {
  return true;
}

void GetMempoolRequest::Swap(GetMempoolRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMempoolRequest::InternalSwap(GetMempoolRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMempoolRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[48];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMempoolRequest

// bool query = 1;
void GetMempoolRequest::clear_query() {
  query_ = false;
}
bool GetMempoolRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetMempoolRequest.query)
  return query_;
}
void GetMempoolRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetMempoolRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMempoolResponse::kTransactionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMempoolResponse::GetMempoolResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
}
GetMempoolResponse::GetMempoolResponse(const GetMempoolResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      transactions_(from.transactions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
}

void GetMempoolResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetMempoolResponse::~GetMempoolResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  SharedDtor();
}

void GetMempoolResponse::SharedDtor() {
}

void GetMempoolResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMempoolResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[49].descriptor;
}

const GetMempoolResponse& GetMempoolResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMempoolResponse* GetMempoolResponse::New(::google::protobuf::Arena* arena) const {
  GetMempoolResponse* n = new GetMempoolResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMempoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  transactions_.Clear();
}

bool GetMempoolResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  return false;
#undef DO_
}

void GetMempoolResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  // repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
  for (unsigned int i = 0, n = this->transactions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transactions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
}

::google::protobuf::uint8* GetMempoolResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  // repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
  for (unsigned int i = 0, n = this->transactions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->transactions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  return target;
}

size_t GetMempoolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  size_t total_size = 0;

  // repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
  {
    unsigned int count = this->transactions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transactions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMempoolResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMempoolResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMempoolResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
    MergeFrom(*source);
  }
}

void GetMempoolResponse::MergeFrom(const GetMempoolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transactions_.MergeFrom(from.transactions_);
}

void GetMempoolResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMempoolResponse::CopyFrom(const GetMempoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMempoolResponse::IsInitialized() const {
  return true;
}

void GetMempoolResponse::Swap(GetMempoolResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMempoolResponse::InternalSwap(GetMempoolResponse* other) {
  transactions_.UnsafeArenaSwap(&other->transactions_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMempoolResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[49];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMempoolResponse

// repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
int GetMempoolResponse::transactions_size() const {
  return transactions_.size();
}
void GetMempoolResponse::clear_transactions() {
  transactions_.Clear();
}
const ::Catalyst::Protocol::Transaction::PublicEntry& GetMempoolResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_.Get(index);
}
::Catalyst::Protocol::Transaction::PublicEntry* GetMempoolResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_.Mutable(index);
}
::Catalyst::Protocol::Transaction::PublicEntry* GetMempoolResponse::add_transactions() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_.Add();
}
::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >*
GetMempoolResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return &transactions_;
}
const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >&
GetMempoolResponse::transactions() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignMessageRequest::kMessageFieldNumber;
const int SignMessageRequest::kKeyIdFieldNumber;
const int SignMessageRequest::kSigningContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignMessageRequest::SignMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
}
SignMessageRequest::SignMessageRequest(const SignMessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key_id().size() > 0) {
    key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from.has_signing_context()) {
    signing_context_ = new ::Catalyst::Protocol::Cryptography::SigningContext(*from.signing_context_);
  } else {
    signing_context_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
}

void SignMessageRequest::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signing_context_ = NULL;
  _cached_size_ = 0;
}

SignMessageRequest::~SignMessageRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  SharedDtor();
}

void SignMessageRequest::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete signing_context_;
  }
}

void SignMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignMessageRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[50].descriptor;
}

const SignMessageRequest& SignMessageRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignMessageRequest* SignMessageRequest::New(::google::protobuf::Arena* arena) const {
  SignMessageRequest* n = new SignMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && signing_context_ != NULL) {
    delete signing_context_;
  }
  signing_context_ = NULL;
}

bool SignMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes message = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key_id().data(), this->key_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signing_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  return false;
#undef DO_
}

void SignMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  // bytes message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->message(), output);
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key_id().data(), this->key_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key_id(), output);
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
  if (this->has_signing_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->signing_context_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
}

::google::protobuf::uint8* SignMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  // bytes message = 1;
  if (this->message().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message(), target);
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key_id().data(), this->key_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key_id(), target);
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
  if (this->has_signing_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->signing_context_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  return target;
}

size_t SignMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  size_t total_size = 0;

  // bytes message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_id());
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
  if (this->has_signing_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signing_context_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignMessageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
    MergeFrom(*source);
  }
}

void SignMessageRequest::MergeFrom(const SignMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.key_id().size() > 0) {

    key_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from.has_signing_context()) {
    mutable_signing_context()->::Catalyst::Protocol::Cryptography::SigningContext::MergeFrom(from.signing_context());
  }
}

void SignMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignMessageRequest::CopyFrom(const SignMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignMessageRequest::IsInitialized() const {
  return true;
}

void SignMessageRequest::Swap(SignMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignMessageRequest::InternalSwap(SignMessageRequest* other) {
  message_.Swap(&other->message_);
  key_id_.Swap(&other->key_id_);
  std::swap(signing_context_, other->signing_context_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignMessageRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[50];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignMessageRequest

// bytes message = 1;
void SignMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  return message_.GetNoArena();
}
void SignMessageRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
#if LANG_CXX11
void SignMessageRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
#endif
void SignMessageRequest::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
void SignMessageRequest::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
::std::string* SignMessageRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignMessageRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}

// string key_id = 2;
void SignMessageRequest::clear_key_id() {
  key_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignMessageRequest::key_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
  return key_id_.GetNoArena();
}
void SignMessageRequest::set_key_id(const ::std::string& value) {
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
#if LANG_CXX11
void SignMessageRequest::set_key_id(::std::string&& value) {
  
  key_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
#endif
void SignMessageRequest::set_key_id(const char* value) {
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
void SignMessageRequest::set_key_id(const char* value, size_t size) {
  
  key_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
::std::string* SignMessageRequest::mutable_key_id() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
  return key_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignMessageRequest::release_key_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
  
  return key_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignMessageRequest::set_allocated_key_id(::std::string* key_id) {
  if (key_id != NULL) {
    
  } else {
    
  }
  key_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_id);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}

// .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
bool SignMessageRequest::has_signing_context() const {
  return this != internal_default_instance() && signing_context_ != NULL;
}
void SignMessageRequest::clear_signing_context() {
  if (GetArenaNoVirtual() == NULL && signing_context_ != NULL) delete signing_context_;
  signing_context_ = NULL;
}
const ::Catalyst::Protocol::Cryptography::SigningContext& SignMessageRequest::signing_context() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
  return signing_context_ != NULL ? *signing_context_
                         : *::Catalyst::Protocol::Cryptography::SigningContext::internal_default_instance();
}
::Catalyst::Protocol::Cryptography::SigningContext* SignMessageRequest::mutable_signing_context() {
  
  if (signing_context_ == NULL) {
    signing_context_ = new ::Catalyst::Protocol::Cryptography::SigningContext;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
  return signing_context_;
}
::Catalyst::Protocol::Cryptography::SigningContext* SignMessageRequest::release_signing_context() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
  
  ::Catalyst::Protocol::Cryptography::SigningContext* temp = signing_context_;
  signing_context_ = NULL;
  return temp;
}
void SignMessageRequest::set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context) {
  delete signing_context_;
  signing_context_ = signing_context;
  if (signing_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignMessageResponse::kSignatureFieldNumber;
const int SignMessageResponse::kPublicKeyFieldNumber;
const int SignMessageResponse::kOriginalMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignMessageResponse::SignMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
}
SignMessageResponse::SignMessageResponse(const SignMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  original_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.original_message().size() > 0) {
    original_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_message_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
}

void SignMessageResponse::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SignMessageResponse::~SignMessageResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  SharedDtor();
}

void SignMessageResponse::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignMessageResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[51].descriptor;
}

const SignMessageResponse& SignMessageResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignMessageResponse* SignMessageResponse::New(::google::protobuf::Arena* arena) const {
  SignMessageResponse* n = new SignMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SignMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes signature = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes public_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes original_message = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_original_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  return false;
#undef DO_
}

void SignMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  // bytes signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->public_key(), output);
  }

  // bytes original_message = 3;
  if (this->original_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->original_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
}

::google::protobuf::uint8* SignMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  // bytes signature = 1;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_key(), target);
  }

  // bytes original_message = 3;
  if (this->original_message().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->original_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  return target;
}

size_t SignMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  size_t total_size = 0;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  // bytes original_message = 3;
  if (this->original_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->original_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SignMessageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
    MergeFrom(*source);
  }
}

void SignMessageResponse::MergeFrom(const SignMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.original_message().size() > 0) {

    original_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_message_);
  }
}

void SignMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignMessageResponse::CopyFrom(const SignMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignMessageResponse::IsInitialized() const {
  return true;
}

void SignMessageResponse::Swap(SignMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignMessageResponse::InternalSwap(SignMessageResponse* other) {
  signature_.Swap(&other->signature_);
  public_key_.Swap(&other->public_key_);
  original_message_.Swap(&other->original_message_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignMessageResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[51];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignMessageResponse

// bytes signature = 1;
void SignMessageResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignMessageResponse::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  return signature_.GetNoArena();
}
void SignMessageResponse::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
#if LANG_CXX11
void SignMessageResponse::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
#endif
void SignMessageResponse::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
void SignMessageResponse::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
::std::string* SignMessageResponse::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignMessageResponse::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignMessageResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}

// bytes public_key = 2;
void SignMessageResponse::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignMessageResponse::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
  return public_key_.GetNoArena();
}
void SignMessageResponse::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
#if LANG_CXX11
void SignMessageResponse::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
#endif
void SignMessageResponse::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
void SignMessageResponse::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
::std::string* SignMessageResponse::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignMessageResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignMessageResponse::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}

// bytes original_message = 3;
void SignMessageResponse::clear_original_message() {
  original_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignMessageResponse::original_message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
  return original_message_.GetNoArena();
}
void SignMessageResponse::set_original_message(const ::std::string& value) {
  
  original_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
#if LANG_CXX11
void SignMessageResponse::set_original_message(::std::string&& value) {
  
  original_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
#endif
void SignMessageResponse::set_original_message(const char* value) {
  
  original_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
void SignMessageResponse::set_original_message(const void* value, size_t size) {
  
  original_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
::std::string* SignMessageResponse::mutable_original_message() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
  return original_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignMessageResponse::release_original_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
  
  return original_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignMessageResponse::set_allocated_original_message(::std::string* original_message) {
  if (original_message != NULL) {
    
  } else {
    
  }
  original_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyMessageRequest::kSignatureFieldNumber;
const int VerifyMessageRequest::kPublicKeyFieldNumber;
const int VerifyMessageRequest::kMessageFieldNumber;
const int VerifyMessageRequest::kSigningContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyMessageRequest::VerifyMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
}
VerifyMessageRequest::VerifyMessageRequest(const VerifyMessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_signing_context()) {
    signing_context_ = new ::Catalyst::Protocol::Cryptography::SigningContext(*from.signing_context_);
  } else {
    signing_context_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
}

void VerifyMessageRequest::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signing_context_ = NULL;
  _cached_size_ = 0;
}

VerifyMessageRequest::~VerifyMessageRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  SharedDtor();
}

void VerifyMessageRequest::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete signing_context_;
  }
}

void VerifyMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyMessageRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[52].descriptor;
}

const VerifyMessageRequest& VerifyMessageRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyMessageRequest* VerifyMessageRequest::New(::google::protobuf::Arena* arena) const {
  VerifyMessageRequest* n = new VerifyMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && signing_context_ != NULL) {
    delete signing_context_;
  }
  signing_context_ = NULL;
}

bool VerifyMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes signature = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes public_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes message = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signing_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  return false;
#undef DO_
}

void VerifyMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  // bytes signature = 1;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->public_key(), output);
  }

  // bytes message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->message(), output);
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
  if (this->has_signing_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->signing_context_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
}

::google::protobuf::uint8* VerifyMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  // bytes signature = 1;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_key(), target);
  }

  // bytes message = 3;
  if (this->message().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message(), target);
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
  if (this->has_signing_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->signing_context_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  return target;
}

size_t VerifyMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  size_t total_size = 0;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  // bytes message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
  if (this->has_signing_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signing_context_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyMessageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
    MergeFrom(*source);
  }
}

void VerifyMessageRequest::MergeFrom(const VerifyMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_signing_context()) {
    mutable_signing_context()->::Catalyst::Protocol::Cryptography::SigningContext::MergeFrom(from.signing_context());
  }
}

void VerifyMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyMessageRequest::CopyFrom(const VerifyMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyMessageRequest::IsInitialized() const {
  return true;
}

void VerifyMessageRequest::Swap(VerifyMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyMessageRequest::InternalSwap(VerifyMessageRequest* other) {
  signature_.Swap(&other->signature_);
  public_key_.Swap(&other->public_key_);
  message_.Swap(&other->message_);
  std::swap(signing_context_, other->signing_context_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyMessageRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[52];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyMessageRequest

// bytes signature = 1;
void VerifyMessageRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VerifyMessageRequest::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  return signature_.GetNoArena();
}
void VerifyMessageRequest::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
#if LANG_CXX11
void VerifyMessageRequest::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
#endif
void VerifyMessageRequest::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
void VerifyMessageRequest::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
::std::string* VerifyMessageRequest::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyMessageRequest::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyMessageRequest::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}

// bytes public_key = 2;
void VerifyMessageRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VerifyMessageRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
  return public_key_.GetNoArena();
}
void VerifyMessageRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
#if LANG_CXX11
void VerifyMessageRequest::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
#endif
void VerifyMessageRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
void VerifyMessageRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
::std::string* VerifyMessageRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyMessageRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyMessageRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}

// bytes message = 3;
void VerifyMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VerifyMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  return message_.GetNoArena();
}
void VerifyMessageRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
#if LANG_CXX11
void VerifyMessageRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
#endif
void VerifyMessageRequest::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
void VerifyMessageRequest::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
::std::string* VerifyMessageRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyMessageRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}

// .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
bool VerifyMessageRequest::has_signing_context() const {
  return this != internal_default_instance() && signing_context_ != NULL;
}
void VerifyMessageRequest::clear_signing_context() {
  if (GetArenaNoVirtual() == NULL && signing_context_ != NULL) delete signing_context_;
  signing_context_ = NULL;
}
const ::Catalyst::Protocol::Cryptography::SigningContext& VerifyMessageRequest::signing_context() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
  return signing_context_ != NULL ? *signing_context_
                         : *::Catalyst::Protocol::Cryptography::SigningContext::internal_default_instance();
}
::Catalyst::Protocol::Cryptography::SigningContext* VerifyMessageRequest::mutable_signing_context() {
  
  if (signing_context_ == NULL) {
    signing_context_ = new ::Catalyst::Protocol::Cryptography::SigningContext;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
  return signing_context_;
}
::Catalyst::Protocol::Cryptography::SigningContext* VerifyMessageRequest::release_signing_context() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
  
  ::Catalyst::Protocol::Cryptography::SigningContext* temp = signing_context_;
  signing_context_ = NULL;
  return temp;
}
void VerifyMessageRequest::set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context) {
  delete signing_context_;
  signing_context_ = signing_context;
  if (signing_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyMessageResponse::kIsSignedByKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyMessageResponse::VerifyMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
}
VerifyMessageResponse::VerifyMessageResponse(const VerifyMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_signed_by_key_ = from.is_signed_by_key_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
}

void VerifyMessageResponse::SharedCtor() {
  is_signed_by_key_ = false;
  _cached_size_ = 0;
}

VerifyMessageResponse::~VerifyMessageResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  SharedDtor();
}

void VerifyMessageResponse::SharedDtor() {
}

void VerifyMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyMessageResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[53].descriptor;
}

const VerifyMessageResponse& VerifyMessageResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

VerifyMessageResponse* VerifyMessageResponse::New(::google::protobuf::Arena* arena) const {
  VerifyMessageResponse* n = new VerifyMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  is_signed_by_key_ = false;
}

bool VerifyMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_signed_by_key = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_signed_by_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  return false;
#undef DO_
}

void VerifyMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  // bool is_signed_by_key = 1;
  if (this->is_signed_by_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_signed_by_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
}

::google::protobuf::uint8* VerifyMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  // bool is_signed_by_key = 1;
  if (this->is_signed_by_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_signed_by_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  return target;
}

size_t VerifyMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  size_t total_size = 0;

  // bool is_signed_by_key = 1;
  if (this->is_signed_by_key() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyMessageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
    MergeFrom(*source);
  }
}

void VerifyMessageResponse::MergeFrom(const VerifyMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.is_signed_by_key() != 0) {
    set_is_signed_by_key(from.is_signed_by_key());
  }
}

void VerifyMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyMessageResponse::CopyFrom(const VerifyMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyMessageResponse::IsInitialized() const {
  return true;
}

void VerifyMessageResponse::Swap(VerifyMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyMessageResponse::InternalSwap(VerifyMessageResponse* other) {
  std::swap(is_signed_by_key_, other->is_signed_by_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyMessageResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[53];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyMessageResponse

// bool is_signed_by_key = 1;
void VerifyMessageResponse::clear_is_signed_by_key() {
  is_signed_by_key_ = false;
}
bool VerifyMessageResponse::is_signed_by_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse.is_signed_by_key)
  return is_signed_by_key_;
}
void VerifyMessageResponse::set_is_signed_by_key(bool value) {
  
  is_signed_by_key_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse.is_signed_by_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceStatusRequest::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceStatusRequest::ServiceStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
}
ServiceStatusRequest::ServiceStatusRequest(const ServiceStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
}

void ServiceStatusRequest::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

ServiceStatusRequest::~ServiceStatusRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  SharedDtor();
}

void ServiceStatusRequest::SharedDtor() {
}

void ServiceStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceStatusRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[54].descriptor;
}

const ServiceStatusRequest& ServiceStatusRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceStatusRequest* ServiceStatusRequest::New(::google::protobuf::Arena* arena) const {
  ServiceStatusRequest* n = new ServiceStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  query_ = false;
}

bool ServiceStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  return false;
#undef DO_
}

void ServiceStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
}

::google::protobuf::uint8* ServiceStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  return target;
}

size_t ServiceStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceStatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
    MergeFrom(*source);
  }
}

void ServiceStatusRequest::MergeFrom(const ServiceStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void ServiceStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStatusRequest::CopyFrom(const ServiceStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStatusRequest::IsInitialized() const {
  return true;
}

void ServiceStatusRequest::Swap(ServiceStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceStatusRequest::InternalSwap(ServiceStatusRequest* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceStatusRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[54];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceStatusRequest

// bool query = 1;
void ServiceStatusRequest::clear_query() {
  query_ = false;
}
bool ServiceStatusRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest.query)
  return query_;
}
void ServiceStatusRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceStatusResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceStatusResponse::ServiceStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
}
ServiceStatusResponse::ServiceStatusResponse(const ServiceStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
}

void ServiceStatusResponse::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServiceStatusResponse::~ServiceStatusResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  SharedDtor();
}

void ServiceStatusResponse::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServiceStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceStatusResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[55].descriptor;
}

const ServiceStatusResponse& ServiceStatusResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceStatusResponse* ServiceStatusResponse::New(::google::protobuf::Arena* arena) const {
  ServiceStatusResponse* n = new ServiceStatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServiceStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  return false;
#undef DO_
}

void ServiceStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
}

::google::protobuf::uint8* ServiceStatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  return target;
}

size_t ServiceStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceStatusResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceStatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
    MergeFrom(*source);
  }
}

void ServiceStatusResponse::MergeFrom(const ServiceStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ServiceStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStatusResponse::CopyFrom(const ServiceStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStatusResponse::IsInitialized() const {
  return true;
}

void ServiceStatusResponse::Swap(ServiceStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceStatusResponse::InternalSwap(ServiceStatusResponse* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceStatusResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[55];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceStatusResponse

// string query = 1;
void ServiceStatusResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServiceStatusResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  return query_.GetNoArena();
}
void ServiceStatusResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
#if LANG_CXX11
void ServiceStatusResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
#endif
void ServiceStatusResponse::set_query(const char* value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
void ServiceStatusResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
::std::string* ServiceStatusResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServiceStatusResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServiceStatusResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFileToDfsRequest::kFileSizeFieldNumber;
const int AddFileToDfsRequest::kFileNameFieldNumber;
const int AddFileToDfsRequest::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFileToDfsRequest::AddFileToDfsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
}
AddFileToDfsRequest::AddFileToDfsRequest(const AddFileToDfsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node().size() > 0) {
    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
}

void AddFileToDfsRequest::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

AddFileToDfsRequest::~AddFileToDfsRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  SharedDtor();
}

void AddFileToDfsRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddFileToDfsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFileToDfsRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[56].descriptor;
}

const AddFileToDfsRequest& AddFileToDfsRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddFileToDfsRequest* AddFileToDfsRequest::New(::google::protobuf::Arena* arena) const {
  AddFileToDfsRequest* n = new AddFileToDfsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFileToDfsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = GOOGLE_ULONGLONG(0);
}

bool AddFileToDfsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 file_size = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), this->node().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  return false;
#undef DO_
}

void AddFileToDfsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  // uint64 file_size = 1;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->file_size(), output);
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // string node = 3;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
}

::google::protobuf::uint8* AddFileToDfsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  // uint64 file_size = 1;
  if (this->file_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->file_size(), target);
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // string node = 3;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  return target;
}

size_t AddFileToDfsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  size_t total_size = 0;

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // string node = 3;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node());
  }

  // uint64 file_size = 1;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFileToDfsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFileToDfsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFileToDfsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
    MergeFrom(*source);
  }
}

void AddFileToDfsRequest::MergeFrom(const AddFileToDfsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.node().size() > 0) {

    node_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
}

void AddFileToDfsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFileToDfsRequest::CopyFrom(const AddFileToDfsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFileToDfsRequest::IsInitialized() const {
  return true;
}

void AddFileToDfsRequest::Swap(AddFileToDfsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFileToDfsRequest::InternalSwap(AddFileToDfsRequest* other) {
  file_name_.Swap(&other->file_name_);
  node_.Swap(&other->node_);
  std::swap(file_size_, other->file_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFileToDfsRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[56];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFileToDfsRequest

// uint64 file_size = 1;
void AddFileToDfsRequest::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AddFileToDfsRequest::file_size() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_size)
  return file_size_;
}
void AddFileToDfsRequest::set_file_size(::google::protobuf::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_size)
}

// string file_name = 2;
void AddFileToDfsRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFileToDfsRequest::file_name() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
  return file_name_.GetNoArena();
}
void AddFileToDfsRequest::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
#if LANG_CXX11
void AddFileToDfsRequest::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
#endif
void AddFileToDfsRequest::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
void AddFileToDfsRequest::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
::std::string* AddFileToDfsRequest::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFileToDfsRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFileToDfsRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}

// string node = 3;
void AddFileToDfsRequest::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFileToDfsRequest::node() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  return node_.GetNoArena();
}
void AddFileToDfsRequest::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
#if LANG_CXX11
void AddFileToDfsRequest::set_node(::std::string&& value) {
  
  node_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
#endif
void AddFileToDfsRequest::set_node(const char* value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
void AddFileToDfsRequest::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
::std::string* AddFileToDfsRequest::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFileToDfsRequest::release_node() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFileToDfsRequest::set_allocated_node(::std::string* node) {
  if (node != NULL) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFileToDfsResponse::kResponseCodeFieldNumber;
const int AddFileToDfsResponse::kDfsHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFileToDfsResponse::AddFileToDfsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
}
AddFileToDfsResponse::AddFileToDfsResponse(const AddFileToDfsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_code().size() > 0) {
    response_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dfs_hash().size() > 0) {
    dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dfs_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
}

void AddFileToDfsResponse::SharedCtor() {
  response_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AddFileToDfsResponse::~AddFileToDfsResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  SharedDtor();
}

void AddFileToDfsResponse::SharedDtor() {
  response_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dfs_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddFileToDfsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFileToDfsResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[57].descriptor;
}

const AddFileToDfsResponse& AddFileToDfsResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddFileToDfsResponse* AddFileToDfsResponse::New(::google::protobuf::Arena* arena) const {
  AddFileToDfsResponse* n = new AddFileToDfsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFileToDfsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AddFileToDfsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes response_code = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dfs_hash = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dfs_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dfs_hash().data(), this->dfs_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  return false;
#undef DO_
}

void AddFileToDfsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  // bytes response_code = 1;
  if (this->response_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->response_code(), output);
  }

  // string dfs_hash = 2;
  if (this->dfs_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dfs_hash().data(), this->dfs_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dfs_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
}

::google::protobuf::uint8* AddFileToDfsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  // bytes response_code = 1;
  if (this->response_code().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->response_code(), target);
  }

  // string dfs_hash = 2;
  if (this->dfs_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dfs_hash().data(), this->dfs_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dfs_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  return target;
}

size_t AddFileToDfsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  size_t total_size = 0;

  // bytes response_code = 1;
  if (this->response_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->response_code());
  }

  // string dfs_hash = 2;
  if (this->dfs_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dfs_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFileToDfsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFileToDfsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFileToDfsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
    MergeFrom(*source);
  }
}

void AddFileToDfsResponse::MergeFrom(const AddFileToDfsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.response_code().size() > 0) {

    response_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  if (from.dfs_hash().size() > 0) {

    dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dfs_hash_);
  }
}

void AddFileToDfsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFileToDfsResponse::CopyFrom(const AddFileToDfsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFileToDfsResponse::IsInitialized() const {
  return true;
}

void AddFileToDfsResponse::Swap(AddFileToDfsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFileToDfsResponse::InternalSwap(AddFileToDfsResponse* other) {
  response_code_.Swap(&other->response_code_);
  dfs_hash_.Swap(&other->dfs_hash_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFileToDfsResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[57];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFileToDfsResponse

// bytes response_code = 1;
void AddFileToDfsResponse::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFileToDfsResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
  return response_code_.GetNoArena();
}
void AddFileToDfsResponse::set_response_code(const ::std::string& value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
#if LANG_CXX11
void AddFileToDfsResponse::set_response_code(::std::string&& value) {
  
  response_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
#endif
void AddFileToDfsResponse::set_response_code(const char* value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
void AddFileToDfsResponse::set_response_code(const void* value, size_t size) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
::std::string* AddFileToDfsResponse::mutable_response_code() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
  return response_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFileToDfsResponse::release_response_code() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
  
  return response_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFileToDfsResponse::set_allocated_response_code(::std::string* response_code) {
  if (response_code != NULL) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}

// string dfs_hash = 2;
void AddFileToDfsResponse::clear_dfs_hash() {
  dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFileToDfsResponse::dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
  return dfs_hash_.GetNoArena();
}
void AddFileToDfsResponse::set_dfs_hash(const ::std::string& value) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
#if LANG_CXX11
void AddFileToDfsResponse::set_dfs_hash(::std::string&& value) {
  
  dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
#endif
void AddFileToDfsResponse::set_dfs_hash(const char* value) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
void AddFileToDfsResponse::set_dfs_hash(const char* value, size_t size) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
::std::string* AddFileToDfsResponse::mutable_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
  return dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFileToDfsResponse::release_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
  
  return dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFileToDfsResponse::set_allocated_dfs_hash(::std::string* dfs_hash) {
  if (dfs_hash != NULL) {
    
  } else {
    
  }
  dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferFileBytesRequest::kChunkIdFieldNumber;
const int TransferFileBytesRequest::kChunkBytesFieldNumber;
const int TransferFileBytesRequest::kCorrelationFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferFileBytesRequest::TransferFileBytesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
}
TransferFileBytesRequest::TransferFileBytesRequest(const TransferFileBytesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chunk_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chunk_bytes().size() > 0) {
    chunk_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_bytes_);
  }
  correlation_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.correlation_file_name().size() > 0) {
    correlation_file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlation_file_name_);
  }
  chunk_id_ = from.chunk_id_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
}

void TransferFileBytesRequest::SharedCtor() {
  chunk_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlation_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_id_ = 0u;
  _cached_size_ = 0;
}

TransferFileBytesRequest::~TransferFileBytesRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  SharedDtor();
}

void TransferFileBytesRequest::SharedDtor() {
  chunk_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlation_file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransferFileBytesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferFileBytesRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[58].descriptor;
}

const TransferFileBytesRequest& TransferFileBytesRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferFileBytesRequest* TransferFileBytesRequest::New(::google::protobuf::Arena* arena) const {
  TransferFileBytesRequest* n = new TransferFileBytesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferFileBytesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  chunk_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  correlation_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_id_ = 0u;
}

bool TransferFileBytesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 chunk_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chunk_bytes = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chunk_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes correlation_file_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_correlation_file_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  return false;
#undef DO_
}

void TransferFileBytesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  // uint32 chunk_id = 1;
  if (this->chunk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chunk_id(), output);
  }

  // bytes chunk_bytes = 2;
  if (this->chunk_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->chunk_bytes(), output);
  }

  // bytes correlation_file_name = 3;
  if (this->correlation_file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->correlation_file_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
}

::google::protobuf::uint8* TransferFileBytesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  // uint32 chunk_id = 1;
  if (this->chunk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chunk_id(), target);
  }

  // bytes chunk_bytes = 2;
  if (this->chunk_bytes().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chunk_bytes(), target);
  }

  // bytes correlation_file_name = 3;
  if (this->correlation_file_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->correlation_file_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  return target;
}

size_t TransferFileBytesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  size_t total_size = 0;

  // bytes chunk_bytes = 2;
  if (this->chunk_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chunk_bytes());
  }

  // bytes correlation_file_name = 3;
  if (this->correlation_file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->correlation_file_name());
  }

  // uint32 chunk_id = 1;
  if (this->chunk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chunk_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferFileBytesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferFileBytesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferFileBytesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
    MergeFrom(*source);
  }
}

void TransferFileBytesRequest::MergeFrom(const TransferFileBytesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.chunk_bytes().size() > 0) {

    chunk_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_bytes_);
  }
  if (from.correlation_file_name().size() > 0) {

    correlation_file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlation_file_name_);
  }
  if (from.chunk_id() != 0) {
    set_chunk_id(from.chunk_id());
  }
}

void TransferFileBytesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferFileBytesRequest::CopyFrom(const TransferFileBytesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferFileBytesRequest::IsInitialized() const {
  return true;
}

void TransferFileBytesRequest::Swap(TransferFileBytesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferFileBytesRequest::InternalSwap(TransferFileBytesRequest* other) {
  chunk_bytes_.Swap(&other->chunk_bytes_);
  correlation_file_name_.Swap(&other->correlation_file_name_);
  std::swap(chunk_id_, other->chunk_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferFileBytesRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[58];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferFileBytesRequest

// uint32 chunk_id = 1;
void TransferFileBytesRequest::clear_chunk_id() {
  chunk_id_ = 0u;
}
::google::protobuf::uint32 TransferFileBytesRequest::chunk_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_id)
  return chunk_id_;
}
void TransferFileBytesRequest::set_chunk_id(::google::protobuf::uint32 value) {
  
  chunk_id_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_id)
}

// bytes chunk_bytes = 2;
void TransferFileBytesRequest::clear_chunk_bytes() {
  chunk_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TransferFileBytesRequest::chunk_bytes() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
  return chunk_bytes_.GetNoArena();
}
void TransferFileBytesRequest::set_chunk_bytes(const ::std::string& value) {
  
  chunk_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
#if LANG_CXX11
void TransferFileBytesRequest::set_chunk_bytes(::std::string&& value) {
  
  chunk_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
#endif
void TransferFileBytesRequest::set_chunk_bytes(const char* value) {
  
  chunk_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
void TransferFileBytesRequest::set_chunk_bytes(const void* value, size_t size) {
  
  chunk_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
::std::string* TransferFileBytesRequest::mutable_chunk_bytes() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
  return chunk_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransferFileBytesRequest::release_chunk_bytes() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
  
  return chunk_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransferFileBytesRequest::set_allocated_chunk_bytes(::std::string* chunk_bytes) {
  if (chunk_bytes != NULL) {
    
  } else {
    
  }
  chunk_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chunk_bytes);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}

// bytes correlation_file_name = 3;
void TransferFileBytesRequest::clear_correlation_file_name() {
  correlation_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TransferFileBytesRequest::correlation_file_name() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
  return correlation_file_name_.GetNoArena();
}
void TransferFileBytesRequest::set_correlation_file_name(const ::std::string& value) {
  
  correlation_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
#if LANG_CXX11
void TransferFileBytesRequest::set_correlation_file_name(::std::string&& value) {
  
  correlation_file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
#endif
void TransferFileBytesRequest::set_correlation_file_name(const char* value) {
  
  correlation_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
void TransferFileBytesRequest::set_correlation_file_name(const void* value, size_t size) {
  
  correlation_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
::std::string* TransferFileBytesRequest::mutable_correlation_file_name() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
  return correlation_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransferFileBytesRequest::release_correlation_file_name() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
  
  return correlation_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransferFileBytesRequest::set_allocated_correlation_file_name(::std::string* correlation_file_name) {
  if (correlation_file_name != NULL) {
    
  } else {
    
  }
  correlation_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlation_file_name);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferFileBytesResponse::kResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferFileBytesResponse::TransferFileBytesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
}
TransferFileBytesResponse::TransferFileBytesResponse(const TransferFileBytesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_code().size() > 0) {
    response_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
}

void TransferFileBytesResponse::SharedCtor() {
  response_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TransferFileBytesResponse::~TransferFileBytesResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  SharedDtor();
}

void TransferFileBytesResponse::SharedDtor() {
  response_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransferFileBytesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferFileBytesResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[59].descriptor;
}

const TransferFileBytesResponse& TransferFileBytesResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransferFileBytesResponse* TransferFileBytesResponse::New(::google::protobuf::Arena* arena) const {
  TransferFileBytesResponse* n = new TransferFileBytesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferFileBytesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TransferFileBytesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes response_code = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  return false;
#undef DO_
}

void TransferFileBytesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  // bytes response_code = 1;
  if (this->response_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->response_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
}

::google::protobuf::uint8* TransferFileBytesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  // bytes response_code = 1;
  if (this->response_code().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->response_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  return target;
}

size_t TransferFileBytesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  size_t total_size = 0;

  // bytes response_code = 1;
  if (this->response_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->response_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferFileBytesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferFileBytesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferFileBytesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
    MergeFrom(*source);
  }
}

void TransferFileBytesResponse::MergeFrom(const TransferFileBytesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.response_code().size() > 0) {

    response_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
}

void TransferFileBytesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferFileBytesResponse::CopyFrom(const TransferFileBytesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferFileBytesResponse::IsInitialized() const {
  return true;
}

void TransferFileBytesResponse::Swap(TransferFileBytesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferFileBytesResponse::InternalSwap(TransferFileBytesResponse* other) {
  response_code_.Swap(&other->response_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferFileBytesResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[59];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferFileBytesResponse

// bytes response_code = 1;
void TransferFileBytesResponse::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TransferFileBytesResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
  return response_code_.GetNoArena();
}
void TransferFileBytesResponse::set_response_code(const ::std::string& value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
#if LANG_CXX11
void TransferFileBytesResponse::set_response_code(::std::string&& value) {
  
  response_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
#endif
void TransferFileBytesResponse::set_response_code(const char* value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
void TransferFileBytesResponse::set_response_code(const void* value, size_t size) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
::std::string* TransferFileBytesResponse::mutable_response_code() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
  return response_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransferFileBytesResponse::release_response_code() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
  
  return response_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransferFileBytesResponse::set_allocated_response_code(::std::string* response_code) {
  if (response_code != NULL) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovePeerRequest::kPeerIpFieldNumber;
const int RemovePeerRequest::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovePeerRequest::RemovePeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
}
RemovePeerRequest::RemovePeerRequest(const RemovePeerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.peer_ip().size() > 0) {
    peer_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_ip_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
}

void RemovePeerRequest::SharedCtor() {
  peer_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RemovePeerRequest::~RemovePeerRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  SharedDtor();
}

void RemovePeerRequest::SharedDtor() {
  peer_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemovePeerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovePeerRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[60].descriptor;
}

const RemovePeerRequest& RemovePeerRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemovePeerRequest* RemovePeerRequest::New(::google::protobuf::Arena* arena) const {
  RemovePeerRequest* n = new RemovePeerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemovePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  peer_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RemovePeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes peer_ip = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes public_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  return false;
#undef DO_
}

void RemovePeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  // bytes peer_ip = 1;
  if (this->peer_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->peer_ip(), output);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->public_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
}

::google::protobuf::uint8* RemovePeerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  // bytes peer_ip = 1;
  if (this->peer_ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->peer_ip(), target);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  return target;
}

size_t RemovePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  size_t total_size = 0;

  // bytes peer_ip = 1;
  if (this->peer_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->peer_ip());
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovePeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePeerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemovePeerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
    MergeFrom(*source);
  }
}

void RemovePeerRequest::MergeFrom(const RemovePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.peer_ip().size() > 0) {

    peer_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_ip_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void RemovePeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePeerRequest::CopyFrom(const RemovePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePeerRequest::IsInitialized() const {
  return true;
}

void RemovePeerRequest::Swap(RemovePeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovePeerRequest::InternalSwap(RemovePeerRequest* other) {
  peer_ip_.Swap(&other->peer_ip_);
  public_key_.Swap(&other->public_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemovePeerRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[60];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemovePeerRequest

// bytes peer_ip = 1;
void RemovePeerRequest::clear_peer_ip() {
  peer_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemovePeerRequest::peer_ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
  return peer_ip_.GetNoArena();
}
void RemovePeerRequest::set_peer_ip(const ::std::string& value) {
  
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
#if LANG_CXX11
void RemovePeerRequest::set_peer_ip(::std::string&& value) {
  
  peer_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
#endif
void RemovePeerRequest::set_peer_ip(const char* value) {
  
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
void RemovePeerRequest::set_peer_ip(const void* value, size_t size) {
  
  peer_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
::std::string* RemovePeerRequest::mutable_peer_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
  return peer_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemovePeerRequest::release_peer_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
  
  return peer_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemovePeerRequest::set_allocated_peer_ip(::std::string* peer_ip) {
  if (peer_ip != NULL) {
    
  } else {
    
  }
  peer_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}

// bytes public_key = 2;
void RemovePeerRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemovePeerRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
  return public_key_.GetNoArena();
}
void RemovePeerRequest::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
#if LANG_CXX11
void RemovePeerRequest::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
#endif
void RemovePeerRequest::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
void RemovePeerRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
::std::string* RemovePeerRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemovePeerRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemovePeerRequest::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovePeerResponse::kDeletedCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovePeerResponse::RemovePeerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
}
RemovePeerResponse::RemovePeerResponse(const RemovePeerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deleted_count_ = from.deleted_count_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
}

void RemovePeerResponse::SharedCtor() {
  deleted_count_ = 0u;
  _cached_size_ = 0;
}

RemovePeerResponse::~RemovePeerResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  SharedDtor();
}

void RemovePeerResponse::SharedDtor() {
}

void RemovePeerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovePeerResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[61].descriptor;
}

const RemovePeerResponse& RemovePeerResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemovePeerResponse* RemovePeerResponse::New(::google::protobuf::Arena* arena) const {
  RemovePeerResponse* n = new RemovePeerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemovePeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  deleted_count_ = 0u;
}

bool RemovePeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deleted_count = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deleted_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  return false;
#undef DO_
}

void RemovePeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  // uint32 deleted_count = 1;
  if (this->deleted_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deleted_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
}

::google::protobuf::uint8* RemovePeerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  // uint32 deleted_count = 1;
  if (this->deleted_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deleted_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  return target;
}

size_t RemovePeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  size_t total_size = 0;

  // uint32 deleted_count = 1;
  if (this->deleted_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deleted_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovePeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePeerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemovePeerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
    MergeFrom(*source);
  }
}

void RemovePeerResponse::MergeFrom(const RemovePeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.deleted_count() != 0) {
    set_deleted_count(from.deleted_count());
  }
}

void RemovePeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePeerResponse::CopyFrom(const RemovePeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePeerResponse::IsInitialized() const {
  return true;
}

void RemovePeerResponse::Swap(RemovePeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovePeerResponse::InternalSwap(RemovePeerResponse* other) {
  std::swap(deleted_count_, other->deleted_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemovePeerResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[61];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemovePeerResponse

// uint32 deleted_count = 1;
void RemovePeerResponse::clear_deleted_count() {
  deleted_count_ = 0u;
}
::google::protobuf::uint32 RemovePeerResponse::deleted_count() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerResponse.deleted_count)
  return deleted_count_;
}
void RemovePeerResponse::set_deleted_count(::google::protobuf::uint32 value) {
  
  deleted_count_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerResponse.deleted_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerCountRequest::GetPeerCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
}
GetPeerCountRequest::GetPeerCountRequest(const GetPeerCountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
}

void GetPeerCountRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetPeerCountRequest::~GetPeerCountRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  SharedDtor();
}

void GetPeerCountRequest::SharedDtor() {
}

void GetPeerCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerCountRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[62].descriptor;
}

const GetPeerCountRequest& GetPeerCountRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerCountRequest* GetPeerCountRequest::New(::google::protobuf::Arena* arena) const {
  GetPeerCountRequest* n = new GetPeerCountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
}

bool GetPeerCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  return false;
#undef DO_
}

void GetPeerCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
}

::google::protobuf::uint8* GetPeerCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  return target;
}

size_t GetPeerCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerCountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
    MergeFrom(*source);
  }
}

void GetPeerCountRequest::MergeFrom(const GetPeerCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void GetPeerCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerCountRequest::CopyFrom(const GetPeerCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerCountRequest::IsInitialized() const {
  return true;
}

void GetPeerCountRequest::Swap(GetPeerCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerCountRequest::InternalSwap(GetPeerCountRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerCountRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[62];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerCountRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPeerCountResponse::kPeerCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPeerCountResponse::GetPeerCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
}
GetPeerCountResponse::GetPeerCountResponse(const GetPeerCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_count_ = from.peer_count_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
}

void GetPeerCountResponse::SharedCtor() {
  peer_count_ = 0;
  _cached_size_ = 0;
}

GetPeerCountResponse::~GetPeerCountResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  SharedDtor();
}

void GetPeerCountResponse::SharedDtor() {
}

void GetPeerCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPeerCountResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[63].descriptor;
}

const GetPeerCountResponse& GetPeerCountResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPeerCountResponse* GetPeerCountResponse::New(::google::protobuf::Arena* arena) const {
  GetPeerCountResponse* n = new GetPeerCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPeerCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  peer_count_ = 0;
}

bool GetPeerCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 peer_count = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  return false;
#undef DO_
}

void GetPeerCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  // int32 peer_count = 1;
  if (this->peer_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->peer_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
}

::google::protobuf::uint8* GetPeerCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  // int32 peer_count = 1;
  if (this->peer_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->peer_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  return target;
}

size_t GetPeerCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  size_t total_size = 0;

  // int32 peer_count = 1;
  if (this->peer_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->peer_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPeerCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPeerCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
    MergeFrom(*source);
  }
}

void GetPeerCountResponse::MergeFrom(const GetPeerCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.peer_count() != 0) {
    set_peer_count(from.peer_count());
  }
}

void GetPeerCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerCountResponse::CopyFrom(const GetPeerCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerCountResponse::IsInitialized() const {
  return true;
}

void GetPeerCountResponse::Swap(GetPeerCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPeerCountResponse::InternalSwap(GetPeerCountResponse* other) {
  std::swap(peer_count_, other->peer_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPeerCountResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[63];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPeerCountResponse

// int32 peer_count = 1;
void GetPeerCountResponse::clear_peer_count() {
  peer_count_ = 0;
}
::google::protobuf::int32 GetPeerCountResponse::peer_count() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse.peer_count)
  return peer_count_;
}
void GetPeerCountResponse::set_peer_count(::google::protobuf::int32 value) {
  
  peer_count_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse.peer_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFileFromDfsRequest::kDfsHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFileFromDfsRequest::GetFileFromDfsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
}
GetFileFromDfsRequest::GetFileFromDfsRequest(const GetFileFromDfsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dfs_hash().size() > 0) {
    dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dfs_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
}

void GetFileFromDfsRequest::SharedCtor() {
  dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetFileFromDfsRequest::~GetFileFromDfsRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  SharedDtor();
}

void GetFileFromDfsRequest::SharedDtor() {
  dfs_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetFileFromDfsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileFromDfsRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[64].descriptor;
}

const GetFileFromDfsRequest& GetFileFromDfsRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetFileFromDfsRequest* GetFileFromDfsRequest::New(::google::protobuf::Arena* arena) const {
  GetFileFromDfsRequest* n = new GetFileFromDfsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFileFromDfsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetFileFromDfsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dfs_hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dfs_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dfs_hash().data(), this->dfs_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  return false;
#undef DO_
}

void GetFileFromDfsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  // string dfs_hash = 1;
  if (this->dfs_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dfs_hash().data(), this->dfs_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dfs_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
}

::google::protobuf::uint8* GetFileFromDfsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  // string dfs_hash = 1;
  if (this->dfs_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dfs_hash().data(), this->dfs_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dfs_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  return target;
}

size_t GetFileFromDfsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  size_t total_size = 0;

  // string dfs_hash = 1;
  if (this->dfs_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dfs_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileFromDfsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileFromDfsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFileFromDfsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
    MergeFrom(*source);
  }
}

void GetFileFromDfsRequest::MergeFrom(const GetFileFromDfsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.dfs_hash().size() > 0) {

    dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dfs_hash_);
  }
}

void GetFileFromDfsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileFromDfsRequest::CopyFrom(const GetFileFromDfsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileFromDfsRequest::IsInitialized() const {
  return true;
}

void GetFileFromDfsRequest::Swap(GetFileFromDfsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFileFromDfsRequest::InternalSwap(GetFileFromDfsRequest* other) {
  dfs_hash_.Swap(&other->dfs_hash_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFileFromDfsRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[64];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFileFromDfsRequest

// string dfs_hash = 1;
void GetFileFromDfsRequest::clear_dfs_hash() {
  dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetFileFromDfsRequest::dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
  return dfs_hash_.GetNoArena();
}
void GetFileFromDfsRequest::set_dfs_hash(const ::std::string& value) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
#if LANG_CXX11
void GetFileFromDfsRequest::set_dfs_hash(::std::string&& value) {
  
  dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
#endif
void GetFileFromDfsRequest::set_dfs_hash(const char* value) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
void GetFileFromDfsRequest::set_dfs_hash(const char* value, size_t size) {
  
  dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
::std::string* GetFileFromDfsRequest::mutable_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
  return dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetFileFromDfsRequest::release_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
  
  return dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetFileFromDfsRequest::set_allocated_dfs_hash(::std::string* dfs_hash) {
  if (dfs_hash != NULL) {
    
  } else {
    
  }
  dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFileFromDfsResponse::kFileSizeFieldNumber;
const int GetFileFromDfsResponse::kResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFileFromDfsResponse::GetFileFromDfsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
}
GetFileFromDfsResponse::GetFileFromDfsResponse(const GetFileFromDfsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_code().size() > 0) {
    response_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
}

void GetFileFromDfsResponse::SharedCtor() {
  response_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

GetFileFromDfsResponse::~GetFileFromDfsResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  SharedDtor();
}

void GetFileFromDfsResponse::SharedDtor() {
  response_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetFileFromDfsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileFromDfsResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[65].descriptor;
}

const GetFileFromDfsResponse& GetFileFromDfsResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetFileFromDfsResponse* GetFileFromDfsResponse::New(::google::protobuf::Arena* arena) const {
  GetFileFromDfsResponse* n = new GetFileFromDfsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFileFromDfsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_size_ = GOOGLE_ULONGLONG(0);
}

bool GetFileFromDfsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 file_size = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes response_code = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  return false;
#undef DO_
}

void GetFileFromDfsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  // uint64 file_size = 1;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->file_size(), output);
  }

  // bytes response_code = 2;
  if (this->response_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->response_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
}

::google::protobuf::uint8* GetFileFromDfsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  // uint64 file_size = 1;
  if (this->file_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->file_size(), target);
  }

  // bytes response_code = 2;
  if (this->response_code().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->response_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  return target;
}

size_t GetFileFromDfsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  size_t total_size = 0;

  // bytes response_code = 2;
  if (this->response_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->response_code());
  }

  // uint64 file_size = 1;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileFromDfsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileFromDfsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFileFromDfsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
    MergeFrom(*source);
  }
}

void GetFileFromDfsResponse::MergeFrom(const GetFileFromDfsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.response_code().size() > 0) {

    response_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
}

void GetFileFromDfsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileFromDfsResponse::CopyFrom(const GetFileFromDfsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileFromDfsResponse::IsInitialized() const {
  return true;
}

void GetFileFromDfsResponse::Swap(GetFileFromDfsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFileFromDfsResponse::InternalSwap(GetFileFromDfsResponse* other) {
  response_code_.Swap(&other->response_code_);
  std::swap(file_size_, other->file_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFileFromDfsResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[65];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFileFromDfsResponse

// uint64 file_size = 1;
void GetFileFromDfsResponse::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetFileFromDfsResponse::file_size() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.file_size)
  return file_size_;
}
void GetFileFromDfsResponse::set_file_size(::google::protobuf::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.file_size)
}

// bytes response_code = 2;
void GetFileFromDfsResponse::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetFileFromDfsResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
  return response_code_.GetNoArena();
}
void GetFileFromDfsResponse::set_response_code(const ::std::string& value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
#if LANG_CXX11
void GetFileFromDfsResponse::set_response_code(::std::string&& value) {
  
  response_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
#endif
void GetFileFromDfsResponse::set_response_code(const char* value) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
void GetFileFromDfsResponse::set_response_code(const void* value, size_t size) {
  
  response_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
::std::string* GetFileFromDfsResponse::mutable_response_code() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
  return response_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetFileFromDfsResponse::release_response_code() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
  
  return response_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetFileFromDfsResponse::set_allocated_response_code(::std::string* response_code) {
  if (response_code != NULL) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPeerDataFolderRequest::kDataFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPeerDataFolderRequest::SetPeerDataFolderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
}
SetPeerDataFolderRequest::SetPeerDataFolderRequest(const SetPeerDataFolderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_folder().size() > 0) {
    data_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_folder_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
}

void SetPeerDataFolderRequest::SharedCtor() {
  data_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SetPeerDataFolderRequest::~SetPeerDataFolderRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  SharedDtor();
}

void SetPeerDataFolderRequest::SharedDtor() {
  data_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetPeerDataFolderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPeerDataFolderRequest::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[66].descriptor;
}

const SetPeerDataFolderRequest& SetPeerDataFolderRequest::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetPeerDataFolderRequest* SetPeerDataFolderRequest::New(::google::protobuf::Arena* arena) const {
  SetPeerDataFolderRequest* n = new SetPeerDataFolderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetPeerDataFolderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  data_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetPeerDataFolderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data_folder = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_folder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_folder().data(), this->data_folder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  return false;
#undef DO_
}

void SetPeerDataFolderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  // string data_folder = 1;
  if (this->data_folder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_folder().data(), this->data_folder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data_folder(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
}

::google::protobuf::uint8* SetPeerDataFolderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  // string data_folder = 1;
  if (this->data_folder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_folder().data(), this->data_folder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data_folder(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  return target;
}

size_t SetPeerDataFolderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  size_t total_size = 0;

  // string data_folder = 1;
  if (this->data_folder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_folder());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPeerDataFolderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPeerDataFolderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetPeerDataFolderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
    MergeFrom(*source);
  }
}

void SetPeerDataFolderRequest::MergeFrom(const SetPeerDataFolderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data_folder().size() > 0) {

    data_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_folder_);
  }
}

void SetPeerDataFolderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPeerDataFolderRequest::CopyFrom(const SetPeerDataFolderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPeerDataFolderRequest::IsInitialized() const {
  return true;
}

void SetPeerDataFolderRequest::Swap(SetPeerDataFolderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPeerDataFolderRequest::InternalSwap(SetPeerDataFolderRequest* other) {
  data_folder_.Swap(&other->data_folder_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetPeerDataFolderRequest::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[66];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetPeerDataFolderRequest

// string data_folder = 1;
void SetPeerDataFolderRequest::clear_data_folder() {
  data_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetPeerDataFolderRequest::data_folder() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
  return data_folder_.GetNoArena();
}
void SetPeerDataFolderRequest::set_data_folder(const ::std::string& value) {
  
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
#if LANG_CXX11
void SetPeerDataFolderRequest::set_data_folder(::std::string&& value) {
  
  data_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
#endif
void SetPeerDataFolderRequest::set_data_folder(const char* value) {
  
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
void SetPeerDataFolderRequest::set_data_folder(const char* value, size_t size) {
  
  data_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
::std::string* SetPeerDataFolderRequest::mutable_data_folder() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
  return data_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetPeerDataFolderRequest::release_data_folder() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
  
  return data_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetPeerDataFolderRequest::set_allocated_data_folder(::std::string* data_folder) {
  if (data_folder != NULL) {
    
  } else {
    
  }
  data_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_folder);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPeerDataFolderResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPeerDataFolderResponse::SetPeerDataFolderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
}
SetPeerDataFolderResponse::SetPeerDataFolderResponse(const SetPeerDataFolderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
}

void SetPeerDataFolderResponse::SharedCtor() {
  query_ = false;
  _cached_size_ = 0;
}

SetPeerDataFolderResponse::~SetPeerDataFolderResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  SharedDtor();
}

void SetPeerDataFolderResponse::SharedDtor() {
}

void SetPeerDataFolderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPeerDataFolderResponse::descriptor() {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[67].descriptor;
}

const SetPeerDataFolderResponse& SetPeerDataFolderResponse::default_instance() {
  protobuf_Rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetPeerDataFolderResponse* SetPeerDataFolderResponse::New(::google::protobuf::Arena* arena) const {
  SetPeerDataFolderResponse* n = new SetPeerDataFolderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetPeerDataFolderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  query_ = false;
}

bool SetPeerDataFolderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool query = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  return false;
#undef DO_
}

void SetPeerDataFolderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  // bool query = 1;
  if (this->query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
}

::google::protobuf::uint8* SetPeerDataFolderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  // bool query = 1;
  if (this->query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  return target;
}

size_t SetPeerDataFolderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  size_t total_size = 0;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPeerDataFolderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPeerDataFolderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetPeerDataFolderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
    MergeFrom(*source);
  }
}

void SetPeerDataFolderResponse::MergeFrom(const SetPeerDataFolderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query() != 0) {
    set_query(from.query());
  }
}

void SetPeerDataFolderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPeerDataFolderResponse::CopyFrom(const SetPeerDataFolderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPeerDataFolderResponse::IsInitialized() const {
  return true;
}

void SetPeerDataFolderResponse::Swap(SetPeerDataFolderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPeerDataFolderResponse::InternalSwap(SetPeerDataFolderResponse* other) {
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetPeerDataFolderResponse::GetMetadata() const {
  protobuf_Rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Rpc_2eproto::file_level_metadata[67];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetPeerDataFolderResponse

// bool query = 1;
void SetPeerDataFolderResponse::clear_query() {
  query_ = false;
}
bool SetPeerDataFolderResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse.query)
  return query_;
}
void SetPeerDataFolderResponse::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Node
}  // namespace Rpc
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)
