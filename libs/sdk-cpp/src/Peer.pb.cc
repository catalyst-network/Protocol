// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Peer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Peer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Catalyst {
namespace Protocol {
namespace Peer {
class PeerIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PeerId> {
} _PeerId_default_instance_;
class PeerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PeerInfo> {
} _PeerInfo_default_instance_;

namespace protobuf_Peer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerId, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerId, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerId, public_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, reputation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, is_blacklisted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, is_unreachable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, inactive_for_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, last_seen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, modified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerInfo, created_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PeerId)},
  { 7, -1, sizeof(PeerInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PeerId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PeerInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Peer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _PeerId_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PeerInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  _PeerId_default_instance_.DefaultConstruct();
  _PeerInfo_default_instance_.DefaultConstruct();
  _PeerInfo_default_instance_.get_mutable()->peer_id_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
  _PeerInfo_default_instance_.get_mutable()->inactive_for_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _PeerInfo_default_instance_.get_mutable()->last_seen_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _PeerInfo_default_instance_.get_mutable()->modified_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _PeerInfo_default_instance_.get_mutable()->created_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nPeer.proto\022\026Catalyst.Protocol.Peer\032\037go"
      "ogle/protobuf/timestamp.proto\032\036google/pr"
      "otobuf/duration.proto\"6\n\006PeerId\022\n\n\002ip\030\001 "
      "\001(\014\022\014\n\004port\030\002 \001(\r\022\022\n\npublic_key\030\003 \001(\014\"\272\002"
      "\n\010PeerInfo\022/\n\007peer_id\030\001 \001(\0132\036.Catalyst.P"
      "rotocol.Peer.PeerId\022\022\n\nreputation\030\002 \001(\021\022"
      "\026\n\016is_blacklisted\030\003 \001(\010\022\026\n\016is_unreachabl"
      "e\030\004 \001(\010\022/\n\014inactive_for\030\005 \001(\0132\031.google.p"
      "rotobuf.Duration\022-\n\tlast_seen\030\006 \001(\0132\032.go"
      "ogle.protobuf.Timestamp\022,\n\010modified\030\007 \001("
      "\0132\032.google.protobuf.Timestamp\022+\n\007created"
      "\030\010 \001(\0132\032.google.protobuf.TimestampB\002P\001b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 486);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Peer.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Peer_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerId::kIpFieldNumber;
const int PeerId::kPortFieldNumber;
const int PeerId::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerId::PeerId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Peer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Peer.PeerId)
}
PeerId::PeerId(const PeerId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Peer.PeerId)
}

void PeerId::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _cached_size_ = 0;
}

PeerId::~PeerId() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Peer.PeerId)
  SharedDtor();
}

void PeerId::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerId::descriptor() {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Peer_2eproto::file_level_metadata[0].descriptor;
}

const PeerId& PeerId::default_instance() {
  protobuf_Peer_2eproto::InitDefaults();
  return *internal_default_instance();
}

PeerId* PeerId::New(::google::protobuf::Arena* arena) const {
  PeerId* n = new PeerId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerId::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Peer.PeerId)
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

bool PeerId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Peer.PeerId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes ip = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes public_key = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Peer.PeerId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Peer.PeerId)
  return false;
#undef DO_
}

void PeerId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Peer.PeerId)
  // bytes ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // bytes public_key = 3;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->public_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Peer.PeerId)
}

::google::protobuf::uint8* PeerId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Peer.PeerId)
  // bytes ip = 1;
  if (this->ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // bytes public_key = 3;
  if (this->public_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->public_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Peer.PeerId)
  return target;
}

size_t PeerId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Peer.PeerId)
  size_t total_size = 0;

  // bytes ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  // bytes public_key = 3;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Peer.PeerId)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Peer.PeerId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Peer.PeerId)
    MergeFrom(*source);
  }
}

void PeerId::MergeFrom(const PeerId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Peer.PeerId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void PeerId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Peer.PeerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerId::CopyFrom(const PeerId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Peer.PeerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerId::IsInitialized() const {
  return true;
}

void PeerId::Swap(PeerId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerId::InternalSwap(PeerId* other) {
  ip_.Swap(&other->ip_);
  public_key_.Swap(&other->public_key_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerId::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Peer_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerId

// bytes ip = 1;
void PeerId::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PeerId::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerId.ip)
  return ip_.GetNoArena();
}
void PeerId::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerId.ip)
}
#if LANG_CXX11
void PeerId::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Peer.PeerId.ip)
}
#endif
void PeerId::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Peer.PeerId.ip)
}
void PeerId::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Peer.PeerId.ip)
}
::std::string* PeerId::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerId.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PeerId::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerId.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PeerId::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerId.ip)
}

// uint32 port = 2;
void PeerId::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 PeerId::port() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerId.port)
  return port_;
}
void PeerId::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerId.port)
}

// bytes public_key = 3;
void PeerId::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PeerId::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerId.public_key)
  return public_key_.GetNoArena();
}
void PeerId::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerId.public_key)
}
#if LANG_CXX11
void PeerId::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Peer.PeerId.public_key)
}
#endif
void PeerId::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Peer.PeerId.public_key)
}
void PeerId::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Peer.PeerId.public_key)
}
::std::string* PeerId::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerId.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PeerId::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerId.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PeerId::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerId.public_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerInfo::kPeerIdFieldNumber;
const int PeerInfo::kReputationFieldNumber;
const int PeerInfo::kIsBlacklistedFieldNumber;
const int PeerInfo::kIsUnreachableFieldNumber;
const int PeerInfo::kInactiveForFieldNumber;
const int PeerInfo::kLastSeenFieldNumber;
const int PeerInfo::kModifiedFieldNumber;
const int PeerInfo::kCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerInfo::PeerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Peer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Peer.PeerInfo)
}
PeerInfo::PeerInfo(const PeerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer_id()) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId(*from.peer_id_);
  } else {
    peer_id_ = NULL;
  }
  if (from.has_inactive_for()) {
    inactive_for_ = new ::google::protobuf::Duration(*from.inactive_for_);
  } else {
    inactive_for_ = NULL;
  }
  if (from.has_last_seen()) {
    last_seen_ = new ::google::protobuf::Timestamp(*from.last_seen_);
  } else {
    last_seen_ = NULL;
  }
  if (from.has_modified()) {
    modified_ = new ::google::protobuf::Timestamp(*from.modified_);
  } else {
    modified_ = NULL;
  }
  if (from.has_created()) {
    created_ = new ::google::protobuf::Timestamp(*from.created_);
  } else {
    created_ = NULL;
  }
  ::memcpy(&reputation_, &from.reputation_,
    reinterpret_cast<char*>(&is_unreachable_) -
    reinterpret_cast<char*>(&reputation_) + sizeof(is_unreachable_));
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Peer.PeerInfo)
}

void PeerInfo::SharedCtor() {
  ::memset(&peer_id_, 0, reinterpret_cast<char*>(&is_unreachable_) -
    reinterpret_cast<char*>(&peer_id_) + sizeof(is_unreachable_));
  _cached_size_ = 0;
}

PeerInfo::~PeerInfo() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Peer.PeerInfo)
  SharedDtor();
}

void PeerInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete peer_id_;
  }
  if (this != internal_default_instance()) {
    delete inactive_for_;
  }
  if (this != internal_default_instance()) {
    delete last_seen_;
  }
  if (this != internal_default_instance()) {
    delete modified_;
  }
  if (this != internal_default_instance()) {
    delete created_;
  }
}

void PeerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerInfo::descriptor() {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Peer_2eproto::file_level_metadata[1].descriptor;
}

const PeerInfo& PeerInfo::default_instance() {
  protobuf_Peer_2eproto::InitDefaults();
  return *internal_default_instance();
}

PeerInfo* PeerInfo::New(::google::protobuf::Arena* arena) const {
  PeerInfo* n = new PeerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Peer.PeerInfo)
  if (GetArenaNoVirtual() == NULL && peer_id_ != NULL) {
    delete peer_id_;
  }
  peer_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && inactive_for_ != NULL) {
    delete inactive_for_;
  }
  inactive_for_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_seen_ != NULL) {
    delete last_seen_;
  }
  last_seen_ = NULL;
  if (GetArenaNoVirtual() == NULL && modified_ != NULL) {
    delete modified_;
  }
  modified_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_ != NULL) {
    delete created_;
  }
  created_ = NULL;
  ::memset(&reputation_, 0, reinterpret_cast<char*>(&is_unreachable_) -
    reinterpret_cast<char*>(&reputation_) + sizeof(is_unreachable_));
}

bool PeerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Peer.PeerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 reputation = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &reputation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_blacklisted = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_blacklisted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_unreachable = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unreachable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration inactive_for = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inactive_for()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_seen = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_seen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp modified = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modified()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Peer.PeerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Peer.PeerInfo)
  return false;
#undef DO_
}

void PeerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Peer.PeerInfo)
  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  if (this->has_peer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_id_, output);
  }

  // sint32 reputation = 2;
  if (this->reputation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->reputation(), output);
  }

  // bool is_blacklisted = 3;
  if (this->is_blacklisted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_blacklisted(), output);
  }

  // bool is_unreachable = 4;
  if (this->is_unreachable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_unreachable(), output);
  }

  // .google.protobuf.Duration inactive_for = 5;
  if (this->has_inactive_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->inactive_for_, output);
  }

  // .google.protobuf.Timestamp last_seen = 6;
  if (this->has_last_seen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->last_seen_, output);
  }

  // .google.protobuf.Timestamp modified = 7;
  if (this->has_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->modified_, output);
  }

  // .google.protobuf.Timestamp created = 8;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->created_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Peer.PeerInfo)
}

::google::protobuf::uint8* PeerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Peer.PeerInfo)
  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  if (this->has_peer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_id_, false, target);
  }

  // sint32 reputation = 2;
  if (this->reputation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->reputation(), target);
  }

  // bool is_blacklisted = 3;
  if (this->is_blacklisted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_blacklisted(), target);
  }

  // bool is_unreachable = 4;
  if (this->is_unreachable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_unreachable(), target);
  }

  // .google.protobuf.Duration inactive_for = 5;
  if (this->has_inactive_for()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->inactive_for_, false, target);
  }

  // .google.protobuf.Timestamp last_seen = 6;
  if (this->has_last_seen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->last_seen_, false, target);
  }

  // .google.protobuf.Timestamp modified = 7;
  if (this->has_modified()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->modified_, false, target);
  }

  // .google.protobuf.Timestamp created = 8;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->created_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Peer.PeerInfo)
  return target;
}

size_t PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Peer.PeerInfo)
  size_t total_size = 0;

  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_id_);
  }

  // .google.protobuf.Duration inactive_for = 5;
  if (this->has_inactive_for()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inactive_for_);
  }

  // .google.protobuf.Timestamp last_seen = 6;
  if (this->has_last_seen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->last_seen_);
  }

  // .google.protobuf.Timestamp modified = 7;
  if (this->has_modified()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->modified_);
  }

  // .google.protobuf.Timestamp created = 8;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->created_);
  }

  // sint32 reputation = 2;
  if (this->reputation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->reputation());
  }

  // bool is_blacklisted = 3;
  if (this->is_blacklisted() != 0) {
    total_size += 1 + 1;
  }

  // bool is_unreachable = 4;
  if (this->is_unreachable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Peer.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Peer.PeerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Peer.PeerInfo)
    MergeFrom(*source);
  }
}

void PeerInfo::MergeFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Peer.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer_id()) {
    mutable_peer_id()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from.peer_id());
  }
  if (from.has_inactive_for()) {
    mutable_inactive_for()->::google::protobuf::Duration::MergeFrom(from.inactive_for());
  }
  if (from.has_last_seen()) {
    mutable_last_seen()->::google::protobuf::Timestamp::MergeFrom(from.last_seen());
  }
  if (from.has_modified()) {
    mutable_modified()->::google::protobuf::Timestamp::MergeFrom(from.modified());
  }
  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
  if (from.reputation() != 0) {
    set_reputation(from.reputation());
  }
  if (from.is_blacklisted() != 0) {
    set_is_blacklisted(from.is_blacklisted());
  }
  if (from.is_unreachable() != 0) {
    set_is_unreachable(from.is_unreachable());
  }
}

void PeerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Peer.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerInfo::CopyFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Peer.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfo::IsInitialized() const {
  return true;
}

void PeerInfo::Swap(PeerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerInfo::InternalSwap(PeerInfo* other) {
  std::swap(peer_id_, other->peer_id_);
  std::swap(inactive_for_, other->inactive_for_);
  std::swap(last_seen_, other->last_seen_);
  std::swap(modified_, other->modified_);
  std::swap(created_, other->created_);
  std::swap(reputation_, other->reputation_);
  std::swap(is_blacklisted_, other->is_blacklisted_);
  std::swap(is_unreachable_, other->is_unreachable_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerInfo::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Peer_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerInfo

// .Catalyst.Protocol.Peer.PeerId peer_id = 1;
bool PeerInfo::has_peer_id() const {
  return this != internal_default_instance() && peer_id_ != NULL;
}
void PeerInfo::clear_peer_id() {
  if (GetArenaNoVirtual() == NULL && peer_id_ != NULL) delete peer_id_;
  peer_id_ = NULL;
}
const ::Catalyst::Protocol::Peer::PeerId& PeerInfo::peer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.peer_id)
  return peer_id_ != NULL ? *peer_id_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
::Catalyst::Protocol::Peer::PeerId* PeerInfo::mutable_peer_id() {
  
  if (peer_id_ == NULL) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.peer_id)
  return peer_id_;
}
::Catalyst::Protocol::Peer::PeerId* PeerInfo::release_peer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.peer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = peer_id_;
  peer_id_ = NULL;
  return temp;
}
void PeerInfo::set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id) {
  delete peer_id_;
  peer_id_ = peer_id;
  if (peer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.peer_id)
}

// sint32 reputation = 2;
void PeerInfo::clear_reputation() {
  reputation_ = 0;
}
::google::protobuf::int32 PeerInfo::reputation() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.reputation)
  return reputation_;
}
void PeerInfo::set_reputation(::google::protobuf::int32 value) {
  
  reputation_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerInfo.reputation)
}

// bool is_blacklisted = 3;
void PeerInfo::clear_is_blacklisted() {
  is_blacklisted_ = false;
}
bool PeerInfo::is_blacklisted() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.is_blacklisted)
  return is_blacklisted_;
}
void PeerInfo::set_is_blacklisted(bool value) {
  
  is_blacklisted_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerInfo.is_blacklisted)
}

// bool is_unreachable = 4;
void PeerInfo::clear_is_unreachable() {
  is_unreachable_ = false;
}
bool PeerInfo::is_unreachable() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.is_unreachable)
  return is_unreachable_;
}
void PeerInfo::set_is_unreachable(bool value) {
  
  is_unreachable_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerInfo.is_unreachable)
}

// .google.protobuf.Duration inactive_for = 5;
bool PeerInfo::has_inactive_for() const {
  return this != internal_default_instance() && inactive_for_ != NULL;
}
void PeerInfo::clear_inactive_for() {
  if (GetArenaNoVirtual() == NULL && inactive_for_ != NULL) delete inactive_for_;
  inactive_for_ = NULL;
}
const ::google::protobuf::Duration& PeerInfo::inactive_for() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
  return inactive_for_ != NULL ? *inactive_for_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* PeerInfo::mutable_inactive_for() {
  
  if (inactive_for_ == NULL) {
    inactive_for_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
  return inactive_for_;
}
::google::protobuf::Duration* PeerInfo::release_inactive_for() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
  
  ::google::protobuf::Duration* temp = inactive_for_;
  inactive_for_ = NULL;
  return temp;
}
void PeerInfo::set_allocated_inactive_for(::google::protobuf::Duration* inactive_for) {
  delete inactive_for_;
  if (inactive_for != NULL && inactive_for->GetArena() != NULL) {
    ::google::protobuf::Duration* new_inactive_for = new ::google::protobuf::Duration;
    new_inactive_for->CopyFrom(*inactive_for);
    inactive_for = new_inactive_for;
  }
  inactive_for_ = inactive_for;
  if (inactive_for) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
}

// .google.protobuf.Timestamp last_seen = 6;
bool PeerInfo::has_last_seen() const {
  return this != internal_default_instance() && last_seen_ != NULL;
}
void PeerInfo::clear_last_seen() {
  if (GetArenaNoVirtual() == NULL && last_seen_ != NULL) delete last_seen_;
  last_seen_ = NULL;
}
const ::google::protobuf::Timestamp& PeerInfo::last_seen() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.last_seen)
  return last_seen_ != NULL ? *last_seen_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* PeerInfo::mutable_last_seen() {
  
  if (last_seen_ == NULL) {
    last_seen_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.last_seen)
  return last_seen_;
}
::google::protobuf::Timestamp* PeerInfo::release_last_seen() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.last_seen)
  
  ::google::protobuf::Timestamp* temp = last_seen_;
  last_seen_ = NULL;
  return temp;
}
void PeerInfo::set_allocated_last_seen(::google::protobuf::Timestamp* last_seen) {
  delete last_seen_;
  if (last_seen != NULL && last_seen->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_last_seen = new ::google::protobuf::Timestamp;
    new_last_seen->CopyFrom(*last_seen);
    last_seen = new_last_seen;
  }
  last_seen_ = last_seen;
  if (last_seen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.last_seen)
}

// .google.protobuf.Timestamp modified = 7;
bool PeerInfo::has_modified() const {
  return this != internal_default_instance() && modified_ != NULL;
}
void PeerInfo::clear_modified() {
  if (GetArenaNoVirtual() == NULL && modified_ != NULL) delete modified_;
  modified_ = NULL;
}
const ::google::protobuf::Timestamp& PeerInfo::modified() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.modified)
  return modified_ != NULL ? *modified_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* PeerInfo::mutable_modified() {
  
  if (modified_ == NULL) {
    modified_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.modified)
  return modified_;
}
::google::protobuf::Timestamp* PeerInfo::release_modified() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.modified)
  
  ::google::protobuf::Timestamp* temp = modified_;
  modified_ = NULL;
  return temp;
}
void PeerInfo::set_allocated_modified(::google::protobuf::Timestamp* modified) {
  delete modified_;
  if (modified != NULL && modified->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_modified = new ::google::protobuf::Timestamp;
    new_modified->CopyFrom(*modified);
    modified = new_modified;
  }
  modified_ = modified;
  if (modified) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.modified)
}

// .google.protobuf.Timestamp created = 8;
bool PeerInfo::has_created() const {
  return this != internal_default_instance() && created_ != NULL;
}
void PeerInfo::clear_created() {
  if (GetArenaNoVirtual() == NULL && created_ != NULL) delete created_;
  created_ = NULL;
}
const ::google::protobuf::Timestamp& PeerInfo::created() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.created)
  return created_ != NULL ? *created_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* PeerInfo::mutable_created() {
  
  if (created_ == NULL) {
    created_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.created)
  return created_;
}
::google::protobuf::Timestamp* PeerInfo::release_created() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.created)
  
  ::google::protobuf::Timestamp* temp = created_;
  created_ = NULL;
  return temp;
}
void PeerInfo::set_allocated_created(::google::protobuf::Timestamp* created) {
  delete created_;
  if (created != NULL && created->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_created = new ::google::protobuf::Timestamp;
    new_created->CopyFrom(*created);
    created = new_created;
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.created)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Peer
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)
