/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Catalyst.Protocol.Transaction.EntryRangeProof');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Catalyst.Protocol.Transaction.EntryRangeProof.repeatedFields_, null);
};
goog.inherits(proto.Catalyst.Protocol.Transaction.EntryRangeProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.Transaction.EntryRangeProof.displayName = 'proto.Catalyst.Protocol.Transaction.EntryRangeProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.repeatedFields_ = [1,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Transaction.EntryRangeProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Transaction.EntryRangeProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    vList: msg.getVList_asB64(),
    a: msg.getA_asB64(),
    s: msg.getS_asB64(),
    t1: msg.getT1_asB64(),
    t2: msg.getT2_asB64(),
    tau: msg.getTau_asB64(),
    mu: msg.getMu_asB64(),
    lList: msg.getLList_asB64(),
    rList: msg.getRList_asB64(),
    aprime0: msg.getAprime0_asB64(),
    bprime0: msg.getBprime0_asB64(),
    t: msg.getT_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Transaction.EntryRangeProof}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Transaction.EntryRangeProof;
  return proto.Catalyst.Protocol.Transaction.EntryRangeProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Transaction.EntryRangeProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Transaction.EntryRangeProof}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addV(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setA(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setT1(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setT2(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTau(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMu(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addL(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addR(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAprime0(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBprime0(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setT(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Transaction.EntryRangeProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Transaction.EntryRangeProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getA_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getT1_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getT2_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTau_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getMu_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getLList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      8,
      f
    );
  }
  f = message.getRList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      9,
      f
    );
  }
  f = message.getAprime0_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getBprime0_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getT_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * repeated bytes V = 1;
 * @return {!Array<string>}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getVList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes V = 1;
 * This is a type-conversion wrapper around `getVList()`
 * @return {!Array<string>}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getVList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getVList()));
};


/**
 * repeated bytes V = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVList()`
 * @return {!Array<!Uint8Array>}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getVList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getVList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setVList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.addV = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.clearVList = function() {
  this.setVList([]);
};


/**
 * optional bytes A = 2;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes A = 2;
 * This is a type-conversion wrapper around `getA()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getA_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getA()));
};


/**
 * optional bytes A = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getA()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getA_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getA()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setA = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes S = 3;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes S = 3;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes S = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setS = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes T1 = 4;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getT1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes T1 = 4;
 * This is a type-conversion wrapper around `getT1()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getT1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getT1()));
};


/**
 * optional bytes T1 = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getT1()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getT1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getT1()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setT1 = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes T2 = 5;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getT2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes T2 = 5;
 * This is a type-conversion wrapper around `getT2()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getT2_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getT2()));
};


/**
 * optional bytes T2 = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getT2()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getT2_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getT2()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setT2 = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes TAU = 6;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getTau = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes TAU = 6;
 * This is a type-conversion wrapper around `getTau()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getTau_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTau()));
};


/**
 * optional bytes TAU = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTau()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getTau_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTau()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setTau = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes MU = 7;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getMu = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes MU = 7;
 * This is a type-conversion wrapper around `getMu()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getMu_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMu()));
};


/**
 * optional bytes MU = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMu()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getMu_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMu()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setMu = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * repeated bytes L = 8;
 * @return {!Array<string>}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getLList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * repeated bytes L = 8;
 * This is a type-conversion wrapper around `getLList()`
 * @return {!Array<string>}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getLList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getLList()));
};


/**
 * repeated bytes L = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLList()`
 * @return {!Array<!Uint8Array>}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getLList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getLList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setLList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.addL = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.clearLList = function() {
  this.setLList([]);
};


/**
 * repeated bytes R = 9;
 * @return {!Array<string>}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getRList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * repeated bytes R = 9;
 * This is a type-conversion wrapper around `getRList()`
 * @return {!Array<string>}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getRList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getRList()));
};


/**
 * repeated bytes R = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRList()`
 * @return {!Array<!Uint8Array>}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getRList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getRList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setRList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.addR = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.clearRList = function() {
  this.setRList([]);
};


/**
 * optional bytes APrime0 = 10;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getAprime0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes APrime0 = 10;
 * This is a type-conversion wrapper around `getAprime0()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getAprime0_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAprime0()));
};


/**
 * optional bytes APrime0 = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAprime0()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getAprime0_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAprime0()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setAprime0 = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes BPrime0 = 11;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getBprime0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes BPrime0 = 11;
 * This is a type-conversion wrapper around `getBprime0()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getBprime0_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBprime0()));
};


/**
 * optional bytes BPrime0 = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBprime0()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getBprime0_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBprime0()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setBprime0 = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes t = 12;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getT = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes t = 12;
 * This is a type-conversion wrapper around `getT()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getT_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getT()));
};


/**
 * optional bytes t = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getT()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.getT_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getT()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.EntryRangeProof.prototype.setT = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};


