/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Catalyst.Protocol.Transaction.RangeProof');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Transaction.RangeProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Catalyst.Protocol.Transaction.RangeProof.repeatedFields_, null);
};
goog.inherits(proto.Catalyst.Protocol.Transaction.RangeProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.Transaction.RangeProof.displayName = 'proto.Catalyst.Protocol.Transaction.RangeProof';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Catalyst.Protocol.Transaction.RangeProof.repeatedFields_ = [1,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Transaction.RangeProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Transaction.RangeProof} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueCommitmentList: msg.getValueCommitmentList_asB64(),
    bitCommitment: msg.getBitCommitment_asB64(),
    perBitBlindingFactorCommitment: msg.getPerBitBlindingFactorCommitment_asB64(),
    polyCommitmentT1: msg.getPolyCommitmentT1_asB64(),
    polyCommitmentT2: msg.getPolyCommitmentT2_asB64(),
    proofOfShareTau: msg.getProofOfShareTau_asB64(),
    proofOfShareMu: msg.getProofOfShareMu_asB64(),
    aggregatedVectorPolynomialLList: msg.getAggregatedVectorPolynomialLList_asB64(),
    aggregatedVectorPolynomialRList: msg.getAggregatedVectorPolynomialRList_asB64(),
    aPrime0: msg.getAPrime0_asB64(),
    bPrime0: msg.getBPrime0_asB64(),
    t: msg.getT_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Transaction.RangeProof;
  return proto.Catalyst.Protocol.Transaction.RangeProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Transaction.RangeProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addValueCommitment(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBitCommitment(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPerBitBlindingFactorCommitment(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPolyCommitmentT1(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPolyCommitmentT2(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofOfShareTau(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofOfShareMu(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAggregatedVectorPolynomialL(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAggregatedVectorPolynomialR(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAPrime0(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBPrime0(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setT(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Transaction.RangeProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Transaction.RangeProof} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Catalyst.Protocol.Transaction.RangeProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueCommitmentList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getBitCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPerBitBlindingFactorCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPolyCommitmentT1_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPolyCommitmentT2_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getProofOfShareTau_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getProofOfShareMu_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getAggregatedVectorPolynomialLList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      8,
      f
    );
  }
  f = message.getAggregatedVectorPolynomialRList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      9,
      f
    );
  }
  f = message.getAPrime0_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getBPrime0_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getT_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * repeated bytes value_commitment = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getValueCommitmentList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes value_commitment = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getValueCommitmentList()`
 * @return {!Array.<string>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getValueCommitmentList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getValueCommitmentList()));
};


/**
 * repeated bytes value_commitment = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValueCommitmentList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getValueCommitmentList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getValueCommitmentList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setValueCommitmentList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.addValueCommitment = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Catalyst.Protocol.Transaction.RangeProof.prototype.clearValueCommitmentList = function() {
  this.setValueCommitmentList([]);
};


/**
 * optional bytes bit_commitment = 2;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBitCommitment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes bit_commitment = 2;
 * This is a type-conversion wrapper around `getBitCommitment()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBitCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBitCommitment()));
};


/**
 * optional bytes bit_commitment = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBitCommitment()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBitCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBitCommitment()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setBitCommitment = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes per_bit_blinding_factor_commitment = 3;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPerBitBlindingFactorCommitment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes per_bit_blinding_factor_commitment = 3;
 * This is a type-conversion wrapper around `getPerBitBlindingFactorCommitment()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPerBitBlindingFactorCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPerBitBlindingFactorCommitment()));
};


/**
 * optional bytes per_bit_blinding_factor_commitment = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPerBitBlindingFactorCommitment()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPerBitBlindingFactorCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPerBitBlindingFactorCommitment()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setPerBitBlindingFactorCommitment = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes poly_commitment_t1 = 4;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes poly_commitment_t1 = 4;
 * This is a type-conversion wrapper around `getPolyCommitmentT1()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPolyCommitmentT1()));
};


/**
 * optional bytes poly_commitment_t1 = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPolyCommitmentT1()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPolyCommitmentT1()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setPolyCommitmentT1 = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes poly_commitment_t2 = 5;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes poly_commitment_t2 = 5;
 * This is a type-conversion wrapper around `getPolyCommitmentT2()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT2_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPolyCommitmentT2()));
};


/**
 * optional bytes poly_commitment_t2 = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPolyCommitmentT2()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT2_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPolyCommitmentT2()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setPolyCommitmentT2 = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bytes proof_of_share_tau = 6;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareTau = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes proof_of_share_tau = 6;
 * This is a type-conversion wrapper around `getProofOfShareTau()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareTau_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofOfShareTau()));
};


/**
 * optional bytes proof_of_share_tau = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofOfShareTau()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareTau_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofOfShareTau()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setProofOfShareTau = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes proof_of_share_mu = 7;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareMu = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes proof_of_share_mu = 7;
 * This is a type-conversion wrapper around `getProofOfShareMu()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareMu_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofOfShareMu()));
};


/**
 * optional bytes proof_of_share_mu = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofOfShareMu()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareMu_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofOfShareMu()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setProofOfShareMu = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * repeated bytes aggregated_vector_polynomial_l = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialLList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 8));
};


/**
 * repeated bytes aggregated_vector_polynomial_l = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getAggregatedVectorPolynomialLList()`
 * @return {!Array.<string>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialLList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getAggregatedVectorPolynomialLList()));
};


/**
 * repeated bytes aggregated_vector_polynomial_l = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggregatedVectorPolynomialLList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialLList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAggregatedVectorPolynomialLList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setAggregatedVectorPolynomialLList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.addAggregatedVectorPolynomialL = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.Catalyst.Protocol.Transaction.RangeProof.prototype.clearAggregatedVectorPolynomialLList = function() {
  this.setAggregatedVectorPolynomialLList([]);
};


/**
 * repeated bytes aggregated_vector_polynomial_r = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialRList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 9));
};


/**
 * repeated bytes aggregated_vector_polynomial_r = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getAggregatedVectorPolynomialRList()`
 * @return {!Array.<string>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialRList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getAggregatedVectorPolynomialRList()));
};


/**
 * repeated bytes aggregated_vector_polynomial_r = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggregatedVectorPolynomialRList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialRList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAggregatedVectorPolynomialRList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setAggregatedVectorPolynomialRList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.addAggregatedVectorPolynomialR = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.Catalyst.Protocol.Transaction.RangeProof.prototype.clearAggregatedVectorPolynomialRList = function() {
  this.setAggregatedVectorPolynomialRList([]);
};


/**
 * optional bytes a_prime_0 = 10;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAPrime0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes a_prime_0 = 10;
 * This is a type-conversion wrapper around `getAPrime0()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAPrime0_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAPrime0()));
};


/**
 * optional bytes a_prime_0 = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAPrime0()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAPrime0_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAPrime0()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setAPrime0 = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bytes b_prime_0 = 11;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBPrime0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes b_prime_0 = 11;
 * This is a type-conversion wrapper around `getBPrime0()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBPrime0_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBPrime0()));
};


/**
 * optional bytes b_prime_0 = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBPrime0()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBPrime0_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBPrime0()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setBPrime0 = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bytes t = 12;
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getT = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes t = 12;
 * This is a type-conversion wrapper around `getT()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getT_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getT()));
};


/**
 * optional bytes t = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getT()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getT_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getT()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setT = function(value) {
  jspb.Message.setField(this, 12, value);
};


