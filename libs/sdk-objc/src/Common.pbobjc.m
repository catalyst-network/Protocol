// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommonRoot

@implementation CommonRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CommonRoot_FileDescriptor

static GPBFileDescriptor *CommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Catalyst.Protocol.Common"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Network

GPBEnumDescriptor *Network_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NetworkUnknown\000Mainnet\000Devnet\000Testnet\000";
    static const int32_t values[] = {
        Network_NetworkUnknown,
        Network_Mainnet,
        Network_Devnet,
        Network_Testnet,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Network)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Network_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Network_IsValidValue(int32_t value__) {
  switch (value__) {
    case Network_NetworkUnknown:
    case Network_Mainnet:
    case Network_Devnet:
    case Network_Testnet:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum SignatureType

GPBEnumDescriptor *SignatureType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SignatureTypeUnknown\000TransactionPublic\000T"
        "ransactionConfidential\000ProtocolRpc\000Proto"
        "colPeer\000";
    static const int32_t values[] = {
        SignatureType_SignatureTypeUnknown,
        SignatureType_TransactionPublic,
        SignatureType_TransactionConfidential,
        SignatureType_ProtocolRpc,
        SignatureType_ProtocolPeer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SignatureType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SignatureType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SignatureType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SignatureType_SignatureTypeUnknown:
    case SignatureType_TransactionPublic:
    case SignatureType_TransactionConfidential:
    case SignatureType_ProtocolRpc:
    case SignatureType_ProtocolPeer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PeerId

@implementation PeerId

@dynamic clientId;
@dynamic protocolVersion;
@dynamic ip;
@dynamic port;
@dynamic publicKey;

typedef struct PeerId__storage_ {
  uint32_t _has_storage_[1];
  NSData *clientId;
  NSData *protocolVersion;
  NSData *ip;
  NSData *port;
  NSData *publicKey;
} PeerId__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = PeerId_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PeerId__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "protocolVersion",
        .dataTypeSpecific.className = NULL,
        .number = PeerId_FieldNumber_ProtocolVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PeerId__storage_, protocolVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ip",
        .dataTypeSpecific.className = NULL,
        .number = PeerId_FieldNumber_Ip,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PeerId__storage_, ip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = PeerId_FieldNumber_Port,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PeerId__storage_, port),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "publicKey",
        .dataTypeSpecific.className = NULL,
        .number = PeerId_FieldNumber_PublicKey,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PeerId__storage_, publicKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PeerId class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PeerId__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\017\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProtocolErrorMessageSigned

@implementation ProtocolErrorMessageSigned

@dynamic signature;
@dynamic hasPeerId, peerId;
@dynamic correlationId;
@dynamic code;

typedef struct ProtocolErrorMessageSigned__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSData *signature;
  PeerId *peerId;
  NSData *correlationId;
} ProtocolErrorMessageSigned__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolErrorMessageSigned_FieldNumber_Signature,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProtocolErrorMessageSigned__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "peerId",
        .dataTypeSpecific.className = GPBStringifySymbol(PeerId),
        .number = ProtocolErrorMessageSigned_FieldNumber_PeerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProtocolErrorMessageSigned__storage_, peerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "correlationId",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolErrorMessageSigned_FieldNumber_CorrelationId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProtocolErrorMessageSigned__storage_, correlationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolErrorMessageSigned_FieldNumber_Code,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ProtocolErrorMessageSigned__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProtocolErrorMessageSigned class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProtocolErrorMessageSigned__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\006\000\003\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProtocolMessageSigned

@implementation ProtocolMessageSigned

@dynamic signature;
@dynamic hasMessage, message;

typedef struct ProtocolMessageSigned__storage_ {
  uint32_t _has_storage_[1];
  NSData *signature;
  ProtocolMessage *message;
} ProtocolMessageSigned__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolMessageSigned_FieldNumber_Signature,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProtocolMessageSigned__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(ProtocolMessage),
        .number = ProtocolMessageSigned_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProtocolMessageSigned__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProtocolMessageSigned class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProtocolMessageSigned__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProtocolMessage

@implementation ProtocolMessage

@dynamic hasPeerId, peerId;
@dynamic correlationId;
@dynamic typeURL;
@dynamic value;

typedef struct ProtocolMessage__storage_ {
  uint32_t _has_storage_[1];
  PeerId *peerId;
  NSData *correlationId;
  NSString *typeURL;
  NSData *value;
} ProtocolMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peerId",
        .dataTypeSpecific.className = GPBStringifySymbol(PeerId),
        .number = ProtocolMessage_FieldNumber_PeerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProtocolMessage__storage_, peerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "correlationId",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolMessage_FieldNumber_CorrelationId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProtocolMessage__storage_, correlationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "typeURL",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolMessage_FieldNumber_TypeURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProtocolMessage__storage_, typeURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = ProtocolMessage_FieldNumber_Value,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ProtocolMessage__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProtocolMessage class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProtocolMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\006\000\002\r\000\003\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PeerInfo

@implementation PeerInfo

@dynamic hasPeerId, peerId;
@dynamic reputation;
@dynamic blackListed;
@dynamic isAwolPeer;
@dynamic hasInactiveFor, inactiveFor;
@dynamic hasLastSeen, lastSeen;
@dynamic hasModified, modified;
@dynamic hasCreated, created;

typedef struct PeerInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t reputation;
  PeerId *peerId;
  GPBDuration *inactiveFor;
  GPBTimestamp *lastSeen;
  GPBTimestamp *modified;
  GPBTimestamp *created;
} PeerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peerId",
        .dataTypeSpecific.className = GPBStringifySymbol(PeerId),
        .number = PeerInfo_FieldNumber_PeerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, peerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reputation",
        .dataTypeSpecific.className = NULL,
        .number = PeerInfo_FieldNumber_Reputation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, reputation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "blackListed",
        .dataTypeSpecific.className = NULL,
        .number = PeerInfo_FieldNumber_BlackListed,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isAwolPeer",
        .dataTypeSpecific.className = NULL,
        .number = PeerInfo_FieldNumber_IsAwolPeer,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "inactiveFor",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = PeerInfo_FieldNumber_InactiveFor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, inactiveFor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastSeen",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = PeerInfo_FieldNumber_LastSeen,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, lastSeen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modified",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = PeerInfo_FieldNumber_Modified,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, modified),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = PeerInfo_FieldNumber_Created,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PeerInfo class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PeerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\006\000\003\013\000\004\n\000\005\013\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SigningContext

@implementation SigningContext

@dynamic network;
@dynamic signatureType;

typedef struct SigningContext__storage_ {
  uint32_t _has_storage_[1];
  Network network;
  SignatureType signatureType;
} SigningContext__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "network",
        .dataTypeSpecific.enumDescFunc = Network_EnumDescriptor,
        .number = SigningContext_FieldNumber_Network,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SigningContext__storage_, network),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "signatureType",
        .dataTypeSpecific.enumDescFunc = SignatureType_EnumDescriptor,
        .number = SigningContext_FieldNumber_SignatureType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SigningContext__storage_, signatureType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SigningContext class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SigningContext__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SigningContext_Network_RawValue(SigningContext *message) {
  GPBDescriptor *descriptor = [SigningContext descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SigningContext_FieldNumber_Network];
  return GPBGetMessageInt32Field(message, field);
}

void SetSigningContext_Network_RawValue(SigningContext *message, int32_t value) {
  GPBDescriptor *descriptor = [SigningContext descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SigningContext_FieldNumber_Network];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t SigningContext_SignatureType_RawValue(SigningContext *message) {
  GPBDescriptor *descriptor = [SigningContext descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SigningContext_FieldNumber_SignatureType];
  return GPBGetMessageInt32Field(message, field);
}

void SetSigningContext_SignatureType_RawValue(SigningContext *message, int32_t value) {
  GPBDescriptor *descriptor = [SigningContext descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SigningContext_FieldNumber_SignatureType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
