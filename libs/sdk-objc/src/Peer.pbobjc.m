// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Peer.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Timestamp.pbobjc.h>
 #import <Protobuf/Duration.pbobjc.h>
#else
 #import "google/protobuf/Timestamp.pbobjc.h"
 #import "google/protobuf/Duration.pbobjc.h"
#endif

 #import "Peer.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PeerRoot

@implementation PeerRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PeerRoot_FileDescriptor

static GPBFileDescriptor *PeerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Catalyst.Protocol.Peer"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PeerId

@implementation PeerId

@dynamic ip;
@dynamic port;
@dynamic publicKey;

typedef struct PeerId__storage_ {
  uint32_t _has_storage_[1];
  uint32_t port;
  NSData *ip;
  NSData *publicKey;
} PeerId__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ip",
        .dataTypeSpecific.className = NULL,
        .number = PeerId_FieldNumber_Ip,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PeerId__storage_, ip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = PeerId_FieldNumber_Port,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PeerId__storage_, port),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "publicKey",
        .dataTypeSpecific.className = NULL,
        .number = PeerId_FieldNumber_PublicKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PeerId__storage_, publicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PeerId class]
                                     rootClass:[PeerRoot class]
                                          file:PeerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PeerId__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PeerInfo

@implementation PeerInfo

@dynamic hasPeerId, peerId;
@dynamic reputation;
@dynamic isBlacklisted;
@dynamic isUnreachable;
@dynamic hasInactiveFor, inactiveFor;
@dynamic hasLastSeen, lastSeen;
@dynamic hasModified, modified;
@dynamic hasCreated, created;

typedef struct PeerInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t reputation;
  PeerId *peerId;
  GPBDuration *inactiveFor;
  GPBTimestamp *lastSeen;
  GPBTimestamp *modified;
  GPBTimestamp *created;
} PeerInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peerId",
        .dataTypeSpecific.className = GPBStringifySymbol(PeerId),
        .number = PeerInfo_FieldNumber_PeerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, peerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reputation",
        .dataTypeSpecific.className = NULL,
        .number = PeerInfo_FieldNumber_Reputation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, reputation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "isBlacklisted",
        .dataTypeSpecific.className = NULL,
        .number = PeerInfo_FieldNumber_IsBlacklisted,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isUnreachable",
        .dataTypeSpecific.className = NULL,
        .number = PeerInfo_FieldNumber_IsUnreachable,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "inactiveFor",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = PeerInfo_FieldNumber_InactiveFor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, inactiveFor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastSeen",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = PeerInfo_FieldNumber_LastSeen,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, lastSeen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modified",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = PeerInfo_FieldNumber_Modified,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, modified),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = PeerInfo_FieldNumber_Created,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PeerInfo__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PeerInfo class]
                                     rootClass:[PeerRoot class]
                                          file:PeerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PeerInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
