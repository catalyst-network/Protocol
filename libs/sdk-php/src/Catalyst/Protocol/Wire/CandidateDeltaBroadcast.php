<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Wire.proto

namespace Catalyst\Protocol\Wire;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>Catalyst.Protocol.Wire.CandidateDeltaBroadcast</code>
 */
class CandidateDeltaBroadcast extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The hash computed for the current delta produced by ProducerId. This is meant to be used when voting for most popular hashes.
     * </pre>
     *
     * <code>bytes hash = 1;</code>
     */
    private $hash = '';
    /**
     * <pre>
     * Identifier of the producer of the candidate.
     * </pre>
     *
     * <code>.Catalyst.Protocol.Peer.PeerId producer_id = 2;</code>
     */
    private $producer_id = null;
    /**
     * <pre>
     * The DFS address for the content of the delta preceding this candidate.
     * </pre>
     *
     * <code>bytes previous_delta_dfs_hash = 3;</code>
     */
    private $previous_delta_dfs_hash = '';

    public function __construct() {
        \GPBMetadata\Wire::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The hash computed for the current delta produced by ProducerId. This is meant to be used when voting for most popular hashes.
     * </pre>
     *
     * <code>bytes hash = 1;</code>
     */
    public function getHash()
    {
        return $this->hash;
    }

    /**
     * <pre>
     * The hash computed for the current delta produced by ProducerId. This is meant to be used when voting for most popular hashes.
     * </pre>
     *
     * <code>bytes hash = 1;</code>
     */
    public function setHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->hash = $var;
    }

    /**
     * <pre>
     * Identifier of the producer of the candidate.
     * </pre>
     *
     * <code>.Catalyst.Protocol.Peer.PeerId producer_id = 2;</code>
     */
    public function getProducerId()
    {
        return $this->producer_id;
    }

    /**
     * <pre>
     * Identifier of the producer of the candidate.
     * </pre>
     *
     * <code>.Catalyst.Protocol.Peer.PeerId producer_id = 2;</code>
     */
    public function setProducerId(&$var)
    {
        GPBUtil::checkMessage($var, \Catalyst\Protocol\Peer\PeerId::class);
        $this->producer_id = $var;
    }

    /**
     * <pre>
     * The DFS address for the content of the delta preceding this candidate.
     * </pre>
     *
     * <code>bytes previous_delta_dfs_hash = 3;</code>
     */
    public function getPreviousDeltaDfsHash()
    {
        return $this->previous_delta_dfs_hash;
    }

    /**
     * <pre>
     * The DFS address for the content of the delta preceding this candidate.
     * </pre>
     *
     * <code>bytes previous_delta_dfs_hash = 3;</code>
     */
    public function setPreviousDeltaDfsHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->previous_delta_dfs_hash = $var;
    }

}

