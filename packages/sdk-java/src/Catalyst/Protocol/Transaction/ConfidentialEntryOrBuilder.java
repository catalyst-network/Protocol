// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transaction.proto

package Catalyst.Protocol.Transaction;

public interface ConfidentialEntryOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Catalyst.Protocol.Transaction.ConfidentialEntry)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * PublicKey of receiver.
   * </pre>
   *
   * <code>bytes receiver_public_key = 1;</code>
   */
  com.google.protobuf.ByteString getReceiverPublicKey();

  /**
   * <pre>
   * PublicKey of sender.
   * </pre>
   *
   * <code>bytes sender_public_key = 2;</code>
   */
  com.google.protobuf.ByteString getSenderPublicKey();

  /**
   * <pre>
   * 32 bytes
   * </pre>
   *
   * <code>bytes pedersen_commitment = 3;</code>
   */
  com.google.protobuf.ByteString getPedersenCommitment();

  /**
   * <code>.Catalyst.Protocol.Transaction.RangeProof range_proof = 4;</code>
   */
  boolean hasRangeProof();
  /**
   * <code>.Catalyst.Protocol.Transaction.RangeProof range_proof = 4;</code>
   */
  Catalyst.Protocol.Transaction.RangeProof getRangeProof();
  /**
   * <code>.Catalyst.Protocol.Transaction.RangeProof range_proof = 4;</code>
   */
  Catalyst.Protocol.Transaction.RangeProofOrBuilder getRangeProofOrBuilder();

  /**
   * <pre>
   * 8 bytes, clear text, fees * 10^12
   * </pre>
   *
   * <code>bytes transaction_fees = 5;</code>
   */
  com.google.protobuf.ByteString getTransactionFees();

  /**
   * <pre>
   * A nonce, similar to Ethereum, incremented on each transaction on the account issuing the transaction
   * </pre>
   *
   * <code>uint64 nonce = 6;</code>
   */
  long getNonce();
}
