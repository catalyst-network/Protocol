// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transaction.proto

package Catalyst.Protocol.Transaction;

public interface PublicEntryOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Catalyst.Protocol.Transaction.PublicEntry)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Address of receiver.
   * </pre>
   *
   * <code>bytes receiver_address = 1;</code>
   * @return The receiverAddress.
   */
  com.google.protobuf.ByteString getReceiverAddress();

  /**
   * <pre>
   * Address of sender.
   * </pre>
   *
   * <code>bytes sender_address = 2;</code>
   * @return The senderAddress.
   */
  com.google.protobuf.ByteString getSenderAddress();

  /**
   * <pre>
   * uint256 amount
   * </pre>
   *
   * <code>bytes amount = 3;</code>
   * @return The amount.
   */
  com.google.protobuf.ByteString getAmount();

  /**
   * <pre>
   * Smart contract data.
   * </pre>
   *
   * <code>bytes data = 4;</code>
   * @return The data.
   */
  com.google.protobuf.ByteString getData();

  /**
   * <code>.google.protobuf.Timestamp timestamp = 5;</code>
   * @return Whether the timestamp field is set.
   */
  boolean hasTimestamp();
  /**
   * <code>.google.protobuf.Timestamp timestamp = 5;</code>
   * @return The timestamp.
   */
  com.google.protobuf.Timestamp getTimestamp();
  /**
   * <code>.google.protobuf.Timestamp timestamp = 5;</code>
   */
  com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder();

  /**
   * <code>bytes gas_price = 6;</code>
   * @return The gasPrice.
   */
  com.google.protobuf.ByteString getGasPrice();

  /**
   * <code>uint64 gas_limit = 7;</code>
   * @return The gasLimit.
   */
  long getGasLimit();

  /**
   * <pre>
   * 8 bytes, clear text, fees * 10^12
   * </pre>
   *
   * <code>bytes transaction_fees = 8;</code>
   * @return The transactionFees.
   */
  com.google.protobuf.ByteString getTransactionFees();

  /**
   * <pre>
   * A nonce, similar to Ethereum, incremented on each transaction on the account issuing the transaction
   * </pre>
   *
   * <code>uint64 nonce = 9;</code>
   * @return The nonce.
   */
  long getNonce();

  /**
   * <pre>
   * is the ed25519ph context signature
   * </pre>
   *
   * <code>.Catalyst.Protocol.Cryptography.Signature signature = 10;</code>
   * @return Whether the signature field is set.
   */
  boolean hasSignature();
  /**
   * <pre>
   * is the ed25519ph context signature
   * </pre>
   *
   * <code>.Catalyst.Protocol.Cryptography.Signature signature = 10;</code>
   * @return The signature.
   */
  Catalyst.Protocol.Cryptography.Signature getSignature();
  /**
   * <pre>
   * is the ed25519ph context signature
   * </pre>
   *
   * <code>.Catalyst.Protocol.Cryptography.Signature signature = 10;</code>
   */
  Catalyst.Protocol.Cryptography.SignatureOrBuilder getSignatureOrBuilder();
}
