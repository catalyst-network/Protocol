// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `IPPN.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct PeerNeighborsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerNeighborsRequest {
    fn default() -> &'a PeerNeighborsRequest {
        <PeerNeighborsRequest as ::protobuf::Message>::default_instance()
    }
}

impl PeerNeighborsRequest {
    pub fn new() -> PeerNeighborsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PeerNeighborsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerNeighborsRequest {
        PeerNeighborsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PeerNeighborsRequest>(
                    "PeerNeighborsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerNeighborsRequest {
        static mut instance: ::protobuf::lazy::Lazy<PeerNeighborsRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PeerNeighborsRequest::new)
        }
    }
}

impl ::protobuf::Clear for PeerNeighborsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerNeighborsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerNeighborsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerNeighborsResponse {
    // message fields
    pub peers: ::protobuf::RepeatedField<super::Peer::PeerId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerNeighborsResponse {
    fn default() -> &'a PeerNeighborsResponse {
        <PeerNeighborsResponse as ::protobuf::Message>::default_instance()
    }
}

impl PeerNeighborsResponse {
    pub fn new() -> PeerNeighborsResponse {
        ::std::default::Default::default()
    }

    // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;


    pub fn get_peers(&self) -> &[super::Peer::PeerId] {
        &self.peers
    }
    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<super::Peer::PeerId>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<super::Peer::PeerId> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<super::Peer::PeerId> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PeerNeighborsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.peers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.peers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.peers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerNeighborsResponse {
        PeerNeighborsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Peer::PeerId>>(
                    "peers",
                    |m: &PeerNeighborsResponse| { &m.peers },
                    |m: &mut PeerNeighborsResponse| { &mut m.peers },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PeerNeighborsResponse>(
                    "PeerNeighborsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerNeighborsResponse {
        static mut instance: ::protobuf::lazy::Lazy<PeerNeighborsResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PeerNeighborsResponse::new)
        }
    }
}

impl ::protobuf::Clear for PeerNeighborsResponse {
    fn clear(&mut self) {
        self.peers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerNeighborsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerNeighborsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PingRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PingRequest {
    fn default() -> &'a PingRequest {
        <PingRequest as ::protobuf::Message>::default_instance()
    }
}

impl PingRequest {
    pub fn new() -> PingRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PingRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingRequest {
        PingRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PingRequest>(
                    "PingRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PingRequest {
        static mut instance: ::protobuf::lazy::Lazy<PingRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PingRequest::new)
        }
    }
}

impl ::protobuf::Clear for PingRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PingResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PingResponse {
    fn default() -> &'a PingResponse {
        <PingResponse as ::protobuf::Message>::default_instance()
    }
}

impl PingResponse {
    pub fn new() -> PingResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PingResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingResponse {
        PingResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PingResponse>(
                    "PingResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PingResponse {
        static mut instance: ::protobuf::lazy::Lazy<PingResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PingResponse::new)
        }
    }
}

impl ::protobuf::Clear for PingResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LatestDeltaHashRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LatestDeltaHashRequest {
    fn default() -> &'a LatestDeltaHashRequest {
        <LatestDeltaHashRequest as ::protobuf::Message>::default_instance()
    }
}

impl LatestDeltaHashRequest {
    pub fn new() -> LatestDeltaHashRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LatestDeltaHashRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LatestDeltaHashRequest {
        LatestDeltaHashRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<LatestDeltaHashRequest>(
                    "LatestDeltaHashRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LatestDeltaHashRequest {
        static mut instance: ::protobuf::lazy::Lazy<LatestDeltaHashRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(LatestDeltaHashRequest::new)
        }
    }
}

impl ::protobuf::Clear for LatestDeltaHashRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LatestDeltaHashRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LatestDeltaHashRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LatestDeltaHashResponse {
    // message fields
    pub isSync: bool,
    pub deltaIndex: ::protobuf::SingularPtrField<super::Deltas::DeltaIndex>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LatestDeltaHashResponse {
    fn default() -> &'a LatestDeltaHashResponse {
        <LatestDeltaHashResponse as ::protobuf::Message>::default_instance()
    }
}

impl LatestDeltaHashResponse {
    pub fn new() -> LatestDeltaHashResponse {
        ::std::default::Default::default()
    }

    // bool isSync = 1;


    pub fn get_isSync(&self) -> bool {
        self.isSync
    }
    pub fn clear_isSync(&mut self) {
        self.isSync = false;
    }

    // Param is passed by value, moved
    pub fn set_isSync(&mut self, v: bool) {
        self.isSync = v;
    }

    // .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 2;


    pub fn get_deltaIndex(&self) -> &super::Deltas::DeltaIndex {
        self.deltaIndex.as_ref().unwrap_or_else(|| super::Deltas::DeltaIndex::default_instance())
    }
    pub fn clear_deltaIndex(&mut self) {
        self.deltaIndex.clear();
    }

    pub fn has_deltaIndex(&self) -> bool {
        self.deltaIndex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deltaIndex(&mut self, v: super::Deltas::DeltaIndex) {
        self.deltaIndex = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deltaIndex(&mut self) -> &mut super::Deltas::DeltaIndex {
        if self.deltaIndex.is_none() {
            self.deltaIndex.set_default();
        }
        self.deltaIndex.as_mut().unwrap()
    }

    // Take field
    pub fn take_deltaIndex(&mut self) -> super::Deltas::DeltaIndex {
        self.deltaIndex.take().unwrap_or_else(|| super::Deltas::DeltaIndex::new())
    }
}

impl ::protobuf::Message for LatestDeltaHashResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.deltaIndex {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isSync = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deltaIndex)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.isSync != false {
            my_size += 2;
        }
        if let Some(ref v) = self.deltaIndex.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.isSync != false {
            os.write_bool(1, self.isSync)?;
        }
        if let Some(ref v) = self.deltaIndex.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LatestDeltaHashResponse {
        LatestDeltaHashResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isSync",
                    |m: &LatestDeltaHashResponse| { &m.isSync },
                    |m: &mut LatestDeltaHashResponse| { &mut m.isSync },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Deltas::DeltaIndex>>(
                    "deltaIndex",
                    |m: &LatestDeltaHashResponse| { &m.deltaIndex },
                    |m: &mut LatestDeltaHashResponse| { &mut m.deltaIndex },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<LatestDeltaHashResponse>(
                    "LatestDeltaHashResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LatestDeltaHashResponse {
        static mut instance: ::protobuf::lazy::Lazy<LatestDeltaHashResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(LatestDeltaHashResponse::new)
        }
    }
}

impl ::protobuf::Clear for LatestDeltaHashResponse {
    fn clear(&mut self) {
        self.isSync = false;
        self.deltaIndex.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LatestDeltaHashResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LatestDeltaHashResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeltaHistoryRequest {
    // message fields
    pub range: u32,
    pub height: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeltaHistoryRequest {
    fn default() -> &'a DeltaHistoryRequest {
        <DeltaHistoryRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeltaHistoryRequest {
    pub fn new() -> DeltaHistoryRequest {
        ::std::default::Default::default()
    }

    // uint32 range = 1;


    pub fn get_range(&self) -> u32 {
        self.range
    }
    pub fn clear_range(&mut self) {
        self.range = 0;
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: u32) {
        self.range = v;
    }

    // uint32 height = 2;


    pub fn get_height(&self) -> u32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u32) {
        self.height = v;
    }
}

impl ::protobuf::Message for DeltaHistoryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.range = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.range != 0 {
            my_size += ::protobuf::rt::value_size(1, self.range, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.range != 0 {
            os.write_uint32(1, self.range)?;
        }
        if self.height != 0 {
            os.write_uint32(2, self.height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeltaHistoryRequest {
        DeltaHistoryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "range",
                    |m: &DeltaHistoryRequest| { &m.range },
                    |m: &mut DeltaHistoryRequest| { &mut m.range },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "height",
                    |m: &DeltaHistoryRequest| { &m.height },
                    |m: &mut DeltaHistoryRequest| { &mut m.height },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeltaHistoryRequest>(
                    "DeltaHistoryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeltaHistoryRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeltaHistoryRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DeltaHistoryRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeltaHistoryRequest {
    fn clear(&mut self) {
        self.range = 0;
        self.height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeltaHistoryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeltaHistoryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeltaHistoryResponse {
    // message fields
    pub deltaIndex: ::protobuf::RepeatedField<super::Deltas::DeltaIndex>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeltaHistoryResponse {
    fn default() -> &'a DeltaHistoryResponse {
        <DeltaHistoryResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeltaHistoryResponse {
    pub fn new() -> DeltaHistoryResponse {
        ::std::default::Default::default()
    }

    // repeated .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 1;


    pub fn get_deltaIndex(&self) -> &[super::Deltas::DeltaIndex] {
        &self.deltaIndex
    }
    pub fn clear_deltaIndex(&mut self) {
        self.deltaIndex.clear();
    }

    // Param is passed by value, moved
    pub fn set_deltaIndex(&mut self, v: ::protobuf::RepeatedField<super::Deltas::DeltaIndex>) {
        self.deltaIndex = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deltaIndex(&mut self) -> &mut ::protobuf::RepeatedField<super::Deltas::DeltaIndex> {
        &mut self.deltaIndex
    }

    // Take field
    pub fn take_deltaIndex(&mut self) -> ::protobuf::RepeatedField<super::Deltas::DeltaIndex> {
        ::std::mem::replace(&mut self.deltaIndex, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DeltaHistoryResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.deltaIndex {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.deltaIndex)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.deltaIndex {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.deltaIndex {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeltaHistoryResponse {
        DeltaHistoryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::Deltas::DeltaIndex>>(
                    "deltaIndex",
                    |m: &DeltaHistoryResponse| { &m.deltaIndex },
                    |m: &mut DeltaHistoryResponse| { &mut m.deltaIndex },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeltaHistoryResponse>(
                    "DeltaHistoryResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeltaHistoryResponse {
        static mut instance: ::protobuf::lazy::Lazy<DeltaHistoryResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DeltaHistoryResponse::new)
        }
    }
}

impl ::protobuf::Clear for DeltaHistoryResponse {
    fn clear(&mut self) {
        self.deltaIndex.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeltaHistoryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeltaHistoryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nIPPN.proto\x12\x16Catalyst.Protocol.IPPN\x1a\nPeer.proto\x1a\x0cDelt\
    as.proto\"\x16\n\x14PeerNeighborsRequest\"M\n\x15PeerNeighborsResponse\
    \x124\n\x05peers\x18\x01\x20\x03(\x0b2\x1e.Catalyst.Protocol.Peer.PeerId\
    R\x05peers\"\r\n\x0bPingRequest\"\x0e\n\x0cPingResponse\"\x18\n\x16Lates\
    tDeltaHashRequest\"w\n\x17LatestDeltaHashResponse\x12\x16\n\x06isSync\
    \x18\x01\x20\x01(\x08R\x06isSync\x12D\n\ndeltaIndex\x18\x02\x20\x01(\x0b\
    2$.Catalyst.Protocol.Deltas.DeltaIndexR\ndeltaIndex\"C\n\x13DeltaHistory\
    Request\x12\x14\n\x05range\x18\x01\x20\x01(\rR\x05range\x12\x16\n\x06hei\
    ght\x18\x02\x20\x01(\rR\x06height\"\\\n\x14DeltaHistoryResponse\x12D\n\n\
    deltaIndex\x18\x01\x20\x03(\x0b2$.Catalyst.Protocol.Deltas.DeltaIndexR\n\
    deltaIndexB\x02P\x01J\xe0\r\n\x06\x12\x04\x13\06\x01\n\xdf\x06\n\x01\x0c\
    \x12\x03\x13\0\x122\xd4\x06*\n\x20Copyright\x20(c)\x202019\x20Catalyst\
    \x20Network\n\n\x20This\x20file\x20is\x20part\x20of\x20Catalyst.Network.\
    Protocol.Protobuffs\x20<https://github.com/catalyst-network/protocol-pro\
    tobuffs>\n\n\x20Catalyst.Network.Protocol.Protobuffs\x20is\x20free\x20so\
    ftware:\x20you\x20can\x20redistribute\x20it\x20and/or\x20modify\n\x20it\
    \x20under\x20the\x20terms\x20of\x20the\x20GNU\x20General\x20Public\x20Li\
    cense\x20as\x20published\x20by\n\x20the\x20Free\x20Software\x20Foundatio\
    n,\x20either\x20version\x202\x20of\x20the\x20License,\x20or\n\x20(at\x20\
    your\x20option)\x20any\x20later\x20version.\n\x20\n\x20Catalyst.Network.\
    Protocol.Protobuffs\x20is\x20distributed\x20in\x20the\x20hope\x20that\
    \x20it\x20will\x20be\x20useful,\n\x20but\x20WITHOUT\x20ANY\x20WARRANTY;\
    \x20without\x20even\x20the\x20implied\x20warranty\x20of\n\x20MERCHANTABI\
    LITY\x20or\x20FITNESS\x20FOR\x20A\x20PARTICULAR\x20PURPOSE.\x20See\x20th\
    e\n\x20GNU\x20General\x20Public\x20License\x20for\x20more\x20details.\n\
    \x20\n\x20You\x20should\x20have\x20received\x20a\x20copy\x20of\x20the\
    \x20GNU\x20General\x20Public\x20License\n\x20along\x20with\x20Catalyst.N\
    etwork.Protocol.Protobuffs\x20If\x20not,\x20see\x20<https://www.gnu.org/\
    licenses/>.\n\n\x08\n\x01\x08\x12\x03\x15\0\"\n\x0b\n\x04\x08\xe7\x07\0\
    \x12\x03\x15\0\"\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x15\x07\x1a\n\r\n\
    \x06\x08\xe7\x07\0\x02\0\x12\x03\x15\x07\x1a\n\x0e\n\x07\x08\xe7\x07\0\
    \x02\0\x01\x12\x03\x15\x07\x1a\n\x0c\n\x05\x08\xe7\x07\0\x03\x12\x03\x15\
    \x1d!\n\x08\n\x01\x02\x12\x03\x17\x08\x1e\n\t\n\x02\x03\0\x12\x03\x19\
    \x07\x13\n\t\n\x02\x03\x01\x12\x03\x1a\x07\x15\n\t\n\x02\x04\0\x12\x03\
    \x1c\0\x20\n\n\n\x03\x04\0\x01\x12\x03\x1c\x08\x1c\n\n\n\x02\x04\x01\x12\
    \x04\x1e\0\x20\x01\n\n\n\x03\x04\x01\x01\x12\x03\x1e\x08\x1d\n0\n\x04\
    \x04\x01\x02\0\x12\x03\x1f\x04#\"#\x20Random\x20subset\x20of\x20a\x20nod\
    es\x20peer\x20db.\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x1f\x04\x0c\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1f\r\x18\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x1f\x19\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1f!\"\n\
    \n\n\x02\x04\x02\x12\x04\"\0#\x01\n\n\n\x03\x04\x02\x01\x12\x03\"\x08\
    \x13\n\n\n\x02\x04\x03\x12\x04%\0&\x01\n\n\n\x03\x04\x03\x01\x12\x03%\
    \x08\x14\n\t\n\x02\x04\x04\x12\x03(\0\"\n\n\n\x03\x04\x04\x01\x12\x03(\
    \x08\x1e\n\n\n\x02\x04\x05\x12\x04*\0-\x01\n\n\n\x03\x04\x05\x01\x12\x03\
    *\x08\x1f\n\x0b\n\x04\x04\x05\x02\0\x12\x03+\x08\x18\n\r\n\x05\x04\x05\
    \x02\0\x04\x12\x04+\x08*!\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03+\x08\x0c\
    \n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03+\r\x13\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03+\x16\x17\n\x1a\n\x04\x04\x05\x02\x01\x12\x03,\x08)\"\r\x20K\
    \x20given\x20del\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04,\x08+\x18\n\x0c\
    \n\x05\x04\x05\x02\x01\x06\x12\x03,\x08\x19\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x03,\x1a$\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03,'(\n\n\n\x02\
    \x04\x06\x12\x04/\02\x01\n\n\n\x03\x04\x06\x01\x12\x03/\x08\x1b\n9\n\x04\
    \x04\x06\x02\0\x12\x030\x04\x15\",\x20The\x20number\x20of\x20deltas\x20C\
    IDs\x20a\x20node\x20requests.\n\n\r\n\x05\x04\x06\x02\0\x04\x12\x040\x04\
    /\x1d\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x030\x04\n\n\x0c\n\x05\x04\x06\
    \x02\0\x01\x12\x030\x0b\x10\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x030\x13\
    \x14\n>\n\x04\x04\x06\x02\x01\x12\x031\x04\x16\"1\x20The\x20given\x20hei\
    ght\x20the\x20node\x20wants\x20the\x20range\x20from.\n\n\r\n\x05\x04\x06\
    \x02\x01\x04\x12\x041\x040\x15\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x031\
    \x04\n\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x031\x0b\x11\n\x0c\n\x05\x04\
    \x06\x02\x01\x03\x12\x031\x14\x15\n\n\n\x02\x04\x07\x12\x044\06\x01\n\n\
    \n\x03\x04\x07\x01\x12\x034\x08\x1c\n\x1a\n\x04\x04\x07\x02\0\x12\x035\
    \x04.\"\r\x20K\x20given\x20del\n\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x035\
    \x04\x0c\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x035\r\x1e\n\x0c\n\x05\x04\
    \x07\x02\0\x01\x12\x035\x1f)\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x035,-b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
