// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Transaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Transaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Cryptography.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Transaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Transaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Transaction_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Transaction {
class CoinbaseEntry;
class CoinbaseEntryDefaultTypeInternal;
extern CoinbaseEntryDefaultTypeInternal _CoinbaseEntry_default_instance_;
class ConfidentialEntry;
class ConfidentialEntryDefaultTypeInternal;
extern ConfidentialEntryDefaultTypeInternal _ConfidentialEntry_default_instance_;
class PublicEntry;
class PublicEntryDefaultTypeInternal;
extern PublicEntryDefaultTypeInternal _PublicEntry_default_instance_;
class RangeProof;
class RangeProofDefaultTypeInternal;
extern RangeProofDefaultTypeInternal _RangeProof_default_instance_;
}  // namespace Transaction
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> ::Catalyst::Protocol::Transaction::CoinbaseEntry* Arena::CreateMaybeMessage<::Catalyst::Protocol::Transaction::CoinbaseEntry>(Arena*);
template<> ::Catalyst::Protocol::Transaction::ConfidentialEntry* Arena::CreateMaybeMessage<::Catalyst::Protocol::Transaction::ConfidentialEntry>(Arena*);
template<> ::Catalyst::Protocol::Transaction::PublicEntry* Arena::CreateMaybeMessage<::Catalyst::Protocol::Transaction::PublicEntry>(Arena*);
template<> ::Catalyst::Protocol::Transaction::RangeProof* Arena::CreateMaybeMessage<::Catalyst::Protocol::Transaction::RangeProof>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Catalyst {
namespace Protocol {
namespace Transaction {

enum TransactionType : int {
  TRANSACTION_TYPE_UNKNOWN = 0,
  PUBLIC = 1,
  CONFIDENTIAL = 2,
  TransactionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransactionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransactionType_IsValid(int value);
constexpr TransactionType TransactionType_MIN = TRANSACTION_TYPE_UNKNOWN;
constexpr TransactionType TransactionType_MAX = CONFIDENTIAL;
constexpr int TransactionType_ARRAYSIZE = TransactionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionType_descriptor();
template<typename T>
inline const std::string& TransactionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionType_descriptor(), enum_t_value);
}
inline bool TransactionType_Parse(
    const std::string& name, TransactionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionType>(
    TransactionType_descriptor(), name, value);
}
// ===================================================================

class PublicEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Transaction.PublicEntry) */ {
 public:
  PublicEntry();
  virtual ~PublicEntry();

  PublicEntry(const PublicEntry& from);
  PublicEntry(PublicEntry&& from) noexcept
    : PublicEntry() {
    *this = ::std::move(from);
  }

  inline PublicEntry& operator=(const PublicEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicEntry& operator=(PublicEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicEntry* internal_default_instance() {
    return reinterpret_cast<const PublicEntry*>(
               &_PublicEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicEntry& a, PublicEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicEntry* New() const final {
    return CreateMaybeMessage<PublicEntry>(nullptr);
  }

  PublicEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicEntry& from);
  void MergeFrom(const PublicEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Transaction.PublicEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Transaction_2eproto);
    return ::descriptor_table_Transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverAddressFieldNumber = 1,
    kSenderAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
    kDataFieldNumber = 4,
    kGasPriceFieldNumber = 6,
    kTransactionFeesFieldNumber = 8,
    kTimestampFieldNumber = 5,
    kSignatureFieldNumber = 10,
    kGasLimitFieldNumber = 7,
    kNonceFieldNumber = 9,
  };
  // bytes receiver_address = 1;
  void clear_receiver_address();
  const std::string& receiver_address() const;
  void set_receiver_address(const std::string& value);
  void set_receiver_address(std::string&& value);
  void set_receiver_address(const char* value);
  void set_receiver_address(const void* value, size_t size);
  std::string* mutable_receiver_address();
  std::string* release_receiver_address();
  void set_allocated_receiver_address(std::string* receiver_address);
  private:
  const std::string& _internal_receiver_address() const;
  void _internal_set_receiver_address(const std::string& value);
  std::string* _internal_mutable_receiver_address();
  public:

  // bytes sender_address = 2;
  void clear_sender_address();
  const std::string& sender_address() const;
  void set_sender_address(const std::string& value);
  void set_sender_address(std::string&& value);
  void set_sender_address(const char* value);
  void set_sender_address(const void* value, size_t size);
  std::string* mutable_sender_address();
  std::string* release_sender_address();
  void set_allocated_sender_address(std::string* sender_address);
  private:
  const std::string& _internal_sender_address() const;
  void _internal_set_sender_address(const std::string& value);
  std::string* _internal_mutable_sender_address();
  public:

  // bytes amount = 3;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes gas_price = 6;
  void clear_gas_price();
  const std::string& gas_price() const;
  void set_gas_price(const std::string& value);
  void set_gas_price(std::string&& value);
  void set_gas_price(const char* value);
  void set_gas_price(const void* value, size_t size);
  std::string* mutable_gas_price();
  std::string* release_gas_price();
  void set_allocated_gas_price(std::string* gas_price);
  private:
  const std::string& _internal_gas_price() const;
  void _internal_set_gas_price(const std::string& value);
  std::string* _internal_mutable_gas_price();
  public:

  // bytes transaction_fees = 8;
  void clear_transaction_fees();
  const std::string& transaction_fees() const;
  void set_transaction_fees(const std::string& value);
  void set_transaction_fees(std::string&& value);
  void set_transaction_fees(const char* value);
  void set_transaction_fees(const void* value, size_t size);
  std::string* mutable_transaction_fees();
  std::string* release_transaction_fees();
  void set_allocated_transaction_fees(std::string* transaction_fees);
  private:
  const std::string& _internal_transaction_fees() const;
  void _internal_set_transaction_fees(const std::string& value);
  std::string* _internal_mutable_transaction_fees();
  public:

  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:

  // .Catalyst.Protocol.Cryptography.Signature signature = 10;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Catalyst::Protocol::Cryptography::Signature& signature() const;
  ::Catalyst::Protocol::Cryptography::Signature* release_signature();
  ::Catalyst::Protocol::Cryptography::Signature* mutable_signature();
  void set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature);
  private:
  const ::Catalyst::Protocol::Cryptography::Signature& _internal_signature() const;
  ::Catalyst::Protocol::Cryptography::Signature* _internal_mutable_signature();
  public:

  // uint64 gas_limit = 7;
  void clear_gas_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_limit() const;
  void set_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gas_limit() const;
  void _internal_set_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 nonce = 9;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Transaction.PublicEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_fees_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::Catalyst::Protocol::Cryptography::Signature* signature_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Transaction_2eproto;
};
// -------------------------------------------------------------------

class ConfidentialEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Transaction.ConfidentialEntry) */ {
 public:
  ConfidentialEntry();
  virtual ~ConfidentialEntry();

  ConfidentialEntry(const ConfidentialEntry& from);
  ConfidentialEntry(ConfidentialEntry&& from) noexcept
    : ConfidentialEntry() {
    *this = ::std::move(from);
  }

  inline ConfidentialEntry& operator=(const ConfidentialEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfidentialEntry& operator=(ConfidentialEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfidentialEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfidentialEntry* internal_default_instance() {
    return reinterpret_cast<const ConfidentialEntry*>(
               &_ConfidentialEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfidentialEntry& a, ConfidentialEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfidentialEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfidentialEntry* New() const final {
    return CreateMaybeMessage<ConfidentialEntry>(nullptr);
  }

  ConfidentialEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfidentialEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfidentialEntry& from);
  void MergeFrom(const ConfidentialEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfidentialEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Transaction.ConfidentialEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Transaction_2eproto);
    return ::descriptor_table_Transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverPublicKeyFieldNumber = 1,
    kSenderPublicKeyFieldNumber = 2,
    kPedersenCommitmentFieldNumber = 3,
    kTransactionFeesFieldNumber = 5,
    kRangeProofFieldNumber = 4,
    kNonceFieldNumber = 6,
  };
  // bytes receiver_public_key = 1;
  void clear_receiver_public_key();
  const std::string& receiver_public_key() const;
  void set_receiver_public_key(const std::string& value);
  void set_receiver_public_key(std::string&& value);
  void set_receiver_public_key(const char* value);
  void set_receiver_public_key(const void* value, size_t size);
  std::string* mutable_receiver_public_key();
  std::string* release_receiver_public_key();
  void set_allocated_receiver_public_key(std::string* receiver_public_key);
  private:
  const std::string& _internal_receiver_public_key() const;
  void _internal_set_receiver_public_key(const std::string& value);
  std::string* _internal_mutable_receiver_public_key();
  public:

  // bytes sender_public_key = 2;
  void clear_sender_public_key();
  const std::string& sender_public_key() const;
  void set_sender_public_key(const std::string& value);
  void set_sender_public_key(std::string&& value);
  void set_sender_public_key(const char* value);
  void set_sender_public_key(const void* value, size_t size);
  std::string* mutable_sender_public_key();
  std::string* release_sender_public_key();
  void set_allocated_sender_public_key(std::string* sender_public_key);
  private:
  const std::string& _internal_sender_public_key() const;
  void _internal_set_sender_public_key(const std::string& value);
  std::string* _internal_mutable_sender_public_key();
  public:

  // bytes pedersen_commitment = 3;
  void clear_pedersen_commitment();
  const std::string& pedersen_commitment() const;
  void set_pedersen_commitment(const std::string& value);
  void set_pedersen_commitment(std::string&& value);
  void set_pedersen_commitment(const char* value);
  void set_pedersen_commitment(const void* value, size_t size);
  std::string* mutable_pedersen_commitment();
  std::string* release_pedersen_commitment();
  void set_allocated_pedersen_commitment(std::string* pedersen_commitment);
  private:
  const std::string& _internal_pedersen_commitment() const;
  void _internal_set_pedersen_commitment(const std::string& value);
  std::string* _internal_mutable_pedersen_commitment();
  public:

  // bytes transaction_fees = 5;
  void clear_transaction_fees();
  const std::string& transaction_fees() const;
  void set_transaction_fees(const std::string& value);
  void set_transaction_fees(std::string&& value);
  void set_transaction_fees(const char* value);
  void set_transaction_fees(const void* value, size_t size);
  std::string* mutable_transaction_fees();
  std::string* release_transaction_fees();
  void set_allocated_transaction_fees(std::string* transaction_fees);
  private:
  const std::string& _internal_transaction_fees() const;
  void _internal_set_transaction_fees(const std::string& value);
  std::string* _internal_mutable_transaction_fees();
  public:

  // .Catalyst.Protocol.Transaction.RangeProof range_proof = 4;
  bool has_range_proof() const;
  private:
  bool _internal_has_range_proof() const;
  public:
  void clear_range_proof();
  const ::Catalyst::Protocol::Transaction::RangeProof& range_proof() const;
  ::Catalyst::Protocol::Transaction::RangeProof* release_range_proof();
  ::Catalyst::Protocol::Transaction::RangeProof* mutable_range_proof();
  void set_allocated_range_proof(::Catalyst::Protocol::Transaction::RangeProof* range_proof);
  private:
  const ::Catalyst::Protocol::Transaction::RangeProof& _internal_range_proof() const;
  ::Catalyst::Protocol::Transaction::RangeProof* _internal_mutable_range_proof();
  public:

  // uint64 nonce = 6;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Transaction.ConfidentialEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pedersen_commitment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_fees_;
  ::Catalyst::Protocol::Transaction::RangeProof* range_proof_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Transaction_2eproto;
};
// -------------------------------------------------------------------

class CoinbaseEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Transaction.CoinbaseEntry) */ {
 public:
  CoinbaseEntry();
  virtual ~CoinbaseEntry();

  CoinbaseEntry(const CoinbaseEntry& from);
  CoinbaseEntry(CoinbaseEntry&& from) noexcept
    : CoinbaseEntry() {
    *this = ::std::move(from);
  }

  inline CoinbaseEntry& operator=(const CoinbaseEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoinbaseEntry& operator=(CoinbaseEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoinbaseEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoinbaseEntry* internal_default_instance() {
    return reinterpret_cast<const CoinbaseEntry*>(
               &_CoinbaseEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CoinbaseEntry& a, CoinbaseEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CoinbaseEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoinbaseEntry* New() const final {
    return CreateMaybeMessage<CoinbaseEntry>(nullptr);
  }

  CoinbaseEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoinbaseEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoinbaseEntry& from);
  void MergeFrom(const CoinbaseEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoinbaseEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Transaction.CoinbaseEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Transaction_2eproto);
    return ::descriptor_table_Transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverPublicKeyFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // bytes receiver_public_key = 1;
  void clear_receiver_public_key();
  const std::string& receiver_public_key() const;
  void set_receiver_public_key(const std::string& value);
  void set_receiver_public_key(std::string&& value);
  void set_receiver_public_key(const char* value);
  void set_receiver_public_key(const void* value, size_t size);
  std::string* mutable_receiver_public_key();
  std::string* release_receiver_public_key();
  void set_allocated_receiver_public_key(std::string* receiver_public_key);
  private:
  const std::string& _internal_receiver_public_key() const;
  void _internal_set_receiver_public_key(const std::string& value);
  std::string* _internal_mutable_receiver_public_key();
  public:

  // bytes amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Transaction.CoinbaseEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Transaction_2eproto;
};
// -------------------------------------------------------------------

class RangeProof :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Transaction.RangeProof) */ {
 public:
  RangeProof();
  virtual ~RangeProof();

  RangeProof(const RangeProof& from);
  RangeProof(RangeProof&& from) noexcept
    : RangeProof() {
    *this = ::std::move(from);
  }

  inline RangeProof& operator=(const RangeProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeProof& operator=(RangeProof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeProof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeProof* internal_default_instance() {
    return reinterpret_cast<const RangeProof*>(
               &_RangeProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RangeProof& a, RangeProof& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeProof* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeProof* New() const final {
    return CreateMaybeMessage<RangeProof>(nullptr);
  }

  RangeProof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeProof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeProof& from);
  void MergeFrom(const RangeProof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeProof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Transaction.RangeProof";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Transaction_2eproto);
    return ::descriptor_table_Transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueCommitmentFieldNumber = 1,
    kAggregatedVectorPolynomialLFieldNumber = 8,
    kAggregatedVectorPolynomialRFieldNumber = 9,
    kBitCommitmentFieldNumber = 2,
    kPerBitBlindingFactorCommitmentFieldNumber = 3,
    kPolyCommitmentT1FieldNumber = 4,
    kPolyCommitmentT2FieldNumber = 5,
    kProofOfShareTauFieldNumber = 6,
    kProofOfShareMuFieldNumber = 7,
    kAPrime0FieldNumber = 10,
    kBPrime0FieldNumber = 11,
    kTFieldNumber = 12,
  };
  // repeated bytes value_commitment = 1;
  int value_commitment_size() const;
  private:
  int _internal_value_commitment_size() const;
  public:
  void clear_value_commitment();
  const std::string& value_commitment(int index) const;
  std::string* mutable_value_commitment(int index);
  void set_value_commitment(int index, const std::string& value);
  void set_value_commitment(int index, std::string&& value);
  void set_value_commitment(int index, const char* value);
  void set_value_commitment(int index, const void* value, size_t size);
  std::string* add_value_commitment();
  void add_value_commitment(const std::string& value);
  void add_value_commitment(std::string&& value);
  void add_value_commitment(const char* value);
  void add_value_commitment(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value_commitment() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value_commitment();
  private:
  const std::string& _internal_value_commitment(int index) const;
  std::string* _internal_add_value_commitment();
  public:

  // repeated bytes aggregated_vector_polynomial_l = 8;
  int aggregated_vector_polynomial_l_size() const;
  private:
  int _internal_aggregated_vector_polynomial_l_size() const;
  public:
  void clear_aggregated_vector_polynomial_l();
  const std::string& aggregated_vector_polynomial_l(int index) const;
  std::string* mutable_aggregated_vector_polynomial_l(int index);
  void set_aggregated_vector_polynomial_l(int index, const std::string& value);
  void set_aggregated_vector_polynomial_l(int index, std::string&& value);
  void set_aggregated_vector_polynomial_l(int index, const char* value);
  void set_aggregated_vector_polynomial_l(int index, const void* value, size_t size);
  std::string* add_aggregated_vector_polynomial_l();
  void add_aggregated_vector_polynomial_l(const std::string& value);
  void add_aggregated_vector_polynomial_l(std::string&& value);
  void add_aggregated_vector_polynomial_l(const char* value);
  void add_aggregated_vector_polynomial_l(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aggregated_vector_polynomial_l() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aggregated_vector_polynomial_l();
  private:
  const std::string& _internal_aggregated_vector_polynomial_l(int index) const;
  std::string* _internal_add_aggregated_vector_polynomial_l();
  public:

  // repeated bytes aggregated_vector_polynomial_r = 9;
  int aggregated_vector_polynomial_r_size() const;
  private:
  int _internal_aggregated_vector_polynomial_r_size() const;
  public:
  void clear_aggregated_vector_polynomial_r();
  const std::string& aggregated_vector_polynomial_r(int index) const;
  std::string* mutable_aggregated_vector_polynomial_r(int index);
  void set_aggregated_vector_polynomial_r(int index, const std::string& value);
  void set_aggregated_vector_polynomial_r(int index, std::string&& value);
  void set_aggregated_vector_polynomial_r(int index, const char* value);
  void set_aggregated_vector_polynomial_r(int index, const void* value, size_t size);
  std::string* add_aggregated_vector_polynomial_r();
  void add_aggregated_vector_polynomial_r(const std::string& value);
  void add_aggregated_vector_polynomial_r(std::string&& value);
  void add_aggregated_vector_polynomial_r(const char* value);
  void add_aggregated_vector_polynomial_r(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aggregated_vector_polynomial_r() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aggregated_vector_polynomial_r();
  private:
  const std::string& _internal_aggregated_vector_polynomial_r(int index) const;
  std::string* _internal_add_aggregated_vector_polynomial_r();
  public:

  // bytes bit_commitment = 2;
  void clear_bit_commitment();
  const std::string& bit_commitment() const;
  void set_bit_commitment(const std::string& value);
  void set_bit_commitment(std::string&& value);
  void set_bit_commitment(const char* value);
  void set_bit_commitment(const void* value, size_t size);
  std::string* mutable_bit_commitment();
  std::string* release_bit_commitment();
  void set_allocated_bit_commitment(std::string* bit_commitment);
  private:
  const std::string& _internal_bit_commitment() const;
  void _internal_set_bit_commitment(const std::string& value);
  std::string* _internal_mutable_bit_commitment();
  public:

  // bytes per_bit_blinding_factor_commitment = 3;
  void clear_per_bit_blinding_factor_commitment();
  const std::string& per_bit_blinding_factor_commitment() const;
  void set_per_bit_blinding_factor_commitment(const std::string& value);
  void set_per_bit_blinding_factor_commitment(std::string&& value);
  void set_per_bit_blinding_factor_commitment(const char* value);
  void set_per_bit_blinding_factor_commitment(const void* value, size_t size);
  std::string* mutable_per_bit_blinding_factor_commitment();
  std::string* release_per_bit_blinding_factor_commitment();
  void set_allocated_per_bit_blinding_factor_commitment(std::string* per_bit_blinding_factor_commitment);
  private:
  const std::string& _internal_per_bit_blinding_factor_commitment() const;
  void _internal_set_per_bit_blinding_factor_commitment(const std::string& value);
  std::string* _internal_mutable_per_bit_blinding_factor_commitment();
  public:

  // bytes poly_commitment_t1 = 4;
  void clear_poly_commitment_t1();
  const std::string& poly_commitment_t1() const;
  void set_poly_commitment_t1(const std::string& value);
  void set_poly_commitment_t1(std::string&& value);
  void set_poly_commitment_t1(const char* value);
  void set_poly_commitment_t1(const void* value, size_t size);
  std::string* mutable_poly_commitment_t1();
  std::string* release_poly_commitment_t1();
  void set_allocated_poly_commitment_t1(std::string* poly_commitment_t1);
  private:
  const std::string& _internal_poly_commitment_t1() const;
  void _internal_set_poly_commitment_t1(const std::string& value);
  std::string* _internal_mutable_poly_commitment_t1();
  public:

  // bytes poly_commitment_t2 = 5;
  void clear_poly_commitment_t2();
  const std::string& poly_commitment_t2() const;
  void set_poly_commitment_t2(const std::string& value);
  void set_poly_commitment_t2(std::string&& value);
  void set_poly_commitment_t2(const char* value);
  void set_poly_commitment_t2(const void* value, size_t size);
  std::string* mutable_poly_commitment_t2();
  std::string* release_poly_commitment_t2();
  void set_allocated_poly_commitment_t2(std::string* poly_commitment_t2);
  private:
  const std::string& _internal_poly_commitment_t2() const;
  void _internal_set_poly_commitment_t2(const std::string& value);
  std::string* _internal_mutable_poly_commitment_t2();
  public:

  // bytes proof_of_share_tau = 6;
  void clear_proof_of_share_tau();
  const std::string& proof_of_share_tau() const;
  void set_proof_of_share_tau(const std::string& value);
  void set_proof_of_share_tau(std::string&& value);
  void set_proof_of_share_tau(const char* value);
  void set_proof_of_share_tau(const void* value, size_t size);
  std::string* mutable_proof_of_share_tau();
  std::string* release_proof_of_share_tau();
  void set_allocated_proof_of_share_tau(std::string* proof_of_share_tau);
  private:
  const std::string& _internal_proof_of_share_tau() const;
  void _internal_set_proof_of_share_tau(const std::string& value);
  std::string* _internal_mutable_proof_of_share_tau();
  public:

  // bytes proof_of_share_mu = 7;
  void clear_proof_of_share_mu();
  const std::string& proof_of_share_mu() const;
  void set_proof_of_share_mu(const std::string& value);
  void set_proof_of_share_mu(std::string&& value);
  void set_proof_of_share_mu(const char* value);
  void set_proof_of_share_mu(const void* value, size_t size);
  std::string* mutable_proof_of_share_mu();
  std::string* release_proof_of_share_mu();
  void set_allocated_proof_of_share_mu(std::string* proof_of_share_mu);
  private:
  const std::string& _internal_proof_of_share_mu() const;
  void _internal_set_proof_of_share_mu(const std::string& value);
  std::string* _internal_mutable_proof_of_share_mu();
  public:

  // bytes a_prime_0 = 10;
  void clear_a_prime_0();
  const std::string& a_prime_0() const;
  void set_a_prime_0(const std::string& value);
  void set_a_prime_0(std::string&& value);
  void set_a_prime_0(const char* value);
  void set_a_prime_0(const void* value, size_t size);
  std::string* mutable_a_prime_0();
  std::string* release_a_prime_0();
  void set_allocated_a_prime_0(std::string* a_prime_0);
  private:
  const std::string& _internal_a_prime_0() const;
  void _internal_set_a_prime_0(const std::string& value);
  std::string* _internal_mutable_a_prime_0();
  public:

  // bytes b_prime_0 = 11;
  void clear_b_prime_0();
  const std::string& b_prime_0() const;
  void set_b_prime_0(const std::string& value);
  void set_b_prime_0(std::string&& value);
  void set_b_prime_0(const char* value);
  void set_b_prime_0(const void* value, size_t size);
  std::string* mutable_b_prime_0();
  std::string* release_b_prime_0();
  void set_allocated_b_prime_0(std::string* b_prime_0);
  private:
  const std::string& _internal_b_prime_0() const;
  void _internal_set_b_prime_0(const std::string& value);
  std::string* _internal_mutable_b_prime_0();
  public:

  // bytes t = 12;
  void clear_t();
  const std::string& t() const;
  void set_t(const std::string& value);
  void set_t(std::string&& value);
  void set_t(const char* value);
  void set_t(const void* value, size_t size);
  std::string* mutable_t();
  std::string* release_t();
  void set_allocated_t(std::string* t);
  private:
  const std::string& _internal_t() const;
  void _internal_set_t(const std::string& value);
  std::string* _internal_mutable_t();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Transaction.RangeProof)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_commitment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aggregated_vector_polynomial_l_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aggregated_vector_polynomial_r_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bit_commitment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr per_bit_blinding_factor_commitment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poly_commitment_t1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poly_commitment_t2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_of_share_tau_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_of_share_mu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_prime_0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_prime_0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Transaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicEntry

// bytes receiver_address = 1;
inline void PublicEntry::clear_receiver_address() {
  receiver_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PublicEntry::receiver_address() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.receiver_address)
  return _internal_receiver_address();
}
inline void PublicEntry::set_receiver_address(const std::string& value) {
  _internal_set_receiver_address(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.receiver_address)
}
inline std::string* PublicEntry::mutable_receiver_address() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.receiver_address)
  return _internal_mutable_receiver_address();
}
inline const std::string& PublicEntry::_internal_receiver_address() const {
  return receiver_address_.GetNoArena();
}
inline void PublicEntry::_internal_set_receiver_address(const std::string& value) {
  
  receiver_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PublicEntry::set_receiver_address(std::string&& value) {
  
  receiver_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.PublicEntry.receiver_address)
}
inline void PublicEntry::set_receiver_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.PublicEntry.receiver_address)
}
inline void PublicEntry::set_receiver_address(const void* value, size_t size) {
  
  receiver_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.PublicEntry.receiver_address)
}
inline std::string* PublicEntry::_internal_mutable_receiver_address() {
  
  return receiver_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PublicEntry::release_receiver_address() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.receiver_address)
  
  return receiver_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PublicEntry::set_allocated_receiver_address(std::string* receiver_address) {
  if (receiver_address != nullptr) {
    
  } else {
    
  }
  receiver_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_address);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.receiver_address)
}

// bytes sender_address = 2;
inline void PublicEntry::clear_sender_address() {
  sender_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PublicEntry::sender_address() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.sender_address)
  return _internal_sender_address();
}
inline void PublicEntry::set_sender_address(const std::string& value) {
  _internal_set_sender_address(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.sender_address)
}
inline std::string* PublicEntry::mutable_sender_address() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.sender_address)
  return _internal_mutable_sender_address();
}
inline const std::string& PublicEntry::_internal_sender_address() const {
  return sender_address_.GetNoArena();
}
inline void PublicEntry::_internal_set_sender_address(const std::string& value) {
  
  sender_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PublicEntry::set_sender_address(std::string&& value) {
  
  sender_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.PublicEntry.sender_address)
}
inline void PublicEntry::set_sender_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.PublicEntry.sender_address)
}
inline void PublicEntry::set_sender_address(const void* value, size_t size) {
  
  sender_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.PublicEntry.sender_address)
}
inline std::string* PublicEntry::_internal_mutable_sender_address() {
  
  return sender_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PublicEntry::release_sender_address() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.sender_address)
  
  return sender_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PublicEntry::set_allocated_sender_address(std::string* sender_address) {
  if (sender_address != nullptr) {
    
  } else {
    
  }
  sender_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_address);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.sender_address)
}

// bytes amount = 3;
inline void PublicEntry::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PublicEntry::amount() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.amount)
  return _internal_amount();
}
inline void PublicEntry::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.amount)
}
inline std::string* PublicEntry::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.amount)
  return _internal_mutable_amount();
}
inline const std::string& PublicEntry::_internal_amount() const {
  return amount_.GetNoArena();
}
inline void PublicEntry::_internal_set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PublicEntry::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.PublicEntry.amount)
}
inline void PublicEntry::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.PublicEntry.amount)
}
inline void PublicEntry::set_amount(const void* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.PublicEntry.amount)
}
inline std::string* PublicEntry::_internal_mutable_amount() {
  
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PublicEntry::release_amount() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PublicEntry::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.amount)
}

// bytes data = 4;
inline void PublicEntry::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PublicEntry::data() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.data)
  return _internal_data();
}
inline void PublicEntry::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.data)
}
inline std::string* PublicEntry::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.data)
  return _internal_mutable_data();
}
inline const std::string& PublicEntry::_internal_data() const {
  return data_.GetNoArena();
}
inline void PublicEntry::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PublicEntry::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.PublicEntry.data)
}
inline void PublicEntry::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.PublicEntry.data)
}
inline void PublicEntry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.PublicEntry.data)
}
inline std::string* PublicEntry::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PublicEntry::release_data() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PublicEntry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.data)
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool PublicEntry::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool PublicEntry::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PublicEntry::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PublicEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.timestamp)
  return _internal_timestamp();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PublicEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PublicEntry::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PublicEntry::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.timestamp)
  return _internal_mutable_timestamp();
}
inline void PublicEntry::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.timestamp)
}

// bytes gas_price = 6;
inline void PublicEntry::clear_gas_price() {
  gas_price_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PublicEntry::gas_price() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
  return _internal_gas_price();
}
inline void PublicEntry::set_gas_price(const std::string& value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
}
inline std::string* PublicEntry::mutable_gas_price() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
  return _internal_mutable_gas_price();
}
inline const std::string& PublicEntry::_internal_gas_price() const {
  return gas_price_.GetNoArena();
}
inline void PublicEntry::_internal_set_gas_price(const std::string& value) {
  
  gas_price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PublicEntry::set_gas_price(std::string&& value) {
  
  gas_price_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
}
inline void PublicEntry::set_gas_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gas_price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
}
inline void PublicEntry::set_gas_price(const void* value, size_t size) {
  
  gas_price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
}
inline std::string* PublicEntry::_internal_mutable_gas_price() {
  
  return gas_price_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PublicEntry::release_gas_price() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
  
  return gas_price_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PublicEntry::set_allocated_gas_price(std::string* gas_price) {
  if (gas_price != nullptr) {
    
  } else {
    
  }
  gas_price_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas_price);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.gas_price)
}

// uint64 gas_limit = 7;
inline void PublicEntry::clear_gas_limit() {
  gas_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicEntry::_internal_gas_limit() const {
  return gas_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicEntry::gas_limit() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.gas_limit)
  return _internal_gas_limit();
}
inline void PublicEntry::_internal_set_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gas_limit_ = value;
}
inline void PublicEntry::set_gas_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.gas_limit)
}

// bytes transaction_fees = 8;
inline void PublicEntry::clear_transaction_fees() {
  transaction_fees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PublicEntry::transaction_fees() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.transaction_fees)
  return _internal_transaction_fees();
}
inline void PublicEntry::set_transaction_fees(const std::string& value) {
  _internal_set_transaction_fees(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.transaction_fees)
}
inline std::string* PublicEntry::mutable_transaction_fees() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.transaction_fees)
  return _internal_mutable_transaction_fees();
}
inline const std::string& PublicEntry::_internal_transaction_fees() const {
  return transaction_fees_.GetNoArena();
}
inline void PublicEntry::_internal_set_transaction_fees(const std::string& value) {
  
  transaction_fees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PublicEntry::set_transaction_fees(std::string&& value) {
  
  transaction_fees_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.PublicEntry.transaction_fees)
}
inline void PublicEntry::set_transaction_fees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_fees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.PublicEntry.transaction_fees)
}
inline void PublicEntry::set_transaction_fees(const void* value, size_t size) {
  
  transaction_fees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.PublicEntry.transaction_fees)
}
inline std::string* PublicEntry::_internal_mutable_transaction_fees() {
  
  return transaction_fees_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PublicEntry::release_transaction_fees() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.transaction_fees)
  
  return transaction_fees_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PublicEntry::set_allocated_transaction_fees(std::string* transaction_fees) {
  if (transaction_fees != nullptr) {
    
  } else {
    
  }
  transaction_fees_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_fees);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.transaction_fees)
}

// uint64 nonce = 9;
inline void PublicEntry::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicEntry::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicEntry::nonce() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.nonce)
  return _internal_nonce();
}
inline void PublicEntry::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void PublicEntry::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.PublicEntry.nonce)
}

// .Catalyst.Protocol.Cryptography.Signature signature = 10;
inline bool PublicEntry::_internal_has_signature() const {
  return this != internal_default_instance() && signature_ != nullptr;
}
inline bool PublicEntry::has_signature() const {
  return _internal_has_signature();
}
inline const ::Catalyst::Protocol::Cryptography::Signature& PublicEntry::_internal_signature() const {
  const ::Catalyst::Protocol::Cryptography::Signature* p = signature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Cryptography::Signature*>(
      &::Catalyst::Protocol::Cryptography::_Signature_default_instance_);
}
inline const ::Catalyst::Protocol::Cryptography::Signature& PublicEntry::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.PublicEntry.signature)
  return _internal_signature();
}
inline ::Catalyst::Protocol::Cryptography::Signature* PublicEntry::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.PublicEntry.signature)
  
  ::Catalyst::Protocol::Cryptography::Signature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Cryptography::Signature* PublicEntry::_internal_mutable_signature() {
  
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Cryptography::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  return signature_;
}
inline ::Catalyst::Protocol::Cryptography::Signature* PublicEntry::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.PublicEntry.signature)
  return _internal_mutable_signature();
}
inline void PublicEntry::set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.PublicEntry.signature)
}

// -------------------------------------------------------------------

// ConfidentialEntry

// bytes receiver_public_key = 1;
inline void ConfidentialEntry::clear_receiver_public_key() {
  receiver_public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfidentialEntry::receiver_public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.ConfidentialEntry.receiver_public_key)
  return _internal_receiver_public_key();
}
inline void ConfidentialEntry::set_receiver_public_key(const std::string& value) {
  _internal_set_receiver_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.ConfidentialEntry.receiver_public_key)
}
inline std::string* ConfidentialEntry::mutable_receiver_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.ConfidentialEntry.receiver_public_key)
  return _internal_mutable_receiver_public_key();
}
inline const std::string& ConfidentialEntry::_internal_receiver_public_key() const {
  return receiver_public_key_.GetNoArena();
}
inline void ConfidentialEntry::_internal_set_receiver_public_key(const std::string& value) {
  
  receiver_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfidentialEntry::set_receiver_public_key(std::string&& value) {
  
  receiver_public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.ConfidentialEntry.receiver_public_key)
}
inline void ConfidentialEntry::set_receiver_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.ConfidentialEntry.receiver_public_key)
}
inline void ConfidentialEntry::set_receiver_public_key(const void* value, size_t size) {
  
  receiver_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.ConfidentialEntry.receiver_public_key)
}
inline std::string* ConfidentialEntry::_internal_mutable_receiver_public_key() {
  
  return receiver_public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfidentialEntry::release_receiver_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.ConfidentialEntry.receiver_public_key)
  
  return receiver_public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfidentialEntry::set_allocated_receiver_public_key(std::string* receiver_public_key) {
  if (receiver_public_key != nullptr) {
    
  } else {
    
  }
  receiver_public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.ConfidentialEntry.receiver_public_key)
}

// bytes sender_public_key = 2;
inline void ConfidentialEntry::clear_sender_public_key() {
  sender_public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfidentialEntry::sender_public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.ConfidentialEntry.sender_public_key)
  return _internal_sender_public_key();
}
inline void ConfidentialEntry::set_sender_public_key(const std::string& value) {
  _internal_set_sender_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.ConfidentialEntry.sender_public_key)
}
inline std::string* ConfidentialEntry::mutable_sender_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.ConfidentialEntry.sender_public_key)
  return _internal_mutable_sender_public_key();
}
inline const std::string& ConfidentialEntry::_internal_sender_public_key() const {
  return sender_public_key_.GetNoArena();
}
inline void ConfidentialEntry::_internal_set_sender_public_key(const std::string& value) {
  
  sender_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfidentialEntry::set_sender_public_key(std::string&& value) {
  
  sender_public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.ConfidentialEntry.sender_public_key)
}
inline void ConfidentialEntry::set_sender_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.ConfidentialEntry.sender_public_key)
}
inline void ConfidentialEntry::set_sender_public_key(const void* value, size_t size) {
  
  sender_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.ConfidentialEntry.sender_public_key)
}
inline std::string* ConfidentialEntry::_internal_mutable_sender_public_key() {
  
  return sender_public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfidentialEntry::release_sender_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.ConfidentialEntry.sender_public_key)
  
  return sender_public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfidentialEntry::set_allocated_sender_public_key(std::string* sender_public_key) {
  if (sender_public_key != nullptr) {
    
  } else {
    
  }
  sender_public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.ConfidentialEntry.sender_public_key)
}

// bytes pedersen_commitment = 3;
inline void ConfidentialEntry::clear_pedersen_commitment() {
  pedersen_commitment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfidentialEntry::pedersen_commitment() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
  return _internal_pedersen_commitment();
}
inline void ConfidentialEntry::set_pedersen_commitment(const std::string& value) {
  _internal_set_pedersen_commitment(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
}
inline std::string* ConfidentialEntry::mutable_pedersen_commitment() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
  return _internal_mutable_pedersen_commitment();
}
inline const std::string& ConfidentialEntry::_internal_pedersen_commitment() const {
  return pedersen_commitment_.GetNoArena();
}
inline void ConfidentialEntry::_internal_set_pedersen_commitment(const std::string& value) {
  
  pedersen_commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfidentialEntry::set_pedersen_commitment(std::string&& value) {
  
  pedersen_commitment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
}
inline void ConfidentialEntry::set_pedersen_commitment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pedersen_commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
}
inline void ConfidentialEntry::set_pedersen_commitment(const void* value, size_t size) {
  
  pedersen_commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
}
inline std::string* ConfidentialEntry::_internal_mutable_pedersen_commitment() {
  
  return pedersen_commitment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfidentialEntry::release_pedersen_commitment() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
  
  return pedersen_commitment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfidentialEntry::set_allocated_pedersen_commitment(std::string* pedersen_commitment) {
  if (pedersen_commitment != nullptr) {
    
  } else {
    
  }
  pedersen_commitment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pedersen_commitment);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.ConfidentialEntry.pedersen_commitment)
}

// .Catalyst.Protocol.Transaction.RangeProof range_proof = 4;
inline bool ConfidentialEntry::_internal_has_range_proof() const {
  return this != internal_default_instance() && range_proof_ != nullptr;
}
inline bool ConfidentialEntry::has_range_proof() const {
  return _internal_has_range_proof();
}
inline void ConfidentialEntry::clear_range_proof() {
  if (GetArenaNoVirtual() == nullptr && range_proof_ != nullptr) {
    delete range_proof_;
  }
  range_proof_ = nullptr;
}
inline const ::Catalyst::Protocol::Transaction::RangeProof& ConfidentialEntry::_internal_range_proof() const {
  const ::Catalyst::Protocol::Transaction::RangeProof* p = range_proof_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Transaction::RangeProof*>(
      &::Catalyst::Protocol::Transaction::_RangeProof_default_instance_);
}
inline const ::Catalyst::Protocol::Transaction::RangeProof& ConfidentialEntry::range_proof() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.ConfidentialEntry.range_proof)
  return _internal_range_proof();
}
inline ::Catalyst::Protocol::Transaction::RangeProof* ConfidentialEntry::release_range_proof() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.ConfidentialEntry.range_proof)
  
  ::Catalyst::Protocol::Transaction::RangeProof* temp = range_proof_;
  range_proof_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Transaction::RangeProof* ConfidentialEntry::_internal_mutable_range_proof() {
  
  if (range_proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Transaction::RangeProof>(GetArenaNoVirtual());
    range_proof_ = p;
  }
  return range_proof_;
}
inline ::Catalyst::Protocol::Transaction::RangeProof* ConfidentialEntry::mutable_range_proof() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.ConfidentialEntry.range_proof)
  return _internal_mutable_range_proof();
}
inline void ConfidentialEntry::set_allocated_range_proof(::Catalyst::Protocol::Transaction::RangeProof* range_proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete range_proof_;
  }
  if (range_proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      range_proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range_proof, submessage_arena);
    }
    
  } else {
    
  }
  range_proof_ = range_proof;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.ConfidentialEntry.range_proof)
}

// bytes transaction_fees = 5;
inline void ConfidentialEntry::clear_transaction_fees() {
  transaction_fees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfidentialEntry::transaction_fees() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.ConfidentialEntry.transaction_fees)
  return _internal_transaction_fees();
}
inline void ConfidentialEntry::set_transaction_fees(const std::string& value) {
  _internal_set_transaction_fees(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.ConfidentialEntry.transaction_fees)
}
inline std::string* ConfidentialEntry::mutable_transaction_fees() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.ConfidentialEntry.transaction_fees)
  return _internal_mutable_transaction_fees();
}
inline const std::string& ConfidentialEntry::_internal_transaction_fees() const {
  return transaction_fees_.GetNoArena();
}
inline void ConfidentialEntry::_internal_set_transaction_fees(const std::string& value) {
  
  transaction_fees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfidentialEntry::set_transaction_fees(std::string&& value) {
  
  transaction_fees_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.ConfidentialEntry.transaction_fees)
}
inline void ConfidentialEntry::set_transaction_fees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_fees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.ConfidentialEntry.transaction_fees)
}
inline void ConfidentialEntry::set_transaction_fees(const void* value, size_t size) {
  
  transaction_fees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.ConfidentialEntry.transaction_fees)
}
inline std::string* ConfidentialEntry::_internal_mutable_transaction_fees() {
  
  return transaction_fees_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfidentialEntry::release_transaction_fees() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.ConfidentialEntry.transaction_fees)
  
  return transaction_fees_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfidentialEntry::set_allocated_transaction_fees(std::string* transaction_fees) {
  if (transaction_fees != nullptr) {
    
  } else {
    
  }
  transaction_fees_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_fees);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.ConfidentialEntry.transaction_fees)
}

// uint64 nonce = 6;
inline void ConfidentialEntry::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfidentialEntry::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfidentialEntry::nonce() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.ConfidentialEntry.nonce)
  return _internal_nonce();
}
inline void ConfidentialEntry::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void ConfidentialEntry::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.ConfidentialEntry.nonce)
}

// -------------------------------------------------------------------

// CoinbaseEntry

// bytes receiver_public_key = 1;
inline void CoinbaseEntry::clear_receiver_public_key() {
  receiver_public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CoinbaseEntry::receiver_public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
  return _internal_receiver_public_key();
}
inline void CoinbaseEntry::set_receiver_public_key(const std::string& value) {
  _internal_set_receiver_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
}
inline std::string* CoinbaseEntry::mutable_receiver_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
  return _internal_mutable_receiver_public_key();
}
inline const std::string& CoinbaseEntry::_internal_receiver_public_key() const {
  return receiver_public_key_.GetNoArena();
}
inline void CoinbaseEntry::_internal_set_receiver_public_key(const std::string& value) {
  
  receiver_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CoinbaseEntry::set_receiver_public_key(std::string&& value) {
  
  receiver_public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
}
inline void CoinbaseEntry::set_receiver_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
}
inline void CoinbaseEntry::set_receiver_public_key(const void* value, size_t size) {
  
  receiver_public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
}
inline std::string* CoinbaseEntry::_internal_mutable_receiver_public_key() {
  
  return receiver_public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CoinbaseEntry::release_receiver_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
  
  return receiver_public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CoinbaseEntry::set_allocated_receiver_public_key(std::string* receiver_public_key) {
  if (receiver_public_key != nullptr) {
    
  } else {
    
  }
  receiver_public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.CoinbaseEntry.receiver_public_key)
}

// bytes amount = 2;
inline void CoinbaseEntry::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CoinbaseEntry::amount() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
  return _internal_amount();
}
inline void CoinbaseEntry::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
}
inline std::string* CoinbaseEntry::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
  return _internal_mutable_amount();
}
inline const std::string& CoinbaseEntry::_internal_amount() const {
  return amount_.GetNoArena();
}
inline void CoinbaseEntry::_internal_set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CoinbaseEntry::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
}
inline void CoinbaseEntry::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
}
inline void CoinbaseEntry::set_amount(const void* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
}
inline std::string* CoinbaseEntry::_internal_mutable_amount() {
  
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CoinbaseEntry::release_amount() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CoinbaseEntry::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.CoinbaseEntry.amount)
}

// -------------------------------------------------------------------

// RangeProof

// repeated bytes value_commitment = 1;
inline int RangeProof::_internal_value_commitment_size() const {
  return value_commitment_.size();
}
inline int RangeProof::value_commitment_size() const {
  return _internal_value_commitment_size();
}
inline void RangeProof::clear_value_commitment() {
  value_commitment_.Clear();
}
inline std::string* RangeProof::add_value_commitment() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  return _internal_add_value_commitment();
}
inline const std::string& RangeProof::_internal_value_commitment(int index) const {
  return value_commitment_.Get(index);
}
inline const std::string& RangeProof::value_commitment(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  return _internal_value_commitment(index);
}
inline std::string* RangeProof::mutable_value_commitment(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  return value_commitment_.Mutable(index);
}
inline void RangeProof::set_value_commitment(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  value_commitment_.Mutable(index)->assign(value);
}
inline void RangeProof::set_value_commitment(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  value_commitment_.Mutable(index)->assign(std::move(value));
}
inline void RangeProof::set_value_commitment(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_commitment_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
inline void RangeProof::set_value_commitment(int index, const void* value, size_t size) {
  value_commitment_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
inline std::string* RangeProof::_internal_add_value_commitment() {
  return value_commitment_.Add();
}
inline void RangeProof::add_value_commitment(const std::string& value) {
  value_commitment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
inline void RangeProof::add_value_commitment(std::string&& value) {
  value_commitment_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
inline void RangeProof::add_value_commitment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_commitment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
inline void RangeProof::add_value_commitment(const void* value, size_t size) {
  value_commitment_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RangeProof::value_commitment() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  return value_commitment_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RangeProof::mutable_value_commitment() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.RangeProof.value_commitment)
  return &value_commitment_;
}

// bytes bit_commitment = 2;
inline void RangeProof::clear_bit_commitment() {
  bit_commitment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeProof::bit_commitment() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
  return _internal_bit_commitment();
}
inline void RangeProof::set_bit_commitment(const std::string& value) {
  _internal_set_bit_commitment(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
}
inline std::string* RangeProof::mutable_bit_commitment() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
  return _internal_mutable_bit_commitment();
}
inline const std::string& RangeProof::_internal_bit_commitment() const {
  return bit_commitment_.GetNoArena();
}
inline void RangeProof::_internal_set_bit_commitment(const std::string& value) {
  
  bit_commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeProof::set_bit_commitment(std::string&& value) {
  
  bit_commitment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
}
inline void RangeProof::set_bit_commitment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bit_commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
}
inline void RangeProof::set_bit_commitment(const void* value, size_t size) {
  
  bit_commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
}
inline std::string* RangeProof::_internal_mutable_bit_commitment() {
  
  return bit_commitment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeProof::release_bit_commitment() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
  
  return bit_commitment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeProof::set_allocated_bit_commitment(std::string* bit_commitment) {
  if (bit_commitment != nullptr) {
    
  } else {
    
  }
  bit_commitment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bit_commitment);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.bit_commitment)
}

// bytes per_bit_blinding_factor_commitment = 3;
inline void RangeProof::clear_per_bit_blinding_factor_commitment() {
  per_bit_blinding_factor_commitment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeProof::per_bit_blinding_factor_commitment() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
  return _internal_per_bit_blinding_factor_commitment();
}
inline void RangeProof::set_per_bit_blinding_factor_commitment(const std::string& value) {
  _internal_set_per_bit_blinding_factor_commitment(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
}
inline std::string* RangeProof::mutable_per_bit_blinding_factor_commitment() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
  return _internal_mutable_per_bit_blinding_factor_commitment();
}
inline const std::string& RangeProof::_internal_per_bit_blinding_factor_commitment() const {
  return per_bit_blinding_factor_commitment_.GetNoArena();
}
inline void RangeProof::_internal_set_per_bit_blinding_factor_commitment(const std::string& value) {
  
  per_bit_blinding_factor_commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeProof::set_per_bit_blinding_factor_commitment(std::string&& value) {
  
  per_bit_blinding_factor_commitment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
}
inline void RangeProof::set_per_bit_blinding_factor_commitment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  per_bit_blinding_factor_commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
}
inline void RangeProof::set_per_bit_blinding_factor_commitment(const void* value, size_t size) {
  
  per_bit_blinding_factor_commitment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
}
inline std::string* RangeProof::_internal_mutable_per_bit_blinding_factor_commitment() {
  
  return per_bit_blinding_factor_commitment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeProof::release_per_bit_blinding_factor_commitment() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
  
  return per_bit_blinding_factor_commitment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeProof::set_allocated_per_bit_blinding_factor_commitment(std::string* per_bit_blinding_factor_commitment) {
  if (per_bit_blinding_factor_commitment != nullptr) {
    
  } else {
    
  }
  per_bit_blinding_factor_commitment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), per_bit_blinding_factor_commitment);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.per_bit_blinding_factor_commitment)
}

// bytes poly_commitment_t1 = 4;
inline void RangeProof::clear_poly_commitment_t1() {
  poly_commitment_t1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeProof::poly_commitment_t1() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
  return _internal_poly_commitment_t1();
}
inline void RangeProof::set_poly_commitment_t1(const std::string& value) {
  _internal_set_poly_commitment_t1(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
}
inline std::string* RangeProof::mutable_poly_commitment_t1() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
  return _internal_mutable_poly_commitment_t1();
}
inline const std::string& RangeProof::_internal_poly_commitment_t1() const {
  return poly_commitment_t1_.GetNoArena();
}
inline void RangeProof::_internal_set_poly_commitment_t1(const std::string& value) {
  
  poly_commitment_t1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeProof::set_poly_commitment_t1(std::string&& value) {
  
  poly_commitment_t1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
}
inline void RangeProof::set_poly_commitment_t1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poly_commitment_t1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
}
inline void RangeProof::set_poly_commitment_t1(const void* value, size_t size) {
  
  poly_commitment_t1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
}
inline std::string* RangeProof::_internal_mutable_poly_commitment_t1() {
  
  return poly_commitment_t1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeProof::release_poly_commitment_t1() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
  
  return poly_commitment_t1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeProof::set_allocated_poly_commitment_t1(std::string* poly_commitment_t1) {
  if (poly_commitment_t1 != nullptr) {
    
  } else {
    
  }
  poly_commitment_t1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poly_commitment_t1);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t1)
}

// bytes poly_commitment_t2 = 5;
inline void RangeProof::clear_poly_commitment_t2() {
  poly_commitment_t2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeProof::poly_commitment_t2() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
  return _internal_poly_commitment_t2();
}
inline void RangeProof::set_poly_commitment_t2(const std::string& value) {
  _internal_set_poly_commitment_t2(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
}
inline std::string* RangeProof::mutable_poly_commitment_t2() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
  return _internal_mutable_poly_commitment_t2();
}
inline const std::string& RangeProof::_internal_poly_commitment_t2() const {
  return poly_commitment_t2_.GetNoArena();
}
inline void RangeProof::_internal_set_poly_commitment_t2(const std::string& value) {
  
  poly_commitment_t2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeProof::set_poly_commitment_t2(std::string&& value) {
  
  poly_commitment_t2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
}
inline void RangeProof::set_poly_commitment_t2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poly_commitment_t2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
}
inline void RangeProof::set_poly_commitment_t2(const void* value, size_t size) {
  
  poly_commitment_t2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
}
inline std::string* RangeProof::_internal_mutable_poly_commitment_t2() {
  
  return poly_commitment_t2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeProof::release_poly_commitment_t2() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
  
  return poly_commitment_t2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeProof::set_allocated_poly_commitment_t2(std::string* poly_commitment_t2) {
  if (poly_commitment_t2 != nullptr) {
    
  } else {
    
  }
  poly_commitment_t2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poly_commitment_t2);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.poly_commitment_t2)
}

// bytes proof_of_share_tau = 6;
inline void RangeProof::clear_proof_of_share_tau() {
  proof_of_share_tau_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeProof::proof_of_share_tau() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
  return _internal_proof_of_share_tau();
}
inline void RangeProof::set_proof_of_share_tau(const std::string& value) {
  _internal_set_proof_of_share_tau(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
}
inline std::string* RangeProof::mutable_proof_of_share_tau() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
  return _internal_mutable_proof_of_share_tau();
}
inline const std::string& RangeProof::_internal_proof_of_share_tau() const {
  return proof_of_share_tau_.GetNoArena();
}
inline void RangeProof::_internal_set_proof_of_share_tau(const std::string& value) {
  
  proof_of_share_tau_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeProof::set_proof_of_share_tau(std::string&& value) {
  
  proof_of_share_tau_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
}
inline void RangeProof::set_proof_of_share_tau(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proof_of_share_tau_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
}
inline void RangeProof::set_proof_of_share_tau(const void* value, size_t size) {
  
  proof_of_share_tau_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
}
inline std::string* RangeProof::_internal_mutable_proof_of_share_tau() {
  
  return proof_of_share_tau_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeProof::release_proof_of_share_tau() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
  
  return proof_of_share_tau_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeProof::set_allocated_proof_of_share_tau(std::string* proof_of_share_tau) {
  if (proof_of_share_tau != nullptr) {
    
  } else {
    
  }
  proof_of_share_tau_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proof_of_share_tau);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_tau)
}

// bytes proof_of_share_mu = 7;
inline void RangeProof::clear_proof_of_share_mu() {
  proof_of_share_mu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeProof::proof_of_share_mu() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
  return _internal_proof_of_share_mu();
}
inline void RangeProof::set_proof_of_share_mu(const std::string& value) {
  _internal_set_proof_of_share_mu(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
}
inline std::string* RangeProof::mutable_proof_of_share_mu() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
  return _internal_mutable_proof_of_share_mu();
}
inline const std::string& RangeProof::_internal_proof_of_share_mu() const {
  return proof_of_share_mu_.GetNoArena();
}
inline void RangeProof::_internal_set_proof_of_share_mu(const std::string& value) {
  
  proof_of_share_mu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeProof::set_proof_of_share_mu(std::string&& value) {
  
  proof_of_share_mu_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
}
inline void RangeProof::set_proof_of_share_mu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proof_of_share_mu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
}
inline void RangeProof::set_proof_of_share_mu(const void* value, size_t size) {
  
  proof_of_share_mu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
}
inline std::string* RangeProof::_internal_mutable_proof_of_share_mu() {
  
  return proof_of_share_mu_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeProof::release_proof_of_share_mu() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
  
  return proof_of_share_mu_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeProof::set_allocated_proof_of_share_mu(std::string* proof_of_share_mu) {
  if (proof_of_share_mu != nullptr) {
    
  } else {
    
  }
  proof_of_share_mu_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proof_of_share_mu);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.proof_of_share_mu)
}

// repeated bytes aggregated_vector_polynomial_l = 8;
inline int RangeProof::_internal_aggregated_vector_polynomial_l_size() const {
  return aggregated_vector_polynomial_l_.size();
}
inline int RangeProof::aggregated_vector_polynomial_l_size() const {
  return _internal_aggregated_vector_polynomial_l_size();
}
inline void RangeProof::clear_aggregated_vector_polynomial_l() {
  aggregated_vector_polynomial_l_.Clear();
}
inline std::string* RangeProof::add_aggregated_vector_polynomial_l() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  return _internal_add_aggregated_vector_polynomial_l();
}
inline const std::string& RangeProof::_internal_aggregated_vector_polynomial_l(int index) const {
  return aggregated_vector_polynomial_l_.Get(index);
}
inline const std::string& RangeProof::aggregated_vector_polynomial_l(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  return _internal_aggregated_vector_polynomial_l(index);
}
inline std::string* RangeProof::mutable_aggregated_vector_polynomial_l(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  return aggregated_vector_polynomial_l_.Mutable(index);
}
inline void RangeProof::set_aggregated_vector_polynomial_l(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  aggregated_vector_polynomial_l_.Mutable(index)->assign(value);
}
inline void RangeProof::set_aggregated_vector_polynomial_l(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  aggregated_vector_polynomial_l_.Mutable(index)->assign(std::move(value));
}
inline void RangeProof::set_aggregated_vector_polynomial_l(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aggregated_vector_polynomial_l_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
inline void RangeProof::set_aggregated_vector_polynomial_l(int index, const void* value, size_t size) {
  aggregated_vector_polynomial_l_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
inline std::string* RangeProof::_internal_add_aggregated_vector_polynomial_l() {
  return aggregated_vector_polynomial_l_.Add();
}
inline void RangeProof::add_aggregated_vector_polynomial_l(const std::string& value) {
  aggregated_vector_polynomial_l_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
inline void RangeProof::add_aggregated_vector_polynomial_l(std::string&& value) {
  aggregated_vector_polynomial_l_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
inline void RangeProof::add_aggregated_vector_polynomial_l(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aggregated_vector_polynomial_l_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
inline void RangeProof::add_aggregated_vector_polynomial_l(const void* value, size_t size) {
  aggregated_vector_polynomial_l_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RangeProof::aggregated_vector_polynomial_l() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  return aggregated_vector_polynomial_l_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RangeProof::mutable_aggregated_vector_polynomial_l() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_l)
  return &aggregated_vector_polynomial_l_;
}

// repeated bytes aggregated_vector_polynomial_r = 9;
inline int RangeProof::_internal_aggregated_vector_polynomial_r_size() const {
  return aggregated_vector_polynomial_r_.size();
}
inline int RangeProof::aggregated_vector_polynomial_r_size() const {
  return _internal_aggregated_vector_polynomial_r_size();
}
inline void RangeProof::clear_aggregated_vector_polynomial_r() {
  aggregated_vector_polynomial_r_.Clear();
}
inline std::string* RangeProof::add_aggregated_vector_polynomial_r() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  return _internal_add_aggregated_vector_polynomial_r();
}
inline const std::string& RangeProof::_internal_aggregated_vector_polynomial_r(int index) const {
  return aggregated_vector_polynomial_r_.Get(index);
}
inline const std::string& RangeProof::aggregated_vector_polynomial_r(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  return _internal_aggregated_vector_polynomial_r(index);
}
inline std::string* RangeProof::mutable_aggregated_vector_polynomial_r(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  return aggregated_vector_polynomial_r_.Mutable(index);
}
inline void RangeProof::set_aggregated_vector_polynomial_r(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  aggregated_vector_polynomial_r_.Mutable(index)->assign(value);
}
inline void RangeProof::set_aggregated_vector_polynomial_r(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  aggregated_vector_polynomial_r_.Mutable(index)->assign(std::move(value));
}
inline void RangeProof::set_aggregated_vector_polynomial_r(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aggregated_vector_polynomial_r_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
inline void RangeProof::set_aggregated_vector_polynomial_r(int index, const void* value, size_t size) {
  aggregated_vector_polynomial_r_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
inline std::string* RangeProof::_internal_add_aggregated_vector_polynomial_r() {
  return aggregated_vector_polynomial_r_.Add();
}
inline void RangeProof::add_aggregated_vector_polynomial_r(const std::string& value) {
  aggregated_vector_polynomial_r_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
inline void RangeProof::add_aggregated_vector_polynomial_r(std::string&& value) {
  aggregated_vector_polynomial_r_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
inline void RangeProof::add_aggregated_vector_polynomial_r(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aggregated_vector_polynomial_r_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
inline void RangeProof::add_aggregated_vector_polynomial_r(const void* value, size_t size) {
  aggregated_vector_polynomial_r_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RangeProof::aggregated_vector_polynomial_r() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  return aggregated_vector_polynomial_r_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RangeProof::mutable_aggregated_vector_polynomial_r() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.RangeProof.aggregated_vector_polynomial_r)
  return &aggregated_vector_polynomial_r_;
}

// bytes a_prime_0 = 10;
inline void RangeProof::clear_a_prime_0() {
  a_prime_0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeProof::a_prime_0() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
  return _internal_a_prime_0();
}
inline void RangeProof::set_a_prime_0(const std::string& value) {
  _internal_set_a_prime_0(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
}
inline std::string* RangeProof::mutable_a_prime_0() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
  return _internal_mutable_a_prime_0();
}
inline const std::string& RangeProof::_internal_a_prime_0() const {
  return a_prime_0_.GetNoArena();
}
inline void RangeProof::_internal_set_a_prime_0(const std::string& value) {
  
  a_prime_0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeProof::set_a_prime_0(std::string&& value) {
  
  a_prime_0_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
}
inline void RangeProof::set_a_prime_0(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  a_prime_0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
}
inline void RangeProof::set_a_prime_0(const void* value, size_t size) {
  
  a_prime_0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
}
inline std::string* RangeProof::_internal_mutable_a_prime_0() {
  
  return a_prime_0_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeProof::release_a_prime_0() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
  
  return a_prime_0_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeProof::set_allocated_a_prime_0(std::string* a_prime_0) {
  if (a_prime_0 != nullptr) {
    
  } else {
    
  }
  a_prime_0_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), a_prime_0);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.a_prime_0)
}

// bytes b_prime_0 = 11;
inline void RangeProof::clear_b_prime_0() {
  b_prime_0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeProof::b_prime_0() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
  return _internal_b_prime_0();
}
inline void RangeProof::set_b_prime_0(const std::string& value) {
  _internal_set_b_prime_0(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
}
inline std::string* RangeProof::mutable_b_prime_0() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
  return _internal_mutable_b_prime_0();
}
inline const std::string& RangeProof::_internal_b_prime_0() const {
  return b_prime_0_.GetNoArena();
}
inline void RangeProof::_internal_set_b_prime_0(const std::string& value) {
  
  b_prime_0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeProof::set_b_prime_0(std::string&& value) {
  
  b_prime_0_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
}
inline void RangeProof::set_b_prime_0(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  b_prime_0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
}
inline void RangeProof::set_b_prime_0(const void* value, size_t size) {
  
  b_prime_0_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
}
inline std::string* RangeProof::_internal_mutable_b_prime_0() {
  
  return b_prime_0_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeProof::release_b_prime_0() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
  
  return b_prime_0_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeProof::set_allocated_b_prime_0(std::string* b_prime_0) {
  if (b_prime_0 != nullptr) {
    
  } else {
    
  }
  b_prime_0_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), b_prime_0);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.b_prime_0)
}

// bytes t = 12;
inline void RangeProof::clear_t() {
  t_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeProof::t() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.RangeProof.t)
  return _internal_t();
}
inline void RangeProof::set_t(const std::string& value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.RangeProof.t)
}
inline std::string* RangeProof::mutable_t() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.RangeProof.t)
  return _internal_mutable_t();
}
inline const std::string& RangeProof::_internal_t() const {
  return t_.GetNoArena();
}
inline void RangeProof::_internal_set_t(const std::string& value) {
  
  t_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeProof::set_t(std::string&& value) {
  
  t_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.RangeProof.t)
}
inline void RangeProof::set_t(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  t_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.RangeProof.t)
}
inline void RangeProof::set_t(const void* value, size_t size) {
  
  t_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.RangeProof.t)
}
inline std::string* RangeProof::_internal_mutable_t() {
  
  return t_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeProof::release_t() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.RangeProof.t)
  
  return t_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeProof::set_allocated_t(std::string* t) {
  if (t != nullptr) {
    
  } else {
    
  }
  t_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), t);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.RangeProof.t)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Transaction
}  // namespace Protocol
}  // namespace Catalyst

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Catalyst::Protocol::Transaction::TransactionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Transaction::TransactionType>() {
  return ::Catalyst::Protocol::Transaction::TransactionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Transaction_2eproto
