// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Deltas.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Deltas_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Deltas_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Transaction.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Deltas_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Deltas_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Deltas_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Deltas {
class Delta;
class DeltaDefaultTypeInternal;
extern DeltaDefaultTypeInternal _Delta_default_instance_;
class DeltaIndex;
class DeltaIndexDefaultTypeInternal;
extern DeltaIndexDefaultTypeInternal _DeltaIndex_default_instance_;
}  // namespace Deltas
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> ::Catalyst::Protocol::Deltas::Delta* Arena::CreateMaybeMessage<::Catalyst::Protocol::Deltas::Delta>(Arena*);
template<> ::Catalyst::Protocol::Deltas::DeltaIndex* Arena::CreateMaybeMessage<::Catalyst::Protocol::Deltas::DeltaIndex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Catalyst {
namespace Protocol {
namespace Deltas {

// ===================================================================

class DeltaIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Deltas.DeltaIndex) */ {
 public:
  DeltaIndex();
  virtual ~DeltaIndex();

  DeltaIndex(const DeltaIndex& from);
  DeltaIndex(DeltaIndex&& from) noexcept
    : DeltaIndex() {
    *this = ::std::move(from);
  }

  inline DeltaIndex& operator=(const DeltaIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaIndex& operator=(DeltaIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeltaIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeltaIndex* internal_default_instance() {
    return reinterpret_cast<const DeltaIndex*>(
               &_DeltaIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeltaIndex& a, DeltaIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaIndex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeltaIndex* New() const final {
    return CreateMaybeMessage<DeltaIndex>(nullptr);
  }

  DeltaIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeltaIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeltaIndex& from);
  void MergeFrom(const DeltaIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeltaIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Deltas.DeltaIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Deltas_2eproto);
    return ::descriptor_table_Deltas_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // bytes cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const void* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // uint32 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Deltas.DeltaIndex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Deltas_2eproto;
};
// -------------------------------------------------------------------

class Delta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Deltas.Delta) */ {
 public:
  Delta();
  virtual ~Delta();

  Delta(const Delta& from);
  Delta(Delta&& from) noexcept
    : Delta() {
    *this = ::std::move(from);
  }

  inline Delta& operator=(const Delta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Delta& operator=(Delta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Delta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Delta* internal_default_instance() {
    return reinterpret_cast<const Delta*>(
               &_Delta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Delta& a, Delta& b) {
    a.Swap(&b);
  }
  inline void Swap(Delta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Delta* New() const final {
    return CreateMaybeMessage<Delta>(nullptr);
  }

  Delta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Delta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Delta& from);
  void MergeFrom(const Delta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Delta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Deltas.Delta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Deltas_2eproto);
    return ::descriptor_table_Deltas_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicEntriesFieldNumber = 5,
    kConfidentialEntriesFieldNumber = 6,
    kCoinbaseEntriesFieldNumber = 7,
    kPreviousDeltaDfsHashFieldNumber = 1,
    kMerkleRootFieldNumber = 2,
    kMerklePodaFieldNumber = 3,
    kStateRootFieldNumber = 8,
    kTimeStampFieldNumber = 4,
  };
  // repeated .Catalyst.Protocol.Transaction.PublicEntry public_entries = 5;
  int public_entries_size() const;
  private:
  int _internal_public_entries_size() const;
  public:
  void clear_public_entries();
  ::Catalyst::Protocol::Transaction::PublicEntry* mutable_public_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >*
      mutable_public_entries();
  private:
  const ::Catalyst::Protocol::Transaction::PublicEntry& _internal_public_entries(int index) const;
  ::Catalyst::Protocol::Transaction::PublicEntry* _internal_add_public_entries();
  public:
  const ::Catalyst::Protocol::Transaction::PublicEntry& public_entries(int index) const;
  ::Catalyst::Protocol::Transaction::PublicEntry* add_public_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >&
      public_entries() const;

  // repeated .Catalyst.Protocol.Transaction.ConfidentialEntry confidential_entries = 6;
  int confidential_entries_size() const;
  private:
  int _internal_confidential_entries_size() const;
  public:
  void clear_confidential_entries();
  ::Catalyst::Protocol::Transaction::ConfidentialEntry* mutable_confidential_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry >*
      mutable_confidential_entries();
  private:
  const ::Catalyst::Protocol::Transaction::ConfidentialEntry& _internal_confidential_entries(int index) const;
  ::Catalyst::Protocol::Transaction::ConfidentialEntry* _internal_add_confidential_entries();
  public:
  const ::Catalyst::Protocol::Transaction::ConfidentialEntry& confidential_entries(int index) const;
  ::Catalyst::Protocol::Transaction::ConfidentialEntry* add_confidential_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry >&
      confidential_entries() const;

  // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry coinbase_entries = 7;
  int coinbase_entries_size() const;
  private:
  int _internal_coinbase_entries_size() const;
  public:
  void clear_coinbase_entries();
  ::Catalyst::Protocol::Transaction::CoinbaseEntry* mutable_coinbase_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >*
      mutable_coinbase_entries();
  private:
  const ::Catalyst::Protocol::Transaction::CoinbaseEntry& _internal_coinbase_entries(int index) const;
  ::Catalyst::Protocol::Transaction::CoinbaseEntry* _internal_add_coinbase_entries();
  public:
  const ::Catalyst::Protocol::Transaction::CoinbaseEntry& coinbase_entries(int index) const;
  ::Catalyst::Protocol::Transaction::CoinbaseEntry* add_coinbase_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >&
      coinbase_entries() const;

  // bytes previous_delta_dfs_hash = 1;
  void clear_previous_delta_dfs_hash();
  const std::string& previous_delta_dfs_hash() const;
  void set_previous_delta_dfs_hash(const std::string& value);
  void set_previous_delta_dfs_hash(std::string&& value);
  void set_previous_delta_dfs_hash(const char* value);
  void set_previous_delta_dfs_hash(const void* value, size_t size);
  std::string* mutable_previous_delta_dfs_hash();
  std::string* release_previous_delta_dfs_hash();
  void set_allocated_previous_delta_dfs_hash(std::string* previous_delta_dfs_hash);
  private:
  const std::string& _internal_previous_delta_dfs_hash() const;
  void _internal_set_previous_delta_dfs_hash(const std::string& value);
  std::string* _internal_mutable_previous_delta_dfs_hash();
  public:

  // bytes merkle_root = 2;
  void clear_merkle_root();
  const std::string& merkle_root() const;
  void set_merkle_root(const std::string& value);
  void set_merkle_root(std::string&& value);
  void set_merkle_root(const char* value);
  void set_merkle_root(const void* value, size_t size);
  std::string* mutable_merkle_root();
  std::string* release_merkle_root();
  void set_allocated_merkle_root(std::string* merkle_root);
  private:
  const std::string& _internal_merkle_root() const;
  void _internal_set_merkle_root(const std::string& value);
  std::string* _internal_mutable_merkle_root();
  public:

  // bytes merkle_poda = 3;
  void clear_merkle_poda();
  const std::string& merkle_poda() const;
  void set_merkle_poda(const std::string& value);
  void set_merkle_poda(std::string&& value);
  void set_merkle_poda(const char* value);
  void set_merkle_poda(const void* value, size_t size);
  std::string* mutable_merkle_poda();
  std::string* release_merkle_poda();
  void set_allocated_merkle_poda(std::string* merkle_poda);
  private:
  const std::string& _internal_merkle_poda() const;
  void _internal_set_merkle_poda(const std::string& value);
  std::string* _internal_mutable_merkle_poda();
  public:

  // bytes state_root = 8;
  void clear_state_root();
  const std::string& state_root() const;
  void set_state_root(const std::string& value);
  void set_state_root(std::string&& value);
  void set_state_root(const char* value);
  void set_state_root(const void* value, size_t size);
  std::string* mutable_state_root();
  std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);
  private:
  const std::string& _internal_state_root() const;
  void _internal_set_state_root(const std::string& value);
  std::string* _internal_mutable_state_root();
  public:

  // .google.protobuf.Timestamp time_stamp = 4;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time_stamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time_stamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_stamp();
  void set_allocated_time_stamp(PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_stamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_stamp();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Deltas.Delta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry > public_entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry > confidential_entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry > coinbase_entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_delta_dfs_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merkle_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merkle_poda_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Deltas_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeltaIndex

// uint32 height = 1;
inline void DeltaIndex::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeltaIndex::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeltaIndex::height() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.DeltaIndex.height)
  return _internal_height();
}
inline void DeltaIndex::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void DeltaIndex::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.DeltaIndex.height)
}

// bytes cid = 2;
inline void DeltaIndex::clear_cid() {
  cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeltaIndex::cid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.DeltaIndex.cid)
  return _internal_cid();
}
inline void DeltaIndex::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
inline std::string* DeltaIndex::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.DeltaIndex.cid)
  return _internal_mutable_cid();
}
inline const std::string& DeltaIndex::_internal_cid() const {
  return cid_.GetNoArena();
}
inline void DeltaIndex::_internal_set_cid(const std::string& value) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeltaIndex::set_cid(std::string&& value) {
  
  cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
inline void DeltaIndex::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
inline void DeltaIndex::set_cid(const void* value, size_t size) {
  
  cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
inline std::string* DeltaIndex::_internal_mutable_cid() {
  
  return cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeltaIndex::release_cid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.DeltaIndex.cid)
  
  return cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeltaIndex::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}

// -------------------------------------------------------------------

// Delta

// bytes previous_delta_dfs_hash = 1;
inline void Delta::clear_previous_delta_dfs_hash() {
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Delta::previous_delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
  return _internal_previous_delta_dfs_hash();
}
inline void Delta::set_previous_delta_dfs_hash(const std::string& value) {
  _internal_set_previous_delta_dfs_hash(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
inline std::string* Delta::mutable_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
  return _internal_mutable_previous_delta_dfs_hash();
}
inline const std::string& Delta::_internal_previous_delta_dfs_hash() const {
  return previous_delta_dfs_hash_.GetNoArena();
}
inline void Delta::_internal_set_previous_delta_dfs_hash(const std::string& value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Delta::set_previous_delta_dfs_hash(std::string&& value) {
  
  previous_delta_dfs_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
inline void Delta::set_previous_delta_dfs_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
inline void Delta::set_previous_delta_dfs_hash(const void* value, size_t size) {
  
  previous_delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
inline std::string* Delta::_internal_mutable_previous_delta_dfs_hash() {
  
  return previous_delta_dfs_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Delta::release_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
  
  return previous_delta_dfs_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_previous_delta_dfs_hash(std::string* previous_delta_dfs_hash) {
  if (previous_delta_dfs_hash != nullptr) {
    
  } else {
    
  }
  previous_delta_dfs_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}

// bytes merkle_root = 2;
inline void Delta::clear_merkle_root() {
  merkle_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Delta::merkle_root() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.merkle_root)
  return _internal_merkle_root();
}
inline void Delta::set_merkle_root(const std::string& value) {
  _internal_set_merkle_root(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
inline std::string* Delta::mutable_merkle_root() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.merkle_root)
  return _internal_mutable_merkle_root();
}
inline const std::string& Delta::_internal_merkle_root() const {
  return merkle_root_.GetNoArena();
}
inline void Delta::_internal_set_merkle_root(const std::string& value) {
  
  merkle_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Delta::set_merkle_root(std::string&& value) {
  
  merkle_root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
inline void Delta::set_merkle_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merkle_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
inline void Delta::set_merkle_root(const void* value, size_t size) {
  
  merkle_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
inline std::string* Delta::_internal_mutable_merkle_root() {
  
  return merkle_root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Delta::release_merkle_root() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.merkle_root)
  
  return merkle_root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_merkle_root(std::string* merkle_root) {
  if (merkle_root != nullptr) {
    
  } else {
    
  }
  merkle_root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merkle_root);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.merkle_root)
}

// bytes merkle_poda = 3;
inline void Delta::clear_merkle_poda() {
  merkle_poda_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Delta::merkle_poda() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.merkle_poda)
  return _internal_merkle_poda();
}
inline void Delta::set_merkle_poda(const std::string& value) {
  _internal_set_merkle_poda(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
inline std::string* Delta::mutable_merkle_poda() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.merkle_poda)
  return _internal_mutable_merkle_poda();
}
inline const std::string& Delta::_internal_merkle_poda() const {
  return merkle_poda_.GetNoArena();
}
inline void Delta::_internal_set_merkle_poda(const std::string& value) {
  
  merkle_poda_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Delta::set_merkle_poda(std::string&& value) {
  
  merkle_poda_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
inline void Delta::set_merkle_poda(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merkle_poda_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
inline void Delta::set_merkle_poda(const void* value, size_t size) {
  
  merkle_poda_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
inline std::string* Delta::_internal_mutable_merkle_poda() {
  
  return merkle_poda_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Delta::release_merkle_poda() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.merkle_poda)
  
  return merkle_poda_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_merkle_poda(std::string* merkle_poda) {
  if (merkle_poda != nullptr) {
    
  } else {
    
  }
  merkle_poda_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merkle_poda);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}

// .google.protobuf.Timestamp time_stamp = 4;
inline bool Delta::_internal_has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != nullptr;
}
inline bool Delta::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Delta::_internal_time_stamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Delta::time_stamp() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.time_stamp)
  return _internal_time_stamp();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Delta::release_time_stamp() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.time_stamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Delta::_internal_mutable_time_stamp() {
  
  if (time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    time_stamp_ = p;
  }
  return time_stamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Delta::mutable_time_stamp() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.time_stamp)
  return _internal_mutable_time_stamp();
}
inline void Delta::set_allocated_time_stamp(PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.time_stamp)
}

// repeated .Catalyst.Protocol.Transaction.PublicEntry public_entries = 5;
inline int Delta::_internal_public_entries_size() const {
  return public_entries_.size();
}
inline int Delta::public_entries_size() const {
  return _internal_public_entries_size();
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* Delta::mutable_public_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.public_entries)
  return public_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >*
Delta::mutable_public_entries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.public_entries)
  return &public_entries_;
}
inline const ::Catalyst::Protocol::Transaction::PublicEntry& Delta::_internal_public_entries(int index) const {
  return public_entries_.Get(index);
}
inline const ::Catalyst::Protocol::Transaction::PublicEntry& Delta::public_entries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.public_entries)
  return _internal_public_entries(index);
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* Delta::_internal_add_public_entries() {
  return public_entries_.Add();
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* Delta::add_public_entries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.public_entries)
  return _internal_add_public_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >&
Delta::public_entries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.public_entries)
  return public_entries_;
}

// repeated .Catalyst.Protocol.Transaction.ConfidentialEntry confidential_entries = 6;
inline int Delta::_internal_confidential_entries_size() const {
  return confidential_entries_.size();
}
inline int Delta::confidential_entries_size() const {
  return _internal_confidential_entries_size();
}
inline ::Catalyst::Protocol::Transaction::ConfidentialEntry* Delta::mutable_confidential_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return confidential_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry >*
Delta::mutable_confidential_entries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return &confidential_entries_;
}
inline const ::Catalyst::Protocol::Transaction::ConfidentialEntry& Delta::_internal_confidential_entries(int index) const {
  return confidential_entries_.Get(index);
}
inline const ::Catalyst::Protocol::Transaction::ConfidentialEntry& Delta::confidential_entries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return _internal_confidential_entries(index);
}
inline ::Catalyst::Protocol::Transaction::ConfidentialEntry* Delta::_internal_add_confidential_entries() {
  return confidential_entries_.Add();
}
inline ::Catalyst::Protocol::Transaction::ConfidentialEntry* Delta::add_confidential_entries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return _internal_add_confidential_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry >&
Delta::confidential_entries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return confidential_entries_;
}

// repeated .Catalyst.Protocol.Transaction.CoinbaseEntry coinbase_entries = 7;
inline int Delta::_internal_coinbase_entries_size() const {
  return coinbase_entries_.size();
}
inline int Delta::coinbase_entries_size() const {
  return _internal_coinbase_entries_size();
}
inline ::Catalyst::Protocol::Transaction::CoinbaseEntry* Delta::mutable_coinbase_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return coinbase_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >*
Delta::mutable_coinbase_entries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return &coinbase_entries_;
}
inline const ::Catalyst::Protocol::Transaction::CoinbaseEntry& Delta::_internal_coinbase_entries(int index) const {
  return coinbase_entries_.Get(index);
}
inline const ::Catalyst::Protocol::Transaction::CoinbaseEntry& Delta::coinbase_entries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return _internal_coinbase_entries(index);
}
inline ::Catalyst::Protocol::Transaction::CoinbaseEntry* Delta::_internal_add_coinbase_entries() {
  return coinbase_entries_.Add();
}
inline ::Catalyst::Protocol::Transaction::CoinbaseEntry* Delta::add_coinbase_entries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return _internal_add_coinbase_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >&
Delta::coinbase_entries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return coinbase_entries_;
}

// bytes state_root = 8;
inline void Delta::clear_state_root() {
  state_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Delta::state_root() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.state_root)
  return _internal_state_root();
}
inline void Delta::set_state_root(const std::string& value) {
  _internal_set_state_root(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.state_root)
}
inline std::string* Delta::mutable_state_root() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.state_root)
  return _internal_mutable_state_root();
}
inline const std::string& Delta::_internal_state_root() const {
  return state_root_.GetNoArena();
}
inline void Delta::_internal_set_state_root(const std::string& value) {
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Delta::set_state_root(std::string&& value) {
  
  state_root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.state_root)
}
inline void Delta::set_state_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.state_root)
}
inline void Delta::set_state_root(const void* value, size_t size) {
  
  state_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.state_root)
}
inline std::string* Delta::_internal_mutable_state_root() {
  
  return state_root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Delta::release_state_root() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.state_root)
  
  return state_root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  state_root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_root);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.state_root)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Deltas
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Deltas_2eproto
