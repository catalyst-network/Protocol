// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transaction.proto

#include "Transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Cryptography_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Signature_Cryptography_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RangeProof_Transaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Transaction {
class PublicEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicEntry> _instance;
} _PublicEntry_default_instance_;
class ConfidentialEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfidentialEntry> _instance;
} _ConfidentialEntry_default_instance_;
class CoinbaseEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoinbaseEntry> _instance;
} _CoinbaseEntry_default_instance_;
class RangeProofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RangeProof> _instance;
} _RangeProof_default_instance_;
}  // namespace Transaction
}  // namespace Protocol
}  // namespace Catalyst
static void InitDefaultsscc_info_CoinbaseEntry_Transaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Transaction::_CoinbaseEntry_default_instance_;
    new (ptr) ::Catalyst::Protocol::Transaction::CoinbaseEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Transaction::CoinbaseEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoinbaseEntry_Transaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CoinbaseEntry_Transaction_2eproto}, {}};

static void InitDefaultsscc_info_ConfidentialEntry_Transaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Transaction::_ConfidentialEntry_default_instance_;
    new (ptr) ::Catalyst::Protocol::Transaction::ConfidentialEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Transaction::ConfidentialEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfidentialEntry_Transaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConfidentialEntry_Transaction_2eproto}, {
      &scc_info_RangeProof_Transaction_2eproto.base,}};

static void InitDefaultsscc_info_PublicEntry_Transaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Transaction::_PublicEntry_default_instance_;
    new (ptr) ::Catalyst::Protocol::Transaction::PublicEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Transaction::PublicEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PublicEntry_Transaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PublicEntry_Transaction_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Signature_Cryptography_2eproto.base,}};

static void InitDefaultsscc_info_RangeProof_Transaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Transaction::_RangeProof_default_instance_;
    new (ptr) ::Catalyst::Protocol::Transaction::RangeProof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Transaction::RangeProof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RangeProof_Transaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RangeProof_Transaction_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Transaction_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Transaction_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Transaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Transaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::PublicEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::PublicEntry, receiver_address_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::PublicEntry, sender_address_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::PublicEntry, amount_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::PublicEntry, data_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::PublicEntry, timestamp_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::PublicEntry, gas_price_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::PublicEntry, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::PublicEntry, nonce_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::PublicEntry, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::ConfidentialEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::ConfidentialEntry, receiver_public_key_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::ConfidentialEntry, sender_public_key_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::ConfidentialEntry, pedersen_commitment_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::ConfidentialEntry, range_proof_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::ConfidentialEntry, transaction_fees_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::ConfidentialEntry, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::CoinbaseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::CoinbaseEntry, receiver_public_key_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::CoinbaseEntry, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, value_commitment_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, bit_commitment_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, per_bit_blinding_factor_commitment_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, poly_commitment_t1_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, poly_commitment_t2_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, proof_of_share_tau_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, proof_of_share_mu_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, aggregated_vector_polynomial_l_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, aggregated_vector_polynomial_r_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, a_prime_0_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, b_prime_0_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Transaction::RangeProof, t_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Catalyst::Protocol::Transaction::PublicEntry)},
  { 14, -1, sizeof(::Catalyst::Protocol::Transaction::ConfidentialEntry)},
  { 25, -1, sizeof(::Catalyst::Protocol::Transaction::CoinbaseEntry)},
  { 32, -1, sizeof(::Catalyst::Protocol::Transaction::RangeProof)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Transaction::_PublicEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Transaction::_ConfidentialEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Transaction::_CoinbaseEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Transaction::_RangeProof_default_instance_),
};

const char descriptor_table_protodef_Transaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021Transaction.proto\022\035Catalyst.Protocol.T"
  "ransaction\032\022Cryptography.proto\032\037google/p"
  "rotobuf/timestamp.proto\"\377\001\n\013PublicEntry\022"
  "\030\n\020receiver_address\030\001 \001(\014\022\026\n\016sender_addr"
  "ess\030\002 \001(\014\022\016\n\006amount\030\003 \001(\014\022\014\n\004data\030\004 \001(\014\022"
  "-\n\ttimestamp\030\005 \001(\0132\032.google.protobuf.Tim"
  "estamp\022\021\n\tgas_price\030\006 \001(\014\022\021\n\tgas_limit\030\007"
  " \001(\004\022\r\n\005nonce\030\t \001(\004\022<\n\tsignature\030\n \001(\0132)"
  ".Catalyst.Protocol.Cryptography.Signatur"
  "e\"\321\001\n\021ConfidentialEntry\022\033\n\023receiver_publ"
  "ic_key\030\001 \001(\014\022\031\n\021sender_public_key\030\002 \001(\014\022"
  "\033\n\023pedersen_commitment\030\003 \001(\014\022>\n\013range_pr"
  "oof\030\004 \001(\0132).Catalyst.Protocol.Transactio"
  "n.RangeProof\022\030\n\020transaction_fees\030\005 \001(\014\022\r"
  "\n\005nonce\030\006 \001(\004\"<\n\rCoinbaseEntry\022\033\n\023receiv"
  "er_public_key\030\001 \001(\014\022\016\n\006amount\030\002 \001(\014\"\332\002\n\n"
  "RangeProof\022\030\n\020value_commitment\030\001 \003(\014\022\026\n\016"
  "bit_commitment\030\002 \001(\014\022*\n\"per_bit_blinding"
  "_factor_commitment\030\003 \001(\014\022\032\n\022poly_commitm"
  "ent_t1\030\004 \001(\014\022\032\n\022poly_commitment_t2\030\005 \001(\014"
  "\022\032\n\022proof_of_share_tau\030\006 \001(\014\022\031\n\021proof_of"
  "_share_mu\030\007 \001(\014\022&\n\036aggregated_vector_pol"
  "ynomial_l\030\010 \003(\014\022&\n\036aggregated_vector_pol"
  "ynomial_r\030\t \003(\014\022\021\n\ta_prime_0\030\n \001(\014\022\021\n\tb_"
  "prime_0\030\013 \001(\014\022\t\n\001t\030\014 \001(\014*M\n\017TransactionT"
  "ype\022\034\n\030TRANSACTION_TYPE_UNKNOWN\020\000\022\n\n\006PUB"
  "LIC\020\001\022\020\n\014CONFIDENTIAL\020\002B\002P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Transaction_2eproto_deps[2] = {
  &::descriptor_table_Cryptography_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Transaction_2eproto_sccs[4] = {
  &scc_info_CoinbaseEntry_Transaction_2eproto.base,
  &scc_info_ConfidentialEntry_Transaction_2eproto.base,
  &scc_info_PublicEntry_Transaction_2eproto.base,
  &scc_info_RangeProof_Transaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Transaction_2eproto_once;
static bool descriptor_table_Transaction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Transaction_2eproto = {
  &descriptor_table_Transaction_2eproto_initialized, descriptor_table_protodef_Transaction_2eproto, "Transaction.proto", 1075,
  &descriptor_table_Transaction_2eproto_once, descriptor_table_Transaction_2eproto_sccs, descriptor_table_Transaction_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_Transaction_2eproto::offsets,
  file_level_metadata_Transaction_2eproto, 4, file_level_enum_descriptors_Transaction_2eproto, file_level_service_descriptors_Transaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Transaction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Transaction_2eproto), true);
namespace Catalyst {
namespace Protocol {
namespace Transaction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Transaction_2eproto);
  return file_level_enum_descriptors_Transaction_2eproto[0];
}
bool TransactionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PublicEntry::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Transaction::_PublicEntry_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::Catalyst::Protocol::Transaction::_PublicEntry_default_instance_._instance.get_mutable()->signature_ = const_cast< ::Catalyst::Protocol::Cryptography::Signature*>(
      ::Catalyst::Protocol::Cryptography::Signature::internal_default_instance());
}
class PublicEntry::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const PublicEntry* msg);
  static const ::Catalyst::Protocol::Cryptography::Signature& signature(const PublicEntry* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
PublicEntry::_Internal::timestamp(const PublicEntry* msg) {
  return *msg->timestamp_;
}
const ::Catalyst::Protocol::Cryptography::Signature&
PublicEntry::_Internal::signature(const PublicEntry* msg) {
  return *msg->signature_;
}
void PublicEntry::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void PublicEntry::clear_signature() {
  if (GetArenaNoVirtual() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}
PublicEntry::PublicEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Transaction.PublicEntry)
}
PublicEntry::PublicEntry(const PublicEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_address().empty()) {
    receiver_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_address_);
  }
  sender_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_address().empty()) {
    sender_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_address_);
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_price().empty()) {
    gas_price_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gas_price_);
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  ::memcpy(&gas_limit_, &from.gas_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&gas_limit_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Transaction.PublicEntry)
}

void PublicEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicEntry_Transaction_2eproto.base);
  receiver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(nonce_));
}

PublicEntry::~PublicEntry() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Transaction.PublicEntry)
  SharedDtor();
}

void PublicEntry::SharedDtor() {
  receiver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete signature_;
}

void PublicEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicEntry& PublicEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicEntry_Transaction_2eproto.base);
  return *internal_default_instance();
}


void PublicEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Transaction.PublicEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  ::memset(&gas_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&gas_limit_)) + sizeof(nonce_));
  _internal_metadata_.Clear();
}

const char* PublicEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes receiver_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_receiver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sender_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sender_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gas_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Cryptography.Signature signature = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Transaction.PublicEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes receiver_address = 1;
  if (this->receiver_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_receiver_address(), target);
  }

  // bytes sender_address = 2;
  if (this->sender_address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sender_address(), target);
  }

  // bytes amount = 3;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_amount(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  // bytes gas_price = 6;
  if (this->gas_price().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_gas_price(), target);
  }

  // uint64 gas_limit = 7;
  if (this->gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gas_limit(), target);
  }

  // uint64 nonce = 9;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_nonce(), target);
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 10;
  if (this->has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Transaction.PublicEntry)
  return target;
}

size_t PublicEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Transaction.PublicEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes receiver_address = 1;
  if (this->receiver_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_address());
  }

  // bytes sender_address = 2;
  if (this->sender_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_address());
  }

  // bytes amount = 3;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes gas_price = 6;
  if (this->gas_price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gas_price());
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 10;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  // uint64 gas_limit = 7;
  if (this->gas_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_limit());
  }

  // uint64 nonce = 9;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Transaction.PublicEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Transaction.PublicEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Transaction.PublicEntry)
    MergeFrom(*source);
  }
}

void PublicEntry::MergeFrom(const PublicEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Transaction.PublicEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiver_address().size() > 0) {

    receiver_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_address_);
  }
  if (from.sender_address().size() > 0) {

    sender_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_address_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.gas_price().size() > 0) {

    gas_price_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gas_price_);
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::Catalyst::Protocol::Cryptography::Signature::MergeFrom(from._internal_signature());
  }
  if (from.gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void PublicEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Transaction.PublicEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicEntry::CopyFrom(const PublicEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Transaction.PublicEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicEntry::IsInitialized() const {
  return true;
}

void PublicEntry::InternalSwap(PublicEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  receiver_address_.Swap(&other->receiver_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_address_.Swap(&other->sender_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gas_price_.Swap(&other->gas_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(signature_, other->signature_);
  swap(gas_limit_, other->gas_limit_);
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfidentialEntry::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Transaction::_ConfidentialEntry_default_instance_._instance.get_mutable()->range_proof_ = const_cast< ::Catalyst::Protocol::Transaction::RangeProof*>(
      ::Catalyst::Protocol::Transaction::RangeProof::internal_default_instance());
}
class ConfidentialEntry::_Internal {
 public:
  static const ::Catalyst::Protocol::Transaction::RangeProof& range_proof(const ConfidentialEntry* msg);
};

const ::Catalyst::Protocol::Transaction::RangeProof&
ConfidentialEntry::_Internal::range_proof(const ConfidentialEntry* msg) {
  return *msg->range_proof_;
}
ConfidentialEntry::ConfidentialEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Transaction.ConfidentialEntry)
}
ConfidentialEntry::ConfidentialEntry(const ConfidentialEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  receiver_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_public_key().empty()) {
    receiver_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_public_key_);
  }
  sender_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_public_key().empty()) {
    sender_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_public_key_);
  }
  pedersen_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pedersen_commitment().empty()) {
    pedersen_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pedersen_commitment_);
  }
  transaction_fees_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_fees().empty()) {
    transaction_fees_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_fees_);
  }
  if (from._internal_has_range_proof()) {
    range_proof_ = new ::Catalyst::Protocol::Transaction::RangeProof(*from.range_proof_);
  } else {
    range_proof_ = nullptr;
  }
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Transaction.ConfidentialEntry)
}

void ConfidentialEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfidentialEntry_Transaction_2eproto.base);
  receiver_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pedersen_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_fees_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_proof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&range_proof_)) + sizeof(nonce_));
}

ConfidentialEntry::~ConfidentialEntry() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Transaction.ConfidentialEntry)
  SharedDtor();
}

void ConfidentialEntry::SharedDtor() {
  receiver_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pedersen_commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_fees_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_proof_;
}

void ConfidentialEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfidentialEntry& ConfidentialEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfidentialEntry_Transaction_2eproto.base);
  return *internal_default_instance();
}


void ConfidentialEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pedersen_commitment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_fees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && range_proof_ != nullptr) {
    delete range_proof_;
  }
  range_proof_ = nullptr;
  nonce_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ConfidentialEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes receiver_public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_receiver_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sender_public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sender_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pedersen_commitment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pedersen_commitment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Transaction.RangeProof range_proof = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_proof(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transaction_fees = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_transaction_fees();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfidentialEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes receiver_public_key = 1;
  if (this->receiver_public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_receiver_public_key(), target);
  }

  // bytes sender_public_key = 2;
  if (this->sender_public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sender_public_key(), target);
  }

  // bytes pedersen_commitment = 3;
  if (this->pedersen_commitment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pedersen_commitment(), target);
  }

  // .Catalyst.Protocol.Transaction.RangeProof range_proof = 4;
  if (this->has_range_proof()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::range_proof(this), target, stream);
  }

  // bytes transaction_fees = 5;
  if (this->transaction_fees().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_transaction_fees(), target);
  }

  // uint64 nonce = 6;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Transaction.ConfidentialEntry)
  return target;
}

size_t ConfidentialEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes receiver_public_key = 1;
  if (this->receiver_public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_public_key());
  }

  // bytes sender_public_key = 2;
  if (this->sender_public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_public_key());
  }

  // bytes pedersen_commitment = 3;
  if (this->pedersen_commitment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pedersen_commitment());
  }

  // bytes transaction_fees = 5;
  if (this->transaction_fees().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_fees());
  }

  // .Catalyst.Protocol.Transaction.RangeProof range_proof = 4;
  if (this->has_range_proof()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_proof_);
  }

  // uint64 nonce = 6;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfidentialEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfidentialEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfidentialEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Transaction.ConfidentialEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Transaction.ConfidentialEntry)
    MergeFrom(*source);
  }
}

void ConfidentialEntry::MergeFrom(const ConfidentialEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiver_public_key().size() > 0) {

    receiver_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_public_key_);
  }
  if (from.sender_public_key().size() > 0) {

    sender_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_public_key_);
  }
  if (from.pedersen_commitment().size() > 0) {

    pedersen_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pedersen_commitment_);
  }
  if (from.transaction_fees().size() > 0) {

    transaction_fees_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_fees_);
  }
  if (from.has_range_proof()) {
    _internal_mutable_range_proof()->::Catalyst::Protocol::Transaction::RangeProof::MergeFrom(from._internal_range_proof());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void ConfidentialEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfidentialEntry::CopyFrom(const ConfidentialEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Transaction.ConfidentialEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfidentialEntry::IsInitialized() const {
  return true;
}

void ConfidentialEntry::InternalSwap(ConfidentialEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  receiver_public_key_.Swap(&other->receiver_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_public_key_.Swap(&other->sender_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pedersen_commitment_.Swap(&other->pedersen_commitment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_fees_.Swap(&other->transaction_fees_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(range_proof_, other->range_proof_);
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfidentialEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoinbaseEntry::InitAsDefaultInstance() {
}
class CoinbaseEntry::_Internal {
 public:
};

CoinbaseEntry::CoinbaseEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Transaction.CoinbaseEntry)
}
CoinbaseEntry::CoinbaseEntry(const CoinbaseEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  receiver_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver_public_key().empty()) {
    receiver_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_public_key_);
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Transaction.CoinbaseEntry)
}

void CoinbaseEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoinbaseEntry_Transaction_2eproto.base);
  receiver_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CoinbaseEntry::~CoinbaseEntry() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Transaction.CoinbaseEntry)
  SharedDtor();
}

void CoinbaseEntry::SharedDtor() {
  receiver_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CoinbaseEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoinbaseEntry& CoinbaseEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoinbaseEntry_Transaction_2eproto.base);
  return *internal_default_instance();
}


void CoinbaseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CoinbaseEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes receiver_public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_receiver_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoinbaseEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes receiver_public_key = 1;
  if (this->receiver_public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_receiver_public_key(), target);
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Transaction.CoinbaseEntry)
  return target;
}

size_t CoinbaseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes receiver_public_key = 1;
  if (this->receiver_public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_receiver_public_key());
  }

  // bytes amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoinbaseEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CoinbaseEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoinbaseEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Transaction.CoinbaseEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Transaction.CoinbaseEntry)
    MergeFrom(*source);
  }
}

void CoinbaseEntry::MergeFrom(const CoinbaseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiver_public_key().size() > 0) {

    receiver_public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_public_key_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
}

void CoinbaseEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinbaseEntry::CopyFrom(const CoinbaseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Transaction.CoinbaseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinbaseEntry::IsInitialized() const {
  return true;
}

void CoinbaseEntry::InternalSwap(CoinbaseEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  receiver_public_key_.Swap(&other->receiver_public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  amount_.Swap(&other->amount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CoinbaseEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RangeProof::InitAsDefaultInstance() {
}
class RangeProof::_Internal {
 public:
};

RangeProof::RangeProof()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Transaction.RangeProof)
}
RangeProof::RangeProof(const RangeProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_commitment_(from.value_commitment_),
      aggregated_vector_polynomial_l_(from.aggregated_vector_polynomial_l_),
      aggregated_vector_polynomial_r_(from.aggregated_vector_polynomial_r_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bit_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bit_commitment().empty()) {
    bit_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bit_commitment_);
  }
  per_bit_blinding_factor_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_per_bit_blinding_factor_commitment().empty()) {
    per_bit_blinding_factor_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.per_bit_blinding_factor_commitment_);
  }
  poly_commitment_t1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_poly_commitment_t1().empty()) {
    poly_commitment_t1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.poly_commitment_t1_);
  }
  poly_commitment_t2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_poly_commitment_t2().empty()) {
    poly_commitment_t2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.poly_commitment_t2_);
  }
  proof_of_share_tau_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proof_of_share_tau().empty()) {
    proof_of_share_tau_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proof_of_share_tau_);
  }
  proof_of_share_mu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proof_of_share_mu().empty()) {
    proof_of_share_mu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proof_of_share_mu_);
  }
  a_prime_0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_a_prime_0().empty()) {
    a_prime_0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.a_prime_0_);
  }
  b_prime_0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_b_prime_0().empty()) {
    b_prime_0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.b_prime_0_);
  }
  t_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_t().empty()) {
    t_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.t_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Transaction.RangeProof)
}

void RangeProof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RangeProof_Transaction_2eproto.base);
  bit_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  per_bit_blinding_factor_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proof_of_share_tau_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proof_of_share_mu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_prime_0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_prime_0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  t_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RangeProof::~RangeProof() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Transaction.RangeProof)
  SharedDtor();
}

void RangeProof::SharedDtor() {
  bit_commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  per_bit_blinding_factor_commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proof_of_share_tau_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proof_of_share_mu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_prime_0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_prime_0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  t_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RangeProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeProof& RangeProof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RangeProof_Transaction_2eproto.base);
  return *internal_default_instance();
}


void RangeProof::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Transaction.RangeProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_commitment_.Clear();
  aggregated_vector_polynomial_l_.Clear();
  aggregated_vector_polynomial_r_.Clear();
  bit_commitment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  per_bit_blinding_factor_commitment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poly_commitment_t2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proof_of_share_tau_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proof_of_share_mu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_prime_0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  b_prime_0_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  t_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RangeProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes value_commitment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value_commitment();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes bit_commitment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bit_commitment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes per_bit_blinding_factor_commitment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_per_bit_blinding_factor_commitment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes poly_commitment_t1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_poly_commitment_t1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes poly_commitment_t2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_poly_commitment_t2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes proof_of_share_tau = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_proof_of_share_tau();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes proof_of_share_mu = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_proof_of_share_mu();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes aggregated_vector_polynomial_l = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aggregated_vector_polynomial_l();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes aggregated_vector_polynomial_r = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aggregated_vector_polynomial_r();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes a_prime_0 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_a_prime_0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes b_prime_0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_b_prime_0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes t = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_t();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Transaction.RangeProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes value_commitment = 1;
  for (int i = 0, n = this->_internal_value_commitment_size(); i < n; i++) {
    const auto& s = this->_internal_value_commitment(i);
    target = stream->WriteBytes(1, s, target);
  }

  // bytes bit_commitment = 2;
  if (this->bit_commitment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bit_commitment(), target);
  }

  // bytes per_bit_blinding_factor_commitment = 3;
  if (this->per_bit_blinding_factor_commitment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_per_bit_blinding_factor_commitment(), target);
  }

  // bytes poly_commitment_t1 = 4;
  if (this->poly_commitment_t1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_poly_commitment_t1(), target);
  }

  // bytes poly_commitment_t2 = 5;
  if (this->poly_commitment_t2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_poly_commitment_t2(), target);
  }

  // bytes proof_of_share_tau = 6;
  if (this->proof_of_share_tau().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_proof_of_share_tau(), target);
  }

  // bytes proof_of_share_mu = 7;
  if (this->proof_of_share_mu().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_proof_of_share_mu(), target);
  }

  // repeated bytes aggregated_vector_polynomial_l = 8;
  for (int i = 0, n = this->_internal_aggregated_vector_polynomial_l_size(); i < n; i++) {
    const auto& s = this->_internal_aggregated_vector_polynomial_l(i);
    target = stream->WriteBytes(8, s, target);
  }

  // repeated bytes aggregated_vector_polynomial_r = 9;
  for (int i = 0, n = this->_internal_aggregated_vector_polynomial_r_size(); i < n; i++) {
    const auto& s = this->_internal_aggregated_vector_polynomial_r(i);
    target = stream->WriteBytes(9, s, target);
  }

  // bytes a_prime_0 = 10;
  if (this->a_prime_0().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_a_prime_0(), target);
  }

  // bytes b_prime_0 = 11;
  if (this->b_prime_0().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_b_prime_0(), target);
  }

  // bytes t = 12;
  if (this->t().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Transaction.RangeProof)
  return target;
}

size_t RangeProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Transaction.RangeProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes value_commitment = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_commitment_.size());
  for (int i = 0, n = value_commitment_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      value_commitment_.Get(i));
  }

  // repeated bytes aggregated_vector_polynomial_l = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(aggregated_vector_polynomial_l_.size());
  for (int i = 0, n = aggregated_vector_polynomial_l_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      aggregated_vector_polynomial_l_.Get(i));
  }

  // repeated bytes aggregated_vector_polynomial_r = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(aggregated_vector_polynomial_r_.size());
  for (int i = 0, n = aggregated_vector_polynomial_r_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      aggregated_vector_polynomial_r_.Get(i));
  }

  // bytes bit_commitment = 2;
  if (this->bit_commitment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bit_commitment());
  }

  // bytes per_bit_blinding_factor_commitment = 3;
  if (this->per_bit_blinding_factor_commitment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_per_bit_blinding_factor_commitment());
  }

  // bytes poly_commitment_t1 = 4;
  if (this->poly_commitment_t1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_poly_commitment_t1());
  }

  // bytes poly_commitment_t2 = 5;
  if (this->poly_commitment_t2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_poly_commitment_t2());
  }

  // bytes proof_of_share_tau = 6;
  if (this->proof_of_share_tau().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proof_of_share_tau());
  }

  // bytes proof_of_share_mu = 7;
  if (this->proof_of_share_mu().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proof_of_share_mu());
  }

  // bytes a_prime_0 = 10;
  if (this->a_prime_0().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_a_prime_0());
  }

  // bytes b_prime_0 = 11;
  if (this->b_prime_0().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_b_prime_0());
  }

  // bytes t = 12;
  if (this->t().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_t());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Transaction.RangeProof)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Transaction.RangeProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Transaction.RangeProof)
    MergeFrom(*source);
  }
}

void RangeProof::MergeFrom(const RangeProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Transaction.RangeProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_commitment_.MergeFrom(from.value_commitment_);
  aggregated_vector_polynomial_l_.MergeFrom(from.aggregated_vector_polynomial_l_);
  aggregated_vector_polynomial_r_.MergeFrom(from.aggregated_vector_polynomial_r_);
  if (from.bit_commitment().size() > 0) {

    bit_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bit_commitment_);
  }
  if (from.per_bit_blinding_factor_commitment().size() > 0) {

    per_bit_blinding_factor_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.per_bit_blinding_factor_commitment_);
  }
  if (from.poly_commitment_t1().size() > 0) {

    poly_commitment_t1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.poly_commitment_t1_);
  }
  if (from.poly_commitment_t2().size() > 0) {

    poly_commitment_t2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.poly_commitment_t2_);
  }
  if (from.proof_of_share_tau().size() > 0) {

    proof_of_share_tau_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proof_of_share_tau_);
  }
  if (from.proof_of_share_mu().size() > 0) {

    proof_of_share_mu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proof_of_share_mu_);
  }
  if (from.a_prime_0().size() > 0) {

    a_prime_0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.a_prime_0_);
  }
  if (from.b_prime_0().size() > 0) {

    b_prime_0_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.b_prime_0_);
  }
  if (from.t().size() > 0) {

    t_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.t_);
  }
}

void RangeProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Transaction.RangeProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeProof::CopyFrom(const RangeProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Transaction.RangeProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeProof::IsInitialized() const {
  return true;
}

void RangeProof::InternalSwap(RangeProof* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_commitment_.InternalSwap(&other->value_commitment_);
  aggregated_vector_polynomial_l_.InternalSwap(&other->aggregated_vector_polynomial_l_);
  aggregated_vector_polynomial_r_.InternalSwap(&other->aggregated_vector_polynomial_r_);
  bit_commitment_.Swap(&other->bit_commitment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  per_bit_blinding_factor_commitment_.Swap(&other->per_bit_blinding_factor_commitment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  poly_commitment_t1_.Swap(&other->poly_commitment_t1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  poly_commitment_t2_.Swap(&other->poly_commitment_t2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proof_of_share_tau_.Swap(&other->proof_of_share_tau_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proof_of_share_mu_.Swap(&other->proof_of_share_mu_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  a_prime_0_.Swap(&other->a_prime_0_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  b_prime_0_.Swap(&other->b_prime_0_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  t_.Swap(&other->t_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeProof::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Transaction
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Transaction::PublicEntry* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Transaction::PublicEntry >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Transaction::PublicEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Transaction::ConfidentialEntry* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Transaction::ConfidentialEntry >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Transaction::ConfidentialEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Transaction::CoinbaseEntry* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Transaction::CoinbaseEntry >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Transaction::CoinbaseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Transaction::RangeProof* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Transaction::RangeProof >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Transaction::RangeProof >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
