// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DfsMarketplace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DfsMarketplace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DfsMarketplace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Peer.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DfsMarketplace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DfsMarketplace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DfsMarketplace_2eproto;
namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {
class BlockChallengeBroadcast;
class BlockChallengeBroadcastDefaultTypeInternal;
extern BlockChallengeBroadcastDefaultTypeInternal _BlockChallengeBroadcast_default_instance_;
class BlockChallengeRequest;
class BlockChallengeRequestDefaultTypeInternal;
extern BlockChallengeRequestDefaultTypeInternal _BlockChallengeRequest_default_instance_;
class BlockChallengeResponse;
class BlockChallengeResponseDefaultTypeInternal;
extern BlockChallengeResponseDefaultTypeInternal _BlockChallengeResponse_default_instance_;
}  // namespace DfsMarketplace
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast* Arena::CreateMaybeMessage<::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast>(Arena*);
template<> ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest>(Arena*);
template<> ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {

// ===================================================================

class BlockChallengeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest) */ {
 public:
  BlockChallengeRequest();
  virtual ~BlockChallengeRequest();

  BlockChallengeRequest(const BlockChallengeRequest& from);
  BlockChallengeRequest(BlockChallengeRequest&& from) noexcept
    : BlockChallengeRequest() {
    *this = ::std::move(from);
  }

  inline BlockChallengeRequest& operator=(const BlockChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockChallengeRequest& operator=(BlockChallengeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockChallengeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockChallengeRequest* internal_default_instance() {
    return reinterpret_cast<const BlockChallengeRequest*>(
               &_BlockChallengeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockChallengeRequest& a, BlockChallengeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockChallengeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockChallengeRequest* New() const final {
    return CreateMaybeMessage<BlockChallengeRequest>(nullptr);
  }

  BlockChallengeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockChallengeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockChallengeRequest& from);
  void MergeFrom(const BlockChallengeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockChallengeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DfsMarketplace_2eproto);
    return ::descriptor_table_DfsMarketplace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengeSaltFieldNumber = 1,
    kMainFileCidFieldNumber = 2,
    kBlockIdxRandomGuidFieldNumber = 3,
  };
  // string challenge_salt = 1;
  void clear_challenge_salt();
  const std::string& challenge_salt() const;
  void set_challenge_salt(const std::string& value);
  void set_challenge_salt(std::string&& value);
  void set_challenge_salt(const char* value);
  void set_challenge_salt(const char* value, size_t size);
  std::string* mutable_challenge_salt();
  std::string* release_challenge_salt();
  void set_allocated_challenge_salt(std::string* challenge_salt);
  private:
  const std::string& _internal_challenge_salt() const;
  void _internal_set_challenge_salt(const std::string& value);
  std::string* _internal_mutable_challenge_salt();
  public:

  // string main_file_cid = 2;
  void clear_main_file_cid();
  const std::string& main_file_cid() const;
  void set_main_file_cid(const std::string& value);
  void set_main_file_cid(std::string&& value);
  void set_main_file_cid(const char* value);
  void set_main_file_cid(const char* value, size_t size);
  std::string* mutable_main_file_cid();
  std::string* release_main_file_cid();
  void set_allocated_main_file_cid(std::string* main_file_cid);
  private:
  const std::string& _internal_main_file_cid() const;
  void _internal_set_main_file_cid(const std::string& value);
  std::string* _internal_mutable_main_file_cid();
  public:

  // bytes block_idx_random_guid = 3;
  void clear_block_idx_random_guid();
  const std::string& block_idx_random_guid() const;
  void set_block_idx_random_guid(const std::string& value);
  void set_block_idx_random_guid(std::string&& value);
  void set_block_idx_random_guid(const char* value);
  void set_block_idx_random_guid(const void* value, size_t size);
  std::string* mutable_block_idx_random_guid();
  std::string* release_block_idx_random_guid();
  void set_allocated_block_idx_random_guid(std::string* block_idx_random_guid);
  private:
  const std::string& _internal_block_idx_random_guid() const;
  void _internal_set_block_idx_random_guid(const std::string& value);
  std::string* _internal_mutable_block_idx_random_guid();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr challenge_salt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_file_cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_idx_random_guid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DfsMarketplace_2eproto;
};
// -------------------------------------------------------------------

class BlockChallengeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse) */ {
 public:
  BlockChallengeResponse();
  virtual ~BlockChallengeResponse();

  BlockChallengeResponse(const BlockChallengeResponse& from);
  BlockChallengeResponse(BlockChallengeResponse&& from) noexcept
    : BlockChallengeResponse() {
    *this = ::std::move(from);
  }

  inline BlockChallengeResponse& operator=(const BlockChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockChallengeResponse& operator=(BlockChallengeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockChallengeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const BlockChallengeResponse*>(
               &_BlockChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockChallengeResponse& a, BlockChallengeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockChallengeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockChallengeResponse* New() const final {
    return CreateMaybeMessage<BlockChallengeResponse>(nullptr);
  }

  BlockChallengeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockChallengeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockChallengeResponse& from);
  void MergeFrom(const BlockChallengeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockChallengeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DfsMarketplace_2eproto);
    return ::descriptor_table_DfsMarketplace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
    kBlockChallengeRequestHashFieldNumber = 2,
  };
  // string answer = 1;
  void clear_answer();
  const std::string& answer() const;
  void set_answer(const std::string& value);
  void set_answer(std::string&& value);
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  std::string* mutable_answer();
  std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  private:
  const std::string& _internal_answer() const;
  void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // string block_challenge_request_hash = 2;
  void clear_block_challenge_request_hash();
  const std::string& block_challenge_request_hash() const;
  void set_block_challenge_request_hash(const std::string& value);
  void set_block_challenge_request_hash(std::string&& value);
  void set_block_challenge_request_hash(const char* value);
  void set_block_challenge_request_hash(const char* value, size_t size);
  std::string* mutable_block_challenge_request_hash();
  std::string* release_block_challenge_request_hash();
  void set_allocated_block_challenge_request_hash(std::string* block_challenge_request_hash);
  private:
  const std::string& _internal_block_challenge_request_hash() const;
  void _internal_set_block_challenge_request_hash(const std::string& value);
  std::string* _internal_mutable_block_challenge_request_hash();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_challenge_request_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DfsMarketplace_2eproto;
};
// -------------------------------------------------------------------

class BlockChallengeBroadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast) */ {
 public:
  BlockChallengeBroadcast();
  virtual ~BlockChallengeBroadcast();

  BlockChallengeBroadcast(const BlockChallengeBroadcast& from);
  BlockChallengeBroadcast(BlockChallengeBroadcast&& from) noexcept
    : BlockChallengeBroadcast() {
    *this = ::std::move(from);
  }

  inline BlockChallengeBroadcast& operator=(const BlockChallengeBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockChallengeBroadcast& operator=(BlockChallengeBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockChallengeBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockChallengeBroadcast* internal_default_instance() {
    return reinterpret_cast<const BlockChallengeBroadcast*>(
               &_BlockChallengeBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockChallengeBroadcast& a, BlockChallengeBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockChallengeBroadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockChallengeBroadcast* New() const final {
    return CreateMaybeMessage<BlockChallengeBroadcast>(nullptr);
  }

  BlockChallengeBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockChallengeBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockChallengeBroadcast& from);
  void MergeFrom(const BlockChallengeBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockChallengeBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DfsMarketplace_2eproto);
    return ::descriptor_table_DfsMarketplace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 2,
    kOriginalChallengeFieldNumber = 1,
    kChallengedPeerFieldNumber = 3,
    kChallengedByFieldNumber = 4,
  };
  // string answer = 2;
  void clear_answer();
  const std::string& answer() const;
  void set_answer(const std::string& value);
  void set_answer(std::string&& value);
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  std::string* mutable_answer();
  std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  private:
  const std::string& _internal_answer() const;
  void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
  bool has_original_challenge() const;
  private:
  bool _internal_has_original_challenge() const;
  public:
  void clear_original_challenge();
  const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& original_challenge() const;
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* release_original_challenge();
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* mutable_original_challenge();
  void set_allocated_original_challenge(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* original_challenge);
  private:
  const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& _internal_original_challenge() const;
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* _internal_mutable_original_challenge();
  public:

  // .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
  bool has_challenged_peer() const;
  private:
  bool _internal_has_challenged_peer() const;
  public:
  void clear_challenged_peer();
  const ::Catalyst::Protocol::Peer::PeerId& challenged_peer() const;
  ::Catalyst::Protocol::Peer::PeerId* release_challenged_peer();
  ::Catalyst::Protocol::Peer::PeerId* mutable_challenged_peer();
  void set_allocated_challenged_peer(::Catalyst::Protocol::Peer::PeerId* challenged_peer);
  private:
  const ::Catalyst::Protocol::Peer::PeerId& _internal_challenged_peer() const;
  ::Catalyst::Protocol::Peer::PeerId* _internal_mutable_challenged_peer();
  public:

  // .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
  bool has_challenged_by() const;
  private:
  bool _internal_has_challenged_by() const;
  public:
  void clear_challenged_by();
  const ::Catalyst::Protocol::Peer::PeerId& challenged_by() const;
  ::Catalyst::Protocol::Peer::PeerId* release_challenged_by();
  ::Catalyst::Protocol::Peer::PeerId* mutable_challenged_by();
  void set_allocated_challenged_by(::Catalyst::Protocol::Peer::PeerId* challenged_by);
  private:
  const ::Catalyst::Protocol::Peer::PeerId& _internal_challenged_by() const;
  ::Catalyst::Protocol::Peer::PeerId* _internal_mutable_challenged_by();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* original_challenge_;
  ::Catalyst::Protocol::Peer::PeerId* challenged_peer_;
  ::Catalyst::Protocol::Peer::PeerId* challenged_by_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DfsMarketplace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockChallengeRequest

// string challenge_salt = 1;
inline void BlockChallengeRequest::clear_challenge_salt() {
  challenge_salt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockChallengeRequest::challenge_salt() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
  return _internal_challenge_salt();
}
inline void BlockChallengeRequest::set_challenge_salt(const std::string& value) {
  _internal_set_challenge_salt(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
inline std::string* BlockChallengeRequest::mutable_challenge_salt() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
  return _internal_mutable_challenge_salt();
}
inline const std::string& BlockChallengeRequest::_internal_challenge_salt() const {
  return challenge_salt_.GetNoArena();
}
inline void BlockChallengeRequest::_internal_set_challenge_salt(const std::string& value) {
  
  challenge_salt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockChallengeRequest::set_challenge_salt(std::string&& value) {
  
  challenge_salt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
inline void BlockChallengeRequest::set_challenge_salt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  challenge_salt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
inline void BlockChallengeRequest::set_challenge_salt(const char* value, size_t size) {
  
  challenge_salt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
inline std::string* BlockChallengeRequest::_internal_mutable_challenge_salt() {
  
  return challenge_salt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockChallengeRequest::release_challenge_salt() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
  
  return challenge_salt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeRequest::set_allocated_challenge_salt(std::string* challenge_salt) {
  if (challenge_salt != nullptr) {
    
  } else {
    
  }
  challenge_salt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), challenge_salt);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}

// string main_file_cid = 2;
inline void BlockChallengeRequest::clear_main_file_cid() {
  main_file_cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockChallengeRequest::main_file_cid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
  return _internal_main_file_cid();
}
inline void BlockChallengeRequest::set_main_file_cid(const std::string& value) {
  _internal_set_main_file_cid(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
inline std::string* BlockChallengeRequest::mutable_main_file_cid() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
  return _internal_mutable_main_file_cid();
}
inline const std::string& BlockChallengeRequest::_internal_main_file_cid() const {
  return main_file_cid_.GetNoArena();
}
inline void BlockChallengeRequest::_internal_set_main_file_cid(const std::string& value) {
  
  main_file_cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockChallengeRequest::set_main_file_cid(std::string&& value) {
  
  main_file_cid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
inline void BlockChallengeRequest::set_main_file_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_file_cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
inline void BlockChallengeRequest::set_main_file_cid(const char* value, size_t size) {
  
  main_file_cid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
inline std::string* BlockChallengeRequest::_internal_mutable_main_file_cid() {
  
  return main_file_cid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockChallengeRequest::release_main_file_cid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
  
  return main_file_cid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeRequest::set_allocated_main_file_cid(std::string* main_file_cid) {
  if (main_file_cid != nullptr) {
    
  } else {
    
  }
  main_file_cid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_file_cid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}

// bytes block_idx_random_guid = 3;
inline void BlockChallengeRequest::clear_block_idx_random_guid() {
  block_idx_random_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockChallengeRequest::block_idx_random_guid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
  return _internal_block_idx_random_guid();
}
inline void BlockChallengeRequest::set_block_idx_random_guid(const std::string& value) {
  _internal_set_block_idx_random_guid(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
inline std::string* BlockChallengeRequest::mutable_block_idx_random_guid() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
  return _internal_mutable_block_idx_random_guid();
}
inline const std::string& BlockChallengeRequest::_internal_block_idx_random_guid() const {
  return block_idx_random_guid_.GetNoArena();
}
inline void BlockChallengeRequest::_internal_set_block_idx_random_guid(const std::string& value) {
  
  block_idx_random_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockChallengeRequest::set_block_idx_random_guid(std::string&& value) {
  
  block_idx_random_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
inline void BlockChallengeRequest::set_block_idx_random_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_idx_random_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
inline void BlockChallengeRequest::set_block_idx_random_guid(const void* value, size_t size) {
  
  block_idx_random_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
inline std::string* BlockChallengeRequest::_internal_mutable_block_idx_random_guid() {
  
  return block_idx_random_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockChallengeRequest::release_block_idx_random_guid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
  
  return block_idx_random_guid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeRequest::set_allocated_block_idx_random_guid(std::string* block_idx_random_guid) {
  if (block_idx_random_guid != nullptr) {
    
  } else {
    
  }
  block_idx_random_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_idx_random_guid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}

// -------------------------------------------------------------------

// BlockChallengeResponse

// string answer = 1;
inline void BlockChallengeResponse::clear_answer() {
  answer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockChallengeResponse::answer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  return _internal_answer();
}
inline void BlockChallengeResponse::set_answer(const std::string& value) {
  _internal_set_answer(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
inline std::string* BlockChallengeResponse::mutable_answer() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  return _internal_mutable_answer();
}
inline const std::string& BlockChallengeResponse::_internal_answer() const {
  return answer_.GetNoArena();
}
inline void BlockChallengeResponse::_internal_set_answer(const std::string& value) {
  
  answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockChallengeResponse::set_answer(std::string&& value) {
  
  answer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
inline void BlockChallengeResponse::set_answer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
inline void BlockChallengeResponse::set_answer(const char* value, size_t size) {
  
  answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
inline std::string* BlockChallengeResponse::_internal_mutable_answer() {
  
  return answer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockChallengeResponse::release_answer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  
  return answer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeResponse::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}

// string block_challenge_request_hash = 2;
inline void BlockChallengeResponse::clear_block_challenge_request_hash() {
  block_challenge_request_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockChallengeResponse::block_challenge_request_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
  return _internal_block_challenge_request_hash();
}
inline void BlockChallengeResponse::set_block_challenge_request_hash(const std::string& value) {
  _internal_set_block_challenge_request_hash(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
inline std::string* BlockChallengeResponse::mutable_block_challenge_request_hash() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
  return _internal_mutable_block_challenge_request_hash();
}
inline const std::string& BlockChallengeResponse::_internal_block_challenge_request_hash() const {
  return block_challenge_request_hash_.GetNoArena();
}
inline void BlockChallengeResponse::_internal_set_block_challenge_request_hash(const std::string& value) {
  
  block_challenge_request_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockChallengeResponse::set_block_challenge_request_hash(std::string&& value) {
  
  block_challenge_request_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
inline void BlockChallengeResponse::set_block_challenge_request_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_challenge_request_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
inline void BlockChallengeResponse::set_block_challenge_request_hash(const char* value, size_t size) {
  
  block_challenge_request_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
inline std::string* BlockChallengeResponse::_internal_mutable_block_challenge_request_hash() {
  
  return block_challenge_request_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockChallengeResponse::release_block_challenge_request_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
  
  return block_challenge_request_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeResponse::set_allocated_block_challenge_request_hash(std::string* block_challenge_request_hash) {
  if (block_challenge_request_hash != nullptr) {
    
  } else {
    
  }
  block_challenge_request_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_challenge_request_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}

// -------------------------------------------------------------------

// BlockChallengeBroadcast

// .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
inline bool BlockChallengeBroadcast::_internal_has_original_challenge() const {
  return this != internal_default_instance() && original_challenge_ != nullptr;
}
inline bool BlockChallengeBroadcast::has_original_challenge() const {
  return _internal_has_original_challenge();
}
inline void BlockChallengeBroadcast::clear_original_challenge() {
  if (GetArenaNoVirtual() == nullptr && original_challenge_ != nullptr) {
    delete original_challenge_;
  }
  original_challenge_ = nullptr;
}
inline const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& BlockChallengeBroadcast::_internal_original_challenge() const {
  const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* p = original_challenge_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest*>(
      &::Catalyst::Protocol::DfsMarketplace::_BlockChallengeRequest_default_instance_);
}
inline const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& BlockChallengeBroadcast::original_challenge() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
  return _internal_original_challenge();
}
inline ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* BlockChallengeBroadcast::release_original_challenge() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
  
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* temp = original_challenge_;
  original_challenge_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* BlockChallengeBroadcast::_internal_mutable_original_challenge() {
  
  if (original_challenge_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest>(GetArenaNoVirtual());
    original_challenge_ = p;
  }
  return original_challenge_;
}
inline ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* BlockChallengeBroadcast::mutable_original_challenge() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
  return _internal_mutable_original_challenge();
}
inline void BlockChallengeBroadcast::set_allocated_original_challenge(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* original_challenge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete original_challenge_;
  }
  if (original_challenge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      original_challenge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, original_challenge, submessage_arena);
    }
    
  } else {
    
  }
  original_challenge_ = original_challenge;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
}

// string answer = 2;
inline void BlockChallengeBroadcast::clear_answer() {
  answer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockChallengeBroadcast::answer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  return _internal_answer();
}
inline void BlockChallengeBroadcast::set_answer(const std::string& value) {
  _internal_set_answer(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
inline std::string* BlockChallengeBroadcast::mutable_answer() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  return _internal_mutable_answer();
}
inline const std::string& BlockChallengeBroadcast::_internal_answer() const {
  return answer_.GetNoArena();
}
inline void BlockChallengeBroadcast::_internal_set_answer(const std::string& value) {
  
  answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockChallengeBroadcast::set_answer(std::string&& value) {
  
  answer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
inline void BlockChallengeBroadcast::set_answer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
inline void BlockChallengeBroadcast::set_answer(const char* value, size_t size) {
  
  answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
inline std::string* BlockChallengeBroadcast::_internal_mutable_answer() {
  
  return answer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockChallengeBroadcast::release_answer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  
  return answer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeBroadcast::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}

// .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
inline bool BlockChallengeBroadcast::_internal_has_challenged_peer() const {
  return this != internal_default_instance() && challenged_peer_ != nullptr;
}
inline bool BlockChallengeBroadcast::has_challenged_peer() const {
  return _internal_has_challenged_peer();
}
inline const ::Catalyst::Protocol::Peer::PeerId& BlockChallengeBroadcast::_internal_challenged_peer() const {
  const ::Catalyst::Protocol::Peer::PeerId* p = challenged_peer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Peer::PeerId*>(
      &::Catalyst::Protocol::Peer::_PeerId_default_instance_);
}
inline const ::Catalyst::Protocol::Peer::PeerId& BlockChallengeBroadcast::challenged_peer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
  return _internal_challenged_peer();
}
inline ::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::release_challenged_peer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = challenged_peer_;
  challenged_peer_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::_internal_mutable_challenged_peer() {
  
  if (challenged_peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Peer::PeerId>(GetArenaNoVirtual());
    challenged_peer_ = p;
  }
  return challenged_peer_;
}
inline ::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::mutable_challenged_peer() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
  return _internal_mutable_challenged_peer();
}
inline void BlockChallengeBroadcast::set_allocated_challenged_peer(::Catalyst::Protocol::Peer::PeerId* challenged_peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenged_peer_);
  }
  if (challenged_peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      challenged_peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenged_peer, submessage_arena);
    }
    
  } else {
    
  }
  challenged_peer_ = challenged_peer;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
}

// .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
inline bool BlockChallengeBroadcast::_internal_has_challenged_by() const {
  return this != internal_default_instance() && challenged_by_ != nullptr;
}
inline bool BlockChallengeBroadcast::has_challenged_by() const {
  return _internal_has_challenged_by();
}
inline const ::Catalyst::Protocol::Peer::PeerId& BlockChallengeBroadcast::_internal_challenged_by() const {
  const ::Catalyst::Protocol::Peer::PeerId* p = challenged_by_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Peer::PeerId*>(
      &::Catalyst::Protocol::Peer::_PeerId_default_instance_);
}
inline const ::Catalyst::Protocol::Peer::PeerId& BlockChallengeBroadcast::challenged_by() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
  return _internal_challenged_by();
}
inline ::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::release_challenged_by() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = challenged_by_;
  challenged_by_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::_internal_mutable_challenged_by() {
  
  if (challenged_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Peer::PeerId>(GetArenaNoVirtual());
    challenged_by_ = p;
  }
  return challenged_by_;
}
inline ::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::mutable_challenged_by() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
  return _internal_mutable_challenged_by();
}
inline void BlockChallengeBroadcast::set_allocated_challenged_by(::Catalyst::Protocol::Peer::PeerId* challenged_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenged_by_);
  }
  if (challenged_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      challenged_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenged_by, submessage_arena);
    }
    
  } else {
    
  }
  challenged_by_ = challenged_by;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DfsMarketplace
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DfsMarketplace_2eproto
