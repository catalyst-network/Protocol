// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DfsMarketplace.proto

#ifndef PROTOBUF_DfsMarketplace_2eproto__INCLUDED
#define PROTOBUF_DfsMarketplace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Peer.pb.h"
// @@protoc_insertion_point(includes)
namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {
class BlockChallengeBroadcast;
class BlockChallengeBroadcastDefaultTypeInternal;
extern BlockChallengeBroadcastDefaultTypeInternal _BlockChallengeBroadcast_default_instance_;
class BlockChallengeRequest;
class BlockChallengeRequestDefaultTypeInternal;
extern BlockChallengeRequestDefaultTypeInternal _BlockChallengeRequest_default_instance_;
class BlockChallengeResponse;
class BlockChallengeResponseDefaultTypeInternal;
extern BlockChallengeResponseDefaultTypeInternal _BlockChallengeResponse_default_instance_;
}  // namespace DfsMarketplace
namespace Peer {
class PeerId;
class PeerIdDefaultTypeInternal;
extern PeerIdDefaultTypeInternal _PeerId_default_instance_;
class PeerInfo;
class PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
}  // namespace Peer
}  // namespace Protocol
}  // namespace Catalyst

namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {

namespace protobuf_DfsMarketplace_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_DfsMarketplace_2eproto

// ===================================================================

class BlockChallengeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest) */ {
 public:
  BlockChallengeRequest();
  virtual ~BlockChallengeRequest();

  BlockChallengeRequest(const BlockChallengeRequest& from);

  inline BlockChallengeRequest& operator=(const BlockChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockChallengeRequest& default_instance();

  static inline const BlockChallengeRequest* internal_default_instance() {
    return reinterpret_cast<const BlockChallengeRequest*>(
               &_BlockChallengeRequest_default_instance_);
  }

  void Swap(BlockChallengeRequest* other);

  // implements Message ----------------------------------------------

  inline BlockChallengeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockChallengeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockChallengeRequest& from);
  void MergeFrom(const BlockChallengeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockChallengeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string challenge_salt = 1;
  void clear_challenge_salt();
  static const int kChallengeSaltFieldNumber = 1;
  const ::std::string& challenge_salt() const;
  void set_challenge_salt(const ::std::string& value);
  #if LANG_CXX11
  void set_challenge_salt(::std::string&& value);
  #endif
  void set_challenge_salt(const char* value);
  void set_challenge_salt(const char* value, size_t size);
  ::std::string* mutable_challenge_salt();
  ::std::string* release_challenge_salt();
  void set_allocated_challenge_salt(::std::string* challenge_salt);

  // string main_file_cid = 2;
  void clear_main_file_cid();
  static const int kMainFileCidFieldNumber = 2;
  const ::std::string& main_file_cid() const;
  void set_main_file_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_main_file_cid(::std::string&& value);
  #endif
  void set_main_file_cid(const char* value);
  void set_main_file_cid(const char* value, size_t size);
  ::std::string* mutable_main_file_cid();
  ::std::string* release_main_file_cid();
  void set_allocated_main_file_cid(::std::string* main_file_cid);

  // bytes block_idx_random_guid = 3;
  void clear_block_idx_random_guid();
  static const int kBlockIdxRandomGuidFieldNumber = 3;
  const ::std::string& block_idx_random_guid() const;
  void set_block_idx_random_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_block_idx_random_guid(::std::string&& value);
  #endif
  void set_block_idx_random_guid(const char* value);
  void set_block_idx_random_guid(const void* value, size_t size);
  ::std::string* mutable_block_idx_random_guid();
  ::std::string* release_block_idx_random_guid();
  void set_allocated_block_idx_random_guid(::std::string* block_idx_random_guid);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr challenge_salt_;
  ::google::protobuf::internal::ArenaStringPtr main_file_cid_;
  ::google::protobuf::internal::ArenaStringPtr block_idx_random_guid_;
  mutable int _cached_size_;
  friend struct  protobuf_DfsMarketplace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockChallengeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse) */ {
 public:
  BlockChallengeResponse();
  virtual ~BlockChallengeResponse();

  BlockChallengeResponse(const BlockChallengeResponse& from);

  inline BlockChallengeResponse& operator=(const BlockChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockChallengeResponse& default_instance();

  static inline const BlockChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const BlockChallengeResponse*>(
               &_BlockChallengeResponse_default_instance_);
  }

  void Swap(BlockChallengeResponse* other);

  // implements Message ----------------------------------------------

  inline BlockChallengeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockChallengeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockChallengeResponse& from);
  void MergeFrom(const BlockChallengeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockChallengeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string answer = 1;
  void clear_answer();
  static const int kAnswerFieldNumber = 1;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // string block_challenge_request_hash = 2;
  void clear_block_challenge_request_hash();
  static const int kBlockChallengeRequestHashFieldNumber = 2;
  const ::std::string& block_challenge_request_hash() const;
  void set_block_challenge_request_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_block_challenge_request_hash(::std::string&& value);
  #endif
  void set_block_challenge_request_hash(const char* value);
  void set_block_challenge_request_hash(const char* value, size_t size);
  ::std::string* mutable_block_challenge_request_hash();
  ::std::string* release_block_challenge_request_hash();
  void set_allocated_block_challenge_request_hash(::std::string* block_challenge_request_hash);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::google::protobuf::internal::ArenaStringPtr block_challenge_request_hash_;
  mutable int _cached_size_;
  friend struct  protobuf_DfsMarketplace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockChallengeBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast) */ {
 public:
  BlockChallengeBroadcast();
  virtual ~BlockChallengeBroadcast();

  BlockChallengeBroadcast(const BlockChallengeBroadcast& from);

  inline BlockChallengeBroadcast& operator=(const BlockChallengeBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockChallengeBroadcast& default_instance();

  static inline const BlockChallengeBroadcast* internal_default_instance() {
    return reinterpret_cast<const BlockChallengeBroadcast*>(
               &_BlockChallengeBroadcast_default_instance_);
  }

  void Swap(BlockChallengeBroadcast* other);

  // implements Message ----------------------------------------------

  inline BlockChallengeBroadcast* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockChallengeBroadcast* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockChallengeBroadcast& from);
  void MergeFrom(const BlockChallengeBroadcast& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockChallengeBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string answer = 2;
  void clear_answer();
  static const int kAnswerFieldNumber = 2;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
  bool has_original_challenge() const;
  void clear_original_challenge();
  static const int kOriginalChallengeFieldNumber = 1;
  const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& original_challenge() const;
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* mutable_original_challenge();
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* release_original_challenge();
  void set_allocated_original_challenge(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* original_challenge);

  // .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
  bool has_challenged_peer() const;
  void clear_challenged_peer();
  static const int kChallengedPeerFieldNumber = 3;
  const ::Catalyst::Protocol::Peer::PeerId& challenged_peer() const;
  ::Catalyst::Protocol::Peer::PeerId* mutable_challenged_peer();
  ::Catalyst::Protocol::Peer::PeerId* release_challenged_peer();
  void set_allocated_challenged_peer(::Catalyst::Protocol::Peer::PeerId* challenged_peer);

  // .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
  bool has_challenged_by() const;
  void clear_challenged_by();
  static const int kChallengedByFieldNumber = 4;
  const ::Catalyst::Protocol::Peer::PeerId& challenged_by() const;
  ::Catalyst::Protocol::Peer::PeerId* mutable_challenged_by();
  ::Catalyst::Protocol::Peer::PeerId* release_challenged_by();
  void set_allocated_challenged_by(::Catalyst::Protocol::Peer::PeerId* challenged_by);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* original_challenge_;
  ::Catalyst::Protocol::Peer::PeerId* challenged_peer_;
  ::Catalyst::Protocol::Peer::PeerId* challenged_by_;
  mutable int _cached_size_;
  friend struct  protobuf_DfsMarketplace_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockChallengeRequest

// string challenge_salt = 1;
inline void BlockChallengeRequest::clear_challenge_salt() {
  challenge_salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeRequest::challenge_salt() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
  return challenge_salt_.GetNoArena();
}
inline void BlockChallengeRequest::set_challenge_salt(const ::std::string& value) {
  
  challenge_salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
#if LANG_CXX11
inline void BlockChallengeRequest::set_challenge_salt(::std::string&& value) {
  
  challenge_salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
#endif
inline void BlockChallengeRequest::set_challenge_salt(const char* value) {
  
  challenge_salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
inline void BlockChallengeRequest::set_challenge_salt(const char* value, size_t size) {
  
  challenge_salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}
inline ::std::string* BlockChallengeRequest::mutable_challenge_salt() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
  return challenge_salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeRequest::release_challenge_salt() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
  
  return challenge_salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeRequest::set_allocated_challenge_salt(::std::string* challenge_salt) {
  if (challenge_salt != NULL) {
    
  } else {
    
  }
  challenge_salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), challenge_salt);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt)
}

// string main_file_cid = 2;
inline void BlockChallengeRequest::clear_main_file_cid() {
  main_file_cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeRequest::main_file_cid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
  return main_file_cid_.GetNoArena();
}
inline void BlockChallengeRequest::set_main_file_cid(const ::std::string& value) {
  
  main_file_cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
#if LANG_CXX11
inline void BlockChallengeRequest::set_main_file_cid(::std::string&& value) {
  
  main_file_cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
#endif
inline void BlockChallengeRequest::set_main_file_cid(const char* value) {
  
  main_file_cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
inline void BlockChallengeRequest::set_main_file_cid(const char* value, size_t size) {
  
  main_file_cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}
inline ::std::string* BlockChallengeRequest::mutable_main_file_cid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
  return main_file_cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeRequest::release_main_file_cid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
  
  return main_file_cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeRequest::set_allocated_main_file_cid(::std::string* main_file_cid) {
  if (main_file_cid != NULL) {
    
  } else {
    
  }
  main_file_cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_file_cid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid)
}

// bytes block_idx_random_guid = 3;
inline void BlockChallengeRequest::clear_block_idx_random_guid() {
  block_idx_random_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeRequest::block_idx_random_guid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
  return block_idx_random_guid_.GetNoArena();
}
inline void BlockChallengeRequest::set_block_idx_random_guid(const ::std::string& value) {
  
  block_idx_random_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
#if LANG_CXX11
inline void BlockChallengeRequest::set_block_idx_random_guid(::std::string&& value) {
  
  block_idx_random_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
#endif
inline void BlockChallengeRequest::set_block_idx_random_guid(const char* value) {
  
  block_idx_random_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
inline void BlockChallengeRequest::set_block_idx_random_guid(const void* value, size_t size) {
  
  block_idx_random_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}
inline ::std::string* BlockChallengeRequest::mutable_block_idx_random_guid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
  return block_idx_random_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeRequest::release_block_idx_random_guid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
  
  return block_idx_random_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeRequest::set_allocated_block_idx_random_guid(::std::string* block_idx_random_guid) {
  if (block_idx_random_guid != NULL) {
    
  } else {
    
  }
  block_idx_random_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_idx_random_guid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.block_idx_random_guid)
}

// -------------------------------------------------------------------

// BlockChallengeResponse

// string answer = 1;
inline void BlockChallengeResponse::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeResponse::answer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  return answer_.GetNoArena();
}
inline void BlockChallengeResponse::set_answer(const ::std::string& value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
#if LANG_CXX11
inline void BlockChallengeResponse::set_answer(::std::string&& value) {
  
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
#endif
inline void BlockChallengeResponse::set_answer(const char* value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
inline void BlockChallengeResponse::set_answer(const char* value, size_t size) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
inline ::std::string* BlockChallengeResponse::mutable_answer() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeResponse::release_answer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeResponse::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}

// string block_challenge_request_hash = 2;
inline void BlockChallengeResponse::clear_block_challenge_request_hash() {
  block_challenge_request_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeResponse::block_challenge_request_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
  return block_challenge_request_hash_.GetNoArena();
}
inline void BlockChallengeResponse::set_block_challenge_request_hash(const ::std::string& value) {
  
  block_challenge_request_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
#if LANG_CXX11
inline void BlockChallengeResponse::set_block_challenge_request_hash(::std::string&& value) {
  
  block_challenge_request_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
#endif
inline void BlockChallengeResponse::set_block_challenge_request_hash(const char* value) {
  
  block_challenge_request_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
inline void BlockChallengeResponse::set_block_challenge_request_hash(const char* value, size_t size) {
  
  block_challenge_request_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}
inline ::std::string* BlockChallengeResponse::mutable_block_challenge_request_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
  return block_challenge_request_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeResponse::release_block_challenge_request_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
  
  return block_challenge_request_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeResponse::set_allocated_block_challenge_request_hash(::std::string* block_challenge_request_hash) {
  if (block_challenge_request_hash != NULL) {
    
  } else {
    
  }
  block_challenge_request_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_challenge_request_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash)
}

// -------------------------------------------------------------------

// BlockChallengeBroadcast

// .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
inline bool BlockChallengeBroadcast::has_original_challenge() const {
  return this != internal_default_instance() && original_challenge_ != NULL;
}
inline void BlockChallengeBroadcast::clear_original_challenge() {
  if (GetArenaNoVirtual() == NULL && original_challenge_ != NULL) delete original_challenge_;
  original_challenge_ = NULL;
}
inline const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& BlockChallengeBroadcast::original_challenge() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
  return original_challenge_ != NULL ? *original_challenge_
                         : *::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest::internal_default_instance();
}
inline ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* BlockChallengeBroadcast::mutable_original_challenge() {
  
  if (original_challenge_ == NULL) {
    original_challenge_ = new ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
  return original_challenge_;
}
inline ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* BlockChallengeBroadcast::release_original_challenge() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
  
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* temp = original_challenge_;
  original_challenge_ = NULL;
  return temp;
}
inline void BlockChallengeBroadcast::set_allocated_original_challenge(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* original_challenge) {
  delete original_challenge_;
  original_challenge_ = original_challenge;
  if (original_challenge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.original_challenge)
}

// string answer = 2;
inline void BlockChallengeBroadcast::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeBroadcast::answer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  return answer_.GetNoArena();
}
inline void BlockChallengeBroadcast::set_answer(const ::std::string& value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
#if LANG_CXX11
inline void BlockChallengeBroadcast::set_answer(::std::string&& value) {
  
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
#endif
inline void BlockChallengeBroadcast::set_answer(const char* value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
inline void BlockChallengeBroadcast::set_answer(const char* value, size_t size) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
inline ::std::string* BlockChallengeBroadcast::mutable_answer() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeBroadcast::release_answer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeBroadcast::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}

// .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
inline bool BlockChallengeBroadcast::has_challenged_peer() const {
  return this != internal_default_instance() && challenged_peer_ != NULL;
}
inline void BlockChallengeBroadcast::clear_challenged_peer() {
  if (GetArenaNoVirtual() == NULL && challenged_peer_ != NULL) delete challenged_peer_;
  challenged_peer_ = NULL;
}
inline const ::Catalyst::Protocol::Peer::PeerId& BlockChallengeBroadcast::challenged_peer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
  return challenged_peer_ != NULL ? *challenged_peer_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
inline ::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::mutable_challenged_peer() {
  
  if (challenged_peer_ == NULL) {
    challenged_peer_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
  return challenged_peer_;
}
inline ::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::release_challenged_peer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = challenged_peer_;
  challenged_peer_ = NULL;
  return temp;
}
inline void BlockChallengeBroadcast::set_allocated_challenged_peer(::Catalyst::Protocol::Peer::PeerId* challenged_peer) {
  delete challenged_peer_;
  challenged_peer_ = challenged_peer;
  if (challenged_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_peer)
}

// .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
inline bool BlockChallengeBroadcast::has_challenged_by() const {
  return this != internal_default_instance() && challenged_by_ != NULL;
}
inline void BlockChallengeBroadcast::clear_challenged_by() {
  if (GetArenaNoVirtual() == NULL && challenged_by_ != NULL) delete challenged_by_;
  challenged_by_ = NULL;
}
inline const ::Catalyst::Protocol::Peer::PeerId& BlockChallengeBroadcast::challenged_by() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
  return challenged_by_ != NULL ? *challenged_by_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
inline ::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::mutable_challenged_by() {
  
  if (challenged_by_ == NULL) {
    challenged_by_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
  return challenged_by_;
}
inline ::Catalyst::Protocol::Peer::PeerId* BlockChallengeBroadcast::release_challenged_by() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = challenged_by_;
  challenged_by_ = NULL;
  return temp;
}
inline void BlockChallengeBroadcast::set_allocated_challenged_by(::Catalyst::Protocol::Peer::PeerId* challenged_by) {
  delete challenged_by_;
  challenged_by_ = challenged_by;
  if (challenged_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challenged_by)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace DfsMarketplace
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DfsMarketplace_2eproto__INCLUDED
