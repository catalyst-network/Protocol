// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Deltas.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Deltas.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Catalyst {
namespace Protocol {
namespace Deltas {
class DeltaIndexDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeltaIndex> {
} _DeltaIndex_default_instance_;
class DeltaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Delta> {
} _Delta_default_instance_;

namespace protobuf_Deltas_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaIndex, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaIndex, cid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, previous_delta_dfs_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, merkle_root_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, merkle_poda_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, public_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, confidential_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, coinbase_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, state_root_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(DeltaIndex)},
  { 6, -1, sizeof(Delta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeltaIndex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Delta_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Deltas.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _DeltaIndex_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Delta_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Catalyst::Protocol::Transaction::protobuf_Transaction_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _DeltaIndex_default_instance_.DefaultConstruct();
  _Delta_default_instance_.DefaultConstruct();
  _Delta_default_instance_.get_mutable()->time_stamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014Deltas.proto\022\030Catalyst.Protocol.Deltas"
      "\032\021Transaction.proto\032\037google/protobuf/tim"
      "estamp.proto\")\n\nDeltaIndex\022\016\n\006height\030\001 \001"
      "(\r\022\013\n\003cid\030\002 \001(\014\"\362\002\n\005Delta\022\037\n\027previous_de"
      "lta_dfs_hash\030\001 \001(\014\022\023\n\013merkle_root\030\002 \001(\014\022"
      "\023\n\013merkle_poda\030\003 \001(\014\022.\n\ntime_stamp\030\004 \001(\013"
      "2\032.google.protobuf.Timestamp\022B\n\016public_e"
      "ntries\030\005 \003(\0132*.Catalyst.Protocol.Transac"
      "tion.PublicEntry\022N\n\024confidential_entries"
      "\030\006 \003(\01320.Catalyst.Protocol.Transaction.C"
      "onfidentialEntry\022F\n\020coinbase_entries\030\007 \003"
      "(\0132,.Catalyst.Protocol.Transaction.Coinb"
      "aseEntry\022\022\n\nstate_root\030\010 \001(\014B\002P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Deltas.proto", &protobuf_RegisterTypes);
  ::Catalyst::Protocol::Transaction::protobuf_Transaction_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Deltas_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeltaIndex::kHeightFieldNumber;
const int DeltaIndex::kCidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeltaIndex::DeltaIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Deltas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Deltas.DeltaIndex)
}
DeltaIndex::DeltaIndex(const DeltaIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cid().size() > 0) {
    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Deltas.DeltaIndex)
}

void DeltaIndex::SharedCtor() {
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = 0u;
  _cached_size_ = 0;
}

DeltaIndex::~DeltaIndex() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Deltas.DeltaIndex)
  SharedDtor();
}

void DeltaIndex::SharedDtor() {
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeltaIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaIndex::descriptor() {
  protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Deltas_2eproto::file_level_metadata[0].descriptor;
}

const DeltaIndex& DeltaIndex::default_instance() {
  protobuf_Deltas_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeltaIndex* DeltaIndex::New(::google::protobuf::Arena* arena) const {
  DeltaIndex* n = new DeltaIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeltaIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Deltas.DeltaIndex)
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = 0u;
}

bool DeltaIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Deltas.DeltaIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 height = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cid = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Deltas.DeltaIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Deltas.DeltaIndex)
  return false;
#undef DO_
}

void DeltaIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Deltas.DeltaIndex)
  // uint32 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->height(), output);
  }

  // bytes cid = 2;
  if (this->cid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Deltas.DeltaIndex)
}

::google::protobuf::uint8* DeltaIndex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Deltas.DeltaIndex)
  // uint32 height = 1;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->height(), target);
  }

  // bytes cid = 2;
  if (this->cid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Deltas.DeltaIndex)
  return target;
}

size_t DeltaIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Deltas.DeltaIndex)
  size_t total_size = 0;

  // bytes cid = 2;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cid());
  }

  // uint32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Deltas.DeltaIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const DeltaIndex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeltaIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Deltas.DeltaIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Deltas.DeltaIndex)
    MergeFrom(*source);
  }
}

void DeltaIndex::MergeFrom(const DeltaIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Deltas.DeltaIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cid().size() > 0) {

    cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void DeltaIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Deltas.DeltaIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaIndex::CopyFrom(const DeltaIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Deltas.DeltaIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaIndex::IsInitialized() const {
  return true;
}

void DeltaIndex::Swap(DeltaIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeltaIndex::InternalSwap(DeltaIndex* other) {
  cid_.Swap(&other->cid_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeltaIndex::GetMetadata() const {
  protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Deltas_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeltaIndex

// uint32 height = 1;
void DeltaIndex::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 DeltaIndex::height() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.DeltaIndex.height)
  return height_;
}
void DeltaIndex::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.DeltaIndex.height)
}

// bytes cid = 2;
void DeltaIndex::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeltaIndex::cid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.DeltaIndex.cid)
  return cid_.GetNoArena();
}
void DeltaIndex::set_cid(const ::std::string& value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
#if LANG_CXX11
void DeltaIndex::set_cid(::std::string&& value) {
  
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
#endif
void DeltaIndex::set_cid(const char* value) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
void DeltaIndex::set_cid(const void* value, size_t size) {
  
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}
::std::string* DeltaIndex::mutable_cid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.DeltaIndex.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeltaIndex::release_cid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.DeltaIndex.cid)
  
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeltaIndex::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    
  } else {
    
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.DeltaIndex.cid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delta::kPreviousDeltaDfsHashFieldNumber;
const int Delta::kMerkleRootFieldNumber;
const int Delta::kMerklePodaFieldNumber;
const int Delta::kTimeStampFieldNumber;
const int Delta::kPublicEntriesFieldNumber;
const int Delta::kConfidentialEntriesFieldNumber;
const int Delta::kCoinbaseEntriesFieldNumber;
const int Delta::kStateRootFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delta::Delta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Deltas_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Deltas.Delta)
}
Delta::Delta(const Delta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      public_entries_(from.public_entries_),
      confidential_entries_(from.confidential_entries_),
      coinbase_entries_(from.coinbase_entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  previous_delta_dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.previous_delta_dfs_hash().size() > 0) {
    previous_delta_dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_delta_dfs_hash_);
  }
  merkle_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.merkle_root().size() > 0) {
    merkle_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_root_);
  }
  merkle_poda_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.merkle_poda().size() > 0) {
    merkle_poda_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_poda_);
  }
  state_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state_root().size() > 0) {
    state_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_root_);
  }
  if (from.has_time_stamp()) {
    time_stamp_ = new ::google::protobuf::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Deltas.Delta)
}

void Delta::SharedCtor() {
  previous_delta_dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_poda_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = NULL;
  _cached_size_ = 0;
}

Delta::~Delta() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Deltas.Delta)
  SharedDtor();
}

void Delta::SharedDtor() {
  previous_delta_dfs_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_poda_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete time_stamp_;
  }
}

void Delta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta::descriptor() {
  protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Deltas_2eproto::file_level_metadata[1].descriptor;
}

const Delta& Delta::default_instance() {
  protobuf_Deltas_2eproto::InitDefaults();
  return *internal_default_instance();
}

Delta* Delta::New(::google::protobuf::Arena* arena) const {
  Delta* n = new Delta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Delta::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Deltas.Delta)
  public_entries_.Clear();
  confidential_entries_.Clear();
  coinbase_entries_.Clear();
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_poda_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && time_stamp_ != NULL) {
    delete time_stamp_;
  }
  time_stamp_ = NULL;
}

bool Delta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Deltas.Delta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes previous_delta_dfs_hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previous_delta_dfs_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes merkle_root = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merkle_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes merkle_poda = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merkle_poda()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp time_stamp = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_stamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Catalyst.Protocol.Transaction.PublicEntry public_entries = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_public_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Catalyst.Protocol.Transaction.ConfidentialEntry confidential_entries = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_confidential_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry coinbase_entries = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_coinbase_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // bytes state_root = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Deltas.Delta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Deltas.Delta)
  return false;
#undef DO_
}

void Delta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Deltas.Delta)
  // bytes previous_delta_dfs_hash = 1;
  if (this->previous_delta_dfs_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->previous_delta_dfs_hash(), output);
  }

  // bytes merkle_root = 2;
  if (this->merkle_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->merkle_root(), output);
  }

  // bytes merkle_poda = 3;
  if (this->merkle_poda().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->merkle_poda(), output);
  }

  // .google.protobuf.Timestamp time_stamp = 4;
  if (this->has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->time_stamp_, output);
  }

  // repeated .Catalyst.Protocol.Transaction.PublicEntry public_entries = 5;
  for (unsigned int i = 0, n = this->public_entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->public_entries(i), output);
  }

  // repeated .Catalyst.Protocol.Transaction.ConfidentialEntry confidential_entries = 6;
  for (unsigned int i = 0, n = this->confidential_entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->confidential_entries(i), output);
  }

  // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry coinbase_entries = 7;
  for (unsigned int i = 0, n = this->coinbase_entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->coinbase_entries(i), output);
  }

  // bytes state_root = 8;
  if (this->state_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->state_root(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Deltas.Delta)
}

::google::protobuf::uint8* Delta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Deltas.Delta)
  // bytes previous_delta_dfs_hash = 1;
  if (this->previous_delta_dfs_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->previous_delta_dfs_hash(), target);
  }

  // bytes merkle_root = 2;
  if (this->merkle_root().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->merkle_root(), target);
  }

  // bytes merkle_poda = 3;
  if (this->merkle_poda().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->merkle_poda(), target);
  }

  // .google.protobuf.Timestamp time_stamp = 4;
  if (this->has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->time_stamp_, false, target);
  }

  // repeated .Catalyst.Protocol.Transaction.PublicEntry public_entries = 5;
  for (unsigned int i = 0, n = this->public_entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->public_entries(i), false, target);
  }

  // repeated .Catalyst.Protocol.Transaction.ConfidentialEntry confidential_entries = 6;
  for (unsigned int i = 0, n = this->confidential_entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->confidential_entries(i), false, target);
  }

  // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry coinbase_entries = 7;
  for (unsigned int i = 0, n = this->coinbase_entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->coinbase_entries(i), false, target);
  }

  // bytes state_root = 8;
  if (this->state_root().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->state_root(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Deltas.Delta)
  return target;
}

size_t Delta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Deltas.Delta)
  size_t total_size = 0;

  // repeated .Catalyst.Protocol.Transaction.PublicEntry public_entries = 5;
  {
    unsigned int count = this->public_entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_entries(i));
    }
  }

  // repeated .Catalyst.Protocol.Transaction.ConfidentialEntry confidential_entries = 6;
  {
    unsigned int count = this->confidential_entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->confidential_entries(i));
    }
  }

  // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry coinbase_entries = 7;
  {
    unsigned int count = this->coinbase_entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coinbase_entries(i));
    }
  }

  // bytes previous_delta_dfs_hash = 1;
  if (this->previous_delta_dfs_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previous_delta_dfs_hash());
  }

  // bytes merkle_root = 2;
  if (this->merkle_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->merkle_root());
  }

  // bytes merkle_poda = 3;
  if (this->merkle_poda().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->merkle_poda());
  }

  // bytes state_root = 8;
  if (this->state_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->state_root());
  }

  // .google.protobuf.Timestamp time_stamp = 4;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_stamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Deltas.Delta)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Deltas.Delta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Deltas.Delta)
    MergeFrom(*source);
  }
}

void Delta::MergeFrom(const Delta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Deltas.Delta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_entries_.MergeFrom(from.public_entries_);
  confidential_entries_.MergeFrom(from.confidential_entries_);
  coinbase_entries_.MergeFrom(from.coinbase_entries_);
  if (from.previous_delta_dfs_hash().size() > 0) {

    previous_delta_dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_delta_dfs_hash_);
  }
  if (from.merkle_root().size() > 0) {

    merkle_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_root_);
  }
  if (from.merkle_poda().size() > 0) {

    merkle_poda_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_poda_);
  }
  if (from.state_root().size() > 0) {

    state_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_root_);
  }
  if (from.has_time_stamp()) {
    mutable_time_stamp()->::google::protobuf::Timestamp::MergeFrom(from.time_stamp());
  }
}

void Delta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Deltas.Delta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta::CopyFrom(const Delta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Deltas.Delta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta::IsInitialized() const {
  return true;
}

void Delta::Swap(Delta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delta::InternalSwap(Delta* other) {
  public_entries_.UnsafeArenaSwap(&other->public_entries_);
  confidential_entries_.UnsafeArenaSwap(&other->confidential_entries_);
  coinbase_entries_.UnsafeArenaSwap(&other->coinbase_entries_);
  previous_delta_dfs_hash_.Swap(&other->previous_delta_dfs_hash_);
  merkle_root_.Swap(&other->merkle_root_);
  merkle_poda_.Swap(&other->merkle_poda_);
  state_root_.Swap(&other->state_root_);
  std::swap(time_stamp_, other->time_stamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Delta::GetMetadata() const {
  protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Deltas_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Delta

// bytes previous_delta_dfs_hash = 1;
void Delta::clear_previous_delta_dfs_hash() {
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Delta::previous_delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.GetNoArena();
}
void Delta::set_previous_delta_dfs_hash(const ::std::string& value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
#if LANG_CXX11
void Delta::set_previous_delta_dfs_hash(::std::string&& value) {
  
  previous_delta_dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
#endif
void Delta::set_previous_delta_dfs_hash(const char* value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
void Delta::set_previous_delta_dfs_hash(const void* value, size_t size) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}
::std::string* Delta::mutable_previous_delta_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Delta::release_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
  
  return previous_delta_dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Delta::set_allocated_previous_delta_dfs_hash(::std::string* previous_delta_dfs_hash) {
  if (previous_delta_dfs_hash != NULL) {
    
  } else {
    
  }
  previous_delta_dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.previous_delta_dfs_hash)
}

// bytes merkle_root = 2;
void Delta::clear_merkle_root() {
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Delta::merkle_root() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.merkle_root)
  return merkle_root_.GetNoArena();
}
void Delta::set_merkle_root(const ::std::string& value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
#if LANG_CXX11
void Delta::set_merkle_root(::std::string&& value) {
  
  merkle_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
#endif
void Delta::set_merkle_root(const char* value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
void Delta::set_merkle_root(const void* value, size_t size) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.merkle_root)
}
::std::string* Delta::mutable_merkle_root() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.merkle_root)
  return merkle_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Delta::release_merkle_root() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.merkle_root)
  
  return merkle_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Delta::set_allocated_merkle_root(::std::string* merkle_root) {
  if (merkle_root != NULL) {
    
  } else {
    
  }
  merkle_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle_root);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.merkle_root)
}

// bytes merkle_poda = 3;
void Delta::clear_merkle_poda() {
  merkle_poda_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Delta::merkle_poda() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.merkle_poda)
  return merkle_poda_.GetNoArena();
}
void Delta::set_merkle_poda(const ::std::string& value) {
  
  merkle_poda_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
#if LANG_CXX11
void Delta::set_merkle_poda(::std::string&& value) {
  
  merkle_poda_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
#endif
void Delta::set_merkle_poda(const char* value) {
  
  merkle_poda_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
void Delta::set_merkle_poda(const void* value, size_t size) {
  
  merkle_poda_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}
::std::string* Delta::mutable_merkle_poda() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.merkle_poda)
  return merkle_poda_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Delta::release_merkle_poda() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.merkle_poda)
  
  return merkle_poda_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Delta::set_allocated_merkle_poda(::std::string* merkle_poda) {
  if (merkle_poda != NULL) {
    
  } else {
    
  }
  merkle_poda_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle_poda);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.merkle_poda)
}

// .google.protobuf.Timestamp time_stamp = 4;
bool Delta::has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != NULL;
}
void Delta::clear_time_stamp() {
  if (GetArenaNoVirtual() == NULL && time_stamp_ != NULL) delete time_stamp_;
  time_stamp_ = NULL;
}
const ::google::protobuf::Timestamp& Delta::time_stamp() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.time_stamp)
  return time_stamp_ != NULL ? *time_stamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Delta::mutable_time_stamp() {
  
  if (time_stamp_ == NULL) {
    time_stamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.time_stamp)
  return time_stamp_;
}
::google::protobuf::Timestamp* Delta::release_time_stamp() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.time_stamp)
  
  ::google::protobuf::Timestamp* temp = time_stamp_;
  time_stamp_ = NULL;
  return temp;
}
void Delta::set_allocated_time_stamp(::google::protobuf::Timestamp* time_stamp) {
  delete time_stamp_;
  if (time_stamp != NULL && time_stamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_time_stamp = new ::google::protobuf::Timestamp;
    new_time_stamp->CopyFrom(*time_stamp);
    time_stamp = new_time_stamp;
  }
  time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.time_stamp)
}

// repeated .Catalyst.Protocol.Transaction.PublicEntry public_entries = 5;
int Delta::public_entries_size() const {
  return public_entries_.size();
}
void Delta::clear_public_entries() {
  public_entries_.Clear();
}
const ::Catalyst::Protocol::Transaction::PublicEntry& Delta::public_entries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.public_entries)
  return public_entries_.Get(index);
}
::Catalyst::Protocol::Transaction::PublicEntry* Delta::mutable_public_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.public_entries)
  return public_entries_.Mutable(index);
}
::Catalyst::Protocol::Transaction::PublicEntry* Delta::add_public_entries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.public_entries)
  return public_entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >*
Delta::mutable_public_entries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.public_entries)
  return &public_entries_;
}
const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >&
Delta::public_entries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.public_entries)
  return public_entries_;
}

// repeated .Catalyst.Protocol.Transaction.ConfidentialEntry confidential_entries = 6;
int Delta::confidential_entries_size() const {
  return confidential_entries_.size();
}
void Delta::clear_confidential_entries() {
  confidential_entries_.Clear();
}
const ::Catalyst::Protocol::Transaction::ConfidentialEntry& Delta::confidential_entries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return confidential_entries_.Get(index);
}
::Catalyst::Protocol::Transaction::ConfidentialEntry* Delta::mutable_confidential_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return confidential_entries_.Mutable(index);
}
::Catalyst::Protocol::Transaction::ConfidentialEntry* Delta::add_confidential_entries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return confidential_entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry >*
Delta::mutable_confidential_entries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return &confidential_entries_;
}
const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::ConfidentialEntry >&
Delta::confidential_entries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.confidential_entries)
  return confidential_entries_;
}

// repeated .Catalyst.Protocol.Transaction.CoinbaseEntry coinbase_entries = 7;
int Delta::coinbase_entries_size() const {
  return coinbase_entries_.size();
}
void Delta::clear_coinbase_entries() {
  coinbase_entries_.Clear();
}
const ::Catalyst::Protocol::Transaction::CoinbaseEntry& Delta::coinbase_entries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return coinbase_entries_.Get(index);
}
::Catalyst::Protocol::Transaction::CoinbaseEntry* Delta::mutable_coinbase_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return coinbase_entries_.Mutable(index);
}
::Catalyst::Protocol::Transaction::CoinbaseEntry* Delta::add_coinbase_entries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return coinbase_entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >*
Delta::mutable_coinbase_entries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return &coinbase_entries_;
}
const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >&
Delta::coinbase_entries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.coinbase_entries)
  return coinbase_entries_;
}

// bytes state_root = 8;
void Delta::clear_state_root() {
  state_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Delta::state_root() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.state_root)
  return state_root_.GetNoArena();
}
void Delta::set_state_root(const ::std::string& value) {
  
  state_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.state_root)
}
#if LANG_CXX11
void Delta::set_state_root(::std::string&& value) {
  
  state_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.state_root)
}
#endif
void Delta::set_state_root(const char* value) {
  
  state_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.state_root)
}
void Delta::set_state_root(const void* value, size_t size) {
  
  state_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.state_root)
}
::std::string* Delta::mutable_state_root() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.state_root)
  return state_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Delta::release_state_root() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.state_root)
  
  return state_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Delta::set_allocated_state_root(::std::string* state_root) {
  if (state_root != NULL) {
    
  } else {
    
  }
  state_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state_root);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.state_root)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Deltas
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)
