// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IPPN.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IPPN.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Catalyst {
namespace Protocol {
namespace IPPN {
class PeerNeighborsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PeerNeighborsRequest> {
} _PeerNeighborsRequest_default_instance_;
class PeerNeighborsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PeerNeighborsResponse> {
} _PeerNeighborsResponse_default_instance_;
class PingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PingRequest> {
} _PingRequest_default_instance_;
class PingResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PingResponse> {
} _PingResponse_default_instance_;
class LatestDeltaHashRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LatestDeltaHashRequest> {
} _LatestDeltaHashRequest_default_instance_;
class LatestDeltaHashResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LatestDeltaHashResponse> {
} _LatestDeltaHashResponse_default_instance_;
class DeltaHistoryRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeltaHistoryRequest> {
} _DeltaHistoryRequest_default_instance_;
class DeltaHistoryResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeltaHistoryResponse> {
} _DeltaHistoryResponse_default_instance_;

namespace protobuf_IPPN_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerNeighborsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerNeighborsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerNeighborsResponse, peers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatestDeltaHashRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatestDeltaHashResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatestDeltaHashResponse, issync_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatestDeltaHashResponse, deltaindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaHistoryRequest, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaHistoryRequest, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaHistoryResponse, deltaindex_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PeerNeighborsRequest)},
  { 4, -1, sizeof(PeerNeighborsResponse)},
  { 9, -1, sizeof(PingRequest)},
  { 13, -1, sizeof(PingResponse)},
  { 17, -1, sizeof(LatestDeltaHashRequest)},
  { 21, -1, sizeof(LatestDeltaHashResponse)},
  { 27, -1, sizeof(DeltaHistoryRequest)},
  { 33, -1, sizeof(DeltaHistoryResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PeerNeighborsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PeerNeighborsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LatestDeltaHashRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LatestDeltaHashResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeltaHistoryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeltaHistoryResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "IPPN.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _PeerNeighborsRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PeerNeighborsResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PingRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PingResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LatestDeltaHashRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _LatestDeltaHashResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DeltaHistoryRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _DeltaHistoryResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Catalyst::Protocol::Peer::protobuf_Peer_2eproto::InitDefaults();
  ::Catalyst::Protocol::Deltas::protobuf_Deltas_2eproto::InitDefaults();
  _PeerNeighborsRequest_default_instance_.DefaultConstruct();
  _PeerNeighborsResponse_default_instance_.DefaultConstruct();
  _PingRequest_default_instance_.DefaultConstruct();
  _PingResponse_default_instance_.DefaultConstruct();
  _LatestDeltaHashRequest_default_instance_.DefaultConstruct();
  _LatestDeltaHashResponse_default_instance_.DefaultConstruct();
  _DeltaHistoryRequest_default_instance_.DefaultConstruct();
  _DeltaHistoryResponse_default_instance_.DefaultConstruct();
  _LatestDeltaHashResponse_default_instance_.get_mutable()->deltaindex_ = const_cast< ::Catalyst::Protocol::Deltas::DeltaIndex*>(
      ::Catalyst::Protocol::Deltas::DeltaIndex::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nIPPN.proto\022\026Catalyst.Protocol.IPPN\032\nPe"
      "er.proto\032\014Deltas.proto\"\026\n\024PeerNeighborsR"
      "equest\"F\n\025PeerNeighborsResponse\022-\n\005peers"
      "\030\001 \003(\0132\036.Catalyst.Protocol.Peer.PeerId\"\r"
      "\n\013PingRequest\"\016\n\014PingResponse\"\030\n\026LatestD"
      "eltaHashRequest\"c\n\027LatestDeltaHashRespon"
      "se\022\016\n\006isSync\030\001 \001(\010\0228\n\ndeltaIndex\030\002 \001(\0132$"
      ".Catalyst.Protocol.Deltas.DeltaIndex\"4\n\023"
      "DeltaHistoryRequest\022\r\n\005range\030\001 \001(\r\022\016\n\006he"
      "ight\030\002 \001(\r\"P\n\024DeltaHistoryResponse\0228\n\nde"
      "ltaIndex\030\001 \003(\0132$.Catalyst.Protocol.Delta"
      "s.DeltaIndexB\002P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 464);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IPPN.proto", &protobuf_RegisterTypes);
  ::Catalyst::Protocol::Peer::protobuf_Peer_2eproto::AddDescriptors();
  ::Catalyst::Protocol::Deltas::protobuf_Deltas_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_IPPN_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerNeighborsRequest::PeerNeighborsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IPPN_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
}
PeerNeighborsRequest::PeerNeighborsRequest(const PeerNeighborsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
}

void PeerNeighborsRequest::SharedCtor() {
  _cached_size_ = 0;
}

PeerNeighborsRequest::~PeerNeighborsRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  SharedDtor();
}

void PeerNeighborsRequest::SharedDtor() {
}

void PeerNeighborsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerNeighborsRequest::descriptor() {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[0].descriptor;
}

const PeerNeighborsRequest& PeerNeighborsRequest::default_instance() {
  protobuf_IPPN_2eproto::InitDefaults();
  return *internal_default_instance();
}

PeerNeighborsRequest* PeerNeighborsRequest::New(::google::protobuf::Arena* arena) const {
  PeerNeighborsRequest* n = new PeerNeighborsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerNeighborsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
}

bool PeerNeighborsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  return false;
#undef DO_
}

void PeerNeighborsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
}

::google::protobuf::uint8* PeerNeighborsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  return target;
}

size_t PeerNeighborsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerNeighborsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerNeighborsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerNeighborsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
    MergeFrom(*source);
  }
}

void PeerNeighborsRequest::MergeFrom(const PeerNeighborsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void PeerNeighborsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerNeighborsRequest::CopyFrom(const PeerNeighborsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.IPPN.PeerNeighborsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerNeighborsRequest::IsInitialized() const {
  return true;
}

void PeerNeighborsRequest::Swap(PeerNeighborsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerNeighborsRequest::InternalSwap(PeerNeighborsRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerNeighborsRequest::GetMetadata() const {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerNeighborsRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerNeighborsResponse::kPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerNeighborsResponse::PeerNeighborsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IPPN_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
}
PeerNeighborsResponse::PeerNeighborsResponse(const PeerNeighborsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peers_(from.peers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
}

void PeerNeighborsResponse::SharedCtor() {
  _cached_size_ = 0;
}

PeerNeighborsResponse::~PeerNeighborsResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  SharedDtor();
}

void PeerNeighborsResponse::SharedDtor() {
}

void PeerNeighborsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerNeighborsResponse::descriptor() {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[1].descriptor;
}

const PeerNeighborsResponse& PeerNeighborsResponse::default_instance() {
  protobuf_IPPN_2eproto::InitDefaults();
  return *internal_default_instance();
}

PeerNeighborsResponse* PeerNeighborsResponse::New(::google::protobuf::Arena* arena) const {
  PeerNeighborsResponse* n = new PeerNeighborsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerNeighborsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  peers_.Clear();
}

bool PeerNeighborsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  return false;
#undef DO_
}

void PeerNeighborsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
}

::google::protobuf::uint8* PeerNeighborsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->peers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  return target;
}

size_t PeerNeighborsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  size_t total_size = 0;

  // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
  {
    unsigned int count = this->peers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerNeighborsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerNeighborsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerNeighborsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
    MergeFrom(*source);
  }
}

void PeerNeighborsResponse::MergeFrom(const PeerNeighborsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peers_.MergeFrom(from.peers_);
}

void PeerNeighborsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerNeighborsResponse::CopyFrom(const PeerNeighborsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.IPPN.PeerNeighborsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerNeighborsResponse::IsInitialized() const {
  return true;
}

void PeerNeighborsResponse::Swap(PeerNeighborsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerNeighborsResponse::InternalSwap(PeerNeighborsResponse* other) {
  peers_.UnsafeArenaSwap(&other->peers_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerNeighborsResponse::GetMetadata() const {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerNeighborsResponse

// repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
int PeerNeighborsResponse::peers_size() const {
  return peers_.size();
}
void PeerNeighborsResponse::clear_peers() {
  peers_.Clear();
}
const ::Catalyst::Protocol::Peer::PeerId& PeerNeighborsResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.IPPN.PeerNeighborsResponse.peers)
  return peers_.Get(index);
}
::Catalyst::Protocol::Peer::PeerId* PeerNeighborsResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.IPPN.PeerNeighborsResponse.peers)
  return peers_.Mutable(index);
}
::Catalyst::Protocol::Peer::PeerId* PeerNeighborsResponse::add_peers() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.IPPN.PeerNeighborsResponse.peers)
  return peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >*
PeerNeighborsResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.IPPN.PeerNeighborsResponse.peers)
  return &peers_;
}
const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >&
PeerNeighborsResponse::peers() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.IPPN.PeerNeighborsResponse.peers)
  return peers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingRequest::PingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IPPN_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.IPPN.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.IPPN.PingRequest)
}

void PingRequest::SharedCtor() {
  _cached_size_ = 0;
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.IPPN.PingRequest)
  SharedDtor();
}

void PingRequest::SharedDtor() {
}

void PingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[2].descriptor;
}

const PingRequest& PingRequest::default_instance() {
  protobuf_IPPN_2eproto::InitDefaults();
  return *internal_default_instance();
}

PingRequest* PingRequest::New(::google::protobuf::Arena* arena) const {
  PingRequest* n = new PingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.IPPN.PingRequest)
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.IPPN.PingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.IPPN.PingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.IPPN.PingRequest)
  return false;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.IPPN.PingRequest)
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.IPPN.PingRequest)
}

::google::protobuf::uint8* PingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.IPPN.PingRequest)
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.IPPN.PingRequest)
  return target;
}

size_t PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.IPPN.PingRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.IPPN.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.IPPN.PingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.IPPN.PingRequest)
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.IPPN.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.IPPN.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.IPPN.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingRequest::InternalSwap(PingRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingRequest::GetMetadata() const {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingResponse::PingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IPPN_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.IPPN.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.IPPN.PingResponse)
}

void PingResponse::SharedCtor() {
  _cached_size_ = 0;
}

PingResponse::~PingResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.IPPN.PingResponse)
  SharedDtor();
}

void PingResponse::SharedDtor() {
}

void PingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingResponse::descriptor() {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[3].descriptor;
}

const PingResponse& PingResponse::default_instance() {
  protobuf_IPPN_2eproto::InitDefaults();
  return *internal_default_instance();
}

PingResponse* PingResponse::New(::google::protobuf::Arena* arena) const {
  PingResponse* n = new PingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.IPPN.PingResponse)
}

bool PingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.IPPN.PingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.IPPN.PingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.IPPN.PingResponse)
  return false;
#undef DO_
}

void PingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.IPPN.PingResponse)
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.IPPN.PingResponse)
}

::google::protobuf::uint8* PingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.IPPN.PingResponse)
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.IPPN.PingResponse)
  return target;
}

size_t PingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.IPPN.PingResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.IPPN.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.IPPN.PingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.IPPN.PingResponse)
    MergeFrom(*source);
  }
}

void PingResponse::MergeFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.IPPN.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void PingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.IPPN.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::CopyFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.IPPN.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {
  return true;
}

void PingResponse::Swap(PingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingResponse::InternalSwap(PingResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingResponse::GetMetadata() const {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatestDeltaHashRequest::LatestDeltaHashRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IPPN_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
}
LatestDeltaHashRequest::LatestDeltaHashRequest(const LatestDeltaHashRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
}

void LatestDeltaHashRequest::SharedCtor() {
  _cached_size_ = 0;
}

LatestDeltaHashRequest::~LatestDeltaHashRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  SharedDtor();
}

void LatestDeltaHashRequest::SharedDtor() {
}

void LatestDeltaHashRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatestDeltaHashRequest::descriptor() {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[4].descriptor;
}

const LatestDeltaHashRequest& LatestDeltaHashRequest::default_instance() {
  protobuf_IPPN_2eproto::InitDefaults();
  return *internal_default_instance();
}

LatestDeltaHashRequest* LatestDeltaHashRequest::New(::google::protobuf::Arena* arena) const {
  LatestDeltaHashRequest* n = new LatestDeltaHashRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatestDeltaHashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
}

bool LatestDeltaHashRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  return false;
#undef DO_
}

void LatestDeltaHashRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
}

::google::protobuf::uint8* LatestDeltaHashRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  return target;
}

size_t LatestDeltaHashRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatestDeltaHashRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LatestDeltaHashRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatestDeltaHashRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
    MergeFrom(*source);
  }
}

void LatestDeltaHashRequest::MergeFrom(const LatestDeltaHashRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void LatestDeltaHashRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatestDeltaHashRequest::CopyFrom(const LatestDeltaHashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.IPPN.LatestDeltaHashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatestDeltaHashRequest::IsInitialized() const {
  return true;
}

void LatestDeltaHashRequest::Swap(LatestDeltaHashRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatestDeltaHashRequest::InternalSwap(LatestDeltaHashRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatestDeltaHashRequest::GetMetadata() const {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatestDeltaHashRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatestDeltaHashResponse::kIsSyncFieldNumber;
const int LatestDeltaHashResponse::kDeltaIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatestDeltaHashResponse::LatestDeltaHashResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IPPN_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
}
LatestDeltaHashResponse::LatestDeltaHashResponse(const LatestDeltaHashResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_deltaindex()) {
    deltaindex_ = new ::Catalyst::Protocol::Deltas::DeltaIndex(*from.deltaindex_);
  } else {
    deltaindex_ = NULL;
  }
  issync_ = from.issync_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
}

void LatestDeltaHashResponse::SharedCtor() {
  ::memset(&deltaindex_, 0, reinterpret_cast<char*>(&issync_) -
    reinterpret_cast<char*>(&deltaindex_) + sizeof(issync_));
  _cached_size_ = 0;
}

LatestDeltaHashResponse::~LatestDeltaHashResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  SharedDtor();
}

void LatestDeltaHashResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete deltaindex_;
  }
}

void LatestDeltaHashResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatestDeltaHashResponse::descriptor() {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[5].descriptor;
}

const LatestDeltaHashResponse& LatestDeltaHashResponse::default_instance() {
  protobuf_IPPN_2eproto::InitDefaults();
  return *internal_default_instance();
}

LatestDeltaHashResponse* LatestDeltaHashResponse::New(::google::protobuf::Arena* arena) const {
  LatestDeltaHashResponse* n = new LatestDeltaHashResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatestDeltaHashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  if (GetArenaNoVirtual() == NULL && deltaindex_ != NULL) {
    delete deltaindex_;
  }
  deltaindex_ = NULL;
  issync_ = false;
}

bool LatestDeltaHashResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isSync = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deltaindex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  return false;
#undef DO_
}

void LatestDeltaHashResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  // bool isSync = 1;
  if (this->issync() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issync(), output);
  }

  // .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 2;
  if (this->has_deltaindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->deltaindex_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
}

::google::protobuf::uint8* LatestDeltaHashResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  // bool isSync = 1;
  if (this->issync() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issync(), target);
  }

  // .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 2;
  if (this->has_deltaindex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->deltaindex_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  return target;
}

size_t LatestDeltaHashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  size_t total_size = 0;

  // .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 2;
  if (this->has_deltaindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->deltaindex_);
  }

  // bool isSync = 1;
  if (this->issync() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatestDeltaHashResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LatestDeltaHashResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatestDeltaHashResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
    MergeFrom(*source);
  }
}

void LatestDeltaHashResponse::MergeFrom(const LatestDeltaHashResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_deltaindex()) {
    mutable_deltaindex()->::Catalyst::Protocol::Deltas::DeltaIndex::MergeFrom(from.deltaindex());
  }
  if (from.issync() != 0) {
    set_issync(from.issync());
  }
}

void LatestDeltaHashResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatestDeltaHashResponse::CopyFrom(const LatestDeltaHashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.IPPN.LatestDeltaHashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatestDeltaHashResponse::IsInitialized() const {
  return true;
}

void LatestDeltaHashResponse::Swap(LatestDeltaHashResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatestDeltaHashResponse::InternalSwap(LatestDeltaHashResponse* other) {
  std::swap(deltaindex_, other->deltaindex_);
  std::swap(issync_, other->issync_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatestDeltaHashResponse::GetMetadata() const {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatestDeltaHashResponse

// bool isSync = 1;
void LatestDeltaHashResponse::clear_issync() {
  issync_ = false;
}
bool LatestDeltaHashResponse::issync() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.IPPN.LatestDeltaHashResponse.isSync)
  return issync_;
}
void LatestDeltaHashResponse::set_issync(bool value) {
  
  issync_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.IPPN.LatestDeltaHashResponse.isSync)
}

// .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 2;
bool LatestDeltaHashResponse::has_deltaindex() const {
  return this != internal_default_instance() && deltaindex_ != NULL;
}
void LatestDeltaHashResponse::clear_deltaindex() {
  if (GetArenaNoVirtual() == NULL && deltaindex_ != NULL) delete deltaindex_;
  deltaindex_ = NULL;
}
const ::Catalyst::Protocol::Deltas::DeltaIndex& LatestDeltaHashResponse::deltaindex() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.IPPN.LatestDeltaHashResponse.deltaIndex)
  return deltaindex_ != NULL ? *deltaindex_
                         : *::Catalyst::Protocol::Deltas::DeltaIndex::internal_default_instance();
}
::Catalyst::Protocol::Deltas::DeltaIndex* LatestDeltaHashResponse::mutable_deltaindex() {
  
  if (deltaindex_ == NULL) {
    deltaindex_ = new ::Catalyst::Protocol::Deltas::DeltaIndex;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.IPPN.LatestDeltaHashResponse.deltaIndex)
  return deltaindex_;
}
::Catalyst::Protocol::Deltas::DeltaIndex* LatestDeltaHashResponse::release_deltaindex() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.IPPN.LatestDeltaHashResponse.deltaIndex)
  
  ::Catalyst::Protocol::Deltas::DeltaIndex* temp = deltaindex_;
  deltaindex_ = NULL;
  return temp;
}
void LatestDeltaHashResponse::set_allocated_deltaindex(::Catalyst::Protocol::Deltas::DeltaIndex* deltaindex) {
  delete deltaindex_;
  deltaindex_ = deltaindex;
  if (deltaindex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.IPPN.LatestDeltaHashResponse.deltaIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeltaHistoryRequest::kRangeFieldNumber;
const int DeltaHistoryRequest::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeltaHistoryRequest::DeltaHistoryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IPPN_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
}
DeltaHistoryRequest::DeltaHistoryRequest(const DeltaHistoryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_, &from.range_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&range_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
}

void DeltaHistoryRequest::SharedCtor() {
  ::memset(&range_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&range_) + sizeof(height_));
  _cached_size_ = 0;
}

DeltaHistoryRequest::~DeltaHistoryRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  SharedDtor();
}

void DeltaHistoryRequest::SharedDtor() {
}

void DeltaHistoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaHistoryRequest::descriptor() {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[6].descriptor;
}

const DeltaHistoryRequest& DeltaHistoryRequest::default_instance() {
  protobuf_IPPN_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeltaHistoryRequest* DeltaHistoryRequest::New(::google::protobuf::Arena* arena) const {
  DeltaHistoryRequest* n = new DeltaHistoryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeltaHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  ::memset(&range_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&range_) + sizeof(height_));
}

bool DeltaHistoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 range = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  return false;
#undef DO_
}

void DeltaHistoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  // uint32 range = 1;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->range(), output);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
}

::google::protobuf::uint8* DeltaHistoryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  // uint32 range = 1;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->range(), target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  return target;
}

size_t DeltaHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  size_t total_size = 0;

  // uint32 range = 1;
  if (this->range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->range());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaHistoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeltaHistoryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeltaHistoryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
    MergeFrom(*source);
  }
}

void DeltaHistoryRequest::MergeFrom(const DeltaHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void DeltaHistoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaHistoryRequest::CopyFrom(const DeltaHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.IPPN.DeltaHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaHistoryRequest::IsInitialized() const {
  return true;
}

void DeltaHistoryRequest::Swap(DeltaHistoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeltaHistoryRequest::InternalSwap(DeltaHistoryRequest* other) {
  std::swap(range_, other->range_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeltaHistoryRequest::GetMetadata() const {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeltaHistoryRequest

// uint32 range = 1;
void DeltaHistoryRequest::clear_range() {
  range_ = 0u;
}
::google::protobuf::uint32 DeltaHistoryRequest::range() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.IPPN.DeltaHistoryRequest.range)
  return range_;
}
void DeltaHistoryRequest::set_range(::google::protobuf::uint32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.IPPN.DeltaHistoryRequest.range)
}

// uint32 height = 2;
void DeltaHistoryRequest::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 DeltaHistoryRequest::height() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.IPPN.DeltaHistoryRequest.height)
  return height_;
}
void DeltaHistoryRequest::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.IPPN.DeltaHistoryRequest.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeltaHistoryResponse::kDeltaIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeltaHistoryResponse::DeltaHistoryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IPPN_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
}
DeltaHistoryResponse::DeltaHistoryResponse(const DeltaHistoryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      deltaindex_(from.deltaindex_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
}

void DeltaHistoryResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeltaHistoryResponse::~DeltaHistoryResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  SharedDtor();
}

void DeltaHistoryResponse::SharedDtor() {
}

void DeltaHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaHistoryResponse::descriptor() {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[7].descriptor;
}

const DeltaHistoryResponse& DeltaHistoryResponse::default_instance() {
  protobuf_IPPN_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeltaHistoryResponse* DeltaHistoryResponse::New(::google::protobuf::Arena* arena) const {
  DeltaHistoryResponse* n = new DeltaHistoryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeltaHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  deltaindex_.Clear();
}

bool DeltaHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_deltaindex()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  return false;
#undef DO_
}

void DeltaHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  // repeated .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 1;
  for (unsigned int i = 0, n = this->deltaindex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deltaindex(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
}

::google::protobuf::uint8* DeltaHistoryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  // repeated .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 1;
  for (unsigned int i = 0, n = this->deltaindex_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->deltaindex(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  return target;
}

size_t DeltaHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  size_t total_size = 0;

  // repeated .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 1;
  {
    unsigned int count = this->deltaindex_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deltaindex(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaHistoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeltaHistoryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeltaHistoryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
    MergeFrom(*source);
  }
}

void DeltaHistoryResponse::MergeFrom(const DeltaHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deltaindex_.MergeFrom(from.deltaindex_);
}

void DeltaHistoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaHistoryResponse::CopyFrom(const DeltaHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.IPPN.DeltaHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaHistoryResponse::IsInitialized() const {
  return true;
}

void DeltaHistoryResponse::Swap(DeltaHistoryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeltaHistoryResponse::InternalSwap(DeltaHistoryResponse* other) {
  deltaindex_.UnsafeArenaSwap(&other->deltaindex_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeltaHistoryResponse::GetMetadata() const {
  protobuf_IPPN_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IPPN_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeltaHistoryResponse

// repeated .Catalyst.Protocol.Deltas.DeltaIndex deltaIndex = 1;
int DeltaHistoryResponse::deltaindex_size() const {
  return deltaindex_.size();
}
void DeltaHistoryResponse::clear_deltaindex() {
  deltaindex_.Clear();
}
const ::Catalyst::Protocol::Deltas::DeltaIndex& DeltaHistoryResponse::deltaindex(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.IPPN.DeltaHistoryResponse.deltaIndex)
  return deltaindex_.Get(index);
}
::Catalyst::Protocol::Deltas::DeltaIndex* DeltaHistoryResponse::mutable_deltaindex(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.IPPN.DeltaHistoryResponse.deltaIndex)
  return deltaindex_.Mutable(index);
}
::Catalyst::Protocol::Deltas::DeltaIndex* DeltaHistoryResponse::add_deltaindex() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.IPPN.DeltaHistoryResponse.deltaIndex)
  return deltaindex_.Add();
}
::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Deltas::DeltaIndex >*
DeltaHistoryResponse::mutable_deltaindex() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.IPPN.DeltaHistoryResponse.deltaIndex)
  return &deltaindex_;
}
const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Deltas::DeltaIndex >&
DeltaHistoryResponse::deltaindex() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.IPPN.DeltaHistoryResponse.deltaIndex)
  return deltaindex_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace IPPN
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)
