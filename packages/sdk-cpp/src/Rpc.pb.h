// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Peer.pb.h"
#include "Cryptography.pb.h"
#include "Deltas.pb.h"
#include "Wire.pb.h"
#include "Transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[68]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rpc_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Rpc {
namespace Node {
class AddFileToDfsRequest;
class AddFileToDfsRequestDefaultTypeInternal;
extern AddFileToDfsRequestDefaultTypeInternal _AddFileToDfsRequest_default_instance_;
class AddFileToDfsResponse;
class AddFileToDfsResponseDefaultTypeInternal;
extern AddFileToDfsResponseDefaultTypeInternal _AddFileToDfsResponse_default_instance_;
class AddNodeRequest;
class AddNodeRequestDefaultTypeInternal;
extern AddNodeRequestDefaultTypeInternal _AddNodeRequest_default_instance_;
class AddNodeResponse;
class AddNodeResponseDefaultTypeInternal;
extern AddNodeResponseDefaultTypeInternal _AddNodeResponse_default_instance_;
class BroadcastRawTransactionRequest;
class BroadcastRawTransactionRequestDefaultTypeInternal;
extern BroadcastRawTransactionRequestDefaultTypeInternal _BroadcastRawTransactionRequest_default_instance_;
class BroadcastRawTransactionResponse;
class BroadcastRawTransactionResponseDefaultTypeInternal;
extern BroadcastRawTransactionResponseDefaultTypeInternal _BroadcastRawTransactionResponse_default_instance_;
class CreateAddressRequest;
class CreateAddressRequestDefaultTypeInternal;
extern CreateAddressRequestDefaultTypeInternal _CreateAddressRequest_default_instance_;
class CreateAddressResponse;
class CreateAddressResponseDefaultTypeInternal;
extern CreateAddressResponseDefaultTypeInternal _CreateAddressResponse_default_instance_;
class CreateRawTransactionRequest;
class CreateRawTransactionRequestDefaultTypeInternal;
extern CreateRawTransactionRequestDefaultTypeInternal _CreateRawTransactionRequest_default_instance_;
class CreateRawTransactionResponse;
class CreateRawTransactionResponseDefaultTypeInternal;
extern CreateRawTransactionResponseDefaultTypeInternal _CreateRawTransactionResponse_default_instance_;
class CreateWalletRequest;
class CreateWalletRequestDefaultTypeInternal;
extern CreateWalletRequestDefaultTypeInternal _CreateWalletRequest_default_instance_;
class CreateWalletResponse;
class CreateWalletResponseDefaultTypeInternal;
extern CreateWalletResponseDefaultTypeInternal _CreateWalletResponse_default_instance_;
class DecodeRawTransactionRequest;
class DecodeRawTransactionRequestDefaultTypeInternal;
extern DecodeRawTransactionRequestDefaultTypeInternal _DecodeRawTransactionRequest_default_instance_;
class DecodeRawTransactionResponse;
class DecodeRawTransactionResponseDefaultTypeInternal;
extern DecodeRawTransactionResponseDefaultTypeInternal _DecodeRawTransactionResponse_default_instance_;
class GetAddressRequest;
class GetAddressRequestDefaultTypeInternal;
extern GetAddressRequestDefaultTypeInternal _GetAddressRequest_default_instance_;
class GetAddressResponse;
class GetAddressResponseDefaultTypeInternal;
extern GetAddressResponseDefaultTypeInternal _GetAddressResponse_default_instance_;
class GetBalanceRequest;
class GetBalanceRequestDefaultTypeInternal;
extern GetBalanceRequestDefaultTypeInternal _GetBalanceRequest_default_instance_;
class GetBalanceResponse;
class GetBalanceResponseDefaultTypeInternal;
extern GetBalanceResponseDefaultTypeInternal _GetBalanceResponse_default_instance_;
class GetConnectionCountRequest;
class GetConnectionCountRequestDefaultTypeInternal;
extern GetConnectionCountRequestDefaultTypeInternal _GetConnectionCountRequest_default_instance_;
class GetConnectionCountResponse;
class GetConnectionCountResponseDefaultTypeInternal;
extern GetConnectionCountResponseDefaultTypeInternal _GetConnectionCountResponse_default_instance_;
class GetDeltaRequest;
class GetDeltaRequestDefaultTypeInternal;
extern GetDeltaRequestDefaultTypeInternal _GetDeltaRequest_default_instance_;
class GetDeltaResponse;
class GetDeltaResponseDefaultTypeInternal;
extern GetDeltaResponseDefaultTypeInternal _GetDeltaResponse_default_instance_;
class GetFileFromDfsRequest;
class GetFileFromDfsRequestDefaultTypeInternal;
extern GetFileFromDfsRequestDefaultTypeInternal _GetFileFromDfsRequest_default_instance_;
class GetFileFromDfsResponse;
class GetFileFromDfsResponseDefaultTypeInternal;
extern GetFileFromDfsResponseDefaultTypeInternal _GetFileFromDfsResponse_default_instance_;
class GetInfoRequest;
class GetInfoRequestDefaultTypeInternal;
extern GetInfoRequestDefaultTypeInternal _GetInfoRequest_default_instance_;
class GetInfoResponse;
class GetInfoResponseDefaultTypeInternal;
extern GetInfoResponseDefaultTypeInternal _GetInfoResponse_default_instance_;
class GetMempoolRequest;
class GetMempoolRequestDefaultTypeInternal;
extern GetMempoolRequestDefaultTypeInternal _GetMempoolRequest_default_instance_;
class GetMempoolResponse;
class GetMempoolResponseDefaultTypeInternal;
extern GetMempoolResponseDefaultTypeInternal _GetMempoolResponse_default_instance_;
class GetPeerCountRequest;
class GetPeerCountRequestDefaultTypeInternal;
extern GetPeerCountRequestDefaultTypeInternal _GetPeerCountRequest_default_instance_;
class GetPeerCountResponse;
class GetPeerCountResponseDefaultTypeInternal;
extern GetPeerCountResponseDefaultTypeInternal _GetPeerCountResponse_default_instance_;
class GetPeerInfoRequest;
class GetPeerInfoRequestDefaultTypeInternal;
extern GetPeerInfoRequestDefaultTypeInternal _GetPeerInfoRequest_default_instance_;
class GetPeerInfoResponse;
class GetPeerInfoResponseDefaultTypeInternal;
extern GetPeerInfoResponseDefaultTypeInternal _GetPeerInfoResponse_default_instance_;
class GetPeerListRequest;
class GetPeerListRequestDefaultTypeInternal;
extern GetPeerListRequestDefaultTypeInternal _GetPeerListRequest_default_instance_;
class GetPeerListResponse;
class GetPeerListResponseDefaultTypeInternal;
extern GetPeerListResponseDefaultTypeInternal _GetPeerListResponse_default_instance_;
class GetPeerReputationRequest;
class GetPeerReputationRequestDefaultTypeInternal;
extern GetPeerReputationRequestDefaultTypeInternal _GetPeerReputationRequest_default_instance_;
class GetPeerReputationResponse;
class GetPeerReputationResponseDefaultTypeInternal;
extern GetPeerReputationResponseDefaultTypeInternal _GetPeerReputationResponse_default_instance_;
class ListAddressRequest;
class ListAddressRequestDefaultTypeInternal;
extern ListAddressRequestDefaultTypeInternal _ListAddressRequest_default_instance_;
class ListAddressResponse;
class ListAddressResponseDefaultTypeInternal;
extern ListAddressResponseDefaultTypeInternal _ListAddressResponse_default_instance_;
class ListWalletRequest;
class ListWalletRequestDefaultTypeInternal;
extern ListWalletRequestDefaultTypeInternal _ListWalletRequest_default_instance_;
class ListWalletResponse;
class ListWalletResponseDefaultTypeInternal;
extern ListWalletResponseDefaultTypeInternal _ListWalletResponse_default_instance_;
class RemovePeerRequest;
class RemovePeerRequestDefaultTypeInternal;
extern RemovePeerRequestDefaultTypeInternal _RemovePeerRequest_default_instance_;
class RemovePeerResponse;
class RemovePeerResponseDefaultTypeInternal;
extern RemovePeerResponseDefaultTypeInternal _RemovePeerResponse_default_instance_;
class SendFromManyRequest;
class SendFromManyRequestDefaultTypeInternal;
extern SendFromManyRequestDefaultTypeInternal _SendFromManyRequest_default_instance_;
class SendFromManyResponse;
class SendFromManyResponseDefaultTypeInternal;
extern SendFromManyResponseDefaultTypeInternal _SendFromManyResponse_default_instance_;
class SendManyRequest;
class SendManyRequestDefaultTypeInternal;
extern SendManyRequestDefaultTypeInternal _SendManyRequest_default_instance_;
class SendManyResponse;
class SendManyResponseDefaultTypeInternal;
extern SendManyResponseDefaultTypeInternal _SendManyResponse_default_instance_;
class SendToFromRequest;
class SendToFromRequestDefaultTypeInternal;
extern SendToFromRequestDefaultTypeInternal _SendToFromRequest_default_instance_;
class SendToFromResponse;
class SendToFromResponseDefaultTypeInternal;
extern SendToFromResponseDefaultTypeInternal _SendToFromResponse_default_instance_;
class SendToRequest;
class SendToRequestDefaultTypeInternal;
extern SendToRequestDefaultTypeInternal _SendToRequest_default_instance_;
class SendToResponse;
class SendToResponseDefaultTypeInternal;
extern SendToResponseDefaultTypeInternal _SendToResponse_default_instance_;
class ServiceStatusRequest;
class ServiceStatusRequestDefaultTypeInternal;
extern ServiceStatusRequestDefaultTypeInternal _ServiceStatusRequest_default_instance_;
class ServiceStatusResponse;
class ServiceStatusResponseDefaultTypeInternal;
extern ServiceStatusResponseDefaultTypeInternal _ServiceStatusResponse_default_instance_;
class SetPeerBlacklistRequest;
class SetPeerBlacklistRequestDefaultTypeInternal;
extern SetPeerBlacklistRequestDefaultTypeInternal _SetPeerBlacklistRequest_default_instance_;
class SetPeerBlacklistResponse;
class SetPeerBlacklistResponseDefaultTypeInternal;
extern SetPeerBlacklistResponseDefaultTypeInternal _SetPeerBlacklistResponse_default_instance_;
class SetPeerDataFolderRequest;
class SetPeerDataFolderRequestDefaultTypeInternal;
extern SetPeerDataFolderRequestDefaultTypeInternal _SetPeerDataFolderRequest_default_instance_;
class SetPeerDataFolderResponse;
class SetPeerDataFolderResponseDefaultTypeInternal;
extern SetPeerDataFolderResponseDefaultTypeInternal _SetPeerDataFolderResponse_default_instance_;
class SignMessageRequest;
class SignMessageRequestDefaultTypeInternal;
extern SignMessageRequestDefaultTypeInternal _SignMessageRequest_default_instance_;
class SignMessageResponse;
class SignMessageResponseDefaultTypeInternal;
extern SignMessageResponseDefaultTypeInternal _SignMessageResponse_default_instance_;
class SignRawTransactionRequest;
class SignRawTransactionRequestDefaultTypeInternal;
extern SignRawTransactionRequestDefaultTypeInternal _SignRawTransactionRequest_default_instance_;
class SignRawTransactionResponse;
class SignRawTransactionResponseDefaultTypeInternal;
extern SignRawTransactionResponseDefaultTypeInternal _SignRawTransactionResponse_default_instance_;
class TransferFileBytesRequest;
class TransferFileBytesRequestDefaultTypeInternal;
extern TransferFileBytesRequestDefaultTypeInternal _TransferFileBytesRequest_default_instance_;
class TransferFileBytesResponse;
class TransferFileBytesResponseDefaultTypeInternal;
extern TransferFileBytesResponseDefaultTypeInternal _TransferFileBytesResponse_default_instance_;
class ValidateAddressRequest;
class ValidateAddressRequestDefaultTypeInternal;
extern ValidateAddressRequestDefaultTypeInternal _ValidateAddressRequest_default_instance_;
class ValidateAddressResponse;
class ValidateAddressResponseDefaultTypeInternal;
extern ValidateAddressResponseDefaultTypeInternal _ValidateAddressResponse_default_instance_;
class VerifyMessageRequest;
class VerifyMessageRequestDefaultTypeInternal;
extern VerifyMessageRequestDefaultTypeInternal _VerifyMessageRequest_default_instance_;
class VerifyMessageResponse;
class VerifyMessageResponseDefaultTypeInternal;
extern VerifyMessageResponseDefaultTypeInternal _VerifyMessageResponse_default_instance_;
class VersionRequest;
class VersionRequestDefaultTypeInternal;
extern VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
class VersionResponse;
class VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
}  // namespace Node
}  // namespace Rpc
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> ::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::AddNodeRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::AddNodeRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::AddNodeResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::AddNodeResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateAddressRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateAddressRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateAddressResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateAddressResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateWalletRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateWalletRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateWalletResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateWalletResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetAddressRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetAddressRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetAddressResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetAddressResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetBalanceRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetBalanceRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetBalanceResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetBalanceResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetDeltaRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetDeltaRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetDeltaResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetDeltaResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetInfoRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetInfoRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetInfoResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetInfoResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetMempoolRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetMempoolRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetMempoolResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetMempoolResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerListRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerListRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerListResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerListResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ListAddressRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ListAddressRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ListAddressResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ListAddressResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ListWalletRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ListWalletRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ListWalletResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ListWalletResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::RemovePeerRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::RemovePeerRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::RemovePeerResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::RemovePeerResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendFromManyRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendFromManyRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendFromManyResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendFromManyResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendManyRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendManyRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendManyResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendManyResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendToFromRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendToFromRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendToFromResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendToFromResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendToRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendToRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendToResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendToResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SetPeerBlacklistRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SetPeerBlacklistRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SetPeerBlacklistResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SetPeerBlacklistResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SignMessageRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SignMessageRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SignMessageResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SignMessageResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::VersionRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::VersionRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::VersionResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::VersionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Catalyst {
namespace Protocol {
namespace Rpc {
namespace Node {

enum ResponseCode : int {
  PENDING = 0,
  SUCCESSFUL = 1,
  ERROR = 2,
  FINISHED = 3,
  EXPIRED = 4,
  FAILED = 5,
  EXISTS = 6,
  ResponseCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResponseCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResponseCode_IsValid(int value);
constexpr ResponseCode ResponseCode_MIN = PENDING;
constexpr ResponseCode ResponseCode_MAX = EXISTS;
constexpr int ResponseCode_ARRAYSIZE = ResponseCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseCode_descriptor();
template<typename T>
inline const std::string& ResponseCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseCode_descriptor(), enum_t_value);
}
inline bool ResponseCode_Parse(
    const std::string& name, ResponseCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseCode>(
    ResponseCode_descriptor(), name, value);
}
// ===================================================================

class VersionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VersionRequest) */ {
 public:
  VersionRequest();
  virtual ~VersionRequest();

  VersionRequest(const VersionRequest& from);
  VersionRequest(VersionRequest&& from) noexcept
    : VersionRequest() {
    *this = ::std::move(from);
  }

  inline VersionRequest& operator=(const VersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionRequest& operator=(VersionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionRequest* internal_default_instance() {
    return reinterpret_cast<const VersionRequest*>(
               &_VersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VersionRequest& a, VersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionRequest* New() const final {
    return CreateMaybeMessage<VersionRequest>(nullptr);
  }

  VersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionRequest& from);
  void MergeFrom(const VersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.VersionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VersionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class VersionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VersionResponse) */ {
 public:
  VersionResponse();
  virtual ~VersionResponse();

  VersionResponse(const VersionResponse& from);
  VersionResponse(VersionResponse&& from) noexcept
    : VersionResponse() {
    *this = ::std::move(from);
  }

  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionResponse& operator=(VersionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
               &_VersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VersionResponse& a, VersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionResponse* New() const final {
    return CreateMaybeMessage<VersionResponse>(nullptr);
  }

  VersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionResponse& from);
  void MergeFrom(const VersionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.VersionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VersionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetInfoRequest) */ {
 public:
  GetInfoRequest();
  virtual ~GetInfoRequest();

  GetInfoRequest(const GetInfoRequest& from);
  GetInfoRequest(GetInfoRequest&& from) noexcept
    : GetInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetInfoRequest& operator=(const GetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoRequest& operator=(GetInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequest*>(
               &_GetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetInfoRequest& a, GetInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoRequest* New() const final {
    return CreateMaybeMessage<GetInfoRequest>(nullptr);
  }

  GetInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInfoRequest& from);
  void MergeFrom(const GetInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetInfoResponse) */ {
 public:
  GetInfoResponse();
  virtual ~GetInfoResponse();

  GetInfoResponse(const GetInfoResponse& from);
  GetInfoResponse(GetInfoResponse&& from) noexcept
    : GetInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetInfoResponse& operator=(const GetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoResponse& operator=(GetInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetInfoResponse*>(
               &_GetInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetInfoResponse& a, GetInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoResponse* New() const final {
    return CreateMaybeMessage<GetInfoResponse>(nullptr);
  }

  GetInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInfoResponse& from);
  void MergeFrom(const GetInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class CreateWalletRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateWalletRequest) */ {
 public:
  CreateWalletRequest();
  virtual ~CreateWalletRequest();

  CreateWalletRequest(const CreateWalletRequest& from);
  CreateWalletRequest(CreateWalletRequest&& from) noexcept
    : CreateWalletRequest() {
    *this = ::std::move(from);
  }

  inline CreateWalletRequest& operator=(const CreateWalletRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWalletRequest& operator=(CreateWalletRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateWalletRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateWalletRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWalletRequest*>(
               &_CreateWalletRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateWalletRequest& a, CreateWalletRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWalletRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateWalletRequest* New() const final {
    return CreateMaybeMessage<CreateWalletRequest>(nullptr);
  }

  CreateWalletRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateWalletRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateWalletRequest& from);
  void MergeFrom(const CreateWalletRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWalletRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.CreateWalletRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class CreateWalletResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateWalletResponse) */ {
 public:
  CreateWalletResponse();
  virtual ~CreateWalletResponse();

  CreateWalletResponse(const CreateWalletResponse& from);
  CreateWalletResponse(CreateWalletResponse&& from) noexcept
    : CreateWalletResponse() {
    *this = ::std::move(from);
  }

  inline CreateWalletResponse& operator=(const CreateWalletResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWalletResponse& operator=(CreateWalletResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateWalletResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateWalletResponse* internal_default_instance() {
    return reinterpret_cast<const CreateWalletResponse*>(
               &_CreateWalletResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateWalletResponse& a, CreateWalletResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWalletResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateWalletResponse* New() const final {
    return CreateMaybeMessage<CreateWalletResponse>(nullptr);
  }

  CreateWalletResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateWalletResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateWalletResponse& from);
  void MergeFrom(const CreateWalletResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWalletResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.CreateWalletResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class ListWalletRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListWalletRequest) */ {
 public:
  ListWalletRequest();
  virtual ~ListWalletRequest();

  ListWalletRequest(const ListWalletRequest& from);
  ListWalletRequest(ListWalletRequest&& from) noexcept
    : ListWalletRequest() {
    *this = ::std::move(from);
  }

  inline ListWalletRequest& operator=(const ListWalletRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWalletRequest& operator=(ListWalletRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListWalletRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListWalletRequest* internal_default_instance() {
    return reinterpret_cast<const ListWalletRequest*>(
               &_ListWalletRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListWalletRequest& a, ListWalletRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWalletRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListWalletRequest* New() const final {
    return CreateMaybeMessage<ListWalletRequest>(nullptr);
  }

  ListWalletRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListWalletRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListWalletRequest& from);
  void MergeFrom(const ListWalletRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWalletRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.ListWalletRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class ListWalletResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListWalletResponse) */ {
 public:
  ListWalletResponse();
  virtual ~ListWalletResponse();

  ListWalletResponse(const ListWalletResponse& from);
  ListWalletResponse(ListWalletResponse&& from) noexcept
    : ListWalletResponse() {
    *this = ::std::move(from);
  }

  inline ListWalletResponse& operator=(const ListWalletResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWalletResponse& operator=(ListWalletResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListWalletResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListWalletResponse* internal_default_instance() {
    return reinterpret_cast<const ListWalletResponse*>(
               &_ListWalletResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListWalletResponse& a, ListWalletResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWalletResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListWalletResponse* New() const final {
    return CreateMaybeMessage<ListWalletResponse>(nullptr);
  }

  ListWalletResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListWalletResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListWalletResponse& from);
  void MergeFrom(const ListWalletResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWalletResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.ListWalletResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class CreateAddressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateAddressRequest) */ {
 public:
  CreateAddressRequest();
  virtual ~CreateAddressRequest();

  CreateAddressRequest(const CreateAddressRequest& from);
  CreateAddressRequest(CreateAddressRequest&& from) noexcept
    : CreateAddressRequest() {
    *this = ::std::move(from);
  }

  inline CreateAddressRequest& operator=(const CreateAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAddressRequest& operator=(CreateAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAddressRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAddressRequest*>(
               &_CreateAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateAddressRequest& a, CreateAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAddressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAddressRequest* New() const final {
    return CreateMaybeMessage<CreateAddressRequest>(nullptr);
  }

  CreateAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAddressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAddressRequest& from);
  void MergeFrom(const CreateAddressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAddressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.CreateAddressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class CreateAddressResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateAddressResponse) */ {
 public:
  CreateAddressResponse();
  virtual ~CreateAddressResponse();

  CreateAddressResponse(const CreateAddressResponse& from);
  CreateAddressResponse(CreateAddressResponse&& from) noexcept
    : CreateAddressResponse() {
    *this = ::std::move(from);
  }

  inline CreateAddressResponse& operator=(const CreateAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAddressResponse& operator=(CreateAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAddressResponse* internal_default_instance() {
    return reinterpret_cast<const CreateAddressResponse*>(
               &_CreateAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateAddressResponse& a, CreateAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAddressResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAddressResponse* New() const final {
    return CreateMaybeMessage<CreateAddressResponse>(nullptr);
  }

  CreateAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAddressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAddressResponse& from);
  void MergeFrom(const CreateAddressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAddressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.CreateAddressResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetAddressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetAddressRequest) */ {
 public:
  GetAddressRequest();
  virtual ~GetAddressRequest();

  GetAddressRequest(const GetAddressRequest& from);
  GetAddressRequest(GetAddressRequest&& from) noexcept
    : GetAddressRequest() {
    *this = ::std::move(from);
  }

  inline GetAddressRequest& operator=(const GetAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressRequest& operator=(GetAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressRequest* internal_default_instance() {
    return reinterpret_cast<const GetAddressRequest*>(
               &_GetAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetAddressRequest& a, GetAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressRequest* New() const final {
    return CreateMaybeMessage<GetAddressRequest>(nullptr);
  }

  GetAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressRequest& from);
  void MergeFrom(const GetAddressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetAddressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetAddressResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetAddressResponse) */ {
 public:
  GetAddressResponse();
  virtual ~GetAddressResponse();

  GetAddressResponse(const GetAddressResponse& from);
  GetAddressResponse(GetAddressResponse&& from) noexcept
    : GetAddressResponse() {
    *this = ::std::move(from);
  }

  inline GetAddressResponse& operator=(const GetAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddressResponse& operator=(GetAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressResponse* internal_default_instance() {
    return reinterpret_cast<const GetAddressResponse*>(
               &_GetAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetAddressResponse& a, GetAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddressResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddressResponse* New() const final {
    return CreateMaybeMessage<GetAddressResponse>(nullptr);
  }

  GetAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddressResponse& from);
  void MergeFrom(const GetAddressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetAddressResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class ListAddressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListAddressRequest) */ {
 public:
  ListAddressRequest();
  virtual ~ListAddressRequest();

  ListAddressRequest(const ListAddressRequest& from);
  ListAddressRequest(ListAddressRequest&& from) noexcept
    : ListAddressRequest() {
    *this = ::std::move(from);
  }

  inline ListAddressRequest& operator=(const ListAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAddressRequest& operator=(ListAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAddressRequest* internal_default_instance() {
    return reinterpret_cast<const ListAddressRequest*>(
               &_ListAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListAddressRequest& a, ListAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAddressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAddressRequest* New() const final {
    return CreateMaybeMessage<ListAddressRequest>(nullptr);
  }

  ListAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAddressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAddressRequest& from);
  void MergeFrom(const ListAddressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAddressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.ListAddressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class ListAddressResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListAddressResponse) */ {
 public:
  ListAddressResponse();
  virtual ~ListAddressResponse();

  ListAddressResponse(const ListAddressResponse& from);
  ListAddressResponse(ListAddressResponse&& from) noexcept
    : ListAddressResponse() {
    *this = ::std::move(from);
  }

  inline ListAddressResponse& operator=(const ListAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAddressResponse& operator=(ListAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAddressResponse* internal_default_instance() {
    return reinterpret_cast<const ListAddressResponse*>(
               &_ListAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListAddressResponse& a, ListAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAddressResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAddressResponse* New() const final {
    return CreateMaybeMessage<ListAddressResponse>(nullptr);
  }

  ListAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAddressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAddressResponse& from);
  void MergeFrom(const ListAddressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAddressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.ListAddressResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class ValidateAddressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest) */ {
 public:
  ValidateAddressRequest();
  virtual ~ValidateAddressRequest();

  ValidateAddressRequest(const ValidateAddressRequest& from);
  ValidateAddressRequest(ValidateAddressRequest&& from) noexcept
    : ValidateAddressRequest() {
    *this = ::std::move(from);
  }

  inline ValidateAddressRequest& operator=(const ValidateAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateAddressRequest& operator=(ValidateAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateAddressRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateAddressRequest*>(
               &_ValidateAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ValidateAddressRequest& a, ValidateAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateAddressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateAddressRequest* New() const final {
    return CreateMaybeMessage<ValidateAddressRequest>(nullptr);
  }

  ValidateAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateAddressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateAddressRequest& from);
  void MergeFrom(const ValidateAddressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateAddressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.ValidateAddressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class ValidateAddressResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse) */ {
 public:
  ValidateAddressResponse();
  virtual ~ValidateAddressResponse();

  ValidateAddressResponse(const ValidateAddressResponse& from);
  ValidateAddressResponse(ValidateAddressResponse&& from) noexcept
    : ValidateAddressResponse() {
    *this = ::std::move(from);
  }

  inline ValidateAddressResponse& operator=(const ValidateAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateAddressResponse& operator=(ValidateAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidateAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateAddressResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateAddressResponse*>(
               &_ValidateAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ValidateAddressResponse& a, ValidateAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateAddressResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateAddressResponse* New() const final {
    return CreateMaybeMessage<ValidateAddressResponse>(nullptr);
  }

  ValidateAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateAddressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidateAddressResponse& from);
  void MergeFrom(const ValidateAddressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateAddressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.ValidateAddressResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBalanceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetBalanceRequest) */ {
 public:
  GetBalanceRequest();
  virtual ~GetBalanceRequest();

  GetBalanceRequest(const GetBalanceRequest& from);
  GetBalanceRequest(GetBalanceRequest&& from) noexcept
    : GetBalanceRequest() {
    *this = ::std::move(from);
  }

  inline GetBalanceRequest& operator=(const GetBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalanceRequest& operator=(GetBalanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBalanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const GetBalanceRequest*>(
               &_GetBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetBalanceRequest& a, GetBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalanceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBalanceRequest* New() const final {
    return CreateMaybeMessage<GetBalanceRequest>(nullptr);
  }

  GetBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBalanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBalanceRequest& from);
  void MergeFrom(const GetBalanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetBalanceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetBalanceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetBalanceResponse) */ {
 public:
  GetBalanceResponse();
  virtual ~GetBalanceResponse();

  GetBalanceResponse(const GetBalanceResponse& from);
  GetBalanceResponse(GetBalanceResponse&& from) noexcept
    : GetBalanceResponse() {
    *this = ::std::move(from);
  }

  inline GetBalanceResponse& operator=(const GetBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalanceResponse& operator=(GetBalanceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBalanceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const GetBalanceResponse*>(
               &_GetBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetBalanceResponse& a, GetBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalanceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBalanceResponse* New() const final {
    return CreateMaybeMessage<GetBalanceResponse>(nullptr);
  }

  GetBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBalanceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBalanceResponse& from);
  void MergeFrom(const GetBalanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetBalanceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class CreateRawTransactionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest) */ {
 public:
  CreateRawTransactionRequest();
  virtual ~CreateRawTransactionRequest();

  CreateRawTransactionRequest(const CreateRawTransactionRequest& from);
  CreateRawTransactionRequest(CreateRawTransactionRequest&& from) noexcept
    : CreateRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline CreateRawTransactionRequest& operator=(const CreateRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRawTransactionRequest& operator=(CreateRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRawTransactionRequest*>(
               &_CreateRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CreateRawTransactionRequest& a, CreateRawTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRawTransactionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRawTransactionRequest* New() const final {
    return CreateMaybeMessage<CreateRawTransactionRequest>(nullptr);
  }

  CreateRawTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRawTransactionRequest& from);
  void MergeFrom(const CreateRawTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRawTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class CreateRawTransactionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse) */ {
 public:
  CreateRawTransactionResponse();
  virtual ~CreateRawTransactionResponse();

  CreateRawTransactionResponse(const CreateRawTransactionResponse& from);
  CreateRawTransactionResponse(CreateRawTransactionResponse&& from) noexcept
    : CreateRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline CreateRawTransactionResponse& operator=(const CreateRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRawTransactionResponse& operator=(CreateRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRawTransactionResponse*>(
               &_CreateRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CreateRawTransactionResponse& a, CreateRawTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRawTransactionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRawTransactionResponse* New() const final {
    return CreateMaybeMessage<CreateRawTransactionResponse>(nullptr);
  }

  CreateRawTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRawTransactionResponse& from);
  void MergeFrom(const CreateRawTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRawTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SignRawTransactionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest) */ {
 public:
  SignRawTransactionRequest();
  virtual ~SignRawTransactionRequest();

  SignRawTransactionRequest(const SignRawTransactionRequest& from);
  SignRawTransactionRequest(SignRawTransactionRequest&& from) noexcept
    : SignRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline SignRawTransactionRequest& operator=(const SignRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignRawTransactionRequest& operator=(SignRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SignRawTransactionRequest*>(
               &_SignRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SignRawTransactionRequest& a, SignRawTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignRawTransactionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignRawTransactionRequest* New() const final {
    return CreateMaybeMessage<SignRawTransactionRequest>(nullptr);
  }

  SignRawTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignRawTransactionRequest& from);
  void MergeFrom(const SignRawTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignRawTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SignRawTransactionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse) */ {
 public:
  SignRawTransactionResponse();
  virtual ~SignRawTransactionResponse();

  SignRawTransactionResponse(const SignRawTransactionResponse& from);
  SignRawTransactionResponse(SignRawTransactionResponse&& from) noexcept
    : SignRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline SignRawTransactionResponse& operator=(const SignRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignRawTransactionResponse& operator=(SignRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const SignRawTransactionResponse*>(
               &_SignRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SignRawTransactionResponse& a, SignRawTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SignRawTransactionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignRawTransactionResponse* New() const final {
    return CreateMaybeMessage<SignRawTransactionResponse>(nullptr);
  }

  SignRawTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignRawTransactionResponse& from);
  void MergeFrom(const SignRawTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignRawTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class DecodeRawTransactionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest) */ {
 public:
  DecodeRawTransactionRequest();
  virtual ~DecodeRawTransactionRequest();

  DecodeRawTransactionRequest(const DecodeRawTransactionRequest& from);
  DecodeRawTransactionRequest(DecodeRawTransactionRequest&& from) noexcept
    : DecodeRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline DecodeRawTransactionRequest& operator=(const DecodeRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecodeRawTransactionRequest& operator=(DecodeRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecodeRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecodeRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const DecodeRawTransactionRequest*>(
               &_DecodeRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DecodeRawTransactionRequest& a, DecodeRawTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DecodeRawTransactionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecodeRawTransactionRequest* New() const final {
    return CreateMaybeMessage<DecodeRawTransactionRequest>(nullptr);
  }

  DecodeRawTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecodeRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecodeRawTransactionRequest& from);
  void MergeFrom(const DecodeRawTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecodeRawTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class DecodeRawTransactionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse) */ {
 public:
  DecodeRawTransactionResponse();
  virtual ~DecodeRawTransactionResponse();

  DecodeRawTransactionResponse(const DecodeRawTransactionResponse& from);
  DecodeRawTransactionResponse(DecodeRawTransactionResponse&& from) noexcept
    : DecodeRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline DecodeRawTransactionResponse& operator=(const DecodeRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecodeRawTransactionResponse& operator=(DecodeRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecodeRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecodeRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const DecodeRawTransactionResponse*>(
               &_DecodeRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DecodeRawTransactionResponse& a, DecodeRawTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DecodeRawTransactionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecodeRawTransactionResponse* New() const final {
    return CreateMaybeMessage<DecodeRawTransactionResponse>(nullptr);
  }

  DecodeRawTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecodeRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecodeRawTransactionResponse& from);
  void MergeFrom(const DecodeRawTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecodeRawTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRawTransactionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest) */ {
 public:
  BroadcastRawTransactionRequest();
  virtual ~BroadcastRawTransactionRequest();

  BroadcastRawTransactionRequest(const BroadcastRawTransactionRequest& from);
  BroadcastRawTransactionRequest(BroadcastRawTransactionRequest&& from) noexcept
    : BroadcastRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline BroadcastRawTransactionRequest& operator=(const BroadcastRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRawTransactionRequest& operator=(BroadcastRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastRawTransactionRequest*>(
               &_BroadcastRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BroadcastRawTransactionRequest& a, BroadcastRawTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastRawTransactionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastRawTransactionRequest* New() const final {
    return CreateMaybeMessage<BroadcastRawTransactionRequest>(nullptr);
  }

  BroadcastRawTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastRawTransactionRequest& from);
  void MergeFrom(const BroadcastRawTransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRawTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::Catalyst::Protocol::Wire::TransactionBroadcast& transaction() const;
  ::Catalyst::Protocol::Wire::TransactionBroadcast* release_transaction();
  ::Catalyst::Protocol::Wire::TransactionBroadcast* mutable_transaction();
  void set_allocated_transaction(::Catalyst::Protocol::Wire::TransactionBroadcast* transaction);
  private:
  const ::Catalyst::Protocol::Wire::TransactionBroadcast& _internal_transaction() const;
  ::Catalyst::Protocol::Wire::TransactionBroadcast* _internal_mutable_transaction();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Wire::TransactionBroadcast* transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRawTransactionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse) */ {
 public:
  BroadcastRawTransactionResponse();
  virtual ~BroadcastRawTransactionResponse();

  BroadcastRawTransactionResponse(const BroadcastRawTransactionResponse& from);
  BroadcastRawTransactionResponse(BroadcastRawTransactionResponse&& from) noexcept
    : BroadcastRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline BroadcastRawTransactionResponse& operator=(const BroadcastRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRawTransactionResponse& operator=(BroadcastRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const BroadcastRawTransactionResponse*>(
               &_BroadcastRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BroadcastRawTransactionResponse& a, BroadcastRawTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastRawTransactionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastRawTransactionResponse* New() const final {
    return CreateMaybeMessage<BroadcastRawTransactionResponse>(nullptr);
  }

  BroadcastRawTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastRawTransactionResponse& from);
  void MergeFrom(const BroadcastRawTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRawTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseCodeFieldNumber = 1,
  };
  // .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
  void clear_response_code();
  ::Catalyst::Protocol::Rpc::Node::ResponseCode response_code() const;
  void set_response_code(::Catalyst::Protocol::Rpc::Node::ResponseCode value);
  private:
  ::Catalyst::Protocol::Rpc::Node::ResponseCode _internal_response_code() const;
  void _internal_set_response_code(::Catalyst::Protocol::Rpc::Node::ResponseCode value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int response_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SendToRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToRequest) */ {
 public:
  SendToRequest();
  virtual ~SendToRequest();

  SendToRequest(const SendToRequest& from);
  SendToRequest(SendToRequest&& from) noexcept
    : SendToRequest() {
    *this = ::std::move(from);
  }

  inline SendToRequest& operator=(const SendToRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendToRequest& operator=(SendToRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendToRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToRequest* internal_default_instance() {
    return reinterpret_cast<const SendToRequest*>(
               &_SendToRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SendToRequest& a, SendToRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendToRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendToRequest* New() const final {
    return CreateMaybeMessage<SendToRequest>(nullptr);
  }

  SendToRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendToRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendToRequest& from);
  void MergeFrom(const SendToRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SendToRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SendToResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToResponse) */ {
 public:
  SendToResponse();
  virtual ~SendToResponse();

  SendToResponse(const SendToResponse& from);
  SendToResponse(SendToResponse&& from) noexcept
    : SendToResponse() {
    *this = ::std::move(from);
  }

  inline SendToResponse& operator=(const SendToResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendToResponse& operator=(SendToResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendToResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToResponse* internal_default_instance() {
    return reinterpret_cast<const SendToResponse*>(
               &_SendToResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SendToResponse& a, SendToResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendToResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendToResponse* New() const final {
    return CreateMaybeMessage<SendToResponse>(nullptr);
  }

  SendToResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendToResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendToResponse& from);
  void MergeFrom(const SendToResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SendToResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SendToFromRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToFromRequest) */ {
 public:
  SendToFromRequest();
  virtual ~SendToFromRequest();

  SendToFromRequest(const SendToFromRequest& from);
  SendToFromRequest(SendToFromRequest&& from) noexcept
    : SendToFromRequest() {
    *this = ::std::move(from);
  }

  inline SendToFromRequest& operator=(const SendToFromRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendToFromRequest& operator=(SendToFromRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendToFromRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToFromRequest* internal_default_instance() {
    return reinterpret_cast<const SendToFromRequest*>(
               &_SendToFromRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SendToFromRequest& a, SendToFromRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendToFromRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendToFromRequest* New() const final {
    return CreateMaybeMessage<SendToFromRequest>(nullptr);
  }

  SendToFromRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendToFromRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendToFromRequest& from);
  void MergeFrom(const SendToFromRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToFromRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SendToFromRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SendToFromResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToFromResponse) */ {
 public:
  SendToFromResponse();
  virtual ~SendToFromResponse();

  SendToFromResponse(const SendToFromResponse& from);
  SendToFromResponse(SendToFromResponse&& from) noexcept
    : SendToFromResponse() {
    *this = ::std::move(from);
  }

  inline SendToFromResponse& operator=(const SendToFromResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendToFromResponse& operator=(SendToFromResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendToFromResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToFromResponse* internal_default_instance() {
    return reinterpret_cast<const SendToFromResponse*>(
               &_SendToFromResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SendToFromResponse& a, SendToFromResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendToFromResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendToFromResponse* New() const final {
    return CreateMaybeMessage<SendToFromResponse>(nullptr);
  }

  SendToFromResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendToFromResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendToFromResponse& from);
  void MergeFrom(const SendToFromResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToFromResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SendToFromResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SendManyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendManyRequest) */ {
 public:
  SendManyRequest();
  virtual ~SendManyRequest();

  SendManyRequest(const SendManyRequest& from);
  SendManyRequest(SendManyRequest&& from) noexcept
    : SendManyRequest() {
    *this = ::std::move(from);
  }

  inline SendManyRequest& operator=(const SendManyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendManyRequest& operator=(SendManyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendManyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendManyRequest* internal_default_instance() {
    return reinterpret_cast<const SendManyRequest*>(
               &_SendManyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SendManyRequest& a, SendManyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendManyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendManyRequest* New() const final {
    return CreateMaybeMessage<SendManyRequest>(nullptr);
  }

  SendManyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendManyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendManyRequest& from);
  void MergeFrom(const SendManyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendManyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SendManyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendManyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SendManyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendManyResponse) */ {
 public:
  SendManyResponse();
  virtual ~SendManyResponse();

  SendManyResponse(const SendManyResponse& from);
  SendManyResponse(SendManyResponse&& from) noexcept
    : SendManyResponse() {
    *this = ::std::move(from);
  }

  inline SendManyResponse& operator=(const SendManyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendManyResponse& operator=(SendManyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendManyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendManyResponse* internal_default_instance() {
    return reinterpret_cast<const SendManyResponse*>(
               &_SendManyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SendManyResponse& a, SendManyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendManyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendManyResponse* New() const final {
    return CreateMaybeMessage<SendManyResponse>(nullptr);
  }

  SendManyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendManyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendManyResponse& from);
  void MergeFrom(const SendManyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendManyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SendManyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendManyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SendFromManyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendFromManyRequest) */ {
 public:
  SendFromManyRequest();
  virtual ~SendFromManyRequest();

  SendFromManyRequest(const SendFromManyRequest& from);
  SendFromManyRequest(SendFromManyRequest&& from) noexcept
    : SendFromManyRequest() {
    *this = ::std::move(from);
  }

  inline SendFromManyRequest& operator=(const SendFromManyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendFromManyRequest& operator=(SendFromManyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendFromManyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFromManyRequest* internal_default_instance() {
    return reinterpret_cast<const SendFromManyRequest*>(
               &_SendFromManyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SendFromManyRequest& a, SendFromManyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendFromManyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendFromManyRequest* New() const final {
    return CreateMaybeMessage<SendFromManyRequest>(nullptr);
  }

  SendFromManyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendFromManyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendFromManyRequest& from);
  void MergeFrom(const SendFromManyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendFromManyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SendFromManyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SendFromManyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendFromManyResponse) */ {
 public:
  SendFromManyResponse();
  virtual ~SendFromManyResponse();

  SendFromManyResponse(const SendFromManyResponse& from);
  SendFromManyResponse(SendFromManyResponse&& from) noexcept
    : SendFromManyResponse() {
    *this = ::std::move(from);
  }

  inline SendFromManyResponse& operator=(const SendFromManyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendFromManyResponse& operator=(SendFromManyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendFromManyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFromManyResponse* internal_default_instance() {
    return reinterpret_cast<const SendFromManyResponse*>(
               &_SendFromManyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SendFromManyResponse& a, SendFromManyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendFromManyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendFromManyResponse* New() const final {
    return CreateMaybeMessage<SendFromManyResponse>(nullptr);
  }

  SendFromManyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendFromManyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendFromManyResponse& from);
  void MergeFrom(const SendFromManyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendFromManyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SendFromManyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class AddNodeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddNodeRequest) */ {
 public:
  AddNodeRequest();
  virtual ~AddNodeRequest();

  AddNodeRequest(const AddNodeRequest& from);
  AddNodeRequest(AddNodeRequest&& from) noexcept
    : AddNodeRequest() {
    *this = ::std::move(from);
  }

  inline AddNodeRequest& operator=(const AddNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNodeRequest& operator=(AddNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNodeRequest* internal_default_instance() {
    return reinterpret_cast<const AddNodeRequest*>(
               &_AddNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AddNodeRequest& a, AddNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNodeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNodeRequest* New() const final {
    return CreateMaybeMessage<AddNodeRequest>(nullptr);
  }

  AddNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNodeRequest& from);
  void MergeFrom(const AddNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.AddNodeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class AddNodeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddNodeResponse) */ {
 public:
  AddNodeResponse();
  virtual ~AddNodeResponse();

  AddNodeResponse(const AddNodeResponse& from);
  AddNodeResponse(AddNodeResponse&& from) noexcept
    : AddNodeResponse() {
    *this = ::std::move(from);
  }

  inline AddNodeResponse& operator=(const AddNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNodeResponse& operator=(AddNodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNodeResponse* internal_default_instance() {
    return reinterpret_cast<const AddNodeResponse*>(
               &_AddNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(AddNodeResponse& a, AddNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNodeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddNodeResponse* New() const final {
    return CreateMaybeMessage<AddNodeResponse>(nullptr);
  }

  AddNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddNodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddNodeResponse& from);
  void MergeFrom(const AddNodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.AddNodeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerListRequest) */ {
 public:
  GetPeerListRequest();
  virtual ~GetPeerListRequest();

  GetPeerListRequest(const GetPeerListRequest& from);
  GetPeerListRequest(GetPeerListRequest&& from) noexcept
    : GetPeerListRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerListRequest& operator=(const GetPeerListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerListRequest& operator=(GetPeerListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeerListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerListRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerListRequest*>(
               &_GetPeerListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetPeerListRequest& a, GetPeerListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeerListRequest* New() const final {
    return CreateMaybeMessage<GetPeerListRequest>(nullptr);
  }

  GetPeerListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeerListRequest& from);
  void MergeFrom(const GetPeerListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetPeerListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerListResponse) */ {
 public:
  GetPeerListResponse();
  virtual ~GetPeerListResponse();

  GetPeerListResponse(const GetPeerListResponse& from);
  GetPeerListResponse(GetPeerListResponse&& from) noexcept
    : GetPeerListResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerListResponse& operator=(const GetPeerListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerListResponse& operator=(GetPeerListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeerListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerListResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerListResponse*>(
               &_GetPeerListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetPeerListResponse& a, GetPeerListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeerListResponse* New() const final {
    return CreateMaybeMessage<GetPeerListResponse>(nullptr);
  }

  GetPeerListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeerListResponse& from);
  void MergeFrom(const GetPeerListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetPeerListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 1,
  };
  // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::Catalyst::Protocol::Peer::PeerId* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >*
      mutable_peers();
  private:
  const ::Catalyst::Protocol::Peer::PeerId& _internal_peers(int index) const;
  ::Catalyst::Protocol::Peer::PeerId* _internal_add_peers();
  public:
  const ::Catalyst::Protocol::Peer::PeerId& peers(int index) const;
  ::Catalyst::Protocol::Peer::PeerId* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >&
      peers() const;

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId > peers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerReputationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest) */ {
 public:
  GetPeerReputationRequest();
  virtual ~GetPeerReputationRequest();

  GetPeerReputationRequest(const GetPeerReputationRequest& from);
  GetPeerReputationRequest(GetPeerReputationRequest&& from) noexcept
    : GetPeerReputationRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerReputationRequest& operator=(const GetPeerReputationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerReputationRequest& operator=(GetPeerReputationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeerReputationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerReputationRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerReputationRequest*>(
               &_GetPeerReputationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetPeerReputationRequest& a, GetPeerReputationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerReputationRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeerReputationRequest* New() const final {
    return CreateMaybeMessage<GetPeerReputationRequest>(nullptr);
  }

  GetPeerReputationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerReputationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeerReputationRequest& from);
  void MergeFrom(const GetPeerReputationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerReputationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // bytes public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerReputationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse) */ {
 public:
  GetPeerReputationResponse();
  virtual ~GetPeerReputationResponse();

  GetPeerReputationResponse(const GetPeerReputationResponse& from);
  GetPeerReputationResponse(GetPeerReputationResponse&& from) noexcept
    : GetPeerReputationResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerReputationResponse& operator=(const GetPeerReputationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerReputationResponse& operator=(GetPeerReputationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeerReputationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerReputationResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerReputationResponse*>(
               &_GetPeerReputationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetPeerReputationResponse& a, GetPeerReputationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerReputationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeerReputationResponse* New() const final {
    return CreateMaybeMessage<GetPeerReputationResponse>(nullptr);
  }

  GetPeerReputationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerReputationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeerReputationResponse& from);
  void MergeFrom(const GetPeerReputationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerReputationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReputationFieldNumber = 1,
  };
  // int32 reputation = 1;
  void clear_reputation();
  ::PROTOBUF_NAMESPACE_ID::int32 reputation() const;
  void set_reputation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reputation() const;
  void _internal_set_reputation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 reputation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SetPeerBlacklistRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest) */ {
 public:
  SetPeerBlacklistRequest();
  virtual ~SetPeerBlacklistRequest();

  SetPeerBlacklistRequest(const SetPeerBlacklistRequest& from);
  SetPeerBlacklistRequest(SetPeerBlacklistRequest&& from) noexcept
    : SetPeerBlacklistRequest() {
    *this = ::std::move(from);
  }

  inline SetPeerBlacklistRequest& operator=(const SetPeerBlacklistRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPeerBlacklistRequest& operator=(SetPeerBlacklistRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPeerBlacklistRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPeerBlacklistRequest* internal_default_instance() {
    return reinterpret_cast<const SetPeerBlacklistRequest*>(
               &_SetPeerBlacklistRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SetPeerBlacklistRequest& a, SetPeerBlacklistRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPeerBlacklistRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPeerBlacklistRequest* New() const final {
    return CreateMaybeMessage<SetPeerBlacklistRequest>(nullptr);
  }

  SetPeerBlacklistRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPeerBlacklistRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPeerBlacklistRequest& from);
  void MergeFrom(const SetPeerBlacklistRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPeerBlacklistRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kIpFieldNumber = 2,
    kBlacklistFieldNumber = 3,
  };
  // bytes public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bool blacklist = 3;
  void clear_blacklist();
  bool blacklist() const;
  void set_blacklist(bool value);
  private:
  bool _internal_blacklist() const;
  void _internal_set_blacklist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  bool blacklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SetPeerBlacklistResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse) */ {
 public:
  SetPeerBlacklistResponse();
  virtual ~SetPeerBlacklistResponse();

  SetPeerBlacklistResponse(const SetPeerBlacklistResponse& from);
  SetPeerBlacklistResponse(SetPeerBlacklistResponse&& from) noexcept
    : SetPeerBlacklistResponse() {
    *this = ::std::move(from);
  }

  inline SetPeerBlacklistResponse& operator=(const SetPeerBlacklistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPeerBlacklistResponse& operator=(SetPeerBlacklistResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPeerBlacklistResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPeerBlacklistResponse* internal_default_instance() {
    return reinterpret_cast<const SetPeerBlacklistResponse*>(
               &_SetPeerBlacklistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SetPeerBlacklistResponse& a, SetPeerBlacklistResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPeerBlacklistResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPeerBlacklistResponse* New() const final {
    return CreateMaybeMessage<SetPeerBlacklistResponse>(nullptr);
  }

  SetPeerBlacklistResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPeerBlacklistResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPeerBlacklistResponse& from);
  void MergeFrom(const SetPeerBlacklistResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPeerBlacklistResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kIpFieldNumber = 2,
    kBlacklistFieldNumber = 3,
  };
  // bytes public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bool blacklist = 3;
  void clear_blacklist();
  bool blacklist() const;
  void set_blacklist(bool value);
  private:
  bool _internal_blacklist() const;
  void _internal_set_blacklist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  bool blacklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest) */ {
 public:
  GetPeerInfoRequest();
  virtual ~GetPeerInfoRequest();

  GetPeerInfoRequest(const GetPeerInfoRequest& from);
  GetPeerInfoRequest(GetPeerInfoRequest&& from) noexcept
    : GetPeerInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerInfoRequest& operator=(const GetPeerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerInfoRequest& operator=(GetPeerInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeerInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerInfoRequest*>(
               &_GetPeerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GetPeerInfoRequest& a, GetPeerInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeerInfoRequest* New() const final {
    return CreateMaybeMessage<GetPeerInfoRequest>(nullptr);
  }

  GetPeerInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeerInfoRequest& from);
  void MergeFrom(const GetPeerInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // bytes public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse) */ {
 public:
  GetPeerInfoResponse();
  virtual ~GetPeerInfoResponse();

  GetPeerInfoResponse(const GetPeerInfoResponse& from);
  GetPeerInfoResponse(GetPeerInfoResponse&& from) noexcept
    : GetPeerInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerInfoResponse& operator=(const GetPeerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerInfoResponse& operator=(GetPeerInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeerInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerInfoResponse*>(
               &_GetPeerInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetPeerInfoResponse& a, GetPeerInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeerInfoResponse* New() const final {
    return CreateMaybeMessage<GetPeerInfoResponse>(nullptr);
  }

  GetPeerInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeerInfoResponse& from);
  void MergeFrom(const GetPeerInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerInfoFieldNumber = 1,
  };
  // repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
  int peer_info_size() const;
  private:
  int _internal_peer_info_size() const;
  public:
  void clear_peer_info();
  ::Catalyst::Protocol::Peer::PeerInfo* mutable_peer_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo >*
      mutable_peer_info();
  private:
  const ::Catalyst::Protocol::Peer::PeerInfo& _internal_peer_info(int index) const;
  ::Catalyst::Protocol::Peer::PeerInfo* _internal_add_peer_info();
  public:
  const ::Catalyst::Protocol::Peer::PeerInfo& peer_info(int index) const;
  ::Catalyst::Protocol::Peer::PeerInfo* add_peer_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo >&
      peer_info() const;

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo > peer_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetConnectionCountRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest) */ {
 public:
  GetConnectionCountRequest();
  virtual ~GetConnectionCountRequest();

  GetConnectionCountRequest(const GetConnectionCountRequest& from);
  GetConnectionCountRequest(GetConnectionCountRequest&& from) noexcept
    : GetConnectionCountRequest() {
    *this = ::std::move(from);
  }

  inline GetConnectionCountRequest& operator=(const GetConnectionCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectionCountRequest& operator=(GetConnectionCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnectionCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetConnectionCountRequest*>(
               &_GetConnectionCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetConnectionCountRequest& a, GetConnectionCountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectionCountRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionCountRequest* New() const final {
    return CreateMaybeMessage<GetConnectionCountRequest>(nullptr);
  }

  GetConnectionCountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionCountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnectionCountRequest& from);
  void MergeFrom(const GetConnectionCountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionCountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetConnectionCountResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse) */ {
 public:
  GetConnectionCountResponse();
  virtual ~GetConnectionCountResponse();

  GetConnectionCountResponse(const GetConnectionCountResponse& from);
  GetConnectionCountResponse(GetConnectionCountResponse&& from) noexcept
    : GetConnectionCountResponse() {
    *this = ::std::move(from);
  }

  inline GetConnectionCountResponse& operator=(const GetConnectionCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnectionCountResponse& operator=(GetConnectionCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnectionCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetConnectionCountResponse*>(
               &_GetConnectionCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetConnectionCountResponse& a, GetConnectionCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnectionCountResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionCountResponse* New() const final {
    return CreateMaybeMessage<GetConnectionCountResponse>(nullptr);
  }

  GetConnectionCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionCountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnectionCountResponse& from);
  void MergeFrom(const GetConnectionCountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionCountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetDeltaRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetDeltaRequest) */ {
 public:
  GetDeltaRequest();
  virtual ~GetDeltaRequest();

  GetDeltaRequest(const GetDeltaRequest& from);
  GetDeltaRequest(GetDeltaRequest&& from) noexcept
    : GetDeltaRequest() {
    *this = ::std::move(from);
  }

  inline GetDeltaRequest& operator=(const GetDeltaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeltaRequest& operator=(GetDeltaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeltaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeltaRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeltaRequest*>(
               &_GetDeltaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetDeltaRequest& a, GetDeltaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeltaRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeltaRequest* New() const final {
    return CreateMaybeMessage<GetDeltaRequest>(nullptr);
  }

  GetDeltaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeltaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeltaRequest& from);
  void MergeFrom(const GetDeltaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeltaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetDeltaRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaDfsHashFieldNumber = 1,
  };
  // bytes delta_dfs_hash = 1;
  void clear_delta_dfs_hash();
  const std::string& delta_dfs_hash() const;
  void set_delta_dfs_hash(const std::string& value);
  void set_delta_dfs_hash(std::string&& value);
  void set_delta_dfs_hash(const char* value);
  void set_delta_dfs_hash(const void* value, size_t size);
  std::string* mutable_delta_dfs_hash();
  std::string* release_delta_dfs_hash();
  void set_allocated_delta_dfs_hash(std::string* delta_dfs_hash);
  private:
  const std::string& _internal_delta_dfs_hash() const;
  void _internal_set_delta_dfs_hash(const std::string& value);
  std::string* _internal_mutable_delta_dfs_hash();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_dfs_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetDeltaResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetDeltaResponse) */ {
 public:
  GetDeltaResponse();
  virtual ~GetDeltaResponse();

  GetDeltaResponse(const GetDeltaResponse& from);
  GetDeltaResponse(GetDeltaResponse&& from) noexcept
    : GetDeltaResponse() {
    *this = ::std::move(from);
  }

  inline GetDeltaResponse& operator=(const GetDeltaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeltaResponse& operator=(GetDeltaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeltaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeltaResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeltaResponse*>(
               &_GetDeltaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetDeltaResponse& a, GetDeltaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeltaResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeltaResponse* New() const final {
    return CreateMaybeMessage<GetDeltaResponse>(nullptr);
  }

  GetDeltaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeltaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeltaResponse& from);
  void MergeFrom(const GetDeltaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeltaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetDeltaResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaFieldNumber = 1,
  };
  // .Catalyst.Protocol.Deltas.Delta delta = 1;
  bool has_delta() const;
  private:
  bool _internal_has_delta() const;
  public:
  void clear_delta();
  const ::Catalyst::Protocol::Deltas::Delta& delta() const;
  ::Catalyst::Protocol::Deltas::Delta* release_delta();
  ::Catalyst::Protocol::Deltas::Delta* mutable_delta();
  void set_allocated_delta(::Catalyst::Protocol::Deltas::Delta* delta);
  private:
  const ::Catalyst::Protocol::Deltas::Delta& _internal_delta() const;
  ::Catalyst::Protocol::Deltas::Delta* _internal_mutable_delta();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Deltas::Delta* delta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetMempoolRequest) */ {
 public:
  GetMempoolRequest();
  virtual ~GetMempoolRequest();

  GetMempoolRequest(const GetMempoolRequest& from);
  GetMempoolRequest(GetMempoolRequest&& from) noexcept
    : GetMempoolRequest() {
    *this = ::std::move(from);
  }

  inline GetMempoolRequest& operator=(const GetMempoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolRequest& operator=(GetMempoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMempoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolRequest* internal_default_instance() {
    return reinterpret_cast<const GetMempoolRequest*>(
               &_GetMempoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetMempoolRequest& a, GetMempoolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolRequest* New() const final {
    return CreateMaybeMessage<GetMempoolRequest>(nullptr);
  }

  GetMempoolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMempoolRequest& from);
  void MergeFrom(const GetMempoolRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetMempoolRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetMempoolResponse) */ {
 public:
  GetMempoolResponse();
  virtual ~GetMempoolResponse();

  GetMempoolResponse(const GetMempoolResponse& from);
  GetMempoolResponse(GetMempoolResponse&& from) noexcept
    : GetMempoolResponse() {
    *this = ::std::move(from);
  }

  inline GetMempoolResponse& operator=(const GetMempoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolResponse& operator=(GetMempoolResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMempoolResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolResponse* internal_default_instance() {
    return reinterpret_cast<const GetMempoolResponse*>(
               &_GetMempoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetMempoolResponse& a, GetMempoolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolResponse* New() const final {
    return CreateMaybeMessage<GetMempoolResponse>(nullptr);
  }

  GetMempoolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMempoolResponse& from);
  void MergeFrom(const GetMempoolResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetMempoolResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
  };
  // repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::Catalyst::Protocol::Transaction::PublicEntry* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >*
      mutable_transactions();
  private:
  const ::Catalyst::Protocol::Transaction::PublicEntry& _internal_transactions(int index) const;
  ::Catalyst::Protocol::Transaction::PublicEntry* _internal_add_transactions();
  public:
  const ::Catalyst::Protocol::Transaction::PublicEntry& transactions(int index) const;
  ::Catalyst::Protocol::Transaction::PublicEntry* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry > transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SignMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignMessageRequest) */ {
 public:
  SignMessageRequest();
  virtual ~SignMessageRequest();

  SignMessageRequest(const SignMessageRequest& from);
  SignMessageRequest(SignMessageRequest&& from) noexcept
    : SignMessageRequest() {
    *this = ::std::move(from);
  }

  inline SignMessageRequest& operator=(const SignMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignMessageRequest& operator=(SignMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SignMessageRequest*>(
               &_SignMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SignMessageRequest& a, SignMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignMessageRequest* New() const final {
    return CreateMaybeMessage<SignMessageRequest>(nullptr);
  }

  SignMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignMessageRequest& from);
  void MergeFrom(const SignMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SignMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kKeyIdFieldNumber = 2,
    kSigningContextFieldNumber = 3,
  };
  // bytes message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string key_id = 2;
  void clear_key_id();
  const std::string& key_id() const;
  void set_key_id(const std::string& value);
  void set_key_id(std::string&& value);
  void set_key_id(const char* value);
  void set_key_id(const char* value, size_t size);
  std::string* mutable_key_id();
  std::string* release_key_id();
  void set_allocated_key_id(std::string* key_id);
  private:
  const std::string& _internal_key_id() const;
  void _internal_set_key_id(const std::string& value);
  std::string* _internal_mutable_key_id();
  public:

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
  bool has_signing_context() const;
  private:
  bool _internal_has_signing_context() const;
  public:
  void clear_signing_context();
  const ::Catalyst::Protocol::Cryptography::SigningContext& signing_context() const;
  ::Catalyst::Protocol::Cryptography::SigningContext* release_signing_context();
  ::Catalyst::Protocol::Cryptography::SigningContext* mutable_signing_context();
  void set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context);
  private:
  const ::Catalyst::Protocol::Cryptography::SigningContext& _internal_signing_context() const;
  ::Catalyst::Protocol::Cryptography::SigningContext* _internal_mutable_signing_context();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_id_;
  ::Catalyst::Protocol::Cryptography::SigningContext* signing_context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SignMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignMessageResponse) */ {
 public:
  SignMessageResponse();
  virtual ~SignMessageResponse();

  SignMessageResponse(const SignMessageResponse& from);
  SignMessageResponse(SignMessageResponse&& from) noexcept
    : SignMessageResponse() {
    *this = ::std::move(from);
  }

  inline SignMessageResponse& operator=(const SignMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignMessageResponse& operator=(SignMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SignMessageResponse*>(
               &_SignMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SignMessageResponse& a, SignMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SignMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignMessageResponse* New() const final {
    return CreateMaybeMessage<SignMessageResponse>(nullptr);
  }

  SignMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignMessageResponse& from);
  void MergeFrom(const SignMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SignMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
    kOriginalMessageFieldNumber = 3,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes original_message = 3;
  void clear_original_message();
  const std::string& original_message() const;
  void set_original_message(const std::string& value);
  void set_original_message(std::string&& value);
  void set_original_message(const char* value);
  void set_original_message(const void* value, size_t size);
  std::string* mutable_original_message();
  std::string* release_original_message();
  void set_allocated_original_message(std::string* original_message);
  private:
  const std::string& _internal_original_message() const;
  void _internal_set_original_message(const std::string& value);
  std::string* _internal_mutable_original_message();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class VerifyMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest) */ {
 public:
  VerifyMessageRequest();
  virtual ~VerifyMessageRequest();

  VerifyMessageRequest(const VerifyMessageRequest& from);
  VerifyMessageRequest(VerifyMessageRequest&& from) noexcept
    : VerifyMessageRequest() {
    *this = ::std::move(from);
  }

  inline VerifyMessageRequest& operator=(const VerifyMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyMessageRequest& operator=(VerifyMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyMessageRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyMessageRequest*>(
               &_VerifyMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(VerifyMessageRequest& a, VerifyMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyMessageRequest* New() const final {
    return CreateMaybeMessage<VerifyMessageRequest>(nullptr);
  }

  VerifyMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyMessageRequest& from);
  void MergeFrom(const VerifyMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.VerifyMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
    kMessageFieldNumber = 3,
    kSigningContextFieldNumber = 4,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
  bool has_signing_context() const;
  private:
  bool _internal_has_signing_context() const;
  public:
  void clear_signing_context();
  const ::Catalyst::Protocol::Cryptography::SigningContext& signing_context() const;
  ::Catalyst::Protocol::Cryptography::SigningContext* release_signing_context();
  ::Catalyst::Protocol::Cryptography::SigningContext* mutable_signing_context();
  void set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context);
  private:
  const ::Catalyst::Protocol::Cryptography::SigningContext& _internal_signing_context() const;
  ::Catalyst::Protocol::Cryptography::SigningContext* _internal_mutable_signing_context();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::Catalyst::Protocol::Cryptography::SigningContext* signing_context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class VerifyMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse) */ {
 public:
  VerifyMessageResponse();
  virtual ~VerifyMessageResponse();

  VerifyMessageResponse(const VerifyMessageResponse& from);
  VerifyMessageResponse(VerifyMessageResponse&& from) noexcept
    : VerifyMessageResponse() {
    *this = ::std::move(from);
  }

  inline VerifyMessageResponse& operator=(const VerifyMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyMessageResponse& operator=(VerifyMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyMessageResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyMessageResponse*>(
               &_VerifyMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(VerifyMessageResponse& a, VerifyMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyMessageResponse* New() const final {
    return CreateMaybeMessage<VerifyMessageResponse>(nullptr);
  }

  VerifyMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyMessageResponse& from);
  void MergeFrom(const VerifyMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.VerifyMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSignedByKeyFieldNumber = 1,
  };
  // bool is_signed_by_key = 1;
  void clear_is_signed_by_key();
  bool is_signed_by_key() const;
  void set_is_signed_by_key(bool value);
  private:
  bool _internal_is_signed_by_key() const;
  void _internal_set_is_signed_by_key(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_signed_by_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class ServiceStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest) */ {
 public:
  ServiceStatusRequest();
  virtual ~ServiceStatusRequest();

  ServiceStatusRequest(const ServiceStatusRequest& from);
  ServiceStatusRequest(ServiceStatusRequest&& from) noexcept
    : ServiceStatusRequest() {
    *this = ::std::move(from);
  }

  inline ServiceStatusRequest& operator=(const ServiceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStatusRequest& operator=(ServiceStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusRequest*>(
               &_ServiceStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ServiceStatusRequest& a, ServiceStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStatusRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceStatusRequest* New() const final {
    return CreateMaybeMessage<ServiceStatusRequest>(nullptr);
  }

  ServiceStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceStatusRequest& from);
  void MergeFrom(const ServiceStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.ServiceStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class ServiceStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse) */ {
 public:
  ServiceStatusResponse();
  virtual ~ServiceStatusResponse();

  ServiceStatusResponse(const ServiceStatusResponse& from);
  ServiceStatusResponse(ServiceStatusResponse&& from) noexcept
    : ServiceStatusResponse() {
    *this = ::std::move(from);
  }

  inline ServiceStatusResponse& operator=(const ServiceStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStatusResponse& operator=(ServiceStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusResponse*>(
               &_ServiceStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ServiceStatusResponse& a, ServiceStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceStatusResponse* New() const final {
    return CreateMaybeMessage<ServiceStatusResponse>(nullptr);
  }

  ServiceStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceStatusResponse& from);
  void MergeFrom(const ServiceStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.ServiceStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class AddFileToDfsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest) */ {
 public:
  AddFileToDfsRequest();
  virtual ~AddFileToDfsRequest();

  AddFileToDfsRequest(const AddFileToDfsRequest& from);
  AddFileToDfsRequest(AddFileToDfsRequest&& from) noexcept
    : AddFileToDfsRequest() {
    *this = ::std::move(from);
  }

  inline AddFileToDfsRequest& operator=(const AddFileToDfsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFileToDfsRequest& operator=(AddFileToDfsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFileToDfsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFileToDfsRequest* internal_default_instance() {
    return reinterpret_cast<const AddFileToDfsRequest*>(
               &_AddFileToDfsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(AddFileToDfsRequest& a, AddFileToDfsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFileToDfsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFileToDfsRequest* New() const final {
    return CreateMaybeMessage<AddFileToDfsRequest>(nullptr);
  }

  AddFileToDfsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFileToDfsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFileToDfsRequest& from);
  void MergeFrom(const AddFileToDfsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFileToDfsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kNodeFieldNumber = 3,
    kFileSizeFieldNumber = 1,
  };
  // string file_name = 2;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string node = 3;
  void clear_node();
  const std::string& node() const;
  void set_node(const std::string& value);
  void set_node(std::string&& value);
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  std::string* mutable_node();
  std::string* release_node();
  void set_allocated_node(std::string* node);
  private:
  const std::string& _internal_node() const;
  void _internal_set_node(const std::string& value);
  std::string* _internal_mutable_node();
  public:

  // uint64 file_size = 1;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class AddFileToDfsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse) */ {
 public:
  AddFileToDfsResponse();
  virtual ~AddFileToDfsResponse();

  AddFileToDfsResponse(const AddFileToDfsResponse& from);
  AddFileToDfsResponse(AddFileToDfsResponse&& from) noexcept
    : AddFileToDfsResponse() {
    *this = ::std::move(from);
  }

  inline AddFileToDfsResponse& operator=(const AddFileToDfsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFileToDfsResponse& operator=(AddFileToDfsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddFileToDfsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFileToDfsResponse* internal_default_instance() {
    return reinterpret_cast<const AddFileToDfsResponse*>(
               &_AddFileToDfsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(AddFileToDfsResponse& a, AddFileToDfsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFileToDfsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddFileToDfsResponse* New() const final {
    return CreateMaybeMessage<AddFileToDfsResponse>(nullptr);
  }

  AddFileToDfsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddFileToDfsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddFileToDfsResponse& from);
  void MergeFrom(const AddFileToDfsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFileToDfsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseCodeFieldNumber = 1,
    kDfsHashFieldNumber = 2,
  };
  // bytes response_code = 1;
  void clear_response_code();
  const std::string& response_code() const;
  void set_response_code(const std::string& value);
  void set_response_code(std::string&& value);
  void set_response_code(const char* value);
  void set_response_code(const void* value, size_t size);
  std::string* mutable_response_code();
  std::string* release_response_code();
  void set_allocated_response_code(std::string* response_code);
  private:
  const std::string& _internal_response_code() const;
  void _internal_set_response_code(const std::string& value);
  std::string* _internal_mutable_response_code();
  public:

  // string dfs_hash = 2;
  void clear_dfs_hash();
  const std::string& dfs_hash() const;
  void set_dfs_hash(const std::string& value);
  void set_dfs_hash(std::string&& value);
  void set_dfs_hash(const char* value);
  void set_dfs_hash(const char* value, size_t size);
  std::string* mutable_dfs_hash();
  std::string* release_dfs_hash();
  void set_allocated_dfs_hash(std::string* dfs_hash);
  private:
  const std::string& _internal_dfs_hash() const;
  void _internal_set_dfs_hash(const std::string& value);
  std::string* _internal_mutable_dfs_hash();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dfs_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class TransferFileBytesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest) */ {
 public:
  TransferFileBytesRequest();
  virtual ~TransferFileBytesRequest();

  TransferFileBytesRequest(const TransferFileBytesRequest& from);
  TransferFileBytesRequest(TransferFileBytesRequest&& from) noexcept
    : TransferFileBytesRequest() {
    *this = ::std::move(from);
  }

  inline TransferFileBytesRequest& operator=(const TransferFileBytesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferFileBytesRequest& operator=(TransferFileBytesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferFileBytesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferFileBytesRequest* internal_default_instance() {
    return reinterpret_cast<const TransferFileBytesRequest*>(
               &_TransferFileBytesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(TransferFileBytesRequest& a, TransferFileBytesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferFileBytesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferFileBytesRequest* New() const final {
    return CreateMaybeMessage<TransferFileBytesRequest>(nullptr);
  }

  TransferFileBytesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferFileBytesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferFileBytesRequest& from);
  void MergeFrom(const TransferFileBytesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferFileBytesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkBytesFieldNumber = 2,
    kCorrelationFileNameFieldNumber = 3,
    kChunkIdFieldNumber = 1,
  };
  // bytes chunk_bytes = 2;
  void clear_chunk_bytes();
  const std::string& chunk_bytes() const;
  void set_chunk_bytes(const std::string& value);
  void set_chunk_bytes(std::string&& value);
  void set_chunk_bytes(const char* value);
  void set_chunk_bytes(const void* value, size_t size);
  std::string* mutable_chunk_bytes();
  std::string* release_chunk_bytes();
  void set_allocated_chunk_bytes(std::string* chunk_bytes);
  private:
  const std::string& _internal_chunk_bytes() const;
  void _internal_set_chunk_bytes(const std::string& value);
  std::string* _internal_mutable_chunk_bytes();
  public:

  // bytes correlation_file_name = 3;
  void clear_correlation_file_name();
  const std::string& correlation_file_name() const;
  void set_correlation_file_name(const std::string& value);
  void set_correlation_file_name(std::string&& value);
  void set_correlation_file_name(const char* value);
  void set_correlation_file_name(const void* value, size_t size);
  std::string* mutable_correlation_file_name();
  std::string* release_correlation_file_name();
  void set_allocated_correlation_file_name(std::string* correlation_file_name);
  private:
  const std::string& _internal_correlation_file_name() const;
  void _internal_set_correlation_file_name(const std::string& value);
  std::string* _internal_mutable_correlation_file_name();
  public:

  // uint32 chunk_id = 1;
  void clear_chunk_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_id() const;
  void set_chunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk_id() const;
  void _internal_set_chunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correlation_file_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class TransferFileBytesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse) */ {
 public:
  TransferFileBytesResponse();
  virtual ~TransferFileBytesResponse();

  TransferFileBytesResponse(const TransferFileBytesResponse& from);
  TransferFileBytesResponse(TransferFileBytesResponse&& from) noexcept
    : TransferFileBytesResponse() {
    *this = ::std::move(from);
  }

  inline TransferFileBytesResponse& operator=(const TransferFileBytesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferFileBytesResponse& operator=(TransferFileBytesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferFileBytesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferFileBytesResponse* internal_default_instance() {
    return reinterpret_cast<const TransferFileBytesResponse*>(
               &_TransferFileBytesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TransferFileBytesResponse& a, TransferFileBytesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferFileBytesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferFileBytesResponse* New() const final {
    return CreateMaybeMessage<TransferFileBytesResponse>(nullptr);
  }

  TransferFileBytesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferFileBytesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferFileBytesResponse& from);
  void MergeFrom(const TransferFileBytesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferFileBytesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseCodeFieldNumber = 1,
  };
  // bytes response_code = 1;
  void clear_response_code();
  const std::string& response_code() const;
  void set_response_code(const std::string& value);
  void set_response_code(std::string&& value);
  void set_response_code(const char* value);
  void set_response_code(const void* value, size_t size);
  std::string* mutable_response_code();
  std::string* release_response_code();
  void set_allocated_response_code(std::string* response_code);
  private:
  const std::string& _internal_response_code() const;
  void _internal_set_response_code(const std::string& value);
  std::string* _internal_mutable_response_code();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class RemovePeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.RemovePeerRequest) */ {
 public:
  RemovePeerRequest();
  virtual ~RemovePeerRequest();

  RemovePeerRequest(const RemovePeerRequest& from);
  RemovePeerRequest(RemovePeerRequest&& from) noexcept
    : RemovePeerRequest() {
    *this = ::std::move(from);
  }

  inline RemovePeerRequest& operator=(const RemovePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePeerRequest& operator=(RemovePeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeerRequest* internal_default_instance() {
    return reinterpret_cast<const RemovePeerRequest*>(
               &_RemovePeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(RemovePeerRequest& a, RemovePeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePeerRequest* New() const final {
    return CreateMaybeMessage<RemovePeerRequest>(nullptr);
  }

  RemovePeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePeerRequest& from);
  void MergeFrom(const RemovePeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.RemovePeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerIpFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // bytes peer_ip = 1;
  void clear_peer_ip();
  const std::string& peer_ip() const;
  void set_peer_ip(const std::string& value);
  void set_peer_ip(std::string&& value);
  void set_peer_ip(const char* value);
  void set_peer_ip(const void* value, size_t size);
  std::string* mutable_peer_ip();
  std::string* release_peer_ip();
  void set_allocated_peer_ip(std::string* peer_ip);
  private:
  const std::string& _internal_peer_ip() const;
  void _internal_set_peer_ip(const std::string& value);
  std::string* _internal_mutable_peer_ip();
  public:

  // bytes public_key = 2;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class RemovePeerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.RemovePeerResponse) */ {
 public:
  RemovePeerResponse();
  virtual ~RemovePeerResponse();

  RemovePeerResponse(const RemovePeerResponse& from);
  RemovePeerResponse(RemovePeerResponse&& from) noexcept
    : RemovePeerResponse() {
    *this = ::std::move(from);
  }

  inline RemovePeerResponse& operator=(const RemovePeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePeerResponse& operator=(RemovePeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeerResponse* internal_default_instance() {
    return reinterpret_cast<const RemovePeerResponse*>(
               &_RemovePeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(RemovePeerResponse& a, RemovePeerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePeerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePeerResponse* New() const final {
    return CreateMaybeMessage<RemovePeerResponse>(nullptr);
  }

  RemovePeerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePeerResponse& from);
  void MergeFrom(const RemovePeerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.RemovePeerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedCountFieldNumber = 1,
  };
  // uint32 deleted_count = 1;
  void clear_deleted_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 deleted_count() const;
  void set_deleted_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deleted_count() const;
  void _internal_set_deleted_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deleted_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerCountRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest) */ {
 public:
  GetPeerCountRequest();
  virtual ~GetPeerCountRequest();

  GetPeerCountRequest(const GetPeerCountRequest& from);
  GetPeerCountRequest(GetPeerCountRequest&& from) noexcept
    : GetPeerCountRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerCountRequest& operator=(const GetPeerCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerCountRequest& operator=(GetPeerCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeerCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerCountRequest*>(
               &_GetPeerCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GetPeerCountRequest& a, GetPeerCountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerCountRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeerCountRequest* New() const final {
    return CreateMaybeMessage<GetPeerCountRequest>(nullptr);
  }

  GetPeerCountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerCountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeerCountRequest& from);
  void MergeFrom(const GetPeerCountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerCountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetPeerCountRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetPeerCountResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse) */ {
 public:
  GetPeerCountResponse();
  virtual ~GetPeerCountResponse();

  GetPeerCountResponse(const GetPeerCountResponse& from);
  GetPeerCountResponse(GetPeerCountResponse&& from) noexcept
    : GetPeerCountResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerCountResponse& operator=(const GetPeerCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPeerCountResponse& operator=(GetPeerCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPeerCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerCountResponse*>(
               &_GetPeerCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GetPeerCountResponse& a, GetPeerCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPeerCountResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPeerCountResponse* New() const final {
    return CreateMaybeMessage<GetPeerCountResponse>(nullptr);
  }

  GetPeerCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerCountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPeerCountResponse& from);
  void MergeFrom(const GetPeerCountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerCountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetPeerCountResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerCountFieldNumber = 1,
  };
  // int32 peer_count = 1;
  void clear_peer_count();
  ::PROTOBUF_NAMESPACE_ID::int32 peer_count() const;
  void set_peer_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_peer_count() const;
  void _internal_set_peer_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 peer_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetFileFromDfsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest) */ {
 public:
  GetFileFromDfsRequest();
  virtual ~GetFileFromDfsRequest();

  GetFileFromDfsRequest(const GetFileFromDfsRequest& from);
  GetFileFromDfsRequest(GetFileFromDfsRequest&& from) noexcept
    : GetFileFromDfsRequest() {
    *this = ::std::move(from);
  }

  inline GetFileFromDfsRequest& operator=(const GetFileFromDfsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileFromDfsRequest& operator=(GetFileFromDfsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileFromDfsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileFromDfsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileFromDfsRequest*>(
               &_GetFileFromDfsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetFileFromDfsRequest& a, GetFileFromDfsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileFromDfsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileFromDfsRequest* New() const final {
    return CreateMaybeMessage<GetFileFromDfsRequest>(nullptr);
  }

  GetFileFromDfsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileFromDfsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileFromDfsRequest& from);
  void MergeFrom(const GetFileFromDfsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileFromDfsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfsHashFieldNumber = 1,
  };
  // string dfs_hash = 1;
  void clear_dfs_hash();
  const std::string& dfs_hash() const;
  void set_dfs_hash(const std::string& value);
  void set_dfs_hash(std::string&& value);
  void set_dfs_hash(const char* value);
  void set_dfs_hash(const char* value, size_t size);
  std::string* mutable_dfs_hash();
  std::string* release_dfs_hash();
  void set_allocated_dfs_hash(std::string* dfs_hash);
  private:
  const std::string& _internal_dfs_hash() const;
  void _internal_set_dfs_hash(const std::string& value);
  std::string* _internal_mutable_dfs_hash();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dfs_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class GetFileFromDfsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse) */ {
 public:
  GetFileFromDfsResponse();
  virtual ~GetFileFromDfsResponse();

  GetFileFromDfsResponse(const GetFileFromDfsResponse& from);
  GetFileFromDfsResponse(GetFileFromDfsResponse&& from) noexcept
    : GetFileFromDfsResponse() {
    *this = ::std::move(from);
  }

  inline GetFileFromDfsResponse& operator=(const GetFileFromDfsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileFromDfsResponse& operator=(GetFileFromDfsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFileFromDfsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileFromDfsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFileFromDfsResponse*>(
               &_GetFileFromDfsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetFileFromDfsResponse& a, GetFileFromDfsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFileFromDfsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFileFromDfsResponse* New() const final {
    return CreateMaybeMessage<GetFileFromDfsResponse>(nullptr);
  }

  GetFileFromDfsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFileFromDfsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFileFromDfsResponse& from);
  void MergeFrom(const GetFileFromDfsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileFromDfsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseCodeFieldNumber = 2,
    kFileSizeFieldNumber = 1,
  };
  // bytes response_code = 2;
  void clear_response_code();
  const std::string& response_code() const;
  void set_response_code(const std::string& value);
  void set_response_code(std::string&& value);
  void set_response_code(const char* value);
  void set_response_code(const void* value, size_t size);
  std::string* mutable_response_code();
  std::string* release_response_code();
  void set_allocated_response_code(std::string* response_code);
  private:
  const std::string& _internal_response_code() const;
  void _internal_set_response_code(const std::string& value);
  std::string* _internal_mutable_response_code();
  public:

  // uint64 file_size = 1;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_code_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SetPeerDataFolderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest) */ {
 public:
  SetPeerDataFolderRequest();
  virtual ~SetPeerDataFolderRequest();

  SetPeerDataFolderRequest(const SetPeerDataFolderRequest& from);
  SetPeerDataFolderRequest(SetPeerDataFolderRequest&& from) noexcept
    : SetPeerDataFolderRequest() {
    *this = ::std::move(from);
  }

  inline SetPeerDataFolderRequest& operator=(const SetPeerDataFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPeerDataFolderRequest& operator=(SetPeerDataFolderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPeerDataFolderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPeerDataFolderRequest* internal_default_instance() {
    return reinterpret_cast<const SetPeerDataFolderRequest*>(
               &_SetPeerDataFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SetPeerDataFolderRequest& a, SetPeerDataFolderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPeerDataFolderRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPeerDataFolderRequest* New() const final {
    return CreateMaybeMessage<SetPeerDataFolderRequest>(nullptr);
  }

  SetPeerDataFolderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPeerDataFolderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPeerDataFolderRequest& from);
  void MergeFrom(const SetPeerDataFolderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPeerDataFolderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFolderFieldNumber = 1,
  };
  // string data_folder = 1;
  void clear_data_folder();
  const std::string& data_folder() const;
  void set_data_folder(const std::string& value);
  void set_data_folder(std::string&& value);
  void set_data_folder(const char* value);
  void set_data_folder(const char* value, size_t size);
  std::string* mutable_data_folder();
  std::string* release_data_folder();
  void set_allocated_data_folder(std::string* data_folder);
  private:
  const std::string& _internal_data_folder() const;
  void _internal_set_data_folder(const std::string& value);
  std::string* _internal_mutable_data_folder();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_folder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// -------------------------------------------------------------------

class SetPeerDataFolderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse) */ {
 public:
  SetPeerDataFolderResponse();
  virtual ~SetPeerDataFolderResponse();

  SetPeerDataFolderResponse(const SetPeerDataFolderResponse& from);
  SetPeerDataFolderResponse(SetPeerDataFolderResponse&& from) noexcept
    : SetPeerDataFolderResponse() {
    *this = ::std::move(from);
  }

  inline SetPeerDataFolderResponse& operator=(const SetPeerDataFolderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPeerDataFolderResponse& operator=(SetPeerDataFolderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPeerDataFolderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPeerDataFolderResponse* internal_default_instance() {
    return reinterpret_cast<const SetPeerDataFolderResponse*>(
               &_SetPeerDataFolderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(SetPeerDataFolderResponse& a, SetPeerDataFolderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPeerDataFolderResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPeerDataFolderResponse* New() const final {
    return CreateMaybeMessage<SetPeerDataFolderResponse>(nullptr);
  }

  SetPeerDataFolderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPeerDataFolderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPeerDataFolderResponse& from);
  void MergeFrom(const SetPeerDataFolderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPeerDataFolderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Rpc_2eproto);
    return ::descriptor_table_Rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bool query = 1;
  void clear_query();
  bool query() const;
  void set_query(bool value);
  private:
  bool _internal_query() const;
  void _internal_set_query(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionRequest

// bool query = 1;
inline void VersionRequest::clear_query() {
  query_ = false;
}
inline bool VersionRequest::_internal_query() const {
  return query_;
}
inline bool VersionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VersionRequest.query)
  return _internal_query();
}
inline void VersionRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void VersionRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VersionRequest.query)
}

// -------------------------------------------------------------------

// VersionResponse

// string version = 1;
inline void VersionResponse::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionResponse::version() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  return _internal_version();
}
inline void VersionResponse::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
inline std::string* VersionResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  return _internal_mutable_version();
}
inline const std::string& VersionResponse::_internal_version() const {
  return version_.GetNoArena();
}
inline void VersionResponse::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VersionResponse::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
inline std::string* VersionResponse::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}

// -------------------------------------------------------------------

// GetInfoRequest

// bool query = 1;
inline void GetInfoRequest::clear_query() {
  query_ = false;
}
inline bool GetInfoRequest::_internal_query() const {
  return query_;
}
inline bool GetInfoRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetInfoRequest.query)
  return _internal_query();
}
inline void GetInfoRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void GetInfoRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetInfoRequest.query)
}

// -------------------------------------------------------------------

// GetInfoResponse

// string query = 1;
inline void GetInfoResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInfoResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  return _internal_query();
}
inline void GetInfoResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
inline std::string* GetInfoResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  return _internal_mutable_query();
}
inline const std::string& GetInfoResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void GetInfoResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInfoResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
inline void GetInfoResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
inline void GetInfoResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
inline std::string* GetInfoResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInfoResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}

// -------------------------------------------------------------------

// CreateWalletRequest

// bool query = 1;
inline void CreateWalletRequest::clear_query() {
  query_ = false;
}
inline bool CreateWalletRequest::_internal_query() const {
  return query_;
}
inline bool CreateWalletRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateWalletRequest.query)
  return _internal_query();
}
inline void CreateWalletRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void CreateWalletRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateWalletRequest.query)
}

// -------------------------------------------------------------------

// CreateWalletResponse

// string query = 1;
inline void CreateWalletResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateWalletResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  return _internal_query();
}
inline void CreateWalletResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
inline std::string* CreateWalletResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  return _internal_mutable_query();
}
inline const std::string& CreateWalletResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void CreateWalletResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateWalletResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
inline void CreateWalletResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
inline void CreateWalletResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
inline std::string* CreateWalletResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateWalletResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateWalletResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}

// -------------------------------------------------------------------

// ListWalletRequest

// bool query = 1;
inline void ListWalletRequest::clear_query() {
  query_ = false;
}
inline bool ListWalletRequest::_internal_query() const {
  return query_;
}
inline bool ListWalletRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListWalletRequest.query)
  return _internal_query();
}
inline void ListWalletRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void ListWalletRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListWalletRequest.query)
}

// -------------------------------------------------------------------

// ListWalletResponse

// string query = 1;
inline void ListWalletResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListWalletResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  return _internal_query();
}
inline void ListWalletResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
inline std::string* ListWalletResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  return _internal_mutable_query();
}
inline const std::string& ListWalletResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void ListWalletResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListWalletResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
inline void ListWalletResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
inline void ListWalletResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
inline std::string* ListWalletResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListWalletResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListWalletResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}

// -------------------------------------------------------------------

// CreateAddressRequest

// bool query = 1;
inline void CreateAddressRequest::clear_query() {
  query_ = false;
}
inline bool CreateAddressRequest::_internal_query() const {
  return query_;
}
inline bool CreateAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateAddressRequest.query)
  return _internal_query();
}
inline void CreateAddressRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void CreateAddressRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateAddressRequest.query)
}

// -------------------------------------------------------------------

// CreateAddressResponse

// string query = 1;
inline void CreateAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  return _internal_query();
}
inline void CreateAddressResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
inline std::string* CreateAddressResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  return _internal_mutable_query();
}
inline const std::string& CreateAddressResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void CreateAddressResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateAddressResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
inline void CreateAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
inline void CreateAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
inline std::string* CreateAddressResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAddressResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}

// -------------------------------------------------------------------

// GetAddressRequest

// bool query = 1;
inline void GetAddressRequest::clear_query() {
  query_ = false;
}
inline bool GetAddressRequest::_internal_query() const {
  return query_;
}
inline bool GetAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetAddressRequest.query)
  return _internal_query();
}
inline void GetAddressRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void GetAddressRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetAddressRequest.query)
}

// -------------------------------------------------------------------

// GetAddressResponse

// string query = 1;
inline void GetAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  return _internal_query();
}
inline void GetAddressResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
inline std::string* GetAddressResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  return _internal_mutable_query();
}
inline const std::string& GetAddressResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void GetAddressResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAddressResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
inline void GetAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
inline void GetAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
inline std::string* GetAddressResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAddressResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}

// -------------------------------------------------------------------

// ListAddressRequest

// bool query = 1;
inline void ListAddressRequest::clear_query() {
  query_ = false;
}
inline bool ListAddressRequest::_internal_query() const {
  return query_;
}
inline bool ListAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListAddressRequest.query)
  return _internal_query();
}
inline void ListAddressRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void ListAddressRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListAddressRequest.query)
}

// -------------------------------------------------------------------

// ListAddressResponse

// string query = 1;
inline void ListAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  return _internal_query();
}
inline void ListAddressResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
inline std::string* ListAddressResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  return _internal_mutable_query();
}
inline const std::string& ListAddressResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void ListAddressResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListAddressResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
inline void ListAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
inline void ListAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
inline std::string* ListAddressResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListAddressResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}

// -------------------------------------------------------------------

// ValidateAddressRequest

// bool query = 1;
inline void ValidateAddressRequest::clear_query() {
  query_ = false;
}
inline bool ValidateAddressRequest::_internal_query() const {
  return query_;
}
inline bool ValidateAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest.query)
  return _internal_query();
}
inline void ValidateAddressRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void ValidateAddressRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest.query)
}

// -------------------------------------------------------------------

// ValidateAddressResponse

// string query = 1;
inline void ValidateAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ValidateAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  return _internal_query();
}
inline void ValidateAddressResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
inline std::string* ValidateAddressResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  return _internal_mutable_query();
}
inline const std::string& ValidateAddressResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void ValidateAddressResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ValidateAddressResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
inline void ValidateAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
inline void ValidateAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
inline std::string* ValidateAddressResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValidateAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateAddressResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}

// -------------------------------------------------------------------

// GetBalanceRequest

// bool query = 1;
inline void GetBalanceRequest::clear_query() {
  query_ = false;
}
inline bool GetBalanceRequest::_internal_query() const {
  return query_;
}
inline bool GetBalanceRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetBalanceRequest.query)
  return _internal_query();
}
inline void GetBalanceRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void GetBalanceRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetBalanceRequest.query)
}

// -------------------------------------------------------------------

// GetBalanceResponse

// string query = 1;
inline void GetBalanceResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBalanceResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  return _internal_query();
}
inline void GetBalanceResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
inline std::string* GetBalanceResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  return _internal_mutable_query();
}
inline const std::string& GetBalanceResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void GetBalanceResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBalanceResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
inline void GetBalanceResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
inline void GetBalanceResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
inline std::string* GetBalanceResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBalanceResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalanceResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}

// -------------------------------------------------------------------

// CreateRawTransactionRequest

// bool query = 1;
inline void CreateRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool CreateRawTransactionRequest::_internal_query() const {
  return query_;
}
inline bool CreateRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest.query)
  return _internal_query();
}
inline void CreateRawTransactionRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void CreateRawTransactionRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// CreateRawTransactionResponse

// string query = 1;
inline void CreateRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  return _internal_query();
}
inline void CreateRawTransactionResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
inline std::string* CreateRawTransactionResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  return _internal_mutable_query();
}
inline const std::string& CreateRawTransactionResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void CreateRawTransactionResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRawTransactionResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
inline void CreateRawTransactionResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
inline void CreateRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
inline std::string* CreateRawTransactionResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRawTransactionResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// SignRawTransactionRequest

// bool query = 1;
inline void SignRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool SignRawTransactionRequest::_internal_query() const {
  return query_;
}
inline bool SignRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest.query)
  return _internal_query();
}
inline void SignRawTransactionRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void SignRawTransactionRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// SignRawTransactionResponse

// string query = 1;
inline void SignRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  return _internal_query();
}
inline void SignRawTransactionResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
inline std::string* SignRawTransactionResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  return _internal_mutable_query();
}
inline const std::string& SignRawTransactionResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void SignRawTransactionResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignRawTransactionResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
inline void SignRawTransactionResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
inline void SignRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
inline std::string* SignRawTransactionResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignRawTransactionResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// DecodeRawTransactionRequest

// bool query = 1;
inline void DecodeRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool DecodeRawTransactionRequest::_internal_query() const {
  return query_;
}
inline bool DecodeRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest.query)
  return _internal_query();
}
inline void DecodeRawTransactionRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void DecodeRawTransactionRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// DecodeRawTransactionResponse

// string query = 1;
inline void DecodeRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DecodeRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  return _internal_query();
}
inline void DecodeRawTransactionResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
inline std::string* DecodeRawTransactionResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  return _internal_mutable_query();
}
inline const std::string& DecodeRawTransactionResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void DecodeRawTransactionResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DecodeRawTransactionResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
inline void DecodeRawTransactionResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
inline void DecodeRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
inline std::string* DecodeRawTransactionResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DecodeRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DecodeRawTransactionResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// BroadcastRawTransactionRequest

// .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
inline bool BroadcastRawTransactionRequest::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool BroadcastRawTransactionRequest::has_transaction() const {
  return _internal_has_transaction();
}
inline const ::Catalyst::Protocol::Wire::TransactionBroadcast& BroadcastRawTransactionRequest::_internal_transaction() const {
  const ::Catalyst::Protocol::Wire::TransactionBroadcast* p = transaction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Wire::TransactionBroadcast*>(
      &::Catalyst::Protocol::Wire::_TransactionBroadcast_default_instance_);
}
inline const ::Catalyst::Protocol::Wire::TransactionBroadcast& BroadcastRawTransactionRequest::transaction() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  return _internal_transaction();
}
inline ::Catalyst::Protocol::Wire::TransactionBroadcast* BroadcastRawTransactionRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  
  ::Catalyst::Protocol::Wire::TransactionBroadcast* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Wire::TransactionBroadcast* BroadcastRawTransactionRequest::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Wire::TransactionBroadcast>(GetArenaNoVirtual());
    transaction_ = p;
  }
  return transaction_;
}
inline ::Catalyst::Protocol::Wire::TransactionBroadcast* BroadcastRawTransactionRequest::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  return _internal_mutable_transaction();
}
inline void BroadcastRawTransactionRequest::set_allocated_transaction(::Catalyst::Protocol::Wire::TransactionBroadcast* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
}

// -------------------------------------------------------------------

// BroadcastRawTransactionResponse

// .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
inline void BroadcastRawTransactionResponse::clear_response_code() {
  response_code_ = 0;
}
inline ::Catalyst::Protocol::Rpc::Node::ResponseCode BroadcastRawTransactionResponse::_internal_response_code() const {
  return static_cast< ::Catalyst::Protocol::Rpc::Node::ResponseCode >(response_code_);
}
inline ::Catalyst::Protocol::Rpc::Node::ResponseCode BroadcastRawTransactionResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse.response_code)
  return _internal_response_code();
}
inline void BroadcastRawTransactionResponse::_internal_set_response_code(::Catalyst::Protocol::Rpc::Node::ResponseCode value) {
  
  response_code_ = value;
}
inline void BroadcastRawTransactionResponse::set_response_code(::Catalyst::Protocol::Rpc::Node::ResponseCode value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse.response_code)
}

// -------------------------------------------------------------------

// SendToRequest

// bool query = 1;
inline void SendToRequest::clear_query() {
  query_ = false;
}
inline bool SendToRequest::_internal_query() const {
  return query_;
}
inline bool SendToRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToRequest.query)
  return _internal_query();
}
inline void SendToRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void SendToRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToRequest.query)
}

// -------------------------------------------------------------------

// SendToResponse

// string query = 1;
inline void SendToResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendToResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  return _internal_query();
}
inline void SendToResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
inline std::string* SendToResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  return _internal_mutable_query();
}
inline const std::string& SendToResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void SendToResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendToResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
inline void SendToResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
inline void SendToResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
inline std::string* SendToResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendToResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendToResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}

// -------------------------------------------------------------------

// SendToFromRequest

// bool query = 1;
inline void SendToFromRequest::clear_query() {
  query_ = false;
}
inline bool SendToFromRequest::_internal_query() const {
  return query_;
}
inline bool SendToFromRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToFromRequest.query)
  return _internal_query();
}
inline void SendToFromRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void SendToFromRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToFromRequest.query)
}

// -------------------------------------------------------------------

// SendToFromResponse

// string query = 1;
inline void SendToFromResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendToFromResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  return _internal_query();
}
inline void SendToFromResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
inline std::string* SendToFromResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  return _internal_mutable_query();
}
inline const std::string& SendToFromResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void SendToFromResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendToFromResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
inline void SendToFromResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
inline void SendToFromResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
inline std::string* SendToFromResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendToFromResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendToFromResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}

// -------------------------------------------------------------------

// SendManyRequest

// bool query = 1;
inline void SendManyRequest::clear_query() {
  query_ = false;
}
inline bool SendManyRequest::_internal_query() const {
  return query_;
}
inline bool SendManyRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendManyRequest.query)
  return _internal_query();
}
inline void SendManyRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void SendManyRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendManyRequest.query)
}

// -------------------------------------------------------------------

// SendManyResponse

// string query = 1;
inline void SendManyResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendManyResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  return _internal_query();
}
inline void SendManyResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
inline std::string* SendManyResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  return _internal_mutable_query();
}
inline const std::string& SendManyResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void SendManyResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendManyResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
inline void SendManyResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
inline void SendManyResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
inline std::string* SendManyResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendManyResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendManyResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}

// -------------------------------------------------------------------

// SendFromManyRequest

// bool query = 1;
inline void SendFromManyRequest::clear_query() {
  query_ = false;
}
inline bool SendFromManyRequest::_internal_query() const {
  return query_;
}
inline bool SendFromManyRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendFromManyRequest.query)
  return _internal_query();
}
inline void SendFromManyRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void SendFromManyRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendFromManyRequest.query)
}

// -------------------------------------------------------------------

// SendFromManyResponse

// string query = 1;
inline void SendFromManyResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendFromManyResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  return _internal_query();
}
inline void SendFromManyResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
inline std::string* SendFromManyResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  return _internal_mutable_query();
}
inline const std::string& SendFromManyResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void SendFromManyResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendFromManyResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
inline void SendFromManyResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
inline void SendFromManyResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
inline std::string* SendFromManyResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendFromManyResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendFromManyResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}

// -------------------------------------------------------------------

// AddNodeRequest

// bool query = 1;
inline void AddNodeRequest::clear_query() {
  query_ = false;
}
inline bool AddNodeRequest::_internal_query() const {
  return query_;
}
inline bool AddNodeRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddNodeRequest.query)
  return _internal_query();
}
inline void AddNodeRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void AddNodeRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddNodeRequest.query)
}

// -------------------------------------------------------------------

// AddNodeResponse

// string query = 1;
inline void AddNodeResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddNodeResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  return _internal_query();
}
inline void AddNodeResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
inline std::string* AddNodeResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  return _internal_mutable_query();
}
inline const std::string& AddNodeResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void AddNodeResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddNodeResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
inline void AddNodeResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
inline void AddNodeResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
inline std::string* AddNodeResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddNodeResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddNodeResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}

// -------------------------------------------------------------------

// GetPeerListRequest

// -------------------------------------------------------------------

// GetPeerListResponse

// repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
inline int GetPeerListResponse::_internal_peers_size() const {
  return peers_.size();
}
inline int GetPeerListResponse::peers_size() const {
  return _internal_peers_size();
}
inline ::Catalyst::Protocol::Peer::PeerId* GetPeerListResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >*
GetPeerListResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return &peers_;
}
inline const ::Catalyst::Protocol::Peer::PeerId& GetPeerListResponse::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::Catalyst::Protocol::Peer::PeerId& GetPeerListResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return _internal_peers(index);
}
inline ::Catalyst::Protocol::Peer::PeerId* GetPeerListResponse::_internal_add_peers() {
  return peers_.Add();
}
inline ::Catalyst::Protocol::Peer::PeerId* GetPeerListResponse::add_peers() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return _internal_add_peers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerId >&
GetPeerListResponse::peers() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.peers)
  return peers_;
}

// -------------------------------------------------------------------

// GetPeerReputationRequest

// bytes public_key = 1;
inline void GetPeerReputationRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPeerReputationRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
  return _internal_public_key();
}
inline void GetPeerReputationRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
inline std::string* GetPeerReputationRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& GetPeerReputationRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void GetPeerReputationRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPeerReputationRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
inline void GetPeerReputationRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
inline void GetPeerReputationRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}
inline std::string* GetPeerReputationRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPeerReputationRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerReputationRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.public_key)
}

// bytes ip = 2;
inline void GetPeerReputationRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPeerReputationRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  return _internal_ip();
}
inline void GetPeerReputationRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
inline std::string* GetPeerReputationRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& GetPeerReputationRequest::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void GetPeerReputationRequest::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPeerReputationRequest::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
inline void GetPeerReputationRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
inline void GetPeerReputationRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
inline std::string* GetPeerReputationRequest::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPeerReputationRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerReputationRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}

// -------------------------------------------------------------------

// GetPeerReputationResponse

// int32 reputation = 1;
inline void GetPeerReputationResponse::clear_reputation() {
  reputation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPeerReputationResponse::_internal_reputation() const {
  return reputation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPeerReputationResponse::reputation() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse.reputation)
  return _internal_reputation();
}
inline void GetPeerReputationResponse::_internal_set_reputation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reputation_ = value;
}
inline void GetPeerReputationResponse::set_reputation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reputation(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse.reputation)
}

// -------------------------------------------------------------------

// SetPeerBlacklistRequest

// bytes public_key = 1;
inline void SetPeerBlacklistRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPeerBlacklistRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
  return _internal_public_key();
}
inline void SetPeerBlacklistRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
inline std::string* SetPeerBlacklistRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& SetPeerBlacklistRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void SetPeerBlacklistRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPeerBlacklistRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
inline void SetPeerBlacklistRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
inline void SetPeerBlacklistRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}
inline std::string* SetPeerBlacklistRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPeerBlacklistRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlacklistRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.public_key)
}

// bytes ip = 2;
inline void SetPeerBlacklistRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPeerBlacklistRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
  return _internal_ip();
}
inline void SetPeerBlacklistRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
inline std::string* SetPeerBlacklistRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& SetPeerBlacklistRequest::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void SetPeerBlacklistRequest::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPeerBlacklistRequest::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
inline void SetPeerBlacklistRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
inline void SetPeerBlacklistRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}
inline std::string* SetPeerBlacklistRequest::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPeerBlacklistRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlacklistRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.ip)
}

// bool blacklist = 3;
inline void SetPeerBlacklistRequest::clear_blacklist() {
  blacklist_ = false;
}
inline bool SetPeerBlacklistRequest::_internal_blacklist() const {
  return blacklist_;
}
inline bool SetPeerBlacklistRequest::blacklist() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.blacklist)
  return _internal_blacklist();
}
inline void SetPeerBlacklistRequest::_internal_set_blacklist(bool value) {
  
  blacklist_ = value;
}
inline void SetPeerBlacklistRequest::set_blacklist(bool value) {
  _internal_set_blacklist(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistRequest.blacklist)
}

// -------------------------------------------------------------------

// SetPeerBlacklistResponse

// bytes public_key = 1;
inline void SetPeerBlacklistResponse::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPeerBlacklistResponse::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
  return _internal_public_key();
}
inline void SetPeerBlacklistResponse::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
inline std::string* SetPeerBlacklistResponse::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& SetPeerBlacklistResponse::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void SetPeerBlacklistResponse::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPeerBlacklistResponse::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
inline void SetPeerBlacklistResponse::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
inline void SetPeerBlacklistResponse::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}
inline std::string* SetPeerBlacklistResponse::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPeerBlacklistResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlacklistResponse::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.public_key)
}

// bytes ip = 2;
inline void SetPeerBlacklistResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPeerBlacklistResponse::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
  return _internal_ip();
}
inline void SetPeerBlacklistResponse::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
inline std::string* SetPeerBlacklistResponse::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
  return _internal_mutable_ip();
}
inline const std::string& SetPeerBlacklistResponse::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void SetPeerBlacklistResponse::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPeerBlacklistResponse::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
inline void SetPeerBlacklistResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
inline void SetPeerBlacklistResponse::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}
inline std::string* SetPeerBlacklistResponse::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPeerBlacklistResponse::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlacklistResponse::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.ip)
}

// bool blacklist = 3;
inline void SetPeerBlacklistResponse::clear_blacklist() {
  blacklist_ = false;
}
inline bool SetPeerBlacklistResponse::_internal_blacklist() const {
  return blacklist_;
}
inline bool SetPeerBlacklistResponse::blacklist() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.blacklist)
  return _internal_blacklist();
}
inline void SetPeerBlacklistResponse::_internal_set_blacklist(bool value) {
  
  blacklist_ = value;
}
inline void SetPeerBlacklistResponse::set_blacklist(bool value) {
  _internal_set_blacklist(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlacklistResponse.blacklist)
}

// -------------------------------------------------------------------

// GetPeerInfoRequest

// bytes public_key = 1;
inline void GetPeerInfoRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPeerInfoRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
  return _internal_public_key();
}
inline void GetPeerInfoRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
inline std::string* GetPeerInfoRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& GetPeerInfoRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void GetPeerInfoRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPeerInfoRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
inline void GetPeerInfoRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
inline void GetPeerInfoRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}
inline std::string* GetPeerInfoRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPeerInfoRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerInfoRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.public_key)
}

// bytes ip = 2;
inline void GetPeerInfoRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPeerInfoRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  return _internal_ip();
}
inline void GetPeerInfoRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
inline std::string* GetPeerInfoRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& GetPeerInfoRequest::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void GetPeerInfoRequest::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPeerInfoRequest::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
inline void GetPeerInfoRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
inline void GetPeerInfoRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
inline std::string* GetPeerInfoRequest::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPeerInfoRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerInfoRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}

// -------------------------------------------------------------------

// GetPeerInfoResponse

// repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
inline int GetPeerInfoResponse::_internal_peer_info_size() const {
  return peer_info_.size();
}
inline int GetPeerInfoResponse::peer_info_size() const {
  return _internal_peer_info_size();
}
inline ::Catalyst::Protocol::Peer::PeerInfo* GetPeerInfoResponse::mutable_peer_info(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return peer_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo >*
GetPeerInfoResponse::mutable_peer_info() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return &peer_info_;
}
inline const ::Catalyst::Protocol::Peer::PeerInfo& GetPeerInfoResponse::_internal_peer_info(int index) const {
  return peer_info_.Get(index);
}
inline const ::Catalyst::Protocol::Peer::PeerInfo& GetPeerInfoResponse::peer_info(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return _internal_peer_info(index);
}
inline ::Catalyst::Protocol::Peer::PeerInfo* GetPeerInfoResponse::_internal_add_peer_info() {
  return peer_info_.Add();
}
inline ::Catalyst::Protocol::Peer::PeerInfo* GetPeerInfoResponse::add_peer_info() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return _internal_add_peer_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Peer::PeerInfo >&
GetPeerInfoResponse::peer_info() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.peer_info)
  return peer_info_;
}

// -------------------------------------------------------------------

// GetConnectionCountRequest

// bool query = 1;
inline void GetConnectionCountRequest::clear_query() {
  query_ = false;
}
inline bool GetConnectionCountRequest::_internal_query() const {
  return query_;
}
inline bool GetConnectionCountRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest.query)
  return _internal_query();
}
inline void GetConnectionCountRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void GetConnectionCountRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest.query)
}

// -------------------------------------------------------------------

// GetConnectionCountResponse

// string query = 1;
inline void GetConnectionCountResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetConnectionCountResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  return _internal_query();
}
inline void GetConnectionCountResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
inline std::string* GetConnectionCountResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  return _internal_mutable_query();
}
inline const std::string& GetConnectionCountResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void GetConnectionCountResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetConnectionCountResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
inline void GetConnectionCountResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
inline void GetConnectionCountResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
inline std::string* GetConnectionCountResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetConnectionCountResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectionCountResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}

// -------------------------------------------------------------------

// GetDeltaRequest

// bytes delta_dfs_hash = 1;
inline void GetDeltaRequest::clear_delta_dfs_hash() {
  delta_dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDeltaRequest::delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
  return _internal_delta_dfs_hash();
}
inline void GetDeltaRequest::set_delta_dfs_hash(const std::string& value) {
  _internal_set_delta_dfs_hash(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
inline std::string* GetDeltaRequest::mutable_delta_dfs_hash() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
  return _internal_mutable_delta_dfs_hash();
}
inline const std::string& GetDeltaRequest::_internal_delta_dfs_hash() const {
  return delta_dfs_hash_.GetNoArena();
}
inline void GetDeltaRequest::_internal_set_delta_dfs_hash(const std::string& value) {
  
  delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDeltaRequest::set_delta_dfs_hash(std::string&& value) {
  
  delta_dfs_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
inline void GetDeltaRequest::set_delta_dfs_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
inline void GetDeltaRequest::set_delta_dfs_hash(const void* value, size_t size) {
  
  delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}
inline std::string* GetDeltaRequest::_internal_mutable_delta_dfs_hash() {
  
  return delta_dfs_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDeltaRequest::release_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
  
  return delta_dfs_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDeltaRequest::set_allocated_delta_dfs_hash(std::string* delta_dfs_hash) {
  if (delta_dfs_hash != nullptr) {
    
  } else {
    
  }
  delta_dfs_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.delta_dfs_hash)
}

// -------------------------------------------------------------------

// GetDeltaResponse

// .Catalyst.Protocol.Deltas.Delta delta = 1;
inline bool GetDeltaResponse::_internal_has_delta() const {
  return this != internal_default_instance() && delta_ != nullptr;
}
inline bool GetDeltaResponse::has_delta() const {
  return _internal_has_delta();
}
inline const ::Catalyst::Protocol::Deltas::Delta& GetDeltaResponse::_internal_delta() const {
  const ::Catalyst::Protocol::Deltas::Delta* p = delta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Deltas::Delta*>(
      &::Catalyst::Protocol::Deltas::_Delta_default_instance_);
}
inline const ::Catalyst::Protocol::Deltas::Delta& GetDeltaResponse::delta() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
  return _internal_delta();
}
inline ::Catalyst::Protocol::Deltas::Delta* GetDeltaResponse::release_delta() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
  
  ::Catalyst::Protocol::Deltas::Delta* temp = delta_;
  delta_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Deltas::Delta* GetDeltaResponse::_internal_mutable_delta() {
  
  if (delta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Deltas::Delta>(GetArenaNoVirtual());
    delta_ = p;
  }
  return delta_;
}
inline ::Catalyst::Protocol::Deltas::Delta* GetDeltaResponse::mutable_delta() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
  return _internal_mutable_delta();
}
inline void GetDeltaResponse::set_allocated_delta(::Catalyst::Protocol::Deltas::Delta* delta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(delta_);
  }
  if (delta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delta, submessage_arena);
    }
    
  } else {
    
  }
  delta_ = delta;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.delta)
}

// -------------------------------------------------------------------

// GetMempoolRequest

// bool query = 1;
inline void GetMempoolRequest::clear_query() {
  query_ = false;
}
inline bool GetMempoolRequest::_internal_query() const {
  return query_;
}
inline bool GetMempoolRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetMempoolRequest.query)
  return _internal_query();
}
inline void GetMempoolRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void GetMempoolRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetMempoolRequest.query)
}

// -------------------------------------------------------------------

// GetMempoolResponse

// repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
inline int GetMempoolResponse::_internal_transactions_size() const {
  return transactions_.size();
}
inline int GetMempoolResponse::transactions_size() const {
  return _internal_transactions_size();
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* GetMempoolResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >*
GetMempoolResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return &transactions_;
}
inline const ::Catalyst::Protocol::Transaction::PublicEntry& GetMempoolResponse::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::Catalyst::Protocol::Transaction::PublicEntry& GetMempoolResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return _internal_transactions(index);
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* GetMempoolResponse::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* GetMempoolResponse::add_transactions() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return _internal_add_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Catalyst::Protocol::Transaction::PublicEntry >&
GetMempoolResponse::transactions() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// SignMessageRequest

// bytes message = 1;
inline void SignMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  return _internal_message();
}
inline void SignMessageRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
inline std::string* SignMessageRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  return _internal_mutable_message();
}
inline const std::string& SignMessageRequest::_internal_message() const {
  return message_.GetNoArena();
}
inline void SignMessageRequest::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignMessageRequest::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
inline void SignMessageRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
inline void SignMessageRequest::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
inline std::string* SignMessageRequest::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}

// string key_id = 2;
inline void SignMessageRequest::clear_key_id() {
  key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignMessageRequest::key_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
  return _internal_key_id();
}
inline void SignMessageRequest::set_key_id(const std::string& value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
inline std::string* SignMessageRequest::mutable_key_id() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
  return _internal_mutable_key_id();
}
inline const std::string& SignMessageRequest::_internal_key_id() const {
  return key_id_.GetNoArena();
}
inline void SignMessageRequest::_internal_set_key_id(const std::string& value) {
  
  key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignMessageRequest::set_key_id(std::string&& value) {
  
  key_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
inline void SignMessageRequest::set_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
inline void SignMessageRequest::set_key_id(const char* value, size_t size) {
  
  key_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}
inline std::string* SignMessageRequest::_internal_mutable_key_id() {
  
  return key_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignMessageRequest::release_key_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
  
  return key_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageRequest::set_allocated_key_id(std::string* key_id) {
  if (key_id != nullptr) {
    
  } else {
    
  }
  key_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_id);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id)
}

// .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
inline bool SignMessageRequest::_internal_has_signing_context() const {
  return this != internal_default_instance() && signing_context_ != nullptr;
}
inline bool SignMessageRequest::has_signing_context() const {
  return _internal_has_signing_context();
}
inline const ::Catalyst::Protocol::Cryptography::SigningContext& SignMessageRequest::_internal_signing_context() const {
  const ::Catalyst::Protocol::Cryptography::SigningContext* p = signing_context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Cryptography::SigningContext*>(
      &::Catalyst::Protocol::Cryptography::_SigningContext_default_instance_);
}
inline const ::Catalyst::Protocol::Cryptography::SigningContext& SignMessageRequest::signing_context() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
  return _internal_signing_context();
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* SignMessageRequest::release_signing_context() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
  
  ::Catalyst::Protocol::Cryptography::SigningContext* temp = signing_context_;
  signing_context_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* SignMessageRequest::_internal_mutable_signing_context() {
  
  if (signing_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Cryptography::SigningContext>(GetArenaNoVirtual());
    signing_context_ = p;
  }
  return signing_context_;
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* SignMessageRequest::mutable_signing_context() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
  return _internal_mutable_signing_context();
}
inline void SignMessageRequest::set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signing_context_);
  }
  if (signing_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signing_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signing_context, submessage_arena);
    }
    
  } else {
    
  }
  signing_context_ = signing_context;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signing_context)
}

// -------------------------------------------------------------------

// SignMessageResponse

// bytes signature = 1;
inline void SignMessageResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignMessageResponse::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  return _internal_signature();
}
inline void SignMessageResponse::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
inline std::string* SignMessageResponse::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  return _internal_mutable_signature();
}
inline const std::string& SignMessageResponse::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void SignMessageResponse::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignMessageResponse::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
inline void SignMessageResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
inline void SignMessageResponse::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
inline std::string* SignMessageResponse::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignMessageResponse::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}

// bytes public_key = 2;
inline void SignMessageResponse::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignMessageResponse::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
  return _internal_public_key();
}
inline void SignMessageResponse::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
inline std::string* SignMessageResponse::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& SignMessageResponse::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void SignMessageResponse::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignMessageResponse::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
inline void SignMessageResponse::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
inline void SignMessageResponse::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}
inline std::string* SignMessageResponse::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignMessageResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.public_key)
}

// bytes original_message = 3;
inline void SignMessageResponse::clear_original_message() {
  original_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignMessageResponse::original_message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
  return _internal_original_message();
}
inline void SignMessageResponse::set_original_message(const std::string& value) {
  _internal_set_original_message(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
inline std::string* SignMessageResponse::mutable_original_message() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
  return _internal_mutable_original_message();
}
inline const std::string& SignMessageResponse::_internal_original_message() const {
  return original_message_.GetNoArena();
}
inline void SignMessageResponse::_internal_set_original_message(const std::string& value) {
  
  original_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignMessageResponse::set_original_message(std::string&& value) {
  
  original_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
inline void SignMessageResponse::set_original_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
inline void SignMessageResponse::set_original_message(const void* value, size_t size) {
  
  original_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}
inline std::string* SignMessageResponse::_internal_mutable_original_message() {
  
  return original_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignMessageResponse::release_original_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
  
  return original_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_original_message(std::string* original_message) {
  if (original_message != nullptr) {
    
  } else {
    
  }
  original_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.original_message)
}

// -------------------------------------------------------------------

// VerifyMessageRequest

// bytes signature = 1;
inline void VerifyMessageRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyMessageRequest::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  return _internal_signature();
}
inline void VerifyMessageRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
inline std::string* VerifyMessageRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& VerifyMessageRequest::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void VerifyMessageRequest::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyMessageRequest::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
inline void VerifyMessageRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
inline void VerifyMessageRequest::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
inline std::string* VerifyMessageRequest::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyMessageRequest::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}

// bytes public_key = 2;
inline void VerifyMessageRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyMessageRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
  return _internal_public_key();
}
inline void VerifyMessageRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
inline std::string* VerifyMessageRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& VerifyMessageRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void VerifyMessageRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyMessageRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
inline void VerifyMessageRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
inline void VerifyMessageRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}
inline std::string* VerifyMessageRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyMessageRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.public_key)
}

// bytes message = 3;
inline void VerifyMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  return _internal_message();
}
inline void VerifyMessageRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
inline std::string* VerifyMessageRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  return _internal_mutable_message();
}
inline const std::string& VerifyMessageRequest::_internal_message() const {
  return message_.GetNoArena();
}
inline void VerifyMessageRequest::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyMessageRequest::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
inline void VerifyMessageRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
inline void VerifyMessageRequest::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
inline std::string* VerifyMessageRequest::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}

// .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
inline bool VerifyMessageRequest::_internal_has_signing_context() const {
  return this != internal_default_instance() && signing_context_ != nullptr;
}
inline bool VerifyMessageRequest::has_signing_context() const {
  return _internal_has_signing_context();
}
inline const ::Catalyst::Protocol::Cryptography::SigningContext& VerifyMessageRequest::_internal_signing_context() const {
  const ::Catalyst::Protocol::Cryptography::SigningContext* p = signing_context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Cryptography::SigningContext*>(
      &::Catalyst::Protocol::Cryptography::_SigningContext_default_instance_);
}
inline const ::Catalyst::Protocol::Cryptography::SigningContext& VerifyMessageRequest::signing_context() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
  return _internal_signing_context();
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* VerifyMessageRequest::release_signing_context() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
  
  ::Catalyst::Protocol::Cryptography::SigningContext* temp = signing_context_;
  signing_context_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* VerifyMessageRequest::_internal_mutable_signing_context() {
  
  if (signing_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Cryptography::SigningContext>(GetArenaNoVirtual());
    signing_context_ = p;
  }
  return signing_context_;
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* VerifyMessageRequest::mutable_signing_context() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
  return _internal_mutable_signing_context();
}
inline void VerifyMessageRequest::set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signing_context_);
  }
  if (signing_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signing_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signing_context, submessage_arena);
    }
    
  } else {
    
  }
  signing_context_ = signing_context;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signing_context)
}

// -------------------------------------------------------------------

// VerifyMessageResponse

// bool is_signed_by_key = 1;
inline void VerifyMessageResponse::clear_is_signed_by_key() {
  is_signed_by_key_ = false;
}
inline bool VerifyMessageResponse::_internal_is_signed_by_key() const {
  return is_signed_by_key_;
}
inline bool VerifyMessageResponse::is_signed_by_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse.is_signed_by_key)
  return _internal_is_signed_by_key();
}
inline void VerifyMessageResponse::_internal_set_is_signed_by_key(bool value) {
  
  is_signed_by_key_ = value;
}
inline void VerifyMessageResponse::set_is_signed_by_key(bool value) {
  _internal_set_is_signed_by_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse.is_signed_by_key)
}

// -------------------------------------------------------------------

// ServiceStatusRequest

// bool query = 1;
inline void ServiceStatusRequest::clear_query() {
  query_ = false;
}
inline bool ServiceStatusRequest::_internal_query() const {
  return query_;
}
inline bool ServiceStatusRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest.query)
  return _internal_query();
}
inline void ServiceStatusRequest::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void ServiceStatusRequest::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest.query)
}

// -------------------------------------------------------------------

// ServiceStatusResponse

// string query = 1;
inline void ServiceStatusResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceStatusResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  return _internal_query();
}
inline void ServiceStatusResponse::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
inline std::string* ServiceStatusResponse::mutable_query() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  return _internal_mutable_query();
}
inline const std::string& ServiceStatusResponse::_internal_query() const {
  return query_.GetNoArena();
}
inline void ServiceStatusResponse::_internal_set_query(const std::string& value) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceStatusResponse::set_query(std::string&& value) {
  
  query_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
inline void ServiceStatusResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
inline void ServiceStatusResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
inline std::string* ServiceStatusResponse::_internal_mutable_query() {
  
  return query_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceStatusResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  
  return query_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceStatusResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}

// -------------------------------------------------------------------

// AddFileToDfsRequest

// uint64 file_size = 1;
inline void AddFileToDfsRequest::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddFileToDfsRequest::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddFileToDfsRequest::file_size() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_size)
  return _internal_file_size();
}
inline void AddFileToDfsRequest::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
}
inline void AddFileToDfsRequest::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_size)
}

// string file_name = 2;
inline void AddFileToDfsRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddFileToDfsRequest::file_name() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
  return _internal_file_name();
}
inline void AddFileToDfsRequest::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
inline std::string* AddFileToDfsRequest::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& AddFileToDfsRequest::_internal_file_name() const {
  return file_name_.GetNoArena();
}
inline void AddFileToDfsRequest::_internal_set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddFileToDfsRequest::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
inline void AddFileToDfsRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
inline void AddFileToDfsRequest::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}
inline std::string* AddFileToDfsRequest::_internal_mutable_file_name() {
  
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFileToDfsRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name)
}

// string node = 3;
inline void AddFileToDfsRequest::clear_node() {
  node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddFileToDfsRequest::node() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  return _internal_node();
}
inline void AddFileToDfsRequest::set_node(const std::string& value) {
  _internal_set_node(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
inline std::string* AddFileToDfsRequest::mutable_node() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  return _internal_mutable_node();
}
inline const std::string& AddFileToDfsRequest::_internal_node() const {
  return node_.GetNoArena();
}
inline void AddFileToDfsRequest::_internal_set_node(const std::string& value) {
  
  node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddFileToDfsRequest::set_node(std::string&& value) {
  
  node_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
inline void AddFileToDfsRequest::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
inline void AddFileToDfsRequest::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
inline std::string* AddFileToDfsRequest::_internal_mutable_node() {
  
  return node_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFileToDfsRequest::release_node() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  
  return node_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsRequest::set_allocated_node(std::string* node) {
  if (node != nullptr) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}

// -------------------------------------------------------------------

// AddFileToDfsResponse

// bytes response_code = 1;
inline void AddFileToDfsResponse::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddFileToDfsResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
  return _internal_response_code();
}
inline void AddFileToDfsResponse::set_response_code(const std::string& value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
inline std::string* AddFileToDfsResponse::mutable_response_code() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
  return _internal_mutable_response_code();
}
inline const std::string& AddFileToDfsResponse::_internal_response_code() const {
  return response_code_.GetNoArena();
}
inline void AddFileToDfsResponse::_internal_set_response_code(const std::string& value) {
  
  response_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddFileToDfsResponse::set_response_code(std::string&& value) {
  
  response_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
inline void AddFileToDfsResponse::set_response_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
inline void AddFileToDfsResponse::set_response_code(const void* value, size_t size) {
  
  response_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}
inline std::string* AddFileToDfsResponse::_internal_mutable_response_code() {
  
  return response_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFileToDfsResponse::release_response_code() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
  
  return response_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsResponse::set_allocated_response_code(std::string* response_code) {
  if (response_code != nullptr) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.response_code)
}

// string dfs_hash = 2;
inline void AddFileToDfsResponse::clear_dfs_hash() {
  dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddFileToDfsResponse::dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
  return _internal_dfs_hash();
}
inline void AddFileToDfsResponse::set_dfs_hash(const std::string& value) {
  _internal_set_dfs_hash(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
inline std::string* AddFileToDfsResponse::mutable_dfs_hash() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
  return _internal_mutable_dfs_hash();
}
inline const std::string& AddFileToDfsResponse::_internal_dfs_hash() const {
  return dfs_hash_.GetNoArena();
}
inline void AddFileToDfsResponse::_internal_set_dfs_hash(const std::string& value) {
  
  dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddFileToDfsResponse::set_dfs_hash(std::string&& value) {
  
  dfs_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
inline void AddFileToDfsResponse::set_dfs_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
inline void AddFileToDfsResponse::set_dfs_hash(const char* value, size_t size) {
  
  dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}
inline std::string* AddFileToDfsResponse::_internal_mutable_dfs_hash() {
  
  return dfs_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddFileToDfsResponse::release_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
  
  return dfs_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsResponse::set_allocated_dfs_hash(std::string* dfs_hash) {
  if (dfs_hash != nullptr) {
    
  } else {
    
  }
  dfs_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash)
}

// -------------------------------------------------------------------

// TransferFileBytesRequest

// uint32 chunk_id = 1;
inline void TransferFileBytesRequest::clear_chunk_id() {
  chunk_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransferFileBytesRequest::_internal_chunk_id() const {
  return chunk_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransferFileBytesRequest::chunk_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_id)
  return _internal_chunk_id();
}
inline void TransferFileBytesRequest::_internal_set_chunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_id_ = value;
}
inline void TransferFileBytesRequest::set_chunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk_id(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_id)
}

// bytes chunk_bytes = 2;
inline void TransferFileBytesRequest::clear_chunk_bytes() {
  chunk_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferFileBytesRequest::chunk_bytes() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
  return _internal_chunk_bytes();
}
inline void TransferFileBytesRequest::set_chunk_bytes(const std::string& value) {
  _internal_set_chunk_bytes(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
inline std::string* TransferFileBytesRequest::mutable_chunk_bytes() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
  return _internal_mutable_chunk_bytes();
}
inline const std::string& TransferFileBytesRequest::_internal_chunk_bytes() const {
  return chunk_bytes_.GetNoArena();
}
inline void TransferFileBytesRequest::_internal_set_chunk_bytes(const std::string& value) {
  
  chunk_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransferFileBytesRequest::set_chunk_bytes(std::string&& value) {
  
  chunk_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
inline void TransferFileBytesRequest::set_chunk_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chunk_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
inline void TransferFileBytesRequest::set_chunk_bytes(const void* value, size_t size) {
  
  chunk_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}
inline std::string* TransferFileBytesRequest::_internal_mutable_chunk_bytes() {
  
  return chunk_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferFileBytesRequest::release_chunk_bytes() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
  
  return chunk_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferFileBytesRequest::set_allocated_chunk_bytes(std::string* chunk_bytes) {
  if (chunk_bytes != nullptr) {
    
  } else {
    
  }
  chunk_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk_bytes);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunk_bytes)
}

// bytes correlation_file_name = 3;
inline void TransferFileBytesRequest::clear_correlation_file_name() {
  correlation_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferFileBytesRequest::correlation_file_name() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
  return _internal_correlation_file_name();
}
inline void TransferFileBytesRequest::set_correlation_file_name(const std::string& value) {
  _internal_set_correlation_file_name(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
inline std::string* TransferFileBytesRequest::mutable_correlation_file_name() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
  return _internal_mutable_correlation_file_name();
}
inline const std::string& TransferFileBytesRequest::_internal_correlation_file_name() const {
  return correlation_file_name_.GetNoArena();
}
inline void TransferFileBytesRequest::_internal_set_correlation_file_name(const std::string& value) {
  
  correlation_file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransferFileBytesRequest::set_correlation_file_name(std::string&& value) {
  
  correlation_file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
inline void TransferFileBytesRequest::set_correlation_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  correlation_file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
inline void TransferFileBytesRequest::set_correlation_file_name(const void* value, size_t size) {
  
  correlation_file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}
inline std::string* TransferFileBytesRequest::_internal_mutable_correlation_file_name() {
  
  return correlation_file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferFileBytesRequest::release_correlation_file_name() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
  
  return correlation_file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferFileBytesRequest::set_allocated_correlation_file_name(std::string* correlation_file_name) {
  if (correlation_file_name != nullptr) {
    
  } else {
    
  }
  correlation_file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), correlation_file_name);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlation_file_name)
}

// -------------------------------------------------------------------

// TransferFileBytesResponse

// bytes response_code = 1;
inline void TransferFileBytesResponse::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferFileBytesResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
  return _internal_response_code();
}
inline void TransferFileBytesResponse::set_response_code(const std::string& value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
inline std::string* TransferFileBytesResponse::mutable_response_code() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
  return _internal_mutable_response_code();
}
inline const std::string& TransferFileBytesResponse::_internal_response_code() const {
  return response_code_.GetNoArena();
}
inline void TransferFileBytesResponse::_internal_set_response_code(const std::string& value) {
  
  response_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransferFileBytesResponse::set_response_code(std::string&& value) {
  
  response_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
inline void TransferFileBytesResponse::set_response_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
inline void TransferFileBytesResponse::set_response_code(const void* value, size_t size) {
  
  response_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}
inline std::string* TransferFileBytesResponse::_internal_mutable_response_code() {
  
  return response_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferFileBytesResponse::release_response_code() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
  
  return response_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferFileBytesResponse::set_allocated_response_code(std::string* response_code) {
  if (response_code != nullptr) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.response_code)
}

// -------------------------------------------------------------------

// RemovePeerRequest

// bytes peer_ip = 1;
inline void RemovePeerRequest::clear_peer_ip() {
  peer_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemovePeerRequest::peer_ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
  return _internal_peer_ip();
}
inline void RemovePeerRequest::set_peer_ip(const std::string& value) {
  _internal_set_peer_ip(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
inline std::string* RemovePeerRequest::mutable_peer_ip() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
  return _internal_mutable_peer_ip();
}
inline const std::string& RemovePeerRequest::_internal_peer_ip() const {
  return peer_ip_.GetNoArena();
}
inline void RemovePeerRequest::_internal_set_peer_ip(const std::string& value) {
  
  peer_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemovePeerRequest::set_peer_ip(std::string&& value) {
  
  peer_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
inline void RemovePeerRequest::set_peer_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
inline void RemovePeerRequest::set_peer_ip(const void* value, size_t size) {
  
  peer_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}
inline std::string* RemovePeerRequest::_internal_mutable_peer_ip() {
  
  return peer_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemovePeerRequest::release_peer_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
  
  return peer_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeerRequest::set_allocated_peer_ip(std::string* peer_ip) {
  if (peer_ip != nullptr) {
    
  } else {
    
  }
  peer_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peer_ip)
}

// bytes public_key = 2;
inline void RemovePeerRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemovePeerRequest::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
  return _internal_public_key();
}
inline void RemovePeerRequest::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
inline std::string* RemovePeerRequest::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& RemovePeerRequest::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void RemovePeerRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemovePeerRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
inline void RemovePeerRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
inline void RemovePeerRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}
inline std::string* RemovePeerRequest::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemovePeerRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeerRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.public_key)
}

// -------------------------------------------------------------------

// RemovePeerResponse

// uint32 deleted_count = 1;
inline void RemovePeerResponse::clear_deleted_count() {
  deleted_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemovePeerResponse::_internal_deleted_count() const {
  return deleted_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RemovePeerResponse::deleted_count() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerResponse.deleted_count)
  return _internal_deleted_count();
}
inline void RemovePeerResponse::_internal_set_deleted_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  deleted_count_ = value;
}
inline void RemovePeerResponse::set_deleted_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deleted_count(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerResponse.deleted_count)
}

// -------------------------------------------------------------------

// GetPeerCountRequest

// -------------------------------------------------------------------

// GetPeerCountResponse

// int32 peer_count = 1;
inline void GetPeerCountResponse::clear_peer_count() {
  peer_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPeerCountResponse::_internal_peer_count() const {
  return peer_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPeerCountResponse::peer_count() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse.peer_count)
  return _internal_peer_count();
}
inline void GetPeerCountResponse::_internal_set_peer_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  peer_count_ = value;
}
inline void GetPeerCountResponse::set_peer_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_peer_count(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse.peer_count)
}

// -------------------------------------------------------------------

// GetFileFromDfsRequest

// string dfs_hash = 1;
inline void GetFileFromDfsRequest::clear_dfs_hash() {
  dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFileFromDfsRequest::dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
  return _internal_dfs_hash();
}
inline void GetFileFromDfsRequest::set_dfs_hash(const std::string& value) {
  _internal_set_dfs_hash(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
inline std::string* GetFileFromDfsRequest::mutable_dfs_hash() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
  return _internal_mutable_dfs_hash();
}
inline const std::string& GetFileFromDfsRequest::_internal_dfs_hash() const {
  return dfs_hash_.GetNoArena();
}
inline void GetFileFromDfsRequest::_internal_set_dfs_hash(const std::string& value) {
  
  dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFileFromDfsRequest::set_dfs_hash(std::string&& value) {
  
  dfs_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
inline void GetFileFromDfsRequest::set_dfs_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
inline void GetFileFromDfsRequest::set_dfs_hash(const char* value, size_t size) {
  
  dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}
inline std::string* GetFileFromDfsRequest::_internal_mutable_dfs_hash() {
  
  return dfs_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileFromDfsRequest::release_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
  
  return dfs_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileFromDfsRequest::set_allocated_dfs_hash(std::string* dfs_hash) {
  if (dfs_hash != nullptr) {
    
  } else {
    
  }
  dfs_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash)
}

// -------------------------------------------------------------------

// GetFileFromDfsResponse

// uint64 file_size = 1;
inline void GetFileFromDfsResponse::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFileFromDfsResponse::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetFileFromDfsResponse::file_size() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.file_size)
  return _internal_file_size();
}
inline void GetFileFromDfsResponse::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
}
inline void GetFileFromDfsResponse::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.file_size)
}

// bytes response_code = 2;
inline void GetFileFromDfsResponse::clear_response_code() {
  response_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFileFromDfsResponse::response_code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
  return _internal_response_code();
}
inline void GetFileFromDfsResponse::set_response_code(const std::string& value) {
  _internal_set_response_code(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
inline std::string* GetFileFromDfsResponse::mutable_response_code() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
  return _internal_mutable_response_code();
}
inline const std::string& GetFileFromDfsResponse::_internal_response_code() const {
  return response_code_.GetNoArena();
}
inline void GetFileFromDfsResponse::_internal_set_response_code(const std::string& value) {
  
  response_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFileFromDfsResponse::set_response_code(std::string&& value) {
  
  response_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
inline void GetFileFromDfsResponse::set_response_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
inline void GetFileFromDfsResponse::set_response_code(const void* value, size_t size) {
  
  response_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}
inline std::string* GetFileFromDfsResponse::_internal_mutable_response_code() {
  
  return response_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFileFromDfsResponse::release_response_code() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
  
  return response_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileFromDfsResponse::set_allocated_response_code(std::string* response_code) {
  if (response_code != nullptr) {
    
  } else {
    
  }
  response_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_code);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.response_code)
}

// -------------------------------------------------------------------

// SetPeerDataFolderRequest

// string data_folder = 1;
inline void SetPeerDataFolderRequest::clear_data_folder() {
  data_folder_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPeerDataFolderRequest::data_folder() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
  return _internal_data_folder();
}
inline void SetPeerDataFolderRequest::set_data_folder(const std::string& value) {
  _internal_set_data_folder(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
inline std::string* SetPeerDataFolderRequest::mutable_data_folder() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
  return _internal_mutable_data_folder();
}
inline const std::string& SetPeerDataFolderRequest::_internal_data_folder() const {
  return data_folder_.GetNoArena();
}
inline void SetPeerDataFolderRequest::_internal_set_data_folder(const std::string& value) {
  
  data_folder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPeerDataFolderRequest::set_data_folder(std::string&& value) {
  
  data_folder_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
inline void SetPeerDataFolderRequest::set_data_folder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_folder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
inline void SetPeerDataFolderRequest::set_data_folder(const char* value, size_t size) {
  
  data_folder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}
inline std::string* SetPeerDataFolderRequest::_internal_mutable_data_folder() {
  
  return data_folder_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPeerDataFolderRequest::release_data_folder() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
  
  return data_folder_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerDataFolderRequest::set_allocated_data_folder(std::string* data_folder) {
  if (data_folder != nullptr) {
    
  } else {
    
  }
  data_folder_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_folder);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder)
}

// -------------------------------------------------------------------

// SetPeerDataFolderResponse

// bool query = 1;
inline void SetPeerDataFolderResponse::clear_query() {
  query_ = false;
}
inline bool SetPeerDataFolderResponse::_internal_query() const {
  return query_;
}
inline bool SetPeerDataFolderResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse.query)
  return _internal_query();
}
inline void SetPeerDataFolderResponse::_internal_set_query(bool value) {
  
  query_ = value;
}
inline void SetPeerDataFolderResponse::set_query(bool value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse.query)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Node
}  // namespace Rpc
}  // namespace Protocol
}  // namespace Catalyst

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Catalyst::Protocol::Rpc::Node::ResponseCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Rpc::Node::ResponseCode>() {
  return ::Catalyst::Protocol::Rpc::Node::ResponseCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Rpc_2eproto
