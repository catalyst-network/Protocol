// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wire.proto

#include "Wire.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Cryptography_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Signature_Cryptography_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Peer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerId_Peer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PublicEntry_Transaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Wire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CandidateDeltaBroadcast_Wire_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Wire {
class ProtocolErrorMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolErrorMessage> _instance;
} _ProtocolErrorMessage_default_instance_;
class ProtocolMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolMessage> _instance;
} _ProtocolMessage_default_instance_;
class TransactionBroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionBroadcast> _instance;
} _TransactionBroadcast_default_instance_;
class CandidateDeltaBroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandidateDeltaBroadcast> _instance;
} _CandidateDeltaBroadcast_default_instance_;
class FavouriteDeltaBroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FavouriteDeltaBroadcast> _instance;
} _FavouriteDeltaBroadcast_default_instance_;
class DeltaDfsHashBroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeltaDfsHashBroadcast> _instance;
} _DeltaDfsHashBroadcast_default_instance_;
}  // namespace Wire
}  // namespace Protocol
}  // namespace Catalyst
static void InitDefaultsscc_info_CandidateDeltaBroadcast_Wire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Wire::_CandidateDeltaBroadcast_default_instance_;
    new (ptr) ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CandidateDeltaBroadcast_Wire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CandidateDeltaBroadcast_Wire_2eproto}, {
      &scc_info_PeerId_Peer_2eproto.base,}};

static void InitDefaultsscc_info_DeltaDfsHashBroadcast_Wire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Wire::_DeltaDfsHashBroadcast_default_instance_;
    new (ptr) ::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeltaDfsHashBroadcast_Wire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeltaDfsHashBroadcast_Wire_2eproto}, {}};

static void InitDefaultsscc_info_FavouriteDeltaBroadcast_Wire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Wire::_FavouriteDeltaBroadcast_default_instance_;
    new (ptr) ::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FavouriteDeltaBroadcast_Wire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FavouriteDeltaBroadcast_Wire_2eproto}, {
      &scc_info_CandidateDeltaBroadcast_Wire_2eproto.base,
      &scc_info_PeerId_Peer_2eproto.base,}};

static void InitDefaultsscc_info_ProtocolErrorMessage_Wire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Wire::_ProtocolErrorMessage_default_instance_;
    new (ptr) ::Catalyst::Protocol::Wire::ProtocolErrorMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Wire::ProtocolErrorMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProtocolErrorMessage_Wire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProtocolErrorMessage_Wire_2eproto}, {
      &scc_info_Signature_Cryptography_2eproto.base,
      &scc_info_PeerId_Peer_2eproto.base,}};

static void InitDefaultsscc_info_ProtocolMessage_Wire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Wire::_ProtocolMessage_default_instance_;
    new (ptr) ::Catalyst::Protocol::Wire::ProtocolMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Wire::ProtocolMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProtocolMessage_Wire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProtocolMessage_Wire_2eproto}, {
      &scc_info_PeerId_Peer_2eproto.base,
      &scc_info_Signature_Cryptography_2eproto.base,}};

static void InitDefaultsscc_info_TransactionBroadcast_Wire_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Wire::_TransactionBroadcast_default_instance_;
    new (ptr) ::Catalyst::Protocol::Wire::TransactionBroadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Wire::TransactionBroadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionBroadcast_Wire_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionBroadcast_Wire_2eproto}, {
      &scc_info_PublicEntry_Transaction_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Wire_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Wire_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Wire_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Wire_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolErrorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolErrorMessage, signature_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolErrorMessage, peer_id_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolErrorMessage, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolErrorMessage, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolMessage, peer_id_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolMessage, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolMessage, type_url_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolMessage, value_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::ProtocolMessage, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::TransactionBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::TransactionBroadcast, public_entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::CandidateDeltaBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::CandidateDeltaBroadcast, hash_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::CandidateDeltaBroadcast, producer_id_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::CandidateDeltaBroadcast, previous_delta_dfs_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast, candidate_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast, voter_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast, delta_dfs_hash_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast, previous_delta_dfs_hash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Catalyst::Protocol::Wire::ProtocolErrorMessage)},
  { 9, -1, sizeof(::Catalyst::Protocol::Wire::ProtocolMessage)},
  { 19, -1, sizeof(::Catalyst::Protocol::Wire::TransactionBroadcast)},
  { 25, -1, sizeof(::Catalyst::Protocol::Wire::CandidateDeltaBroadcast)},
  { 33, -1, sizeof(::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast)},
  { 40, -1, sizeof(::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Wire::_ProtocolErrorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Wire::_ProtocolMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Wire::_TransactionBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Wire::_CandidateDeltaBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Wire::_FavouriteDeltaBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Wire::_DeltaDfsHashBroadcast_default_instance_),
};

const char descriptor_table_protodef_Wire_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nWire.proto\022\026Catalyst.Protocol.Wire\032\022Cr"
  "yptography.proto\032\nPeer.proto\032\021Transactio"
  "n.proto\032\037google/protobuf/timestamp.proto"
  "\"\253\001\n\024ProtocolErrorMessage\022<\n\tsignature\030\001"
  " \001(\0132).Catalyst.Protocol.Cryptography.Si"
  "gnature\022/\n\007peer_id\030\002 \001(\0132\036.Catalyst.Prot"
  "ocol.Peer.PeerId\022\026\n\016correlation_id\030\003 \001(\014"
  "\022\014\n\004code\030\004 \001(\005\"\271\001\n\017ProtocolMessage\022/\n\007pe"
  "er_id\030\001 \001(\0132\036.Catalyst.Protocol.Peer.Pee"
  "rId\022\026\n\016correlation_id\030\002 \001(\014\022\020\n\010type_url\030"
  "\003 \001(\t\022\r\n\005value\030\004 \001(\014\022<\n\tsignature\030\005 \001(\0132"
  ").Catalyst.Protocol.Cryptography.Signatu"
  "re\"X\n\024TransactionBroadcast\022@\n\014public_ent"
  "ry\030\001 \001(\0132*.Catalyst.Protocol.Transaction"
  ".PublicEntry\"}\n\027CandidateDeltaBroadcast\022"
  "\014\n\004hash\030\001 \001(\014\0223\n\013producer_id\030\002 \001(\0132\036.Cat"
  "alyst.Protocol.Peer.PeerId\022\037\n\027previous_d"
  "elta_dfs_hash\030\003 \001(\014\"\217\001\n\027FavouriteDeltaBr"
  "oadcast\022B\n\tcandidate\030\001 \001(\0132/.Catalyst.Pr"
  "otocol.Wire.CandidateDeltaBroadcast\0220\n\010v"
  "oter_id\030\002 \001(\0132\036.Catalyst.Protocol.Peer.P"
  "eerId\"P\n\025DeltaDfsHashBroadcast\022\026\n\016delta_"
  "dfs_hash\030\001 \001(\014\022\037\n\027previous_delta_dfs_has"
  "h\030\002 \001(\014B\002P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Wire_2eproto_deps[4] = {
  &::descriptor_table_Cryptography_2eproto,
  &::descriptor_table_Peer_2eproto,
  &::descriptor_table_Transaction_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Wire_2eproto_sccs[6] = {
  &scc_info_CandidateDeltaBroadcast_Wire_2eproto.base,
  &scc_info_DeltaDfsHashBroadcast_Wire_2eproto.base,
  &scc_info_FavouriteDeltaBroadcast_Wire_2eproto.base,
  &scc_info_ProtocolErrorMessage_Wire_2eproto.base,
  &scc_info_ProtocolMessage_Wire_2eproto.base,
  &scc_info_TransactionBroadcast_Wire_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Wire_2eproto_once;
static bool descriptor_table_Wire_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Wire_2eproto = {
  &descriptor_table_Wire_2eproto_initialized, descriptor_table_protodef_Wire_2eproto, "Wire.proto", 939,
  &descriptor_table_Wire_2eproto_once, descriptor_table_Wire_2eproto_sccs, descriptor_table_Wire_2eproto_deps, 6, 4,
  schemas, file_default_instances, TableStruct_Wire_2eproto::offsets,
  file_level_metadata_Wire_2eproto, 6, file_level_enum_descriptors_Wire_2eproto, file_level_service_descriptors_Wire_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Wire_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Wire_2eproto), true);
namespace Catalyst {
namespace Protocol {
namespace Wire {

// ===================================================================

void ProtocolErrorMessage::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Wire::_ProtocolErrorMessage_default_instance_._instance.get_mutable()->signature_ = const_cast< ::Catalyst::Protocol::Cryptography::Signature*>(
      ::Catalyst::Protocol::Cryptography::Signature::internal_default_instance());
  ::Catalyst::Protocol::Wire::_ProtocolErrorMessage_default_instance_._instance.get_mutable()->peer_id_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
}
class ProtocolErrorMessage::_Internal {
 public:
  static const ::Catalyst::Protocol::Cryptography::Signature& signature(const ProtocolErrorMessage* msg);
  static const ::Catalyst::Protocol::Peer::PeerId& peer_id(const ProtocolErrorMessage* msg);
};

const ::Catalyst::Protocol::Cryptography::Signature&
ProtocolErrorMessage::_Internal::signature(const ProtocolErrorMessage* msg) {
  return *msg->signature_;
}
const ::Catalyst::Protocol::Peer::PeerId&
ProtocolErrorMessage::_Internal::peer_id(const ProtocolErrorMessage* msg) {
  return *msg->peer_id_;
}
void ProtocolErrorMessage::clear_signature() {
  if (GetArenaNoVirtual() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}
void ProtocolErrorMessage::clear_peer_id() {
  if (GetArenaNoVirtual() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
ProtocolErrorMessage::ProtocolErrorMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.ProtocolErrorMessage)
}
ProtocolErrorMessage::ProtocolErrorMessage(const ProtocolErrorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_correlation_id().empty()) {
    correlation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  if (from._internal_has_signature()) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.ProtocolErrorMessage)
}

void ProtocolErrorMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtocolErrorMessage_Wire_2eproto.base);
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(code_));
}

ProtocolErrorMessage::~ProtocolErrorMessage() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  SharedDtor();
}

void ProtocolErrorMessage::SharedDtor() {
  correlation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete peer_id_;
}

void ProtocolErrorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolErrorMessage& ProtocolErrorMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolErrorMessage_Wire_2eproto.base);
  return *internal_default_instance();
}


void ProtocolErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear();
}

const char* ProtocolErrorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Cryptography.Signature signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Peer.PeerId peer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes correlation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_correlation_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolErrorMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Cryptography.Signature signature = 1;
  if (this->has_signature()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::signature(this), target, stream);
  }

  // .Catalyst.Protocol.Peer.PeerId peer_id = 2;
  if (this->has_peer_id()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::peer_id(this), target, stream);
  }

  // bytes correlation_id = 3;
  if (this->correlation_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_correlation_id(), target);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  return target;
}

size_t ProtocolErrorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes correlation_id = 3;
  if (this->correlation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_correlation_id());
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 1;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  // .Catalyst.Protocol.Peer.PeerId peer_id = 2;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolErrorMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolErrorMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolErrorMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.ProtocolErrorMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.ProtocolErrorMessage)
    MergeFrom(*source);
  }
}

void ProtocolErrorMessage::MergeFrom(const ProtocolErrorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.correlation_id().size() > 0) {

    correlation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::Catalyst::Protocol::Cryptography::Signature::MergeFrom(from._internal_signature());
  }
  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from._internal_peer_id());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ProtocolErrorMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolErrorMessage::CopyFrom(const ProtocolErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolErrorMessage::IsInitialized() const {
  return true;
}

void ProtocolErrorMessage::InternalSwap(ProtocolErrorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  correlation_id_.Swap(&other->correlation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signature_, other->signature_);
  swap(peer_id_, other->peer_id_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolErrorMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProtocolMessage::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Wire::_ProtocolMessage_default_instance_._instance.get_mutable()->peer_id_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
  ::Catalyst::Protocol::Wire::_ProtocolMessage_default_instance_._instance.get_mutable()->signature_ = const_cast< ::Catalyst::Protocol::Cryptography::Signature*>(
      ::Catalyst::Protocol::Cryptography::Signature::internal_default_instance());
}
class ProtocolMessage::_Internal {
 public:
  static const ::Catalyst::Protocol::Peer::PeerId& peer_id(const ProtocolMessage* msg);
  static const ::Catalyst::Protocol::Cryptography::Signature& signature(const ProtocolMessage* msg);
};

const ::Catalyst::Protocol::Peer::PeerId&
ProtocolMessage::_Internal::peer_id(const ProtocolMessage* msg) {
  return *msg->peer_id_;
}
const ::Catalyst::Protocol::Cryptography::Signature&
ProtocolMessage::_Internal::signature(const ProtocolMessage* msg) {
  return *msg->signature_;
}
void ProtocolMessage::clear_peer_id() {
  if (GetArenaNoVirtual() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
void ProtocolMessage::clear_signature() {
  if (GetArenaNoVirtual() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}
ProtocolMessage::ProtocolMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.ProtocolMessage)
}
ProtocolMessage::ProtocolMessage(const ProtocolMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_correlation_id().empty()) {
    correlation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  type_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type_url().empty()) {
    type_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_url_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.ProtocolMessage)
}

void ProtocolMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtocolMessage_Wire_2eproto.base);
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&peer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signature_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(signature_));
}

ProtocolMessage::~ProtocolMessage() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.ProtocolMessage)
  SharedDtor();
}

void ProtocolMessage::SharedDtor() {
  correlation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_id_;
  if (this != internal_default_instance()) delete signature_;
}

void ProtocolMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolMessage& ProtocolMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolMessage_Wire_2eproto.base);
  return *internal_default_instance();
}


void ProtocolMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.ProtocolMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ProtocolMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes correlation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_correlation_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_type_url(), ptr, ctx, "Catalyst.Protocol.Wire.ProtocolMessage.type_url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Cryptography.Signature signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.ProtocolMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  if (this->has_peer_id()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::peer_id(this), target, stream);
  }

  // bytes correlation_id = 2;
  if (this->correlation_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_correlation_id(), target);
  }

  // string type_url = 3;
  if (this->type_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_url().data(), static_cast<int>(this->_internal_type_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Wire.ProtocolMessage.type_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type_url(), target);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_value(), target);
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 5;
  if (this->has_signature()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.ProtocolMessage)
  return target;
}

size_t ProtocolMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.ProtocolMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes correlation_id = 2;
  if (this->correlation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_correlation_id());
  }

  // string type_url = 3;
  if (this->type_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_url());
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 5;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.ProtocolMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.ProtocolMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.ProtocolMessage)
    MergeFrom(*source);
  }
}

void ProtocolMessage::MergeFrom(const ProtocolMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.ProtocolMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.correlation_id().size() > 0) {

    correlation_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  if (from.type_url().size() > 0) {

    type_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_url_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from._internal_peer_id());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::Catalyst::Protocol::Cryptography::Signature::MergeFrom(from._internal_signature());
  }
}

void ProtocolMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.ProtocolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolMessage::CopyFrom(const ProtocolMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.ProtocolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolMessage::IsInitialized() const {
  return true;
}

void ProtocolMessage::InternalSwap(ProtocolMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  correlation_id_.Swap(&other->correlation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_url_.Swap(&other->type_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(peer_id_, other->peer_id_);
  swap(signature_, other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionBroadcast::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Wire::_TransactionBroadcast_default_instance_._instance.get_mutable()->public_entry_ = const_cast< ::Catalyst::Protocol::Transaction::PublicEntry*>(
      ::Catalyst::Protocol::Transaction::PublicEntry::internal_default_instance());
}
class TransactionBroadcast::_Internal {
 public:
  static const ::Catalyst::Protocol::Transaction::PublicEntry& public_entry(const TransactionBroadcast* msg);
};

const ::Catalyst::Protocol::Transaction::PublicEntry&
TransactionBroadcast::_Internal::public_entry(const TransactionBroadcast* msg) {
  return *msg->public_entry_;
}
void TransactionBroadcast::clear_public_entry() {
  if (GetArenaNoVirtual() == nullptr && public_entry_ != nullptr) {
    delete public_entry_;
  }
  public_entry_ = nullptr;
}
TransactionBroadcast::TransactionBroadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.TransactionBroadcast)
}
TransactionBroadcast::TransactionBroadcast(const TransactionBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_public_entry()) {
    public_entry_ = new ::Catalyst::Protocol::Transaction::PublicEntry(*from.public_entry_);
  } else {
    public_entry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.TransactionBroadcast)
}

void TransactionBroadcast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionBroadcast_Wire_2eproto.base);
  public_entry_ = nullptr;
}

TransactionBroadcast::~TransactionBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.TransactionBroadcast)
  SharedDtor();
}

void TransactionBroadcast::SharedDtor() {
  if (this != internal_default_instance()) delete public_entry_;
}

void TransactionBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionBroadcast& TransactionBroadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionBroadcast_Wire_2eproto.base);
  return *internal_default_instance();
}


void TransactionBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && public_entry_ != nullptr) {
    delete public_entry_;
  }
  public_entry_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TransactionBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionBroadcast::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
  if (this->has_public_entry()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::public_entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.TransactionBroadcast)
  return target;
}

size_t TransactionBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
  if (this->has_public_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_entry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.TransactionBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.TransactionBroadcast)
    MergeFrom(*source);
  }
}

void TransactionBroadcast::MergeFrom(const TransactionBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_public_entry()) {
    _internal_mutable_public_entry()->::Catalyst::Protocol::Transaction::PublicEntry::MergeFrom(from._internal_public_entry());
  }
}

void TransactionBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionBroadcast::CopyFrom(const TransactionBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionBroadcast::IsInitialized() const {
  return true;
}

void TransactionBroadcast::InternalSwap(TransactionBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(public_entry_, other->public_entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CandidateDeltaBroadcast::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Wire::_CandidateDeltaBroadcast_default_instance_._instance.get_mutable()->producer_id_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
}
class CandidateDeltaBroadcast::_Internal {
 public:
  static const ::Catalyst::Protocol::Peer::PeerId& producer_id(const CandidateDeltaBroadcast* msg);
};

const ::Catalyst::Protocol::Peer::PeerId&
CandidateDeltaBroadcast::_Internal::producer_id(const CandidateDeltaBroadcast* msg) {
  return *msg->producer_id_;
}
void CandidateDeltaBroadcast::clear_producer_id() {
  if (GetArenaNoVirtual() == nullptr && producer_id_ != nullptr) {
    delete producer_id_;
  }
  producer_id_ = nullptr;
}
CandidateDeltaBroadcast::CandidateDeltaBroadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
}
CandidateDeltaBroadcast::CandidateDeltaBroadcast(const CandidateDeltaBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  previous_delta_dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_delta_dfs_hash().empty()) {
    previous_delta_dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previous_delta_dfs_hash_);
  }
  if (from._internal_has_producer_id()) {
    producer_id_ = new ::Catalyst::Protocol::Peer::PeerId(*from.producer_id_);
  } else {
    producer_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
}

void CandidateDeltaBroadcast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandidateDeltaBroadcast_Wire_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_id_ = nullptr;
}

CandidateDeltaBroadcast::~CandidateDeltaBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  SharedDtor();
}

void CandidateDeltaBroadcast::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete producer_id_;
}

void CandidateDeltaBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandidateDeltaBroadcast& CandidateDeltaBroadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandidateDeltaBroadcast_Wire_2eproto.base);
  return *internal_default_instance();
}


void CandidateDeltaBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && producer_id_ != nullptr) {
    delete producer_id_;
  }
  producer_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CandidateDeltaBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Peer.PeerId producer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_producer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previous_delta_dfs_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_previous_delta_dfs_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidateDeltaBroadcast::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // .Catalyst.Protocol.Peer.PeerId producer_id = 2;
  if (this->has_producer_id()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::producer_id(this), target, stream);
  }

  // bytes previous_delta_dfs_hash = 3;
  if (this->previous_delta_dfs_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_previous_delta_dfs_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  return target;
}

size_t CandidateDeltaBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes previous_delta_dfs_hash = 3;
  if (this->previous_delta_dfs_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous_delta_dfs_hash());
  }

  // .Catalyst.Protocol.Peer.PeerId producer_id = 2;
  if (this->has_producer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *producer_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandidateDeltaBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CandidateDeltaBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandidateDeltaBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
    MergeFrom(*source);
  }
}

void CandidateDeltaBroadcast::MergeFrom(const CandidateDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.previous_delta_dfs_hash().size() > 0) {

    previous_delta_dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previous_delta_dfs_hash_);
  }
  if (from.has_producer_id()) {
    _internal_mutable_producer_id()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from._internal_producer_id());
  }
}

void CandidateDeltaBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateDeltaBroadcast::CopyFrom(const CandidateDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateDeltaBroadcast::IsInitialized() const {
  return true;
}

void CandidateDeltaBroadcast::InternalSwap(CandidateDeltaBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  previous_delta_dfs_hash_.Swap(&other->previous_delta_dfs_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(producer_id_, other->producer_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidateDeltaBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FavouriteDeltaBroadcast::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Wire::_FavouriteDeltaBroadcast_default_instance_._instance.get_mutable()->candidate_ = const_cast< ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast*>(
      ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast::internal_default_instance());
  ::Catalyst::Protocol::Wire::_FavouriteDeltaBroadcast_default_instance_._instance.get_mutable()->voter_id_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
}
class FavouriteDeltaBroadcast::_Internal {
 public:
  static const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast& candidate(const FavouriteDeltaBroadcast* msg);
  static const ::Catalyst::Protocol::Peer::PeerId& voter_id(const FavouriteDeltaBroadcast* msg);
};

const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast&
FavouriteDeltaBroadcast::_Internal::candidate(const FavouriteDeltaBroadcast* msg) {
  return *msg->candidate_;
}
const ::Catalyst::Protocol::Peer::PeerId&
FavouriteDeltaBroadcast::_Internal::voter_id(const FavouriteDeltaBroadcast* msg) {
  return *msg->voter_id_;
}
void FavouriteDeltaBroadcast::clear_voter_id() {
  if (GetArenaNoVirtual() == nullptr && voter_id_ != nullptr) {
    delete voter_id_;
  }
  voter_id_ = nullptr;
}
FavouriteDeltaBroadcast::FavouriteDeltaBroadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
}
FavouriteDeltaBroadcast::FavouriteDeltaBroadcast(const FavouriteDeltaBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_candidate()) {
    candidate_ = new ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast(*from.candidate_);
  } else {
    candidate_ = nullptr;
  }
  if (from._internal_has_voter_id()) {
    voter_id_ = new ::Catalyst::Protocol::Peer::PeerId(*from.voter_id_);
  } else {
    voter_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
}

void FavouriteDeltaBroadcast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FavouriteDeltaBroadcast_Wire_2eproto.base);
  ::memset(&candidate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voter_id_) -
      reinterpret_cast<char*>(&candidate_)) + sizeof(voter_id_));
}

FavouriteDeltaBroadcast::~FavouriteDeltaBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  SharedDtor();
}

void FavouriteDeltaBroadcast::SharedDtor() {
  if (this != internal_default_instance()) delete candidate_;
  if (this != internal_default_instance()) delete voter_id_;
}

void FavouriteDeltaBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FavouriteDeltaBroadcast& FavouriteDeltaBroadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FavouriteDeltaBroadcast_Wire_2eproto.base);
  return *internal_default_instance();
}


void FavouriteDeltaBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && candidate_ != nullptr) {
    delete candidate_;
  }
  candidate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voter_id_ != nullptr) {
    delete voter_id_;
  }
  voter_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FavouriteDeltaBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Peer.PeerId voter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_voter_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FavouriteDeltaBroadcast::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
  if (this->has_candidate()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::candidate(this), target, stream);
  }

  // .Catalyst.Protocol.Peer.PeerId voter_id = 2;
  if (this->has_voter_id()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::voter_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  return target;
}

size_t FavouriteDeltaBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
  if (this->has_candidate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candidate_);
  }

  // .Catalyst.Protocol.Peer.PeerId voter_id = 2;
  if (this->has_voter_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voter_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FavouriteDeltaBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const FavouriteDeltaBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FavouriteDeltaBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
    MergeFrom(*source);
  }
}

void FavouriteDeltaBroadcast::MergeFrom(const FavouriteDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_candidate()) {
    _internal_mutable_candidate()->::Catalyst::Protocol::Wire::CandidateDeltaBroadcast::MergeFrom(from._internal_candidate());
  }
  if (from.has_voter_id()) {
    _internal_mutable_voter_id()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from._internal_voter_id());
  }
}

void FavouriteDeltaBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavouriteDeltaBroadcast::CopyFrom(const FavouriteDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavouriteDeltaBroadcast::IsInitialized() const {
  return true;
}

void FavouriteDeltaBroadcast::InternalSwap(FavouriteDeltaBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(candidate_, other->candidate_);
  swap(voter_id_, other->voter_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FavouriteDeltaBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeltaDfsHashBroadcast::InitAsDefaultInstance() {
}
class DeltaDfsHashBroadcast::_Internal {
 public:
};

DeltaDfsHashBroadcast::DeltaDfsHashBroadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
}
DeltaDfsHashBroadcast::DeltaDfsHashBroadcast(const DeltaDfsHashBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delta_dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delta_dfs_hash().empty()) {
    delta_dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delta_dfs_hash_);
  }
  previous_delta_dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_delta_dfs_hash().empty()) {
    previous_delta_dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previous_delta_dfs_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
}

void DeltaDfsHashBroadcast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeltaDfsHashBroadcast_Wire_2eproto.base);
  delta_dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeltaDfsHashBroadcast::~DeltaDfsHashBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  SharedDtor();
}

void DeltaDfsHashBroadcast::SharedDtor() {
  delta_dfs_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeltaDfsHashBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeltaDfsHashBroadcast& DeltaDfsHashBroadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeltaDfsHashBroadcast_Wire_2eproto.base);
  return *internal_default_instance();
}


void DeltaDfsHashBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delta_dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeltaDfsHashBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes delta_dfs_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_delta_dfs_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previous_delta_dfs_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_previous_delta_dfs_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeltaDfsHashBroadcast::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes delta_dfs_hash = 1;
  if (this->delta_dfs_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_delta_dfs_hash(), target);
  }

  // bytes previous_delta_dfs_hash = 2;
  if (this->previous_delta_dfs_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_previous_delta_dfs_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  return target;
}

size_t DeltaDfsHashBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes delta_dfs_hash = 1;
  if (this->delta_dfs_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_delta_dfs_hash());
  }

  // bytes previous_delta_dfs_hash = 2;
  if (this->previous_delta_dfs_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous_delta_dfs_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeltaDfsHashBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const DeltaDfsHashBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeltaDfsHashBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
    MergeFrom(*source);
  }
}

void DeltaDfsHashBroadcast::MergeFrom(const DeltaDfsHashBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delta_dfs_hash().size() > 0) {

    delta_dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delta_dfs_hash_);
  }
  if (from.previous_delta_dfs_hash().size() > 0) {

    previous_delta_dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.previous_delta_dfs_hash_);
  }
}

void DeltaDfsHashBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaDfsHashBroadcast::CopyFrom(const DeltaDfsHashBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaDfsHashBroadcast::IsInitialized() const {
  return true;
}

void DeltaDfsHashBroadcast::InternalSwap(DeltaDfsHashBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  delta_dfs_hash_.Swap(&other->delta_dfs_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  previous_delta_dfs_hash_.Swap(&other->previous_delta_dfs_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeltaDfsHashBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Wire
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Wire::ProtocolErrorMessage* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Wire::ProtocolErrorMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Wire::ProtocolErrorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Wire::ProtocolMessage* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Wire::ProtocolMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Wire::ProtocolMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Wire::TransactionBroadcast* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Wire::TransactionBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Wire::TransactionBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
