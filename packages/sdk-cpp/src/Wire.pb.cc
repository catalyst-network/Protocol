// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wire.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Wire.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Catalyst {
namespace Protocol {
namespace Wire {
class ProtocolErrorMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtocolErrorMessage> {
} _ProtocolErrorMessage_default_instance_;
class ProtocolMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtocolMessage> {
} _ProtocolMessage_default_instance_;
class TransactionBroadcastDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransactionBroadcast> {
} _TransactionBroadcast_default_instance_;
class CandidateDeltaBroadcastDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CandidateDeltaBroadcast> {
} _CandidateDeltaBroadcast_default_instance_;
class FavouriteDeltaBroadcastDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FavouriteDeltaBroadcast> {
} _FavouriteDeltaBroadcast_default_instance_;
class DeltaDfsHashBroadcastDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeltaDfsHashBroadcast> {
} _DeltaDfsHashBroadcast_default_instance_;

namespace protobuf_Wire_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolErrorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolErrorMessage, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolErrorMessage, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolErrorMessage, correlation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolErrorMessage, code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, correlation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, type_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, signature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionBroadcast, public_entry_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateDeltaBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateDeltaBroadcast, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateDeltaBroadcast, producer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateDeltaBroadcast, previous_delta_dfs_hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavouriteDeltaBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavouriteDeltaBroadcast, candidate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavouriteDeltaBroadcast, voter_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaDfsHashBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaDfsHashBroadcast, delta_dfs_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaDfsHashBroadcast, previous_delta_dfs_hash_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ProtocolErrorMessage)},
  { 8, -1, sizeof(ProtocolMessage)},
  { 17, -1, sizeof(TransactionBroadcast)},
  { 22, -1, sizeof(CandidateDeltaBroadcast)},
  { 29, -1, sizeof(FavouriteDeltaBroadcast)},
  { 35, -1, sizeof(DeltaDfsHashBroadcast)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtocolErrorMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtocolMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CandidateDeltaBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FavouriteDeltaBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeltaDfsHashBroadcast_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Wire.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _ProtocolErrorMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ProtocolMessage_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TransactionBroadcast_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CandidateDeltaBroadcast_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _FavouriteDeltaBroadcast_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _DeltaDfsHashBroadcast_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Catalyst::Protocol::Cryptography::protobuf_Cryptography_2eproto::InitDefaults();
  ::Catalyst::Protocol::Peer::protobuf_Peer_2eproto::InitDefaults();
  ::Catalyst::Protocol::Transaction::protobuf_Transaction_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _ProtocolErrorMessage_default_instance_.DefaultConstruct();
  _ProtocolMessage_default_instance_.DefaultConstruct();
  _TransactionBroadcast_default_instance_.DefaultConstruct();
  _CandidateDeltaBroadcast_default_instance_.DefaultConstruct();
  _FavouriteDeltaBroadcast_default_instance_.DefaultConstruct();
  _DeltaDfsHashBroadcast_default_instance_.DefaultConstruct();
  _ProtocolErrorMessage_default_instance_.get_mutable()->signature_ = const_cast< ::Catalyst::Protocol::Cryptography::Signature*>(
      ::Catalyst::Protocol::Cryptography::Signature::internal_default_instance());
  _ProtocolErrorMessage_default_instance_.get_mutable()->peer_id_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
  _ProtocolMessage_default_instance_.get_mutable()->peer_id_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
  _ProtocolMessage_default_instance_.get_mutable()->signature_ = const_cast< ::Catalyst::Protocol::Cryptography::Signature*>(
      ::Catalyst::Protocol::Cryptography::Signature::internal_default_instance());
  _TransactionBroadcast_default_instance_.get_mutable()->public_entry_ = const_cast< ::Catalyst::Protocol::Transaction::PublicEntry*>(
      ::Catalyst::Protocol::Transaction::PublicEntry::internal_default_instance());
  _CandidateDeltaBroadcast_default_instance_.get_mutable()->producer_id_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
  _FavouriteDeltaBroadcast_default_instance_.get_mutable()->candidate_ = const_cast< ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast*>(
      ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast::internal_default_instance());
  _FavouriteDeltaBroadcast_default_instance_.get_mutable()->voter_id_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nWire.proto\022\026Catalyst.Protocol.Wire\032\022Cr"
      "yptography.proto\032\nPeer.proto\032\021Transactio"
      "n.proto\032\037google/protobuf/timestamp.proto"
      "\"\253\001\n\024ProtocolErrorMessage\022<\n\tsignature\030\001"
      " \001(\0132).Catalyst.Protocol.Cryptography.Si"
      "gnature\022/\n\007peer_id\030\002 \001(\0132\036.Catalyst.Prot"
      "ocol.Peer.PeerId\022\026\n\016correlation_id\030\003 \001(\014"
      "\022\014\n\004code\030\004 \001(\005\"\271\001\n\017ProtocolMessage\022/\n\007pe"
      "er_id\030\001 \001(\0132\036.Catalyst.Protocol.Peer.Pee"
      "rId\022\026\n\016correlation_id\030\002 \001(\014\022\020\n\010type_url\030"
      "\003 \001(\t\022\r\n\005value\030\004 \001(\014\022<\n\tsignature\030\005 \001(\0132"
      ").Catalyst.Protocol.Cryptography.Signatu"
      "re\"X\n\024TransactionBroadcast\022@\n\014public_ent"
      "ry\030\001 \001(\0132*.Catalyst.Protocol.Transaction"
      ".PublicEntry\"}\n\027CandidateDeltaBroadcast\022"
      "\014\n\004hash\030\001 \001(\014\0223\n\013producer_id\030\002 \001(\0132\036.Cat"
      "alyst.Protocol.Peer.PeerId\022\037\n\027previous_d"
      "elta_dfs_hash\030\003 \001(\014\"\217\001\n\027FavouriteDeltaBr"
      "oadcast\022B\n\tcandidate\030\001 \001(\0132/.Catalyst.Pr"
      "otocol.Wire.CandidateDeltaBroadcast\0220\n\010v"
      "oter_id\030\002 \001(\0132\036.Catalyst.Protocol.Peer.P"
      "eerId\"P\n\025DeltaDfsHashBroadcast\022\026\n\016delta_"
      "dfs_hash\030\001 \001(\014\022\037\n\027previous_delta_dfs_has"
      "h\030\002 \001(\014B\002P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 939);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Wire.proto", &protobuf_RegisterTypes);
  ::Catalyst::Protocol::Cryptography::protobuf_Cryptography_2eproto::AddDescriptors();
  ::Catalyst::Protocol::Peer::protobuf_Peer_2eproto::AddDescriptors();
  ::Catalyst::Protocol::Transaction::protobuf_Transaction_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Wire_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtocolErrorMessage::kSignatureFieldNumber;
const int ProtocolErrorMessage::kPeerIdFieldNumber;
const int ProtocolErrorMessage::kCorrelationIdFieldNumber;
const int ProtocolErrorMessage::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtocolErrorMessage::ProtocolErrorMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Wire_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.ProtocolErrorMessage)
}
ProtocolErrorMessage::ProtocolErrorMessage(const ProtocolErrorMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  correlation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.correlation_id().size() > 0) {
    correlation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  if (from.has_signature()) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  if (from.has_peer_id()) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId(*from.peer_id_);
  } else {
    peer_id_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.ProtocolErrorMessage)
}

void ProtocolErrorMessage::SharedCtor() {
  correlation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signature_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&signature_) + sizeof(code_));
  _cached_size_ = 0;
}

ProtocolErrorMessage::~ProtocolErrorMessage() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  SharedDtor();
}

void ProtocolErrorMessage::SharedDtor() {
  correlation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete signature_;
  }
  if (this != internal_default_instance()) {
    delete peer_id_;
  }
}

void ProtocolErrorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolErrorMessage::descriptor() {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[0].descriptor;
}

const ProtocolErrorMessage& ProtocolErrorMessage::default_instance() {
  protobuf_Wire_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtocolErrorMessage* ProtocolErrorMessage::New(::google::protobuf::Arena* arena) const {
  ProtocolErrorMessage* n = new ProtocolErrorMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtocolErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  correlation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
  if (GetArenaNoVirtual() == NULL && peer_id_ != NULL) {
    delete peer_id_;
  }
  peer_id_ = NULL;
  code_ = 0;
}

bool ProtocolErrorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Cryptography.Signature signature = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Peer.PeerId peer_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes correlation_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_correlation_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  return false;
#undef DO_
}

void ProtocolErrorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  // .Catalyst.Protocol.Cryptography.Signature signature = 1;
  if (this->has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->signature_, output);
  }

  // .Catalyst.Protocol.Peer.PeerId peer_id = 2;
  if (this->has_peer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_id_, output);
  }

  // bytes correlation_id = 3;
  if (this->correlation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->correlation_id(), output);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Wire.ProtocolErrorMessage)
}

::google::protobuf::uint8* ProtocolErrorMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  // .Catalyst.Protocol.Cryptography.Signature signature = 1;
  if (this->has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->signature_, false, target);
  }

  // .Catalyst.Protocol.Peer.PeerId peer_id = 2;
  if (this->has_peer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_id_, false, target);
  }

  // bytes correlation_id = 3;
  if (this->correlation_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->correlation_id(), target);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  return target;
}

size_t ProtocolErrorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  size_t total_size = 0;

  // bytes correlation_id = 3;
  if (this->correlation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->correlation_id());
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 1;
  if (this->has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  // .Catalyst.Protocol.Peer.PeerId peer_id = 2;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_id_);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolErrorMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolErrorMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtocolErrorMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.ProtocolErrorMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.ProtocolErrorMessage)
    MergeFrom(*source);
  }
}

void ProtocolErrorMessage::MergeFrom(const ProtocolErrorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.correlation_id().size() > 0) {

    correlation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  if (from.has_signature()) {
    mutable_signature()->::Catalyst::Protocol::Cryptography::Signature::MergeFrom(from.signature());
  }
  if (from.has_peer_id()) {
    mutable_peer_id()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from.peer_id());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ProtocolErrorMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolErrorMessage::CopyFrom(const ProtocolErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.ProtocolErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolErrorMessage::IsInitialized() const {
  return true;
}

void ProtocolErrorMessage::Swap(ProtocolErrorMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtocolErrorMessage::InternalSwap(ProtocolErrorMessage* other) {
  correlation_id_.Swap(&other->correlation_id_);
  std::swap(signature_, other->signature_);
  std::swap(peer_id_, other->peer_id_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtocolErrorMessage::GetMetadata() const {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtocolErrorMessage

// .Catalyst.Protocol.Cryptography.Signature signature = 1;
bool ProtocolErrorMessage::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
void ProtocolErrorMessage::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) delete signature_;
  signature_ = NULL;
}
const ::Catalyst::Protocol::Cryptography::Signature& ProtocolErrorMessage::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
  return signature_ != NULL ? *signature_
                         : *::Catalyst::Protocol::Cryptography::Signature::internal_default_instance();
}
::Catalyst::Protocol::Cryptography::Signature* ProtocolErrorMessage::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
  return signature_;
}
::Catalyst::Protocol::Cryptography::Signature* ProtocolErrorMessage::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
  
  ::Catalyst::Protocol::Cryptography::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void ProtocolErrorMessage::set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
}

// .Catalyst.Protocol.Peer.PeerId peer_id = 2;
bool ProtocolErrorMessage::has_peer_id() const {
  return this != internal_default_instance() && peer_id_ != NULL;
}
void ProtocolErrorMessage::clear_peer_id() {
  if (GetArenaNoVirtual() == NULL && peer_id_ != NULL) delete peer_id_;
  peer_id_ = NULL;
}
const ::Catalyst::Protocol::Peer::PeerId& ProtocolErrorMessage::peer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
  return peer_id_ != NULL ? *peer_id_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
::Catalyst::Protocol::Peer::PeerId* ProtocolErrorMessage::mutable_peer_id() {
  
  if (peer_id_ == NULL) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
  return peer_id_;
}
::Catalyst::Protocol::Peer::PeerId* ProtocolErrorMessage::release_peer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = peer_id_;
  peer_id_ = NULL;
  return temp;
}
void ProtocolErrorMessage::set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id) {
  delete peer_id_;
  peer_id_ = peer_id;
  if (peer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
}

// bytes correlation_id = 3;
void ProtocolErrorMessage::clear_correlation_id() {
  correlation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtocolErrorMessage::correlation_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
  return correlation_id_.GetNoArena();
}
void ProtocolErrorMessage::set_correlation_id(const ::std::string& value) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
#if LANG_CXX11
void ProtocolErrorMessage::set_correlation_id(::std::string&& value) {
  
  correlation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
#endif
void ProtocolErrorMessage::set_correlation_id(const char* value) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
void ProtocolErrorMessage::set_correlation_id(const void* value, size_t size) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
::std::string* ProtocolErrorMessage::mutable_correlation_id() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
  return correlation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtocolErrorMessage::release_correlation_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
  
  return correlation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtocolErrorMessage::set_allocated_correlation_id(::std::string* correlation_id) {
  if (correlation_id != NULL) {
    
  } else {
    
  }
  correlation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlation_id);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}

// int32 code = 4;
void ProtocolErrorMessage::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 ProtocolErrorMessage::code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.code)
  return code_;
}
void ProtocolErrorMessage::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolErrorMessage.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtocolMessage::kPeerIdFieldNumber;
const int ProtocolMessage::kCorrelationIdFieldNumber;
const int ProtocolMessage::kTypeUrlFieldNumber;
const int ProtocolMessage::kValueFieldNumber;
const int ProtocolMessage::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtocolMessage::ProtocolMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Wire_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.ProtocolMessage)
}
ProtocolMessage::ProtocolMessage(const ProtocolMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  correlation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.correlation_id().size() > 0) {
    correlation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  type_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type_url().size() > 0) {
    type_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_url_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_peer_id()) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId(*from.peer_id_);
  } else {
    peer_id_ = NULL;
  }
  if (from.has_signature()) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.ProtocolMessage)
}

void ProtocolMessage::SharedCtor() {
  correlation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&peer_id_, 0, reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&peer_id_) + sizeof(signature_));
  _cached_size_ = 0;
}

ProtocolMessage::~ProtocolMessage() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.ProtocolMessage)
  SharedDtor();
}

void ProtocolMessage::SharedDtor() {
  correlation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete peer_id_;
  }
  if (this != internal_default_instance()) {
    delete signature_;
  }
}

void ProtocolMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolMessage::descriptor() {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[1].descriptor;
}

const ProtocolMessage& ProtocolMessage::default_instance() {
  protobuf_Wire_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtocolMessage* ProtocolMessage::New(::google::protobuf::Arena* arena) const {
  ProtocolMessage* n = new ProtocolMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtocolMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.ProtocolMessage)
  correlation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && peer_id_ != NULL) {
    delete peer_id_;
  }
  peer_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) {
    delete signature_;
  }
  signature_ = NULL;
}

bool ProtocolMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Wire.ProtocolMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes correlation_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_correlation_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type_url = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type_url().data(), this->type_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.Wire.ProtocolMessage.type_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Cryptography.Signature signature = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Wire.ProtocolMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Wire.ProtocolMessage)
  return false;
#undef DO_
}

void ProtocolMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Wire.ProtocolMessage)
  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  if (this->has_peer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_id_, output);
  }

  // bytes correlation_id = 2;
  if (this->correlation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->correlation_id(), output);
  }

  // string type_url = 3;
  if (this->type_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_url().data(), this->type_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Wire.ProtocolMessage.type_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type_url(), output);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 5;
  if (this->has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->signature_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Wire.ProtocolMessage)
}

::google::protobuf::uint8* ProtocolMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.ProtocolMessage)
  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  if (this->has_peer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_id_, false, target);
  }

  // bytes correlation_id = 2;
  if (this->correlation_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->correlation_id(), target);
  }

  // string type_url = 3;
  if (this->type_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_url().data(), this->type_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Wire.ProtocolMessage.type_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type_url(), target);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 5;
  if (this->has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->signature_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.ProtocolMessage)
  return target;
}

size_t ProtocolMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.ProtocolMessage)
  size_t total_size = 0;

  // bytes correlation_id = 2;
  if (this->correlation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->correlation_id());
  }

  // string type_url = 3;
  if (this->type_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_url());
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_id_);
  }

  // .Catalyst.Protocol.Cryptography.Signature signature = 5;
  if (this->has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.ProtocolMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtocolMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.ProtocolMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.ProtocolMessage)
    MergeFrom(*source);
  }
}

void ProtocolMessage::MergeFrom(const ProtocolMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.ProtocolMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.correlation_id().size() > 0) {

    correlation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.correlation_id_);
  }
  if (from.type_url().size() > 0) {

    type_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_url_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_peer_id()) {
    mutable_peer_id()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from.peer_id());
  }
  if (from.has_signature()) {
    mutable_signature()->::Catalyst::Protocol::Cryptography::Signature::MergeFrom(from.signature());
  }
}

void ProtocolMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.ProtocolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolMessage::CopyFrom(const ProtocolMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.ProtocolMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolMessage::IsInitialized() const {
  return true;
}

void ProtocolMessage::Swap(ProtocolMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtocolMessage::InternalSwap(ProtocolMessage* other) {
  correlation_id_.Swap(&other->correlation_id_);
  type_url_.Swap(&other->type_url_);
  value_.Swap(&other->value_);
  std::swap(peer_id_, other->peer_id_);
  std::swap(signature_, other->signature_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtocolMessage::GetMetadata() const {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtocolMessage

// .Catalyst.Protocol.Peer.PeerId peer_id = 1;
bool ProtocolMessage::has_peer_id() const {
  return this != internal_default_instance() && peer_id_ != NULL;
}
void ProtocolMessage::clear_peer_id() {
  if (GetArenaNoVirtual() == NULL && peer_id_ != NULL) delete peer_id_;
  peer_id_ = NULL;
}
const ::Catalyst::Protocol::Peer::PeerId& ProtocolMessage::peer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
  return peer_id_ != NULL ? *peer_id_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
::Catalyst::Protocol::Peer::PeerId* ProtocolMessage::mutable_peer_id() {
  
  if (peer_id_ == NULL) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
  return peer_id_;
}
::Catalyst::Protocol::Peer::PeerId* ProtocolMessage::release_peer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = peer_id_;
  peer_id_ = NULL;
  return temp;
}
void ProtocolMessage::set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id) {
  delete peer_id_;
  peer_id_ = peer_id;
  if (peer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
}

// bytes correlation_id = 2;
void ProtocolMessage::clear_correlation_id() {
  correlation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtocolMessage::correlation_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
  return correlation_id_.GetNoArena();
}
void ProtocolMessage::set_correlation_id(const ::std::string& value) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
#if LANG_CXX11
void ProtocolMessage::set_correlation_id(::std::string&& value) {
  
  correlation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
#endif
void ProtocolMessage::set_correlation_id(const char* value) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
void ProtocolMessage::set_correlation_id(const void* value, size_t size) {
  
  correlation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
::std::string* ProtocolMessage::mutable_correlation_id() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
  return correlation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtocolMessage::release_correlation_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
  
  return correlation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtocolMessage::set_allocated_correlation_id(::std::string* correlation_id) {
  if (correlation_id != NULL) {
    
  } else {
    
  }
  correlation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlation_id);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}

// string type_url = 3;
void ProtocolMessage::clear_type_url() {
  type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtocolMessage::type_url() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
  return type_url_.GetNoArena();
}
void ProtocolMessage::set_type_url(const ::std::string& value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
#if LANG_CXX11
void ProtocolMessage::set_type_url(::std::string&& value) {
  
  type_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
#endif
void ProtocolMessage::set_type_url(const char* value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
void ProtocolMessage::set_type_url(const char* value, size_t size) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
::std::string* ProtocolMessage::mutable_type_url() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
  return type_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtocolMessage::release_type_url() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
  
  return type_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtocolMessage::set_allocated_type_url(::std::string* type_url) {
  if (type_url != NULL) {
    
  } else {
    
  }
  type_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_url);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}

// bytes value = 4;
void ProtocolMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtocolMessage::value() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.value)
  return value_.GetNoArena();
}
void ProtocolMessage::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
#if LANG_CXX11
void ProtocolMessage::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
#endif
void ProtocolMessage::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
void ProtocolMessage::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
::std::string* ProtocolMessage::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtocolMessage::release_value() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtocolMessage::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.value)
}

// .Catalyst.Protocol.Cryptography.Signature signature = 5;
bool ProtocolMessage::has_signature() const {
  return this != internal_default_instance() && signature_ != NULL;
}
void ProtocolMessage::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) delete signature_;
  signature_ = NULL;
}
const ::Catalyst::Protocol::Cryptography::Signature& ProtocolMessage::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.signature)
  return signature_ != NULL ? *signature_
                         : *::Catalyst::Protocol::Cryptography::Signature::internal_default_instance();
}
::Catalyst::Protocol::Cryptography::Signature* ProtocolMessage::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::Catalyst::Protocol::Cryptography::Signature;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.signature)
  return signature_;
}
::Catalyst::Protocol::Cryptography::Signature* ProtocolMessage::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.signature)
  
  ::Catalyst::Protocol::Cryptography::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void ProtocolMessage::set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionBroadcast::kPublicEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionBroadcast::TransactionBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Wire_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.TransactionBroadcast)
}
TransactionBroadcast::TransactionBroadcast(const TransactionBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_public_entry()) {
    public_entry_ = new ::Catalyst::Protocol::Transaction::PublicEntry(*from.public_entry_);
  } else {
    public_entry_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.TransactionBroadcast)
}

void TransactionBroadcast::SharedCtor() {
  public_entry_ = NULL;
  _cached_size_ = 0;
}

TransactionBroadcast::~TransactionBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.TransactionBroadcast)
  SharedDtor();
}

void TransactionBroadcast::SharedDtor() {
  if (this != internal_default_instance()) {
    delete public_entry_;
  }
}

void TransactionBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionBroadcast::descriptor() {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[2].descriptor;
}

const TransactionBroadcast& TransactionBroadcast::default_instance() {
  protobuf_Wire_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionBroadcast* TransactionBroadcast::New(::google::protobuf::Arena* arena) const {
  TransactionBroadcast* n = new TransactionBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  if (GetArenaNoVirtual() == NULL && public_entry_ != NULL) {
    delete public_entry_;
  }
  public_entry_ = NULL;
}

bool TransactionBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Wire.TransactionBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Wire.TransactionBroadcast)
  return false;
#undef DO_
}

void TransactionBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  // .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
  if (this->has_public_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->public_entry_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Wire.TransactionBroadcast)
}

::google::protobuf::uint8* TransactionBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  // .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
  if (this->has_public_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->public_entry_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.TransactionBroadcast)
  return target;
}

size_t TransactionBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  size_t total_size = 0;

  // .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
  if (this->has_public_entry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->public_entry_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.TransactionBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.TransactionBroadcast)
    MergeFrom(*source);
  }
}

void TransactionBroadcast::MergeFrom(const TransactionBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_public_entry()) {
    mutable_public_entry()->::Catalyst::Protocol::Transaction::PublicEntry::MergeFrom(from.public_entry());
  }
}

void TransactionBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionBroadcast::CopyFrom(const TransactionBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.TransactionBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionBroadcast::IsInitialized() const {
  return true;
}

void TransactionBroadcast::Swap(TransactionBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionBroadcast::InternalSwap(TransactionBroadcast* other) {
  std::swap(public_entry_, other->public_entry_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionBroadcast::GetMetadata() const {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionBroadcast

// .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
bool TransactionBroadcast::has_public_entry() const {
  return this != internal_default_instance() && public_entry_ != NULL;
}
void TransactionBroadcast::clear_public_entry() {
  if (GetArenaNoVirtual() == NULL && public_entry_ != NULL) delete public_entry_;
  public_entry_ = NULL;
}
const ::Catalyst::Protocol::Transaction::PublicEntry& TransactionBroadcast::public_entry() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
  return public_entry_ != NULL ? *public_entry_
                         : *::Catalyst::Protocol::Transaction::PublicEntry::internal_default_instance();
}
::Catalyst::Protocol::Transaction::PublicEntry* TransactionBroadcast::mutable_public_entry() {
  
  if (public_entry_ == NULL) {
    public_entry_ = new ::Catalyst::Protocol::Transaction::PublicEntry;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
  return public_entry_;
}
::Catalyst::Protocol::Transaction::PublicEntry* TransactionBroadcast::release_public_entry() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
  
  ::Catalyst::Protocol::Transaction::PublicEntry* temp = public_entry_;
  public_entry_ = NULL;
  return temp;
}
void TransactionBroadcast::set_allocated_public_entry(::Catalyst::Protocol::Transaction::PublicEntry* public_entry) {
  delete public_entry_;
  public_entry_ = public_entry;
  if (public_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CandidateDeltaBroadcast::kHashFieldNumber;
const int CandidateDeltaBroadcast::kProducerIdFieldNumber;
const int CandidateDeltaBroadcast::kPreviousDeltaDfsHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CandidateDeltaBroadcast::CandidateDeltaBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Wire_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
}
CandidateDeltaBroadcast::CandidateDeltaBroadcast(const CandidateDeltaBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  previous_delta_dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.previous_delta_dfs_hash().size() > 0) {
    previous_delta_dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_delta_dfs_hash_);
  }
  if (from.has_producer_id()) {
    producer_id_ = new ::Catalyst::Protocol::Peer::PeerId(*from.producer_id_);
  } else {
    producer_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
}

void CandidateDeltaBroadcast::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_id_ = NULL;
  _cached_size_ = 0;
}

CandidateDeltaBroadcast::~CandidateDeltaBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  SharedDtor();
}

void CandidateDeltaBroadcast::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete producer_id_;
  }
}

void CandidateDeltaBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandidateDeltaBroadcast::descriptor() {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[3].descriptor;
}

const CandidateDeltaBroadcast& CandidateDeltaBroadcast::default_instance() {
  protobuf_Wire_2eproto::InitDefaults();
  return *internal_default_instance();
}

CandidateDeltaBroadcast* CandidateDeltaBroadcast::New(::google::protobuf::Arena* arena) const {
  CandidateDeltaBroadcast* n = new CandidateDeltaBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CandidateDeltaBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && producer_id_ != NULL) {
    delete producer_id_;
  }
  producer_id_ = NULL;
}

bool CandidateDeltaBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Peer.PeerId producer_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_producer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes previous_delta_dfs_hash = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previous_delta_dfs_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  return false;
#undef DO_
}

void CandidateDeltaBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // .Catalyst.Protocol.Peer.PeerId producer_id = 2;
  if (this->has_producer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->producer_id_, output);
  }

  // bytes previous_delta_dfs_hash = 3;
  if (this->previous_delta_dfs_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->previous_delta_dfs_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
}

::google::protobuf::uint8* CandidateDeltaBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // .Catalyst.Protocol.Peer.PeerId producer_id = 2;
  if (this->has_producer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->producer_id_, false, target);
  }

  // bytes previous_delta_dfs_hash = 3;
  if (this->previous_delta_dfs_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->previous_delta_dfs_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  return target;
}

size_t CandidateDeltaBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  size_t total_size = 0;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // bytes previous_delta_dfs_hash = 3;
  if (this->previous_delta_dfs_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previous_delta_dfs_hash());
  }

  // .Catalyst.Protocol.Peer.PeerId producer_id = 2;
  if (this->has_producer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->producer_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandidateDeltaBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CandidateDeltaBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CandidateDeltaBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
    MergeFrom(*source);
  }
}

void CandidateDeltaBroadcast::MergeFrom(const CandidateDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.previous_delta_dfs_hash().size() > 0) {

    previous_delta_dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_delta_dfs_hash_);
  }
  if (from.has_producer_id()) {
    mutable_producer_id()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from.producer_id());
  }
}

void CandidateDeltaBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateDeltaBroadcast::CopyFrom(const CandidateDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateDeltaBroadcast::IsInitialized() const {
  return true;
}

void CandidateDeltaBroadcast::Swap(CandidateDeltaBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandidateDeltaBroadcast::InternalSwap(CandidateDeltaBroadcast* other) {
  hash_.Swap(&other->hash_);
  previous_delta_dfs_hash_.Swap(&other->previous_delta_dfs_hash_);
  std::swap(producer_id_, other->producer_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CandidateDeltaBroadcast::GetMetadata() const {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CandidateDeltaBroadcast

// bytes hash = 1;
void CandidateDeltaBroadcast::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CandidateDeltaBroadcast::hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
  return hash_.GetNoArena();
}
void CandidateDeltaBroadcast::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
#if LANG_CXX11
void CandidateDeltaBroadcast::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
#endif
void CandidateDeltaBroadcast::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
void CandidateDeltaBroadcast::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
::std::string* CandidateDeltaBroadcast::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CandidateDeltaBroadcast::release_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CandidateDeltaBroadcast::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}

// .Catalyst.Protocol.Peer.PeerId producer_id = 2;
bool CandidateDeltaBroadcast::has_producer_id() const {
  return this != internal_default_instance() && producer_id_ != NULL;
}
void CandidateDeltaBroadcast::clear_producer_id() {
  if (GetArenaNoVirtual() == NULL && producer_id_ != NULL) delete producer_id_;
  producer_id_ = NULL;
}
const ::Catalyst::Protocol::Peer::PeerId& CandidateDeltaBroadcast::producer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
  return producer_id_ != NULL ? *producer_id_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
::Catalyst::Protocol::Peer::PeerId* CandidateDeltaBroadcast::mutable_producer_id() {
  
  if (producer_id_ == NULL) {
    producer_id_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
  return producer_id_;
}
::Catalyst::Protocol::Peer::PeerId* CandidateDeltaBroadcast::release_producer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = producer_id_;
  producer_id_ = NULL;
  return temp;
}
void CandidateDeltaBroadcast::set_allocated_producer_id(::Catalyst::Protocol::Peer::PeerId* producer_id) {
  delete producer_id_;
  producer_id_ = producer_id;
  if (producer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
}

// bytes previous_delta_dfs_hash = 3;
void CandidateDeltaBroadcast::clear_previous_delta_dfs_hash() {
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CandidateDeltaBroadcast::previous_delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.GetNoArena();
}
void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(const ::std::string& value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
#if LANG_CXX11
void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(::std::string&& value) {
  
  previous_delta_dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
#endif
void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(const char* value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(const void* value, size_t size) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
::std::string* CandidateDeltaBroadcast::mutable_previous_delta_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CandidateDeltaBroadcast::release_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
  
  return previous_delta_dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CandidateDeltaBroadcast::set_allocated_previous_delta_dfs_hash(::std::string* previous_delta_dfs_hash) {
  if (previous_delta_dfs_hash != NULL) {
    
  } else {
    
  }
  previous_delta_dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FavouriteDeltaBroadcast::kCandidateFieldNumber;
const int FavouriteDeltaBroadcast::kVoterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FavouriteDeltaBroadcast::FavouriteDeltaBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Wire_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
}
FavouriteDeltaBroadcast::FavouriteDeltaBroadcast(const FavouriteDeltaBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_candidate()) {
    candidate_ = new ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast(*from.candidate_);
  } else {
    candidate_ = NULL;
  }
  if (from.has_voter_id()) {
    voter_id_ = new ::Catalyst::Protocol::Peer::PeerId(*from.voter_id_);
  } else {
    voter_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
}

void FavouriteDeltaBroadcast::SharedCtor() {
  ::memset(&candidate_, 0, reinterpret_cast<char*>(&voter_id_) -
    reinterpret_cast<char*>(&candidate_) + sizeof(voter_id_));
  _cached_size_ = 0;
}

FavouriteDeltaBroadcast::~FavouriteDeltaBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  SharedDtor();
}

void FavouriteDeltaBroadcast::SharedDtor() {
  if (this != internal_default_instance()) {
    delete candidate_;
  }
  if (this != internal_default_instance()) {
    delete voter_id_;
  }
}

void FavouriteDeltaBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FavouriteDeltaBroadcast::descriptor() {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[4].descriptor;
}

const FavouriteDeltaBroadcast& FavouriteDeltaBroadcast::default_instance() {
  protobuf_Wire_2eproto::InitDefaults();
  return *internal_default_instance();
}

FavouriteDeltaBroadcast* FavouriteDeltaBroadcast::New(::google::protobuf::Arena* arena) const {
  FavouriteDeltaBroadcast* n = new FavouriteDeltaBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FavouriteDeltaBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  if (GetArenaNoVirtual() == NULL && candidate_ != NULL) {
    delete candidate_;
  }
  candidate_ = NULL;
  if (GetArenaNoVirtual() == NULL && voter_id_ != NULL) {
    delete voter_id_;
  }
  voter_id_ = NULL;
}

bool FavouriteDeltaBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Peer.PeerId voter_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voter_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  return false;
#undef DO_
}

void FavouriteDeltaBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  // .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
  if (this->has_candidate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->candidate_, output);
  }

  // .Catalyst.Protocol.Peer.PeerId voter_id = 2;
  if (this->has_voter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->voter_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
}

::google::protobuf::uint8* FavouriteDeltaBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  // .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
  if (this->has_candidate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->candidate_, false, target);
  }

  // .Catalyst.Protocol.Peer.PeerId voter_id = 2;
  if (this->has_voter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->voter_id_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  return target;
}

size_t FavouriteDeltaBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  size_t total_size = 0;

  // .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
  if (this->has_candidate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->candidate_);
  }

  // .Catalyst.Protocol.Peer.PeerId voter_id = 2;
  if (this->has_voter_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->voter_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FavouriteDeltaBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const FavouriteDeltaBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FavouriteDeltaBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
    MergeFrom(*source);
  }
}

void FavouriteDeltaBroadcast::MergeFrom(const FavouriteDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_candidate()) {
    mutable_candidate()->::Catalyst::Protocol::Wire::CandidateDeltaBroadcast::MergeFrom(from.candidate());
  }
  if (from.has_voter_id()) {
    mutable_voter_id()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from.voter_id());
  }
}

void FavouriteDeltaBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavouriteDeltaBroadcast::CopyFrom(const FavouriteDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavouriteDeltaBroadcast::IsInitialized() const {
  return true;
}

void FavouriteDeltaBroadcast::Swap(FavouriteDeltaBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FavouriteDeltaBroadcast::InternalSwap(FavouriteDeltaBroadcast* other) {
  std::swap(candidate_, other->candidate_);
  std::swap(voter_id_, other->voter_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FavouriteDeltaBroadcast::GetMetadata() const {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FavouriteDeltaBroadcast

// .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
bool FavouriteDeltaBroadcast::has_candidate() const {
  return this != internal_default_instance() && candidate_ != NULL;
}
void FavouriteDeltaBroadcast::clear_candidate() {
  if (GetArenaNoVirtual() == NULL && candidate_ != NULL) delete candidate_;
  candidate_ = NULL;
}
const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast& FavouriteDeltaBroadcast::candidate() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
  return candidate_ != NULL ? *candidate_
                         : *::Catalyst::Protocol::Wire::CandidateDeltaBroadcast::internal_default_instance();
}
::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* FavouriteDeltaBroadcast::mutable_candidate() {
  
  if (candidate_ == NULL) {
    candidate_ = new ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
  return candidate_;
}
::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* FavouriteDeltaBroadcast::release_candidate() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
  
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* temp = candidate_;
  candidate_ = NULL;
  return temp;
}
void FavouriteDeltaBroadcast::set_allocated_candidate(::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* candidate) {
  delete candidate_;
  candidate_ = candidate;
  if (candidate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
}

// .Catalyst.Protocol.Peer.PeerId voter_id = 2;
bool FavouriteDeltaBroadcast::has_voter_id() const {
  return this != internal_default_instance() && voter_id_ != NULL;
}
void FavouriteDeltaBroadcast::clear_voter_id() {
  if (GetArenaNoVirtual() == NULL && voter_id_ != NULL) delete voter_id_;
  voter_id_ = NULL;
}
const ::Catalyst::Protocol::Peer::PeerId& FavouriteDeltaBroadcast::voter_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
  return voter_id_ != NULL ? *voter_id_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
::Catalyst::Protocol::Peer::PeerId* FavouriteDeltaBroadcast::mutable_voter_id() {
  
  if (voter_id_ == NULL) {
    voter_id_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
  return voter_id_;
}
::Catalyst::Protocol::Peer::PeerId* FavouriteDeltaBroadcast::release_voter_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = voter_id_;
  voter_id_ = NULL;
  return temp;
}
void FavouriteDeltaBroadcast::set_allocated_voter_id(::Catalyst::Protocol::Peer::PeerId* voter_id) {
  delete voter_id_;
  voter_id_ = voter_id;
  if (voter_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeltaDfsHashBroadcast::kDeltaDfsHashFieldNumber;
const int DeltaDfsHashBroadcast::kPreviousDeltaDfsHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeltaDfsHashBroadcast::DeltaDfsHashBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Wire_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
}
DeltaDfsHashBroadcast::DeltaDfsHashBroadcast(const DeltaDfsHashBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delta_dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.delta_dfs_hash().size() > 0) {
    delta_dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delta_dfs_hash_);
  }
  previous_delta_dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.previous_delta_dfs_hash().size() > 0) {
    previous_delta_dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_delta_dfs_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
}

void DeltaDfsHashBroadcast::SharedCtor() {
  delta_dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeltaDfsHashBroadcast::~DeltaDfsHashBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  SharedDtor();
}

void DeltaDfsHashBroadcast::SharedDtor() {
  delta_dfs_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeltaDfsHashBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaDfsHashBroadcast::descriptor() {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[5].descriptor;
}

const DeltaDfsHashBroadcast& DeltaDfsHashBroadcast::default_instance() {
  protobuf_Wire_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeltaDfsHashBroadcast* DeltaDfsHashBroadcast::New(::google::protobuf::Arena* arena) const {
  DeltaDfsHashBroadcast* n = new DeltaDfsHashBroadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeltaDfsHashBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeltaDfsHashBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes delta_dfs_hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_delta_dfs_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes previous_delta_dfs_hash = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previous_delta_dfs_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  return false;
#undef DO_
}

void DeltaDfsHashBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  // bytes delta_dfs_hash = 1;
  if (this->delta_dfs_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->delta_dfs_hash(), output);
  }

  // bytes previous_delta_dfs_hash = 2;
  if (this->previous_delta_dfs_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->previous_delta_dfs_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
}

::google::protobuf::uint8* DeltaDfsHashBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  // bytes delta_dfs_hash = 1;
  if (this->delta_dfs_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->delta_dfs_hash(), target);
  }

  // bytes previous_delta_dfs_hash = 2;
  if (this->previous_delta_dfs_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->previous_delta_dfs_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  return target;
}

size_t DeltaDfsHashBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  size_t total_size = 0;

  // bytes delta_dfs_hash = 1;
  if (this->delta_dfs_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->delta_dfs_hash());
  }

  // bytes previous_delta_dfs_hash = 2;
  if (this->previous_delta_dfs_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previous_delta_dfs_hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaDfsHashBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const DeltaDfsHashBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeltaDfsHashBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
    MergeFrom(*source);
  }
}

void DeltaDfsHashBroadcast::MergeFrom(const DeltaDfsHashBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.delta_dfs_hash().size() > 0) {

    delta_dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delta_dfs_hash_);
  }
  if (from.previous_delta_dfs_hash().size() > 0) {

    previous_delta_dfs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_delta_dfs_hash_);
  }
}

void DeltaDfsHashBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaDfsHashBroadcast::CopyFrom(const DeltaDfsHashBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaDfsHashBroadcast::IsInitialized() const {
  return true;
}

void DeltaDfsHashBroadcast::Swap(DeltaDfsHashBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeltaDfsHashBroadcast::InternalSwap(DeltaDfsHashBroadcast* other) {
  delta_dfs_hash_.Swap(&other->delta_dfs_hash_);
  previous_delta_dfs_hash_.Swap(&other->previous_delta_dfs_hash_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeltaDfsHashBroadcast::GetMetadata() const {
  protobuf_Wire_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Wire_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeltaDfsHashBroadcast

// bytes delta_dfs_hash = 1;
void DeltaDfsHashBroadcast::clear_delta_dfs_hash() {
  delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeltaDfsHashBroadcast::delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
  return delta_dfs_hash_.GetNoArena();
}
void DeltaDfsHashBroadcast::set_delta_dfs_hash(const ::std::string& value) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
#if LANG_CXX11
void DeltaDfsHashBroadcast::set_delta_dfs_hash(::std::string&& value) {
  
  delta_dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
#endif
void DeltaDfsHashBroadcast::set_delta_dfs_hash(const char* value) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
void DeltaDfsHashBroadcast::set_delta_dfs_hash(const void* value, size_t size) {
  
  delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
::std::string* DeltaDfsHashBroadcast::mutable_delta_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
  return delta_dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeltaDfsHashBroadcast::release_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
  
  return delta_dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeltaDfsHashBroadcast::set_allocated_delta_dfs_hash(::std::string* delta_dfs_hash) {
  if (delta_dfs_hash != NULL) {
    
  } else {
    
  }
  delta_dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}

// bytes previous_delta_dfs_hash = 2;
void DeltaDfsHashBroadcast::clear_previous_delta_dfs_hash() {
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeltaDfsHashBroadcast::previous_delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.GetNoArena();
}
void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(const ::std::string& value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
#if LANG_CXX11
void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(::std::string&& value) {
  
  previous_delta_dfs_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
#endif
void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(const char* value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(const void* value, size_t size) {
  
  previous_delta_dfs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
::std::string* DeltaDfsHashBroadcast::mutable_previous_delta_dfs_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
  return previous_delta_dfs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeltaDfsHashBroadcast::release_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
  
  return previous_delta_dfs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeltaDfsHashBroadcast::set_allocated_previous_delta_dfs_hash(::std::string* previous_delta_dfs_hash) {
  if (previous_delta_dfs_hash != NULL) {
    
  } else {
    
  }
  previous_delta_dfs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Wire
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)
