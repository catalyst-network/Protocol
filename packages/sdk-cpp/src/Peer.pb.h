// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Peer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Peer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Peer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Peer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Peer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Peer_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Peer {
class PeerId;
class PeerIdDefaultTypeInternal;
extern PeerIdDefaultTypeInternal _PeerId_default_instance_;
class PeerInfo;
class PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
}  // namespace Peer
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> ::Catalyst::Protocol::Peer::PeerId* Arena::CreateMaybeMessage<::Catalyst::Protocol::Peer::PeerId>(Arena*);
template<> ::Catalyst::Protocol::Peer::PeerInfo* Arena::CreateMaybeMessage<::Catalyst::Protocol::Peer::PeerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Catalyst {
namespace Protocol {
namespace Peer {

// ===================================================================

class PeerId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Peer.PeerId) */ {
 public:
  PeerId();
  virtual ~PeerId();

  PeerId(const PeerId& from);
  PeerId(PeerId&& from) noexcept
    : PeerId() {
    *this = ::std::move(from);
  }

  inline PeerId& operator=(const PeerId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerId& operator=(PeerId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerId* internal_default_instance() {
    return reinterpret_cast<const PeerId*>(
               &_PeerId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PeerId& a, PeerId& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerId* New() const final {
    return CreateMaybeMessage<PeerId>(nullptr);
  }

  PeerId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerId& from);
  void MergeFrom(const PeerId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Peer.PeerId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Peer_2eproto);
    return ::descriptor_table_Peer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPublicKeyFieldNumber = 3,
    kPortFieldNumber = 2,
  };
  // bytes ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bytes public_key = 3;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Peer.PeerId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Peer_2eproto;
};
// -------------------------------------------------------------------

class PeerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Peer.PeerInfo) */ {
 public:
  PeerInfo();
  virtual ~PeerInfo();

  PeerInfo(const PeerInfo& from);
  PeerInfo(PeerInfo&& from) noexcept
    : PeerInfo() {
    *this = ::std::move(from);
  }

  inline PeerInfo& operator=(const PeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerInfo& operator=(PeerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerInfo* internal_default_instance() {
    return reinterpret_cast<const PeerInfo*>(
               &_PeerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PeerInfo& a, PeerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerInfo* New() const final {
    return CreateMaybeMessage<PeerInfo>(nullptr);
  }

  PeerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerInfo& from);
  void MergeFrom(const PeerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Peer.PeerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Peer_2eproto);
    return ::descriptor_table_Peer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerIdFieldNumber = 1,
    kInactiveForFieldNumber = 5,
    kLastSeenFieldNumber = 6,
    kModifiedFieldNumber = 7,
    kCreatedFieldNumber = 8,
    kReputationFieldNumber = 2,
    kIsBlacklistedFieldNumber = 3,
    kIsUnreachableFieldNumber = 4,
  };
  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  bool has_peer_id() const;
  private:
  bool _internal_has_peer_id() const;
  public:
  void clear_peer_id();
  const ::Catalyst::Protocol::Peer::PeerId& peer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* release_peer_id();
  ::Catalyst::Protocol::Peer::PeerId* mutable_peer_id();
  void set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id);
  private:
  const ::Catalyst::Protocol::Peer::PeerId& _internal_peer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* _internal_mutable_peer_id();
  public:

  // .google.protobuf.Duration inactive_for = 5;
  bool has_inactive_for() const;
  private:
  bool _internal_has_inactive_for() const;
  public:
  void clear_inactive_for();
  const PROTOBUF_NAMESPACE_ID::Duration& inactive_for() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_inactive_for();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_inactive_for();
  void set_allocated_inactive_for(PROTOBUF_NAMESPACE_ID::Duration* inactive_for);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_inactive_for() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_inactive_for();
  public:

  // .google.protobuf.Timestamp last_seen = 6;
  bool has_last_seen() const;
  private:
  bool _internal_has_last_seen() const;
  public:
  void clear_last_seen();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_seen() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_seen();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_seen();
  void set_allocated_last_seen(PROTOBUF_NAMESPACE_ID::Timestamp* last_seen);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_seen() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_seen();
  public:

  // .google.protobuf.Timestamp modified = 7;
  bool has_modified() const;
  private:
  bool _internal_has_modified() const;
  public:
  void clear_modified();
  const PROTOBUF_NAMESPACE_ID::Timestamp& modified() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_modified();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_modified();
  void set_allocated_modified(PROTOBUF_NAMESPACE_ID::Timestamp* modified);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_modified() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_modified();
  public:

  // .google.protobuf.Timestamp created = 8;
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created();
  public:

  // sint32 reputation = 2;
  void clear_reputation();
  ::PROTOBUF_NAMESPACE_ID::int32 reputation() const;
  void set_reputation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reputation() const;
  void _internal_set_reputation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_blacklisted = 3;
  void clear_is_blacklisted();
  bool is_blacklisted() const;
  void set_is_blacklisted(bool value);
  private:
  bool _internal_is_blacklisted() const;
  void _internal_set_is_blacklisted(bool value);
  public:

  // bool is_unreachable = 4;
  void clear_is_unreachable();
  bool is_unreachable() const;
  void set_is_unreachable(bool value);
  private:
  bool _internal_is_unreachable() const;
  void _internal_set_is_unreachable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Peer.PeerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Peer::PeerId* peer_id_;
  PROTOBUF_NAMESPACE_ID::Duration* inactive_for_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_seen_;
  PROTOBUF_NAMESPACE_ID::Timestamp* modified_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  ::PROTOBUF_NAMESPACE_ID::int32 reputation_;
  bool is_blacklisted_;
  bool is_unreachable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Peer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeerId

// bytes ip = 1;
inline void PeerId::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerId::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerId.ip)
  return _internal_ip();
}
inline void PeerId::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerId.ip)
}
inline std::string* PeerId::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerId.ip)
  return _internal_mutable_ip();
}
inline const std::string& PeerId::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void PeerId::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerId::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Peer.PeerId.ip)
}
inline void PeerId::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Peer.PeerId.ip)
}
inline void PeerId::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Peer.PeerId.ip)
}
inline std::string* PeerId::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerId::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerId.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerId::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerId.ip)
}

// uint32 port = 2;
inline void PeerId::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerId::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerId::port() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerId.port)
  return _internal_port();
}
inline void PeerId::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void PeerId::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerId.port)
}

// bytes public_key = 3;
inline void PeerId::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerId::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerId.public_key)
  return _internal_public_key();
}
inline void PeerId::set_public_key(const std::string& value) {
  _internal_set_public_key(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerId.public_key)
}
inline std::string* PeerId::mutable_public_key() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerId.public_key)
  return _internal_mutable_public_key();
}
inline const std::string& PeerId::_internal_public_key() const {
  return public_key_.GetNoArena();
}
inline void PeerId::_internal_set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerId::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Peer.PeerId.public_key)
}
inline void PeerId::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Peer.PeerId.public_key)
}
inline void PeerId::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Peer.PeerId.public_key)
}
inline std::string* PeerId::_internal_mutable_public_key() {
  
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerId::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerId.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerId::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerId.public_key)
}

// -------------------------------------------------------------------

// PeerInfo

// .Catalyst.Protocol.Peer.PeerId peer_id = 1;
inline bool PeerInfo::_internal_has_peer_id() const {
  return this != internal_default_instance() && peer_id_ != nullptr;
}
inline bool PeerInfo::has_peer_id() const {
  return _internal_has_peer_id();
}
inline void PeerInfo::clear_peer_id() {
  if (GetArenaNoVirtual() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
}
inline const ::Catalyst::Protocol::Peer::PeerId& PeerInfo::_internal_peer_id() const {
  const ::Catalyst::Protocol::Peer::PeerId* p = peer_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Peer::PeerId*>(
      &::Catalyst::Protocol::Peer::_PeerId_default_instance_);
}
inline const ::Catalyst::Protocol::Peer::PeerId& PeerInfo::peer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.peer_id)
  return _internal_peer_id();
}
inline ::Catalyst::Protocol::Peer::PeerId* PeerInfo::release_peer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.peer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = peer_id_;
  peer_id_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Peer::PeerId* PeerInfo::_internal_mutable_peer_id() {
  
  if (peer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Peer::PeerId>(GetArenaNoVirtual());
    peer_id_ = p;
  }
  return peer_id_;
}
inline ::Catalyst::Protocol::Peer::PeerId* PeerInfo::mutable_peer_id() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.peer_id)
  return _internal_mutable_peer_id();
}
inline void PeerInfo::set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peer_id_;
  }
  if (peer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_id, submessage_arena);
    }
    
  } else {
    
  }
  peer_id_ = peer_id;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.peer_id)
}

// sint32 reputation = 2;
inline void PeerInfo::clear_reputation() {
  reputation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PeerInfo::_internal_reputation() const {
  return reputation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PeerInfo::reputation() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.reputation)
  return _internal_reputation();
}
inline void PeerInfo::_internal_set_reputation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reputation_ = value;
}
inline void PeerInfo::set_reputation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reputation(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerInfo.reputation)
}

// bool is_blacklisted = 3;
inline void PeerInfo::clear_is_blacklisted() {
  is_blacklisted_ = false;
}
inline bool PeerInfo::_internal_is_blacklisted() const {
  return is_blacklisted_;
}
inline bool PeerInfo::is_blacklisted() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.is_blacklisted)
  return _internal_is_blacklisted();
}
inline void PeerInfo::_internal_set_is_blacklisted(bool value) {
  
  is_blacklisted_ = value;
}
inline void PeerInfo::set_is_blacklisted(bool value) {
  _internal_set_is_blacklisted(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerInfo.is_blacklisted)
}

// bool is_unreachable = 4;
inline void PeerInfo::clear_is_unreachable() {
  is_unreachable_ = false;
}
inline bool PeerInfo::_internal_is_unreachable() const {
  return is_unreachable_;
}
inline bool PeerInfo::is_unreachable() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.is_unreachable)
  return _internal_is_unreachable();
}
inline void PeerInfo::_internal_set_is_unreachable(bool value) {
  
  is_unreachable_ = value;
}
inline void PeerInfo::set_is_unreachable(bool value) {
  _internal_set_is_unreachable(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerInfo.is_unreachable)
}

// .google.protobuf.Duration inactive_for = 5;
inline bool PeerInfo::_internal_has_inactive_for() const {
  return this != internal_default_instance() && inactive_for_ != nullptr;
}
inline bool PeerInfo::has_inactive_for() const {
  return _internal_has_inactive_for();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& PeerInfo::_internal_inactive_for() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = inactive_for_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& PeerInfo::inactive_for() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
  return _internal_inactive_for();
}
inline PROTOBUF_NAMESPACE_ID::Duration* PeerInfo::release_inactive_for() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = inactive_for_;
  inactive_for_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* PeerInfo::_internal_mutable_inactive_for() {
  
  if (inactive_for_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    inactive_for_ = p;
  }
  return inactive_for_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* PeerInfo::mutable_inactive_for() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
  return _internal_mutable_inactive_for();
}
inline void PeerInfo::set_allocated_inactive_for(PROTOBUF_NAMESPACE_ID::Duration* inactive_for) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactive_for_);
  }
  if (inactive_for) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inactive_for)->GetArena();
    if (message_arena != submessage_arena) {
      inactive_for = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inactive_for, submessage_arena);
    }
    
  } else {
    
  }
  inactive_for_ = inactive_for;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
}

// .google.protobuf.Timestamp last_seen = 6;
inline bool PeerInfo::_internal_has_last_seen() const {
  return this != internal_default_instance() && last_seen_ != nullptr;
}
inline bool PeerInfo::has_last_seen() const {
  return _internal_has_last_seen();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PeerInfo::_internal_last_seen() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_seen_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PeerInfo::last_seen() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.last_seen)
  return _internal_last_seen();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PeerInfo::release_last_seen() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.last_seen)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_seen_;
  last_seen_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PeerInfo::_internal_mutable_last_seen() {
  
  if (last_seen_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    last_seen_ = p;
  }
  return last_seen_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PeerInfo::mutable_last_seen() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.last_seen)
  return _internal_mutable_last_seen();
}
inline void PeerInfo::set_allocated_last_seen(PROTOBUF_NAMESPACE_ID::Timestamp* last_seen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_seen_);
  }
  if (last_seen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_seen)->GetArena();
    if (message_arena != submessage_arena) {
      last_seen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_seen, submessage_arena);
    }
    
  } else {
    
  }
  last_seen_ = last_seen;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.last_seen)
}

// .google.protobuf.Timestamp modified = 7;
inline bool PeerInfo::_internal_has_modified() const {
  return this != internal_default_instance() && modified_ != nullptr;
}
inline bool PeerInfo::has_modified() const {
  return _internal_has_modified();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PeerInfo::_internal_modified() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = modified_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PeerInfo::modified() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.modified)
  return _internal_modified();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PeerInfo::release_modified() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.modified)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = modified_;
  modified_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PeerInfo::_internal_mutable_modified() {
  
  if (modified_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    modified_ = p;
  }
  return modified_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PeerInfo::mutable_modified() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.modified)
  return _internal_mutable_modified();
}
inline void PeerInfo::set_allocated_modified(PROTOBUF_NAMESPACE_ID::Timestamp* modified) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified_);
  }
  if (modified) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modified)->GetArena();
    if (message_arena != submessage_arena) {
      modified = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified, submessage_arena);
    }
    
  } else {
    
  }
  modified_ = modified;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.modified)
}

// .google.protobuf.Timestamp created = 8;
inline bool PeerInfo::_internal_has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline bool PeerInfo::has_created() const {
  return _internal_has_created();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PeerInfo::_internal_created() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PeerInfo::created() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.created)
  return _internal_created();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PeerInfo::release_created() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.created)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PeerInfo::_internal_mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    created_ = p;
  }
  return created_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PeerInfo::mutable_created() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.created)
  return _internal_mutable_created();
}
inline void PeerInfo::set_allocated_created(PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.created)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Peer
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Peer_2eproto
