// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Peer.proto

#ifndef PROTOBUF_Peer_2eproto__INCLUDED
#define PROTOBUF_Peer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
namespace Catalyst {
namespace Protocol {
namespace Peer {
class PeerId;
class PeerIdDefaultTypeInternal;
extern PeerIdDefaultTypeInternal _PeerId_default_instance_;
class PeerInfo;
class PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
}  // namespace Peer
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace Catalyst {
namespace Protocol {
namespace Peer {

namespace protobuf_Peer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Peer_2eproto

// ===================================================================

class PeerId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Peer.PeerId) */ {
 public:
  PeerId();
  virtual ~PeerId();

  PeerId(const PeerId& from);

  inline PeerId& operator=(const PeerId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerId& default_instance();

  static inline const PeerId* internal_default_instance() {
    return reinterpret_cast<const PeerId*>(
               &_PeerId_default_instance_);
  }

  void Swap(PeerId* other);

  // implements Message ----------------------------------------------

  inline PeerId* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PeerId& from);
  void MergeFrom(const PeerId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PeerId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // bytes public_key = 3;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 3;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Peer.PeerId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct  protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Peer.PeerInfo) */ {
 public:
  PeerInfo();
  virtual ~PeerInfo();

  PeerInfo(const PeerInfo& from);

  inline PeerInfo& operator=(const PeerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerInfo& default_instance();

  static inline const PeerInfo* internal_default_instance() {
    return reinterpret_cast<const PeerInfo*>(
               &_PeerInfo_default_instance_);
  }

  void Swap(PeerInfo* other);

  // implements Message ----------------------------------------------

  inline PeerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PeerInfo& from);
  void MergeFrom(const PeerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PeerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 1;
  const ::Catalyst::Protocol::Peer::PeerId& peer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* mutable_peer_id();
  ::Catalyst::Protocol::Peer::PeerId* release_peer_id();
  void set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id);

  // .google.protobuf.Duration inactive_for = 5;
  bool has_inactive_for() const;
  void clear_inactive_for();
  static const int kInactiveForFieldNumber = 5;
  const ::google::protobuf::Duration& inactive_for() const;
  ::google::protobuf::Duration* mutable_inactive_for();
  ::google::protobuf::Duration* release_inactive_for();
  void set_allocated_inactive_for(::google::protobuf::Duration* inactive_for);

  // .google.protobuf.Timestamp last_seen = 6;
  bool has_last_seen() const;
  void clear_last_seen();
  static const int kLastSeenFieldNumber = 6;
  const ::google::protobuf::Timestamp& last_seen() const;
  ::google::protobuf::Timestamp* mutable_last_seen();
  ::google::protobuf::Timestamp* release_last_seen();
  void set_allocated_last_seen(::google::protobuf::Timestamp* last_seen);

  // .google.protobuf.Timestamp modified = 7;
  bool has_modified() const;
  void clear_modified();
  static const int kModifiedFieldNumber = 7;
  const ::google::protobuf::Timestamp& modified() const;
  ::google::protobuf::Timestamp* mutable_modified();
  ::google::protobuf::Timestamp* release_modified();
  void set_allocated_modified(::google::protobuf::Timestamp* modified);

  // .google.protobuf.Timestamp created = 8;
  bool has_created() const;
  void clear_created();
  static const int kCreatedFieldNumber = 8;
  const ::google::protobuf::Timestamp& created() const;
  ::google::protobuf::Timestamp* mutable_created();
  ::google::protobuf::Timestamp* release_created();
  void set_allocated_created(::google::protobuf::Timestamp* created);

  // sint32 reputation = 2;
  void clear_reputation();
  static const int kReputationFieldNumber = 2;
  ::google::protobuf::int32 reputation() const;
  void set_reputation(::google::protobuf::int32 value);

  // bool is_blacklisted = 3;
  void clear_is_blacklisted();
  static const int kIsBlacklistedFieldNumber = 3;
  bool is_blacklisted() const;
  void set_is_blacklisted(bool value);

  // bool is_unreachable = 4;
  void clear_is_unreachable();
  static const int kIsUnreachableFieldNumber = 4;
  bool is_unreachable() const;
  void set_is_unreachable(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Peer.PeerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Peer::PeerId* peer_id_;
  ::google::protobuf::Duration* inactive_for_;
  ::google::protobuf::Timestamp* last_seen_;
  ::google::protobuf::Timestamp* modified_;
  ::google::protobuf::Timestamp* created_;
  ::google::protobuf::int32 reputation_;
  bool is_blacklisted_;
  bool is_unreachable_;
  mutable int _cached_size_;
  friend struct  protobuf_Peer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerId

// bytes ip = 1;
inline void PeerId::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerId::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerId.ip)
  return ip_.GetNoArena();
}
inline void PeerId::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerId.ip)
}
#if LANG_CXX11
inline void PeerId::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Peer.PeerId.ip)
}
#endif
inline void PeerId::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Peer.PeerId.ip)
}
inline void PeerId::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Peer.PeerId.ip)
}
inline ::std::string* PeerId::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerId.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerId::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerId.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerId::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerId.ip)
}

// uint32 port = 2;
inline void PeerId::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 PeerId::port() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerId.port)
  return port_;
}
inline void PeerId::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerId.port)
}

// bytes public_key = 3;
inline void PeerId::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerId::public_key() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerId.public_key)
  return public_key_.GetNoArena();
}
inline void PeerId::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerId.public_key)
}
#if LANG_CXX11
inline void PeerId::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Peer.PeerId.public_key)
}
#endif
inline void PeerId::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Peer.PeerId.public_key)
}
inline void PeerId::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Peer.PeerId.public_key)
}
inline ::std::string* PeerId::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerId.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerId::release_public_key() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerId.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerId::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerId.public_key)
}

// -------------------------------------------------------------------

// PeerInfo

// .Catalyst.Protocol.Peer.PeerId peer_id = 1;
inline bool PeerInfo::has_peer_id() const {
  return this != internal_default_instance() && peer_id_ != NULL;
}
inline void PeerInfo::clear_peer_id() {
  if (GetArenaNoVirtual() == NULL && peer_id_ != NULL) delete peer_id_;
  peer_id_ = NULL;
}
inline const ::Catalyst::Protocol::Peer::PeerId& PeerInfo::peer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.peer_id)
  return peer_id_ != NULL ? *peer_id_
                         : *::Catalyst::Protocol::Peer::PeerId::internal_default_instance();
}
inline ::Catalyst::Protocol::Peer::PeerId* PeerInfo::mutable_peer_id() {
  
  if (peer_id_ == NULL) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.peer_id)
  return peer_id_;
}
inline ::Catalyst::Protocol::Peer::PeerId* PeerInfo::release_peer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.peer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = peer_id_;
  peer_id_ = NULL;
  return temp;
}
inline void PeerInfo::set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id) {
  delete peer_id_;
  peer_id_ = peer_id;
  if (peer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.peer_id)
}

// sint32 reputation = 2;
inline void PeerInfo::clear_reputation() {
  reputation_ = 0;
}
inline ::google::protobuf::int32 PeerInfo::reputation() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.reputation)
  return reputation_;
}
inline void PeerInfo::set_reputation(::google::protobuf::int32 value) {
  
  reputation_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerInfo.reputation)
}

// bool is_blacklisted = 3;
inline void PeerInfo::clear_is_blacklisted() {
  is_blacklisted_ = false;
}
inline bool PeerInfo::is_blacklisted() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.is_blacklisted)
  return is_blacklisted_;
}
inline void PeerInfo::set_is_blacklisted(bool value) {
  
  is_blacklisted_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerInfo.is_blacklisted)
}

// bool is_unreachable = 4;
inline void PeerInfo::clear_is_unreachable() {
  is_unreachable_ = false;
}
inline bool PeerInfo::is_unreachable() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.is_unreachable)
  return is_unreachable_;
}
inline void PeerInfo::set_is_unreachable(bool value) {
  
  is_unreachable_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Peer.PeerInfo.is_unreachable)
}

// .google.protobuf.Duration inactive_for = 5;
inline bool PeerInfo::has_inactive_for() const {
  return this != internal_default_instance() && inactive_for_ != NULL;
}
inline void PeerInfo::clear_inactive_for() {
  if (GetArenaNoVirtual() == NULL && inactive_for_ != NULL) delete inactive_for_;
  inactive_for_ = NULL;
}
inline const ::google::protobuf::Duration& PeerInfo::inactive_for() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
  return inactive_for_ != NULL ? *inactive_for_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* PeerInfo::mutable_inactive_for() {
  
  if (inactive_for_ == NULL) {
    inactive_for_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
  return inactive_for_;
}
inline ::google::protobuf::Duration* PeerInfo::release_inactive_for() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
  
  ::google::protobuf::Duration* temp = inactive_for_;
  inactive_for_ = NULL;
  return temp;
}
inline void PeerInfo::set_allocated_inactive_for(::google::protobuf::Duration* inactive_for) {
  delete inactive_for_;
  if (inactive_for != NULL && inactive_for->GetArena() != NULL) {
    ::google::protobuf::Duration* new_inactive_for = new ::google::protobuf::Duration;
    new_inactive_for->CopyFrom(*inactive_for);
    inactive_for = new_inactive_for;
  }
  inactive_for_ = inactive_for;
  if (inactive_for) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.inactive_for)
}

// .google.protobuf.Timestamp last_seen = 6;
inline bool PeerInfo::has_last_seen() const {
  return this != internal_default_instance() && last_seen_ != NULL;
}
inline void PeerInfo::clear_last_seen() {
  if (GetArenaNoVirtual() == NULL && last_seen_ != NULL) delete last_seen_;
  last_seen_ = NULL;
}
inline const ::google::protobuf::Timestamp& PeerInfo::last_seen() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.last_seen)
  return last_seen_ != NULL ? *last_seen_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* PeerInfo::mutable_last_seen() {
  
  if (last_seen_ == NULL) {
    last_seen_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.last_seen)
  return last_seen_;
}
inline ::google::protobuf::Timestamp* PeerInfo::release_last_seen() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.last_seen)
  
  ::google::protobuf::Timestamp* temp = last_seen_;
  last_seen_ = NULL;
  return temp;
}
inline void PeerInfo::set_allocated_last_seen(::google::protobuf::Timestamp* last_seen) {
  delete last_seen_;
  if (last_seen != NULL && last_seen->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_last_seen = new ::google::protobuf::Timestamp;
    new_last_seen->CopyFrom(*last_seen);
    last_seen = new_last_seen;
  }
  last_seen_ = last_seen;
  if (last_seen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.last_seen)
}

// .google.protobuf.Timestamp modified = 7;
inline bool PeerInfo::has_modified() const {
  return this != internal_default_instance() && modified_ != NULL;
}
inline void PeerInfo::clear_modified() {
  if (GetArenaNoVirtual() == NULL && modified_ != NULL) delete modified_;
  modified_ = NULL;
}
inline const ::google::protobuf::Timestamp& PeerInfo::modified() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.modified)
  return modified_ != NULL ? *modified_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* PeerInfo::mutable_modified() {
  
  if (modified_ == NULL) {
    modified_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.modified)
  return modified_;
}
inline ::google::protobuf::Timestamp* PeerInfo::release_modified() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.modified)
  
  ::google::protobuf::Timestamp* temp = modified_;
  modified_ = NULL;
  return temp;
}
inline void PeerInfo::set_allocated_modified(::google::protobuf::Timestamp* modified) {
  delete modified_;
  if (modified != NULL && modified->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_modified = new ::google::protobuf::Timestamp;
    new_modified->CopyFrom(*modified);
    modified = new_modified;
  }
  modified_ = modified;
  if (modified) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.modified)
}

// .google.protobuf.Timestamp created = 8;
inline bool PeerInfo::has_created() const {
  return this != internal_default_instance() && created_ != NULL;
}
inline void PeerInfo::clear_created() {
  if (GetArenaNoVirtual() == NULL && created_ != NULL) delete created_;
  created_ = NULL;
}
inline const ::google::protobuf::Timestamp& PeerInfo::created() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Peer.PeerInfo.created)
  return created_ != NULL ? *created_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* PeerInfo::mutable_created() {
  
  if (created_ == NULL) {
    created_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Peer.PeerInfo.created)
  return created_;
}
inline ::google::protobuf::Timestamp* PeerInfo::release_created() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Peer.PeerInfo.created)
  
  ::google::protobuf::Timestamp* temp = created_;
  created_ = NULL;
  return temp;
}
inline void PeerInfo::set_allocated_created(::google::protobuf::Timestamp* created) {
  delete created_;
  if (created != NULL && created->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_created = new ::google::protobuf::Timestamp;
    new_created->CopyFrom(*created);
    created = new_created;
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Peer.PeerInfo.created)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Peer
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Peer_2eproto__INCLUDED
