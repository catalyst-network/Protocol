// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DfsMarketplace.proto

#include "DfsMarketplace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_DfsMarketplace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockChallengeRequest_DfsMarketplace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Peer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerId_Peer_2eproto;
namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {
class BlockChallengeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockChallengeRequest> _instance;
} _BlockChallengeRequest_default_instance_;
class BlockChallengeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockChallengeResponse> _instance;
} _BlockChallengeResponse_default_instance_;
class BlockChallengeBroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockChallengeBroadcast> _instance;
} _BlockChallengeBroadcast_default_instance_;
}  // namespace DfsMarketplace
}  // namespace Protocol
}  // namespace Catalyst
static void InitDefaultsscc_info_BlockChallengeBroadcast_DfsMarketplace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::DfsMarketplace::_BlockChallengeBroadcast_default_instance_;
    new (ptr) ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlockChallengeBroadcast_DfsMarketplace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlockChallengeBroadcast_DfsMarketplace_2eproto}, {
      &scc_info_BlockChallengeRequest_DfsMarketplace_2eproto.base,
      &scc_info_PeerId_Peer_2eproto.base,}};

static void InitDefaultsscc_info_BlockChallengeRequest_DfsMarketplace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::DfsMarketplace::_BlockChallengeRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockChallengeRequest_DfsMarketplace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockChallengeRequest_DfsMarketplace_2eproto}, {}};

static void InitDefaultsscc_info_BlockChallengeResponse_DfsMarketplace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::DfsMarketplace::_BlockChallengeResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockChallengeResponse_DfsMarketplace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockChallengeResponse_DfsMarketplace_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DfsMarketplace_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_DfsMarketplace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DfsMarketplace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DfsMarketplace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest, challenge_salt_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest, main_file_cid_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest, block_idx_random_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse, answer_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse, block_challenge_request_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast, original_challenge_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast, answer_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast, challenged_peer_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast, challenged_by_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest)},
  { 8, -1, sizeof(::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse)},
  { 15, -1, sizeof(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::DfsMarketplace::_BlockChallengeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::DfsMarketplace::_BlockChallengeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::DfsMarketplace::_BlockChallengeBroadcast_default_instance_),
};

const char descriptor_table_protodef_DfsMarketplace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024DfsMarketplace.proto\022 Catalyst.Protoco"
  "l.DfsMarketplace\032\nPeer.proto\"e\n\025BlockCha"
  "llengeRequest\022\026\n\016challenge_salt\030\001 \001(\t\022\025\n"
  "\rmain_file_cid\030\002 \001(\t\022\035\n\025block_idx_random"
  "_guid\030\003 \001(\014\"N\n\026BlockChallengeResponse\022\016\n"
  "\006answer\030\001 \001(\t\022$\n\034block_challenge_request"
  "_hash\030\002 \001(\t\"\356\001\n\027BlockChallengeBroadcast\022"
  "S\n\022original_challenge\030\001 \001(\01327.Catalyst.P"
  "rotocol.DfsMarketplace.BlockChallengeReq"
  "uest\022\016\n\006answer\030\002 \001(\t\0227\n\017challenged_peer\030"
  "\003 \001(\0132\036.Catalyst.Protocol.Peer.PeerId\0225\n"
  "\rchallenged_by\030\004 \001(\0132\036.Catalyst.Protocol"
  ".Peer.PeerIdB\002P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DfsMarketplace_2eproto_deps[1] = {
  &::descriptor_table_Peer_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DfsMarketplace_2eproto_sccs[3] = {
  &scc_info_BlockChallengeBroadcast_DfsMarketplace_2eproto.base,
  &scc_info_BlockChallengeRequest_DfsMarketplace_2eproto.base,
  &scc_info_BlockChallengeResponse_DfsMarketplace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DfsMarketplace_2eproto_once;
static bool descriptor_table_DfsMarketplace_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DfsMarketplace_2eproto = {
  &descriptor_table_DfsMarketplace_2eproto_initialized, descriptor_table_protodef_DfsMarketplace_2eproto, "DfsMarketplace.proto", 504,
  &descriptor_table_DfsMarketplace_2eproto_once, descriptor_table_DfsMarketplace_2eproto_sccs, descriptor_table_DfsMarketplace_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_DfsMarketplace_2eproto::offsets,
  file_level_metadata_DfsMarketplace_2eproto, 3, file_level_enum_descriptors_DfsMarketplace_2eproto, file_level_service_descriptors_DfsMarketplace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DfsMarketplace_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DfsMarketplace_2eproto), true);
namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {

// ===================================================================

void BlockChallengeRequest::InitAsDefaultInstance() {
}
class BlockChallengeRequest::_Internal {
 public:
};

BlockChallengeRequest::BlockChallengeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
}
BlockChallengeRequest::BlockChallengeRequest(const BlockChallengeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  challenge_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_challenge_salt().empty()) {
    challenge_salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.challenge_salt_);
  }
  main_file_cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_main_file_cid().empty()) {
    main_file_cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.main_file_cid_);
  }
  block_idx_random_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_idx_random_guid().empty()) {
    block_idx_random_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_idx_random_guid_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
}

void BlockChallengeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockChallengeRequest_DfsMarketplace_2eproto.base);
  challenge_salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  main_file_cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_idx_random_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlockChallengeRequest::~BlockChallengeRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  SharedDtor();
}

void BlockChallengeRequest::SharedDtor() {
  challenge_salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  main_file_cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_idx_random_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockChallengeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockChallengeRequest& BlockChallengeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockChallengeRequest_DfsMarketplace_2eproto.base);
  return *internal_default_instance();
}


void BlockChallengeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challenge_salt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  main_file_cid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_idx_random_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BlockChallengeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string challenge_salt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_challenge_salt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string main_file_cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_main_file_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_idx_random_guid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_block_idx_random_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockChallengeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string challenge_salt = 1;
  if (this->challenge_salt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_challenge_salt().data(), static_cast<int>(this->_internal_challenge_salt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challenge_salt");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_challenge_salt(), target);
  }

  // string main_file_cid = 2;
  if (this->main_file_cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_main_file_cid().data(), static_cast<int>(this->_internal_main_file_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.main_file_cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_main_file_cid(), target);
  }

  // bytes block_idx_random_guid = 3;
  if (this->block_idx_random_guid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_block_idx_random_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  return target;
}

size_t BlockChallengeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string challenge_salt = 1;
  if (this->challenge_salt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_challenge_salt());
  }

  // string main_file_cid = 2;
  if (this->main_file_cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main_file_cid());
  }

  // bytes block_idx_random_guid = 3;
  if (this->block_idx_random_guid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_idx_random_guid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockChallengeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockChallengeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockChallengeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
    MergeFrom(*source);
  }
}

void BlockChallengeRequest::MergeFrom(const BlockChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challenge_salt().size() > 0) {

    challenge_salt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.challenge_salt_);
  }
  if (from.main_file_cid().size() > 0) {

    main_file_cid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.main_file_cid_);
  }
  if (from.block_idx_random_guid().size() > 0) {

    block_idx_random_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_idx_random_guid_);
  }
}

void BlockChallengeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChallengeRequest::CopyFrom(const BlockChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChallengeRequest::IsInitialized() const {
  return true;
}

void BlockChallengeRequest::InternalSwap(BlockChallengeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  challenge_salt_.Swap(&other->challenge_salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  main_file_cid_.Swap(&other->main_file_cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_idx_random_guid_.Swap(&other->block_idx_random_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockChallengeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockChallengeResponse::InitAsDefaultInstance() {
}
class BlockChallengeResponse::_Internal {
 public:
};

BlockChallengeResponse::BlockChallengeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
}
BlockChallengeResponse::BlockChallengeResponse(const BlockChallengeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_answer().empty()) {
    answer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  block_challenge_request_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_challenge_request_hash().empty()) {
    block_challenge_request_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_challenge_request_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
}

void BlockChallengeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockChallengeResponse_DfsMarketplace_2eproto.base);
  answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_challenge_request_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlockChallengeResponse::~BlockChallengeResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  SharedDtor();
}

void BlockChallengeResponse::SharedDtor() {
  answer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_challenge_request_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockChallengeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockChallengeResponse& BlockChallengeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockChallengeResponse_DfsMarketplace_2eproto.base);
  return *internal_default_instance();
}


void BlockChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_challenge_request_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BlockChallengeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_answer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string block_challenge_request_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_challenge_request_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockChallengeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string answer = 1;
  if (this->answer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_answer().data(), static_cast<int>(this->_internal_answer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_answer(), target);
  }

  // string block_challenge_request_hash = 2;
  if (this->block_challenge_request_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_challenge_request_hash().data(), static_cast<int>(this->_internal_block_challenge_request_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.block_challenge_request_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_block_challenge_request_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  return target;
}

size_t BlockChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string answer = 1;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_answer());
  }

  // string block_challenge_request_hash = 2;
  if (this->block_challenge_request_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_challenge_request_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockChallengeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockChallengeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockChallengeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
    MergeFrom(*source);
  }
}

void BlockChallengeResponse::MergeFrom(const BlockChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.block_challenge_request_hash().size() > 0) {

    block_challenge_request_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_challenge_request_hash_);
  }
}

void BlockChallengeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChallengeResponse::CopyFrom(const BlockChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChallengeResponse::IsInitialized() const {
  return true;
}

void BlockChallengeResponse::InternalSwap(BlockChallengeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  answer_.Swap(&other->answer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_challenge_request_hash_.Swap(&other->block_challenge_request_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockChallengeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockChallengeBroadcast::InitAsDefaultInstance() {
  ::Catalyst::Protocol::DfsMarketplace::_BlockChallengeBroadcast_default_instance_._instance.get_mutable()->original_challenge_ = const_cast< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest*>(
      ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest::internal_default_instance());
  ::Catalyst::Protocol::DfsMarketplace::_BlockChallengeBroadcast_default_instance_._instance.get_mutable()->challenged_peer_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
  ::Catalyst::Protocol::DfsMarketplace::_BlockChallengeBroadcast_default_instance_._instance.get_mutable()->challenged_by_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
}
class BlockChallengeBroadcast::_Internal {
 public:
  static const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& original_challenge(const BlockChallengeBroadcast* msg);
  static const ::Catalyst::Protocol::Peer::PeerId& challenged_peer(const BlockChallengeBroadcast* msg);
  static const ::Catalyst::Protocol::Peer::PeerId& challenged_by(const BlockChallengeBroadcast* msg);
};

const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest&
BlockChallengeBroadcast::_Internal::original_challenge(const BlockChallengeBroadcast* msg) {
  return *msg->original_challenge_;
}
const ::Catalyst::Protocol::Peer::PeerId&
BlockChallengeBroadcast::_Internal::challenged_peer(const BlockChallengeBroadcast* msg) {
  return *msg->challenged_peer_;
}
const ::Catalyst::Protocol::Peer::PeerId&
BlockChallengeBroadcast::_Internal::challenged_by(const BlockChallengeBroadcast* msg) {
  return *msg->challenged_by_;
}
void BlockChallengeBroadcast::clear_challenged_peer() {
  if (GetArenaNoVirtual() == nullptr && challenged_peer_ != nullptr) {
    delete challenged_peer_;
  }
  challenged_peer_ = nullptr;
}
void BlockChallengeBroadcast::clear_challenged_by() {
  if (GetArenaNoVirtual() == nullptr && challenged_by_ != nullptr) {
    delete challenged_by_;
  }
  challenged_by_ = nullptr;
}
BlockChallengeBroadcast::BlockChallengeBroadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
}
BlockChallengeBroadcast::BlockChallengeBroadcast(const BlockChallengeBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_answer().empty()) {
    answer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from._internal_has_original_challenge()) {
    original_challenge_ = new ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest(*from.original_challenge_);
  } else {
    original_challenge_ = nullptr;
  }
  if (from._internal_has_challenged_peer()) {
    challenged_peer_ = new ::Catalyst::Protocol::Peer::PeerId(*from.challenged_peer_);
  } else {
    challenged_peer_ = nullptr;
  }
  if (from._internal_has_challenged_by()) {
    challenged_by_ = new ::Catalyst::Protocol::Peer::PeerId(*from.challenged_by_);
  } else {
    challenged_by_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
}

void BlockChallengeBroadcast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockChallengeBroadcast_DfsMarketplace_2eproto.base);
  answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&original_challenge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenged_by_) -
      reinterpret_cast<char*>(&original_challenge_)) + sizeof(challenged_by_));
}

BlockChallengeBroadcast::~BlockChallengeBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  SharedDtor();
}

void BlockChallengeBroadcast::SharedDtor() {
  answer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete original_challenge_;
  if (this != internal_default_instance()) delete challenged_peer_;
  if (this != internal_default_instance()) delete challenged_by_;
}

void BlockChallengeBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockChallengeBroadcast& BlockChallengeBroadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockChallengeBroadcast_DfsMarketplace_2eproto.base);
  return *internal_default_instance();
}


void BlockChallengeBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && original_challenge_ != nullptr) {
    delete original_challenge_;
  }
  original_challenge_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && challenged_peer_ != nullptr) {
    delete challenged_peer_;
  }
  challenged_peer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && challenged_by_ != nullptr) {
    delete challenged_by_;
  }
  challenged_by_ = nullptr;
  _internal_metadata_.Clear();
}

const char* BlockChallengeBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_challenge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string answer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_answer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenged_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenged_by(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockChallengeBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
  if (this->has_original_challenge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::original_challenge(this), target, stream);
  }

  // string answer = 2;
  if (this->answer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_answer().data(), static_cast<int>(this->_internal_answer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_answer(), target);
  }

  // .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
  if (this->has_challenged_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::challenged_peer(this), target, stream);
  }

  // .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
  if (this->has_challenged_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::challenged_by(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  return target;
}

size_t BlockChallengeBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string answer = 2;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_answer());
  }

  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest original_challenge = 1;
  if (this->has_original_challenge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *original_challenge_);
  }

  // .Catalyst.Protocol.Peer.PeerId challenged_peer = 3;
  if (this->has_challenged_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *challenged_peer_);
  }

  // .Catalyst.Protocol.Peer.PeerId challenged_by = 4;
  if (this->has_challenged_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *challenged_by_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockChallengeBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockChallengeBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockChallengeBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
    MergeFrom(*source);
  }
}

void BlockChallengeBroadcast::MergeFrom(const BlockChallengeBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.has_original_challenge()) {
    _internal_mutable_original_challenge()->::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest::MergeFrom(from._internal_original_challenge());
  }
  if (from.has_challenged_peer()) {
    _internal_mutable_challenged_peer()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from._internal_challenged_peer());
  }
  if (from.has_challenged_by()) {
    _internal_mutable_challenged_by()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from._internal_challenged_by());
  }
}

void BlockChallengeBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChallengeBroadcast::CopyFrom(const BlockChallengeBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChallengeBroadcast::IsInitialized() const {
  return true;
}

void BlockChallengeBroadcast::InternalSwap(BlockChallengeBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  answer_.Swap(&other->answer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(original_challenge_, other->original_challenge_);
  swap(challenged_peer_, other->challenged_peer_);
  swap(challenged_by_, other->challenged_by_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockChallengeBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DfsMarketplace
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast* Arena::CreateMaybeMessage< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
