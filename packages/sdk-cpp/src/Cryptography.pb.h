// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cryptography.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Cryptography_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Cryptography_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Network.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Cryptography_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Cryptography_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cryptography_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Cryptography {
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class SignatureBatch;
class SignatureBatchDefaultTypeInternal;
extern SignatureBatchDefaultTypeInternal _SignatureBatch_default_instance_;
class SigningContext;
class SigningContextDefaultTypeInternal;
extern SigningContextDefaultTypeInternal _SigningContext_default_instance_;
}  // namespace Cryptography
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> ::Catalyst::Protocol::Cryptography::Signature* Arena::CreateMaybeMessage<::Catalyst::Protocol::Cryptography::Signature>(Arena*);
template<> ::Catalyst::Protocol::Cryptography::SignatureBatch* Arena::CreateMaybeMessage<::Catalyst::Protocol::Cryptography::SignatureBatch>(Arena*);
template<> ::Catalyst::Protocol::Cryptography::SigningContext* Arena::CreateMaybeMessage<::Catalyst::Protocol::Cryptography::SigningContext>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Catalyst {
namespace Protocol {
namespace Cryptography {

enum SignatureType : int {
  SIGNATURE_TYPE_UNKNOWN = 0,
  TRANSACTION_PUBLIC = 1,
  TRANSACTION_CONFIDENTIAL = 2,
  PROTOCOL_RPC = 3,
  PROTOCOL_PEER = 4,
  SignatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SignatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SignatureType_IsValid(int value);
constexpr SignatureType SignatureType_MIN = SIGNATURE_TYPE_UNKNOWN;
constexpr SignatureType SignatureType_MAX = PROTOCOL_PEER;
constexpr int SignatureType_ARRAYSIZE = SignatureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignatureType_descriptor();
template<typename T>
inline const std::string& SignatureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SignatureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SignatureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SignatureType_descriptor(), enum_t_value);
}
inline bool SignatureType_Parse(
    const std::string& name, SignatureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SignatureType>(
    SignatureType_descriptor(), name, value);
}
enum ErrorCode : int {
  ERROR_CODE_UNKNOWN = 0,
  INVALID_SIGNATURE = 1,
  INVALID_PUBLIC_KEY = 2,
  INVALID_PRIVATE_KEY = 3,
  SIGNATURE_VERIFICATION_FAILURE = 4,
  INVALID_CONTEXT_LENGTH = 5,
  INVALID_BATCH_MESSAGE = 6,
  ARRAYS_NOT_EQUAL_LENGTH = 7,
  BATCH_VERIFICATION_FAILURE = 8,
  NO_ERROR = 418,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = ERROR_CODE_UNKNOWN;
constexpr ErrorCode ErrorCode_MAX = NO_ERROR;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class Signature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Cryptography.Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(nullptr);
  }

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Cryptography.Signature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cryptography_2eproto);
    return ::descriptor_table_Cryptography_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawBytesFieldNumber = 2,
    kSigningContextFieldNumber = 1,
  };
  // bytes raw_bytes = 2;
  void clear_raw_bytes();
  const std::string& raw_bytes() const;
  void set_raw_bytes(const std::string& value);
  void set_raw_bytes(std::string&& value);
  void set_raw_bytes(const char* value);
  void set_raw_bytes(const void* value, size_t size);
  std::string* mutable_raw_bytes();
  std::string* release_raw_bytes();
  void set_allocated_raw_bytes(std::string* raw_bytes);
  private:
  const std::string& _internal_raw_bytes() const;
  void _internal_set_raw_bytes(const std::string& value);
  std::string* _internal_mutable_raw_bytes();
  public:

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 1;
  bool has_signing_context() const;
  private:
  bool _internal_has_signing_context() const;
  public:
  void clear_signing_context();
  const ::Catalyst::Protocol::Cryptography::SigningContext& signing_context() const;
  ::Catalyst::Protocol::Cryptography::SigningContext* release_signing_context();
  ::Catalyst::Protocol::Cryptography::SigningContext* mutable_signing_context();
  void set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context);
  private:
  const ::Catalyst::Protocol::Cryptography::SigningContext& _internal_signing_context() const;
  ::Catalyst::Protocol::Cryptography::SigningContext* _internal_mutable_signing_context();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Cryptography.Signature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_bytes_;
  ::Catalyst::Protocol::Cryptography::SigningContext* signing_context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cryptography_2eproto;
};
// -------------------------------------------------------------------

class SigningContext :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Cryptography.SigningContext) */ {
 public:
  SigningContext();
  virtual ~SigningContext();

  SigningContext(const SigningContext& from);
  SigningContext(SigningContext&& from) noexcept
    : SigningContext() {
    *this = ::std::move(from);
  }

  inline SigningContext& operator=(const SigningContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningContext& operator=(SigningContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SigningContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SigningContext* internal_default_instance() {
    return reinterpret_cast<const SigningContext*>(
               &_SigningContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SigningContext& a, SigningContext& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningContext* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SigningContext* New() const final {
    return CreateMaybeMessage<SigningContext>(nullptr);
  }

  SigningContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SigningContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SigningContext& from);
  void MergeFrom(const SigningContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Cryptography.SigningContext";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cryptography_2eproto);
    return ::descriptor_table_Cryptography_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkTypeFieldNumber = 1,
    kSignatureTypeFieldNumber = 2,
  };
  // .Catalyst.Protocol.Network.NetworkType network_type = 1;
  void clear_network_type();
  ::Catalyst::Protocol::Network::NetworkType network_type() const;
  void set_network_type(::Catalyst::Protocol::Network::NetworkType value);
  private:
  ::Catalyst::Protocol::Network::NetworkType _internal_network_type() const;
  void _internal_set_network_type(::Catalyst::Protocol::Network::NetworkType value);
  public:

  // .Catalyst.Protocol.Cryptography.SignatureType signature_type = 2;
  void clear_signature_type();
  ::Catalyst::Protocol::Cryptography::SignatureType signature_type() const;
  void set_signature_type(::Catalyst::Protocol::Cryptography::SignatureType value);
  private:
  ::Catalyst::Protocol::Cryptography::SignatureType _internal_signature_type() const;
  void _internal_set_signature_type(::Catalyst::Protocol::Cryptography::SignatureType value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Cryptography.SigningContext)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int network_type_;
  int signature_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cryptography_2eproto;
};
// -------------------------------------------------------------------

class SignatureBatch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Cryptography.SignatureBatch) */ {
 public:
  SignatureBatch();
  virtual ~SignatureBatch();

  SignatureBatch(const SignatureBatch& from);
  SignatureBatch(SignatureBatch&& from) noexcept
    : SignatureBatch() {
    *this = ::std::move(from);
  }

  inline SignatureBatch& operator=(const SignatureBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureBatch& operator=(SignatureBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignatureBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignatureBatch* internal_default_instance() {
    return reinterpret_cast<const SignatureBatch*>(
               &_SignatureBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SignatureBatch& a, SignatureBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureBatch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignatureBatch* New() const final {
    return CreateMaybeMessage<SignatureBatch>(nullptr);
  }

  SignatureBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignatureBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignatureBatch& from);
  void MergeFrom(const SignatureBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Cryptography.SignatureBatch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Cryptography_2eproto);
    return ::descriptor_table_Cryptography_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 1,
    kPublicKeysFieldNumber = 2,
    kMessagesFieldNumber = 3,
    kContextFieldNumber = 4,
  };
  // repeated bytes signatures = 1;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  void set_signatures(int index, const std::string& value);
  void set_signatures(int index, std::string&& value);
  void set_signatures(int index, const char* value);
  void set_signatures(int index, const void* value, size_t size);
  std::string* add_signatures();
  void add_signatures(const std::string& value);
  void add_signatures(std::string&& value);
  void add_signatures(const char* value);
  void add_signatures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signatures();
  private:
  const std::string& _internal_signatures(int index) const;
  std::string* _internal_add_signatures();
  public:

  // repeated bytes public_keys = 2;
  int public_keys_size() const;
  private:
  int _internal_public_keys_size() const;
  public:
  void clear_public_keys();
  const std::string& public_keys(int index) const;
  std::string* mutable_public_keys(int index);
  void set_public_keys(int index, const std::string& value);
  void set_public_keys(int index, std::string&& value);
  void set_public_keys(int index, const char* value);
  void set_public_keys(int index, const void* value, size_t size);
  std::string* add_public_keys();
  void add_public_keys(const std::string& value);
  void add_public_keys(std::string&& value);
  void add_public_keys(const char* value);
  void add_public_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& public_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_public_keys();
  private:
  const std::string& _internal_public_keys(int index) const;
  std::string* _internal_add_public_keys();
  public:

  // repeated bytes messages = 3;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  const std::string& messages(int index) const;
  std::string* mutable_messages(int index);
  void set_messages(int index, const std::string& value);
  void set_messages(int index, std::string&& value);
  void set_messages(int index, const char* value);
  void set_messages(int index, const void* value, size_t size);
  std::string* add_messages();
  void add_messages(const std::string& value);
  void add_messages(std::string&& value);
  void add_messages(const char* value);
  void add_messages(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_messages();
  private:
  const std::string& _internal_messages(int index) const;
  std::string* _internal_add_messages();
  public:

  // bytes context = 4;
  void clear_context();
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Cryptography.SignatureBatch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signatures_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> public_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Cryptography_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Signature

// .Catalyst.Protocol.Cryptography.SigningContext signing_context = 1;
inline bool Signature::_internal_has_signing_context() const {
  return this != internal_default_instance() && signing_context_ != nullptr;
}
inline bool Signature::has_signing_context() const {
  return _internal_has_signing_context();
}
inline void Signature::clear_signing_context() {
  if (GetArenaNoVirtual() == nullptr && signing_context_ != nullptr) {
    delete signing_context_;
  }
  signing_context_ = nullptr;
}
inline const ::Catalyst::Protocol::Cryptography::SigningContext& Signature::_internal_signing_context() const {
  const ::Catalyst::Protocol::Cryptography::SigningContext* p = signing_context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Cryptography::SigningContext*>(
      &::Catalyst::Protocol::Cryptography::_SigningContext_default_instance_);
}
inline const ::Catalyst::Protocol::Cryptography::SigningContext& Signature::signing_context() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.Signature.signing_context)
  return _internal_signing_context();
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* Signature::release_signing_context() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Cryptography.Signature.signing_context)
  
  ::Catalyst::Protocol::Cryptography::SigningContext* temp = signing_context_;
  signing_context_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* Signature::_internal_mutable_signing_context() {
  
  if (signing_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Cryptography::SigningContext>(GetArenaNoVirtual());
    signing_context_ = p;
  }
  return signing_context_;
}
inline ::Catalyst::Protocol::Cryptography::SigningContext* Signature::mutable_signing_context() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Cryptography.Signature.signing_context)
  return _internal_mutable_signing_context();
}
inline void Signature::set_allocated_signing_context(::Catalyst::Protocol::Cryptography::SigningContext* signing_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signing_context_;
  }
  if (signing_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signing_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signing_context, submessage_arena);
    }
    
  } else {
    
  }
  signing_context_ = signing_context;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Cryptography.Signature.signing_context)
}

// bytes raw_bytes = 2;
inline void Signature::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Signature::raw_bytes() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
  return _internal_raw_bytes();
}
inline void Signature::set_raw_bytes(const std::string& value) {
  _internal_set_raw_bytes(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
}
inline std::string* Signature::mutable_raw_bytes() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
  return _internal_mutable_raw_bytes();
}
inline const std::string& Signature::_internal_raw_bytes() const {
  return raw_bytes_.GetNoArena();
}
inline void Signature::_internal_set_raw_bytes(const std::string& value) {
  
  raw_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Signature::set_raw_bytes(std::string&& value) {
  
  raw_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
}
inline void Signature::set_raw_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
}
inline void Signature::set_raw_bytes(const void* value, size_t size) {
  
  raw_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
}
inline std::string* Signature::_internal_mutable_raw_bytes() {
  
  return raw_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Signature::release_raw_bytes() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
  
  return raw_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Signature::set_allocated_raw_bytes(std::string* raw_bytes) {
  if (raw_bytes != nullptr) {
    
  } else {
    
  }
  raw_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Cryptography.Signature.raw_bytes)
}

// -------------------------------------------------------------------

// SigningContext

// .Catalyst.Protocol.Network.NetworkType network_type = 1;
inline void SigningContext::clear_network_type() {
  network_type_ = 0;
}
inline ::Catalyst::Protocol::Network::NetworkType SigningContext::_internal_network_type() const {
  return static_cast< ::Catalyst::Protocol::Network::NetworkType >(network_type_);
}
inline ::Catalyst::Protocol::Network::NetworkType SigningContext::network_type() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.SigningContext.network_type)
  return _internal_network_type();
}
inline void SigningContext::_internal_set_network_type(::Catalyst::Protocol::Network::NetworkType value) {
  
  network_type_ = value;
}
inline void SigningContext::set_network_type(::Catalyst::Protocol::Network::NetworkType value) {
  _internal_set_network_type(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SigningContext.network_type)
}

// .Catalyst.Protocol.Cryptography.SignatureType signature_type = 2;
inline void SigningContext::clear_signature_type() {
  signature_type_ = 0;
}
inline ::Catalyst::Protocol::Cryptography::SignatureType SigningContext::_internal_signature_type() const {
  return static_cast< ::Catalyst::Protocol::Cryptography::SignatureType >(signature_type_);
}
inline ::Catalyst::Protocol::Cryptography::SignatureType SigningContext::signature_type() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.SigningContext.signature_type)
  return _internal_signature_type();
}
inline void SigningContext::_internal_set_signature_type(::Catalyst::Protocol::Cryptography::SignatureType value) {
  
  signature_type_ = value;
}
inline void SigningContext::set_signature_type(::Catalyst::Protocol::Cryptography::SignatureType value) {
  _internal_set_signature_type(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SigningContext.signature_type)
}

// -------------------------------------------------------------------

// SignatureBatch

// repeated bytes signatures = 1;
inline int SignatureBatch::_internal_signatures_size() const {
  return signatures_.size();
}
inline int SignatureBatch::signatures_size() const {
  return _internal_signatures_size();
}
inline void SignatureBatch::clear_signatures() {
  signatures_.Clear();
}
inline std::string* SignatureBatch::add_signatures() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
  return _internal_add_signatures();
}
inline const std::string& SignatureBatch::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const std::string& SignatureBatch::signatures(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
  return _internal_signatures(index);
}
inline std::string* SignatureBatch::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
  return signatures_.Mutable(index);
}
inline void SignatureBatch::set_signatures(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
  signatures_.Mutable(index)->assign(value);
}
inline void SignatureBatch::set_signatures(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
  signatures_.Mutable(index)->assign(std::move(value));
}
inline void SignatureBatch::set_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
}
inline void SignatureBatch::set_signatures(int index, const void* value, size_t size) {
  signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
}
inline std::string* SignatureBatch::_internal_add_signatures() {
  return signatures_.Add();
}
inline void SignatureBatch::add_signatures(const std::string& value) {
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
}
inline void SignatureBatch::add_signatures(std::string&& value) {
  signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
}
inline void SignatureBatch::add_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
}
inline void SignatureBatch::add_signatures(const void* value, size_t size) {
  signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SignatureBatch::signatures() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
  return signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SignatureBatch::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Cryptography.SignatureBatch.signatures)
  return &signatures_;
}

// repeated bytes public_keys = 2;
inline int SignatureBatch::_internal_public_keys_size() const {
  return public_keys_.size();
}
inline int SignatureBatch::public_keys_size() const {
  return _internal_public_keys_size();
}
inline void SignatureBatch::clear_public_keys() {
  public_keys_.Clear();
}
inline std::string* SignatureBatch::add_public_keys() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
  return _internal_add_public_keys();
}
inline const std::string& SignatureBatch::_internal_public_keys(int index) const {
  return public_keys_.Get(index);
}
inline const std::string& SignatureBatch::public_keys(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
  return _internal_public_keys(index);
}
inline std::string* SignatureBatch::mutable_public_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
  return public_keys_.Mutable(index);
}
inline void SignatureBatch::set_public_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
  public_keys_.Mutable(index)->assign(value);
}
inline void SignatureBatch::set_public_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
  public_keys_.Mutable(index)->assign(std::move(value));
}
inline void SignatureBatch::set_public_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
}
inline void SignatureBatch::set_public_keys(int index, const void* value, size_t size) {
  public_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
}
inline std::string* SignatureBatch::_internal_add_public_keys() {
  return public_keys_.Add();
}
inline void SignatureBatch::add_public_keys(const std::string& value) {
  public_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
}
inline void SignatureBatch::add_public_keys(std::string&& value) {
  public_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
}
inline void SignatureBatch::add_public_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
}
inline void SignatureBatch::add_public_keys(const void* value, size_t size) {
  public_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SignatureBatch::public_keys() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
  return public_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SignatureBatch::mutable_public_keys() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Cryptography.SignatureBatch.public_keys)
  return &public_keys_;
}

// repeated bytes messages = 3;
inline int SignatureBatch::_internal_messages_size() const {
  return messages_.size();
}
inline int SignatureBatch::messages_size() const {
  return _internal_messages_size();
}
inline void SignatureBatch::clear_messages() {
  messages_.Clear();
}
inline std::string* SignatureBatch::add_messages() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
  return _internal_add_messages();
}
inline const std::string& SignatureBatch::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const std::string& SignatureBatch::messages(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
  return _internal_messages(index);
}
inline std::string* SignatureBatch::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
  return messages_.Mutable(index);
}
inline void SignatureBatch::set_messages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
  messages_.Mutable(index)->assign(value);
}
inline void SignatureBatch::set_messages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
  messages_.Mutable(index)->assign(std::move(value));
}
inline void SignatureBatch::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
}
inline void SignatureBatch::set_messages(int index, const void* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
}
inline std::string* SignatureBatch::_internal_add_messages() {
  return messages_.Add();
}
inline void SignatureBatch::add_messages(const std::string& value) {
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
}
inline void SignatureBatch::add_messages(std::string&& value) {
  messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
}
inline void SignatureBatch::add_messages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
}
inline void SignatureBatch::add_messages(const void* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SignatureBatch::messages() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
  return messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SignatureBatch::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Cryptography.SignatureBatch.messages)
  return &messages_;
}

// bytes context = 4;
inline void SignatureBatch::clear_context() {
  context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignatureBatch::context() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Cryptography.SignatureBatch.context)
  return _internal_context();
}
inline void SignatureBatch::set_context(const std::string& value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Cryptography.SignatureBatch.context)
}
inline std::string* SignatureBatch::mutable_context() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Cryptography.SignatureBatch.context)
  return _internal_mutable_context();
}
inline const std::string& SignatureBatch::_internal_context() const {
  return context_.GetNoArena();
}
inline void SignatureBatch::_internal_set_context(const std::string& value) {
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignatureBatch::set_context(std::string&& value) {
  
  context_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Cryptography.SignatureBatch.context)
}
inline void SignatureBatch::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Cryptography.SignatureBatch.context)
}
inline void SignatureBatch::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Cryptography.SignatureBatch.context)
}
inline std::string* SignatureBatch::_internal_mutable_context() {
  
  return context_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignatureBatch::release_context() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Cryptography.SignatureBatch.context)
  
  return context_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignatureBatch::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Cryptography.SignatureBatch.context)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cryptography
}  // namespace Protocol
}  // namespace Catalyst

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Catalyst::Protocol::Cryptography::SignatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Cryptography::SignatureType>() {
  return ::Catalyst::Protocol::Cryptography::SignatureType_descriptor();
}
template <> struct is_proto_enum< ::Catalyst::Protocol::Cryptography::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Cryptography::ErrorCode>() {
  return ::Catalyst::Protocol::Cryptography::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Cryptography_2eproto
