// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rpc.proto

#include "Rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Cryptography_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningContext_Cryptography_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Deltas_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Delta_Deltas_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Peer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerId_Peer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Peer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PeerInfo_Peer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PublicEntry_Transaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Wire_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionBroadcast_Wire_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Rpc {
namespace Node {
class VersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionRequest> _instance;
} _VersionRequest_default_instance_;
class VersionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionResponse> _instance;
} _VersionResponse_default_instance_;
class GetInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoRequest> _instance;
} _GetInfoRequest_default_instance_;
class GetInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoResponse> _instance;
} _GetInfoResponse_default_instance_;
class CreateWalletRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateWalletRequest> _instance;
} _CreateWalletRequest_default_instance_;
class CreateWalletResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateWalletResponse> _instance;
} _CreateWalletResponse_default_instance_;
class ListWalletRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListWalletRequest> _instance;
} _ListWalletRequest_default_instance_;
class ListWalletResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListWalletResponse> _instance;
} _ListWalletResponse_default_instance_;
class CreateAddressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAddressRequest> _instance;
} _CreateAddressRequest_default_instance_;
class CreateAddressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAddressResponse> _instance;
} _CreateAddressResponse_default_instance_;
class GetAddressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAddressRequest> _instance;
} _GetAddressRequest_default_instance_;
class GetAddressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAddressResponse> _instance;
} _GetAddressResponse_default_instance_;
class ListAddressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAddressRequest> _instance;
} _ListAddressRequest_default_instance_;
class ListAddressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAddressResponse> _instance;
} _ListAddressResponse_default_instance_;
class ValidateAddressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateAddressRequest> _instance;
} _ValidateAddressRequest_default_instance_;
class ValidateAddressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidateAddressResponse> _instance;
} _ValidateAddressResponse_default_instance_;
class GetBalanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBalanceRequest> _instance;
} _GetBalanceRequest_default_instance_;
class GetBalanceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBalanceResponse> _instance;
} _GetBalanceResponse_default_instance_;
class CreateRawTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRawTransactionRequest> _instance;
} _CreateRawTransactionRequest_default_instance_;
class CreateRawTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRawTransactionResponse> _instance;
} _CreateRawTransactionResponse_default_instance_;
class SignRawTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignRawTransactionRequest> _instance;
} _SignRawTransactionRequest_default_instance_;
class SignRawTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignRawTransactionResponse> _instance;
} _SignRawTransactionResponse_default_instance_;
class DecodeRawTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecodeRawTransactionRequest> _instance;
} _DecodeRawTransactionRequest_default_instance_;
class DecodeRawTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecodeRawTransactionResponse> _instance;
} _DecodeRawTransactionResponse_default_instance_;
class BroadcastRawTransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastRawTransactionRequest> _instance;
} _BroadcastRawTransactionRequest_default_instance_;
class BroadcastRawTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastRawTransactionResponse> _instance;
} _BroadcastRawTransactionResponse_default_instance_;
class SendToRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendToRequest> _instance;
} _SendToRequest_default_instance_;
class SendToResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendToResponse> _instance;
} _SendToResponse_default_instance_;
class SendToFromRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendToFromRequest> _instance;
} _SendToFromRequest_default_instance_;
class SendToFromResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendToFromResponse> _instance;
} _SendToFromResponse_default_instance_;
class SendManyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendManyRequest> _instance;
} _SendManyRequest_default_instance_;
class SendManyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendManyResponse> _instance;
} _SendManyResponse_default_instance_;
class SendFromManyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendFromManyRequest> _instance;
} _SendFromManyRequest_default_instance_;
class SendFromManyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendFromManyResponse> _instance;
} _SendFromManyResponse_default_instance_;
class AddNodeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddNodeRequest> _instance;
} _AddNodeRequest_default_instance_;
class AddNodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddNodeResponse> _instance;
} _AddNodeResponse_default_instance_;
class GetPeerListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPeerListRequest> _instance;
} _GetPeerListRequest_default_instance_;
class GetPeerListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPeerListResponse> _instance;
} _GetPeerListResponse_default_instance_;
class GetPeerReputationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPeerReputationRequest> _instance;
} _GetPeerReputationRequest_default_instance_;
class GetPeerReputationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPeerReputationResponse> _instance;
} _GetPeerReputationResponse_default_instance_;
class SetPeerBlackListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPeerBlackListRequest> _instance;
} _SetPeerBlackListRequest_default_instance_;
class SetPeerBlackListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPeerBlackListResponse> _instance;
} _SetPeerBlackListResponse_default_instance_;
class GetPeerInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPeerInfoRequest> _instance;
} _GetPeerInfoRequest_default_instance_;
class GetPeerInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPeerInfoResponse> _instance;
} _GetPeerInfoResponse_default_instance_;
class GetConnectionCountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConnectionCountRequest> _instance;
} _GetConnectionCountRequest_default_instance_;
class GetConnectionCountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConnectionCountResponse> _instance;
} _GetConnectionCountResponse_default_instance_;
class GetDeltaRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeltaRequest> _instance;
} _GetDeltaRequest_default_instance_;
class GetDeltaResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeltaResponse> _instance;
} _GetDeltaResponse_default_instance_;
class GetMempoolRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMempoolRequest> _instance;
} _GetMempoolRequest_default_instance_;
class GetMempoolResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMempoolResponse> _instance;
} _GetMempoolResponse_default_instance_;
class SignMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignMessageRequest> _instance;
} _SignMessageRequest_default_instance_;
class SignMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignMessageResponse> _instance;
} _SignMessageResponse_default_instance_;
class VerifyMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyMessageRequest> _instance;
} _VerifyMessageRequest_default_instance_;
class VerifyMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyMessageResponse> _instance;
} _VerifyMessageResponse_default_instance_;
class ServiceStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceStatusRequest> _instance;
} _ServiceStatusRequest_default_instance_;
class ServiceStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceStatusResponse> _instance;
} _ServiceStatusResponse_default_instance_;
class AddFileToDfsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFileToDfsRequest> _instance;
} _AddFileToDfsRequest_default_instance_;
class AddFileToDfsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddFileToDfsResponse> _instance;
} _AddFileToDfsResponse_default_instance_;
class TransferFileBytesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferFileBytesRequest> _instance;
} _TransferFileBytesRequest_default_instance_;
class TransferFileBytesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferFileBytesResponse> _instance;
} _TransferFileBytesResponse_default_instance_;
class RemovePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovePeerRequest> _instance;
} _RemovePeerRequest_default_instance_;
class RemovePeerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemovePeerResponse> _instance;
} _RemovePeerResponse_default_instance_;
class GetPeerCountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPeerCountRequest> _instance;
} _GetPeerCountRequest_default_instance_;
class GetPeerCountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPeerCountResponse> _instance;
} _GetPeerCountResponse_default_instance_;
class GetFileFromDfsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFileFromDfsRequest> _instance;
} _GetFileFromDfsRequest_default_instance_;
class GetFileFromDfsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFileFromDfsResponse> _instance;
} _GetFileFromDfsResponse_default_instance_;
class SetPeerDataFolderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPeerDataFolderRequest> _instance;
} _SetPeerDataFolderRequest_default_instance_;
class SetPeerDataFolderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPeerDataFolderResponse> _instance;
} _SetPeerDataFolderResponse_default_instance_;
}  // namespace Node
}  // namespace Rpc
}  // namespace Protocol
}  // namespace Catalyst
static void InitDefaultsscc_info_AddFileToDfsRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_AddFileToDfsRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFileToDfsRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddFileToDfsRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_AddFileToDfsResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_AddFileToDfsResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddFileToDfsResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddFileToDfsResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_AddNodeRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_AddNodeRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::AddNodeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::AddNodeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddNodeRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddNodeRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_AddNodeResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_AddNodeResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::AddNodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::AddNodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddNodeResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddNodeResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_BroadcastRawTransactionRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_BroadcastRawTransactionRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BroadcastRawTransactionRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BroadcastRawTransactionRequest_Rpc_2eproto}, {
      &scc_info_TransactionBroadcast_Wire_2eproto.base,}};

static void InitDefaultsscc_info_BroadcastRawTransactionResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_BroadcastRawTransactionResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastRawTransactionResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadcastRawTransactionResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_CreateAddressRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_CreateAddressRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::CreateAddressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::CreateAddressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAddressRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateAddressRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_CreateAddressResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_CreateAddressResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::CreateAddressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::CreateAddressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAddressResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateAddressResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_CreateRawTransactionRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_CreateRawTransactionRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRawTransactionRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateRawTransactionRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_CreateRawTransactionResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_CreateRawTransactionResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRawTransactionResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateRawTransactionResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_CreateWalletRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_CreateWalletRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::CreateWalletRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::CreateWalletRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateWalletRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateWalletRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_CreateWalletResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_CreateWalletResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::CreateWalletResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::CreateWalletResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateWalletResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateWalletResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_DecodeRawTransactionRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_DecodeRawTransactionRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecodeRawTransactionRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DecodeRawTransactionRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_DecodeRawTransactionResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_DecodeRawTransactionResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecodeRawTransactionResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DecodeRawTransactionResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetAddressRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetAddressRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetAddressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetAddressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAddressRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAddressRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetAddressResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetAddressResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetAddressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetAddressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAddressResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAddressResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetBalanceRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetBalanceRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetBalanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetBalanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBalanceRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBalanceRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetBalanceResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetBalanceResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetBalanceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetBalanceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBalanceResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBalanceResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetConnectionCountRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetConnectionCountRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConnectionCountRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConnectionCountRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetConnectionCountResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetConnectionCountResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConnectionCountResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConnectionCountResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetDeltaRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetDeltaRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetDeltaRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetDeltaRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeltaRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDeltaRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetDeltaResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetDeltaResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetDeltaResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetDeltaResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDeltaResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDeltaResponse_Rpc_2eproto}, {
      &scc_info_Delta_Deltas_2eproto.base,}};

static void InitDefaultsscc_info_GetFileFromDfsRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetFileFromDfsRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFileFromDfsRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetFileFromDfsRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetFileFromDfsResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetFileFromDfsResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFileFromDfsResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetFileFromDfsResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetInfoRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetInfoRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInfoRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetInfoRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetInfoResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetInfoResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInfoResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetInfoResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetMempoolRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetMempoolRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetMempoolRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetMempoolRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMempoolRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMempoolRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetMempoolResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetMempoolResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetMempoolResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetMempoolResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMempoolResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMempoolResponse_Rpc_2eproto}, {
      &scc_info_PublicEntry_Transaction_2eproto.base,}};

static void InitDefaultsscc_info_GetPeerCountRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetPeerCountRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPeerCountRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPeerCountRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetPeerCountResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetPeerCountResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPeerCountResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPeerCountResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetPeerInfoRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetPeerInfoRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPeerInfoRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPeerInfoRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetPeerInfoResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetPeerInfoResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPeerInfoResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPeerInfoResponse_Rpc_2eproto}, {
      &scc_info_PeerInfo_Peer_2eproto.base,}};

static void InitDefaultsscc_info_GetPeerListRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetPeerListRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetPeerListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetPeerListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPeerListRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPeerListRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetPeerListResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetPeerListResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetPeerListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetPeerListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPeerListResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPeerListResponse_Rpc_2eproto}, {
      &scc_info_PeerId_Peer_2eproto.base,}};

static void InitDefaultsscc_info_GetPeerReputationRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetPeerReputationRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPeerReputationRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPeerReputationRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetPeerReputationResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_GetPeerReputationResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPeerReputationResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPeerReputationResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListAddressRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_ListAddressRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::ListAddressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::ListAddressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAddressRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAddressRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListAddressResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_ListAddressResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::ListAddressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::ListAddressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAddressResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAddressResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListWalletRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_ListWalletRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::ListWalletRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::ListWalletRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListWalletRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListWalletRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListWalletResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_ListWalletResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::ListWalletResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::ListWalletResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListWalletResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListWalletResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_RemovePeerRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_RemovePeerRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::RemovePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::RemovePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovePeerRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemovePeerRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_RemovePeerResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_RemovePeerResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::RemovePeerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::RemovePeerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemovePeerResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemovePeerResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendFromManyRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SendFromManyRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SendFromManyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SendFromManyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendFromManyRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendFromManyRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendFromManyResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SendFromManyResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SendFromManyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SendFromManyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendFromManyResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendFromManyResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendManyRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SendManyRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SendManyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SendManyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendManyRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendManyRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendManyResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SendManyResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SendManyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SendManyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendManyResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendManyResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendToFromRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SendToFromRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SendToFromRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SendToFromRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendToFromRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendToFromRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendToFromResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SendToFromResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SendToFromResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SendToFromResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendToFromResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendToFromResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendToRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SendToRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SendToRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SendToRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendToRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendToRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendToResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SendToResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SendToResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SendToResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendToResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendToResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_ServiceStatusRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_ServiceStatusRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceStatusRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceStatusRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_ServiceStatusResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_ServiceStatusResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceStatusResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceStatusResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SetPeerBlackListRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SetPeerBlackListRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPeerBlackListRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetPeerBlackListRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SetPeerBlackListResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SetPeerBlackListResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPeerBlackListResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetPeerBlackListResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SetPeerDataFolderRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SetPeerDataFolderRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPeerDataFolderRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetPeerDataFolderRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SetPeerDataFolderResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SetPeerDataFolderResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPeerDataFolderResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetPeerDataFolderResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SignMessageRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SignMessageRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SignMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SignMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignMessageRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignMessageRequest_Rpc_2eproto}, {
      &scc_info_SigningContext_Cryptography_2eproto.base,}};

static void InitDefaultsscc_info_SignMessageResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SignMessageResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SignMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SignMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignMessageResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignMessageResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SignRawTransactionRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SignRawTransactionRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignRawTransactionRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignRawTransactionRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_SignRawTransactionResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_SignRawTransactionResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignRawTransactionResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignRawTransactionResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_TransferFileBytesRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_TransferFileBytesRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferFileBytesRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferFileBytesRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_TransferFileBytesResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_TransferFileBytesResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferFileBytesResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferFileBytesResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_ValidateAddressRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_ValidateAddressRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidateAddressRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidateAddressRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_ValidateAddressResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_ValidateAddressResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidateAddressResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidateAddressResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_VerifyMessageRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_VerifyMessageRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerifyMessageRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VerifyMessageRequest_Rpc_2eproto}, {
      &scc_info_SigningContext_Cryptography_2eproto.base,}};

static void InitDefaultsscc_info_VerifyMessageResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_VerifyMessageResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifyMessageResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VerifyMessageResponse_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_VersionRequest_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_VersionRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::VersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::VersionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionRequest_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionRequest_Rpc_2eproto}, {}};

static void InitDefaultsscc_info_VersionResponse_Rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Rpc::Node::_VersionResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::Rpc::Node::VersionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Rpc::Node::VersionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionResponse_Rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionResponse_Rpc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Rpc_2eproto[68];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Rpc_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Rpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VersionRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VersionResponse, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetInfoRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetInfoResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateWalletRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateWalletRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateWalletResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateWalletResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ListWalletRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ListWalletRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ListWalletResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ListWalletResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateAddressRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateAddressResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetAddressRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetAddressResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ListAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ListAddressRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ListAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ListAddressResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetBalanceRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetBalanceResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse, response_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendToRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendToRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendToResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendToResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendToFromRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendToFromRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendToFromResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendToFromResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendManyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendManyRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendManyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendManyResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendFromManyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendFromManyRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendFromManyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SendFromManyResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddNodeRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddNodeResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerListResponse, peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse, reputation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest, blacklist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse, public_key_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse, ip_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse, blacklist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse, peer_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetDeltaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetDeltaRequest, delta_dfs_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetDeltaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetDeltaResponse, delta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetMempoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetMempoolRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetMempoolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetMempoolResponse, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignMessageRequest, message_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignMessageRequest, key_id_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignMessageRequest, signing_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignMessageResponse, signature_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignMessageResponse, public_key_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SignMessageResponse, original_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest, signature_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest, message_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest, signing_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse, is_signed_by_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest, file_size_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse, response_code_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse, dfs_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest, chunk_id_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest, chunk_bytes_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest, correlation_file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse, response_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::RemovePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::RemovePeerRequest, peer_ip_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::RemovePeerRequest, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::RemovePeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::RemovePeerResponse, deleted_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse, peer_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest, dfs_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse, file_size_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse, response_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest, data_folder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse, query_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Catalyst::Protocol::Rpc::Node::VersionRequest)},
  { 6, -1, sizeof(::Catalyst::Protocol::Rpc::Node::VersionResponse)},
  { 12, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetInfoRequest)},
  { 18, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetInfoResponse)},
  { 24, -1, sizeof(::Catalyst::Protocol::Rpc::Node::CreateWalletRequest)},
  { 30, -1, sizeof(::Catalyst::Protocol::Rpc::Node::CreateWalletResponse)},
  { 36, -1, sizeof(::Catalyst::Protocol::Rpc::Node::ListWalletRequest)},
  { 42, -1, sizeof(::Catalyst::Protocol::Rpc::Node::ListWalletResponse)},
  { 48, -1, sizeof(::Catalyst::Protocol::Rpc::Node::CreateAddressRequest)},
  { 54, -1, sizeof(::Catalyst::Protocol::Rpc::Node::CreateAddressResponse)},
  { 60, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetAddressRequest)},
  { 66, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetAddressResponse)},
  { 72, -1, sizeof(::Catalyst::Protocol::Rpc::Node::ListAddressRequest)},
  { 78, -1, sizeof(::Catalyst::Protocol::Rpc::Node::ListAddressResponse)},
  { 84, -1, sizeof(::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest)},
  { 90, -1, sizeof(::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse)},
  { 96, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetBalanceRequest)},
  { 102, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetBalanceResponse)},
  { 108, -1, sizeof(::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest)},
  { 114, -1, sizeof(::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse)},
  { 120, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest)},
  { 126, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse)},
  { 132, -1, sizeof(::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest)},
  { 138, -1, sizeof(::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse)},
  { 144, -1, sizeof(::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest)},
  { 150, -1, sizeof(::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse)},
  { 156, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SendToRequest)},
  { 162, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SendToResponse)},
  { 168, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SendToFromRequest)},
  { 174, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SendToFromResponse)},
  { 180, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SendManyRequest)},
  { 186, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SendManyResponse)},
  { 192, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SendFromManyRequest)},
  { 198, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SendFromManyResponse)},
  { 204, -1, sizeof(::Catalyst::Protocol::Rpc::Node::AddNodeRequest)},
  { 210, -1, sizeof(::Catalyst::Protocol::Rpc::Node::AddNodeResponse)},
  { 216, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetPeerListRequest)},
  { 221, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetPeerListResponse)},
  { 227, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest)},
  { 234, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse)},
  { 240, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest)},
  { 248, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse)},
  { 256, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest)},
  { 263, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse)},
  { 269, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest)},
  { 275, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse)},
  { 281, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetDeltaRequest)},
  { 287, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetDeltaResponse)},
  { 293, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetMempoolRequest)},
  { 299, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetMempoolResponse)},
  { 305, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SignMessageRequest)},
  { 313, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SignMessageResponse)},
  { 321, -1, sizeof(::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest)},
  { 330, -1, sizeof(::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse)},
  { 336, -1, sizeof(::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest)},
  { 342, -1, sizeof(::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse)},
  { 348, -1, sizeof(::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest)},
  { 356, -1, sizeof(::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse)},
  { 363, -1, sizeof(::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest)},
  { 371, -1, sizeof(::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse)},
  { 377, -1, sizeof(::Catalyst::Protocol::Rpc::Node::RemovePeerRequest)},
  { 384, -1, sizeof(::Catalyst::Protocol::Rpc::Node::RemovePeerResponse)},
  { 390, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest)},
  { 395, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse)},
  { 401, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest)},
  { 407, -1, sizeof(::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse)},
  { 414, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest)},
  { 420, -1, sizeof(::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_VersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_VersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_CreateWalletRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_CreateWalletResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_ListWalletRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_ListWalletResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_CreateAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_CreateAddressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetAddressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_ListAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_ListAddressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_ValidateAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_ValidateAddressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetBalanceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_CreateRawTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_CreateRawTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SignRawTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SignRawTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_DecodeRawTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_DecodeRawTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_BroadcastRawTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_BroadcastRawTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SendToRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SendToResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SendToFromRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SendToFromResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SendManyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SendManyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SendFromManyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SendFromManyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_AddNodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_AddNodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetPeerListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetPeerListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetPeerReputationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetPeerReputationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SetPeerBlackListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SetPeerBlackListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetPeerInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetPeerInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetConnectionCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetConnectionCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetDeltaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetDeltaResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetMempoolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetMempoolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SignMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SignMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_VerifyMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_VerifyMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_ServiceStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_ServiceStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_AddFileToDfsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_AddFileToDfsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_TransferFileBytesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_TransferFileBytesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_RemovePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_RemovePeerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetPeerCountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetPeerCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetFileFromDfsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_GetFileFromDfsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SetPeerDataFolderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Rpc::Node::_SetPeerDataFolderResponse_default_instance_),
};

const char descriptor_table_protodef_Rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tRpc.proto\022\032Catalyst.Protocol.Rpc.Node\032"
  "\nPeer.proto\032\022Cryptography.proto\032\014Deltas."
  "proto\032\nWire.proto\032\021Transaction.proto\"\037\n\016"
  "VersionRequest\022\r\n\005query\030\001 \001(\010\"\"\n\017Version"
  "Response\022\017\n\007version\030\001 \001(\t\"\037\n\016GetInfoRequ"
  "est\022\r\n\005query\030\001 \001(\010\" \n\017GetInfoResponse\022\r\n"
  "\005query\030\001 \001(\t\"$\n\023CreateWalletRequest\022\r\n\005q"
  "uery\030\001 \001(\010\"%\n\024CreateWalletResponse\022\r\n\005qu"
  "ery\030\001 \001(\t\"\"\n\021ListWalletRequest\022\r\n\005query\030"
  "\001 \001(\010\"#\n\022ListWalletResponse\022\r\n\005query\030\001 \001"
  "(\t\"%\n\024CreateAddressRequest\022\r\n\005query\030\001 \001("
  "\010\"&\n\025CreateAddressResponse\022\r\n\005query\030\001 \001("
  "\t\"\"\n\021GetAddressRequest\022\r\n\005query\030\001 \001(\010\"#\n"
  "\022GetAddressResponse\022\r\n\005query\030\001 \001(\t\"#\n\022Li"
  "stAddressRequest\022\r\n\005query\030\001 \001(\010\"$\n\023ListA"
  "ddressResponse\022\r\n\005query\030\001 \001(\t\"\'\n\026Validat"
  "eAddressRequest\022\r\n\005query\030\001 \001(\010\"(\n\027Valida"
  "teAddressResponse\022\r\n\005query\030\001 \001(\t\"\"\n\021GetB"
  "alanceRequest\022\r\n\005query\030\001 \001(\010\"#\n\022GetBalan"
  "ceResponse\022\r\n\005query\030\001 \001(\t\",\n\033CreateRawTr"
  "ansactionRequest\022\r\n\005query\030\001 \001(\010\"-\n\034Creat"
  "eRawTransactionResponse\022\r\n\005query\030\001 \001(\t\"*"
  "\n\031SignRawTransactionRequest\022\r\n\005query\030\001 \001"
  "(\010\"+\n\032SignRawTransactionResponse\022\r\n\005quer"
  "y\030\001 \001(\t\",\n\033DecodeRawTransactionRequest\022\r"
  "\n\005query\030\001 \001(\010\"-\n\034DecodeRawTransactionRes"
  "ponse\022\r\n\005query\030\001 \001(\t\"c\n\036BroadcastRawTran"
  "sactionRequest\022A\n\013transaction\030\001 \001(\0132,.Ca"
  "talyst.Protocol.Wire.TransactionBroadcas"
  "t\"b\n\037BroadcastRawTransactionResponse\022\?\n\r"
  "response_code\030\001 \001(\0162(.Catalyst.Protocol."
  "Rpc.Node.ResponseCode\"\036\n\rSendToRequest\022\r"
  "\n\005query\030\001 \001(\010\"\037\n\016SendToResponse\022\r\n\005query"
  "\030\001 \001(\t\"\"\n\021SendToFromRequest\022\r\n\005query\030\001 \001"
  "(\010\"#\n\022SendToFromResponse\022\r\n\005query\030\001 \001(\t\""
  " \n\017SendManyRequest\022\r\n\005query\030\001 \001(\010\"!\n\020Sen"
  "dManyResponse\022\r\n\005query\030\001 \001(\t\"$\n\023SendFrom"
  "ManyRequest\022\r\n\005query\030\001 \001(\010\"%\n\024SendFromMa"
  "nyResponse\022\r\n\005query\030\001 \001(\t\"\037\n\016AddNodeRequ"
  "est\022\r\n\005query\030\001 \001(\010\" \n\017AddNodeResponse\022\r\n"
  "\005query\030\001 \001(\t\"\024\n\022GetPeerListRequest\"D\n\023Ge"
  "tPeerListResponse\022-\n\005peers\030\001 \003(\0132\036.Catal"
  "yst.Protocol.Peer.PeerId\":\n\030GetPeerReput"
  "ationRequest\022\022\n\npublic_key\030\001 \001(\014\022\n\n\002ip\030\002"
  " \001(\014\"/\n\031GetPeerReputationResponse\022\022\n\nrep"
  "utation\030\001 \001(\005\"L\n\027SetPeerBlackListRequest"
  "\022\022\n\npublic_key\030\001 \001(\014\022\n\n\002ip\030\002 \001(\014\022\021\n\tblac"
  "klist\030\003 \001(\010\"M\n\030SetPeerBlackListResponse\022"
  "\022\n\npublic_key\030\001 \001(\014\022\n\n\002ip\030\002 \001(\014\022\021\n\tblack"
  "list\030\003 \001(\010\"4\n\022GetPeerInfoRequest\022\022\n\npubl"
  "ic_key\030\001 \001(\014\022\n\n\002ip\030\002 \001(\014\"J\n\023GetPeerInfoR"
  "esponse\0223\n\tpeer_info\030\001 \003(\0132 .Catalyst.Pr"
  "otocol.Peer.PeerInfo\"*\n\031GetConnectionCou"
  "ntRequest\022\r\n\005query\030\001 \001(\010\"+\n\032GetConnectio"
  "nCountResponse\022\r\n\005query\030\001 \001(\t\")\n\017GetDelt"
  "aRequest\022\026\n\016delta_dfs_hash\030\001 \001(\014\"B\n\020GetD"
  "eltaResponse\022.\n\005delta\030\001 \001(\0132\037.Catalyst.P"
  "rotocol.Deltas.Delta\"\"\n\021GetMempoolReques"
  "t\022\r\n\005query\030\001 \001(\010\"V\n\022GetMempoolResponse\022@"
  "\n\014transactions\030\001 \003(\0132*.Catalyst.Protocol"
  ".Transaction.PublicEntry\"~\n\022SignMessageR"
  "equest\022\017\n\007message\030\001 \001(\014\022\016\n\006key_id\030\002 \001(\t\022"
  "G\n\017signing_context\030\003 \001(\0132..Catalyst.Prot"
  "ocol.Cryptography.SigningContext\"V\n\023Sign"
  "MessageResponse\022\021\n\tsignature\030\001 \001(\014\022\022\n\npu"
  "blic_key\030\002 \001(\014\022\030\n\020original_message\030\003 \001(\014"
  "\"\227\001\n\024VerifyMessageRequest\022\021\n\tsignature\030\001"
  " \001(\014\022\022\n\npublic_key\030\002 \001(\014\022\017\n\007message\030\003 \001("
  "\014\022G\n\017signing_context\030\004 \001(\0132..Catalyst.Pr"
  "otocol.Cryptography.SigningContext\"1\n\025Ve"
  "rifyMessageResponse\022\030\n\020is_signed_by_key\030"
  "\001 \001(\010\"%\n\024ServiceStatusRequest\022\r\n\005query\030\001"
  " \001(\010\"&\n\025ServiceStatusResponse\022\r\n\005query\030\001"
  " \001(\t\"I\n\023AddFileToDfsRequest\022\021\n\tfile_size"
  "\030\001 \001(\004\022\021\n\tfile_name\030\002 \001(\t\022\014\n\004node\030\003 \001(\t\""
  "\?\n\024AddFileToDfsResponse\022\025\n\rresponse_code"
  "\030\001 \001(\014\022\020\n\010dfs_hash\030\002 \001(\t\"`\n\030TransferFile"
  "BytesRequest\022\020\n\010chunk_id\030\001 \001(\r\022\023\n\013chunk_"
  "bytes\030\002 \001(\014\022\035\n\025correlation_file_name\030\003 \001"
  "(\014\"2\n\031TransferFileBytesResponse\022\025\n\rrespo"
  "nse_code\030\001 \001(\014\"8\n\021RemovePeerRequest\022\017\n\007p"
  "eer_ip\030\001 \001(\014\022\022\n\npublic_key\030\002 \001(\014\"+\n\022Remo"
  "vePeerResponse\022\025\n\rdeleted_count\030\001 \001(\r\"\025\n"
  "\023GetPeerCountRequest\"*\n\024GetPeerCountResp"
  "onse\022\022\n\npeer_count\030\001 \001(\005\")\n\025GetFileFromD"
  "fsRequest\022\020\n\010dfs_hash\030\001 \001(\t\"B\n\026GetFileFr"
  "omDfsResponse\022\021\n\tfile_size\030\001 \001(\004\022\025\n\rresp"
  "onse_code\030\002 \001(\014\"/\n\030SetPeerDataFolderRequ"
  "est\022\023\n\013data_folder\030\001 \001(\t\"*\n\031SetPeerDataF"
  "olderResponse\022\r\n\005query\030\001 \001(\010*i\n\014Response"
  "Code\022\013\n\007PENDING\020\000\022\016\n\nSUCCESSFUL\020\001\022\t\n\005ERR"
  "OR\020\002\022\014\n\010FINISHED\020\003\022\013\n\007EXPIRED\020\004\022\n\n\006FAILE"
  "D\020\005\022\n\n\006EXISTS\020\006B\002P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Rpc_2eproto_deps[5] = {
  &::descriptor_table_Cryptography_2eproto,
  &::descriptor_table_Deltas_2eproto,
  &::descriptor_table_Peer_2eproto,
  &::descriptor_table_Transaction_2eproto,
  &::descriptor_table_Wire_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Rpc_2eproto_sccs[68] = {
  &scc_info_AddFileToDfsRequest_Rpc_2eproto.base,
  &scc_info_AddFileToDfsResponse_Rpc_2eproto.base,
  &scc_info_AddNodeRequest_Rpc_2eproto.base,
  &scc_info_AddNodeResponse_Rpc_2eproto.base,
  &scc_info_BroadcastRawTransactionRequest_Rpc_2eproto.base,
  &scc_info_BroadcastRawTransactionResponse_Rpc_2eproto.base,
  &scc_info_CreateAddressRequest_Rpc_2eproto.base,
  &scc_info_CreateAddressResponse_Rpc_2eproto.base,
  &scc_info_CreateRawTransactionRequest_Rpc_2eproto.base,
  &scc_info_CreateRawTransactionResponse_Rpc_2eproto.base,
  &scc_info_CreateWalletRequest_Rpc_2eproto.base,
  &scc_info_CreateWalletResponse_Rpc_2eproto.base,
  &scc_info_DecodeRawTransactionRequest_Rpc_2eproto.base,
  &scc_info_DecodeRawTransactionResponse_Rpc_2eproto.base,
  &scc_info_GetAddressRequest_Rpc_2eproto.base,
  &scc_info_GetAddressResponse_Rpc_2eproto.base,
  &scc_info_GetBalanceRequest_Rpc_2eproto.base,
  &scc_info_GetBalanceResponse_Rpc_2eproto.base,
  &scc_info_GetConnectionCountRequest_Rpc_2eproto.base,
  &scc_info_GetConnectionCountResponse_Rpc_2eproto.base,
  &scc_info_GetDeltaRequest_Rpc_2eproto.base,
  &scc_info_GetDeltaResponse_Rpc_2eproto.base,
  &scc_info_GetFileFromDfsRequest_Rpc_2eproto.base,
  &scc_info_GetFileFromDfsResponse_Rpc_2eproto.base,
  &scc_info_GetInfoRequest_Rpc_2eproto.base,
  &scc_info_GetInfoResponse_Rpc_2eproto.base,
  &scc_info_GetMempoolRequest_Rpc_2eproto.base,
  &scc_info_GetMempoolResponse_Rpc_2eproto.base,
  &scc_info_GetPeerCountRequest_Rpc_2eproto.base,
  &scc_info_GetPeerCountResponse_Rpc_2eproto.base,
  &scc_info_GetPeerInfoRequest_Rpc_2eproto.base,
  &scc_info_GetPeerInfoResponse_Rpc_2eproto.base,
  &scc_info_GetPeerListRequest_Rpc_2eproto.base,
  &scc_info_GetPeerListResponse_Rpc_2eproto.base,
  &scc_info_GetPeerReputationRequest_Rpc_2eproto.base,
  &scc_info_GetPeerReputationResponse_Rpc_2eproto.base,
  &scc_info_ListAddressRequest_Rpc_2eproto.base,
  &scc_info_ListAddressResponse_Rpc_2eproto.base,
  &scc_info_ListWalletRequest_Rpc_2eproto.base,
  &scc_info_ListWalletResponse_Rpc_2eproto.base,
  &scc_info_RemovePeerRequest_Rpc_2eproto.base,
  &scc_info_RemovePeerResponse_Rpc_2eproto.base,
  &scc_info_SendFromManyRequest_Rpc_2eproto.base,
  &scc_info_SendFromManyResponse_Rpc_2eproto.base,
  &scc_info_SendManyRequest_Rpc_2eproto.base,
  &scc_info_SendManyResponse_Rpc_2eproto.base,
  &scc_info_SendToFromRequest_Rpc_2eproto.base,
  &scc_info_SendToFromResponse_Rpc_2eproto.base,
  &scc_info_SendToRequest_Rpc_2eproto.base,
  &scc_info_SendToResponse_Rpc_2eproto.base,
  &scc_info_ServiceStatusRequest_Rpc_2eproto.base,
  &scc_info_ServiceStatusResponse_Rpc_2eproto.base,
  &scc_info_SetPeerBlackListRequest_Rpc_2eproto.base,
  &scc_info_SetPeerBlackListResponse_Rpc_2eproto.base,
  &scc_info_SetPeerDataFolderRequest_Rpc_2eproto.base,
  &scc_info_SetPeerDataFolderResponse_Rpc_2eproto.base,
  &scc_info_SignMessageRequest_Rpc_2eproto.base,
  &scc_info_SignMessageResponse_Rpc_2eproto.base,
  &scc_info_SignRawTransactionRequest_Rpc_2eproto.base,
  &scc_info_SignRawTransactionResponse_Rpc_2eproto.base,
  &scc_info_TransferFileBytesRequest_Rpc_2eproto.base,
  &scc_info_TransferFileBytesResponse_Rpc_2eproto.base,
  &scc_info_ValidateAddressRequest_Rpc_2eproto.base,
  &scc_info_ValidateAddressResponse_Rpc_2eproto.base,
  &scc_info_VerifyMessageRequest_Rpc_2eproto.base,
  &scc_info_VerifyMessageResponse_Rpc_2eproto.base,
  &scc_info_VersionRequest_Rpc_2eproto.base,
  &scc_info_VersionResponse_Rpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Rpc_2eproto_once;
static bool descriptor_table_Rpc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Rpc_2eproto = {
  &descriptor_table_Rpc_2eproto_initialized, descriptor_table_protodef_Rpc_2eproto, "Rpc.proto", 3707,
  &descriptor_table_Rpc_2eproto_once, descriptor_table_Rpc_2eproto_sccs, descriptor_table_Rpc_2eproto_deps, 68, 5,
  schemas, file_default_instances, TableStruct_Rpc_2eproto::offsets,
  file_level_metadata_Rpc_2eproto, 68, file_level_enum_descriptors_Rpc_2eproto, file_level_service_descriptors_Rpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Rpc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Rpc_2eproto), true);
namespace Catalyst {
namespace Protocol {
namespace Rpc {
namespace Node {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Rpc_2eproto);
  return file_level_enum_descriptors_Rpc_2eproto[0];
}
bool ResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VersionRequest::InitAsDefaultInstance() {
}
class VersionRequest::_Internal {
 public:
};

VersionRequest::VersionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.VersionRequest)
}
VersionRequest::VersionRequest(const VersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.VersionRequest)
}

void VersionRequest::SharedCtor() {
  query_ = false;
}

VersionRequest::~VersionRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.VersionRequest)
  SharedDtor();
}

void VersionRequest::SharedDtor() {
}

void VersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionRequest& VersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void VersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* VersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.VersionRequest)
  return target;
}

size_t VersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.VersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.VersionRequest)
    MergeFrom(*source);
  }
}

void VersionRequest::MergeFrom(const VersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void VersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionRequest::CopyFrom(const VersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.VersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionRequest::IsInitialized() const {
  return true;
}

void VersionRequest::InternalSwap(VersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VersionResponse::InitAsDefaultInstance() {
}
class VersionResponse::_Internal {
 public:
};

VersionResponse::VersionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.VersionResponse)
}
VersionResponse::VersionResponse(const VersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.VersionResponse)
}

void VersionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VersionResponse_Rpc_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VersionResponse::~VersionResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.VersionResponse)
  SharedDtor();
}

void VersionResponse::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionResponse& VersionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void VersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* VersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.VersionResponse.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.VersionResponse.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.VersionResponse)
  return target;
}

size_t VersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.VersionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.VersionResponse)
    MergeFrom(*source);
  }
}

void VersionResponse::MergeFrom(const VersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void VersionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionResponse::CopyFrom(const VersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.VersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionResponse::IsInitialized() const {
  return true;
}

void VersionResponse::InternalSwap(VersionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInfoRequest::InitAsDefaultInstance() {
}
class GetInfoRequest::_Internal {
 public:
};

GetInfoRequest::GetInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
}
GetInfoRequest::GetInfoRequest(const GetInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
}

void GetInfoRequest::SharedCtor() {
  query_ = false;
}

GetInfoRequest::~GetInfoRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  SharedDtor();
}

void GetInfoRequest::SharedDtor() {
}

void GetInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInfoRequest& GetInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInfoRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* GetInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  return target;
}

size_t GetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
    MergeFrom(*source);
  }
}

void GetInfoRequest::MergeFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void GetInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoRequest::CopyFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoRequest::IsInitialized() const {
  return true;
}

void GetInfoRequest::InternalSwap(GetInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInfoResponse::InitAsDefaultInstance() {
}
class GetInfoResponse::_Internal {
 public:
};

GetInfoResponse::GetInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
}
GetInfoResponse::GetInfoResponse(const GetInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
}

void GetInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInfoResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetInfoResponse::~GetInfoResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  SharedDtor();
}

void GetInfoResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInfoResponse& GetInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInfoResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.GetInfoResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetInfoResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  return target;
}

size_t GetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
    MergeFrom(*source);
  }
}

void GetInfoResponse::MergeFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void GetInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResponse::CopyFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResponse::IsInitialized() const {
  return true;
}

void GetInfoResponse::InternalSwap(GetInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateWalletRequest::InitAsDefaultInstance() {
}
class CreateWalletRequest::_Internal {
 public:
};

CreateWalletRequest::CreateWalletRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
}
CreateWalletRequest::CreateWalletRequest(const CreateWalletRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
}

void CreateWalletRequest::SharedCtor() {
  query_ = false;
}

CreateWalletRequest::~CreateWalletRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  SharedDtor();
}

void CreateWalletRequest::SharedDtor() {
}

void CreateWalletRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWalletRequest& CreateWalletRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateWalletRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void CreateWalletRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* CreateWalletRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateWalletRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  return target;
}

size_t CreateWalletRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWalletRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWalletRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateWalletRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
    MergeFrom(*source);
  }
}

void CreateWalletRequest::MergeFrom(const CreateWalletRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void CreateWalletRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWalletRequest::CopyFrom(const CreateWalletRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWalletRequest::IsInitialized() const {
  return true;
}

void CreateWalletRequest::InternalSwap(CreateWalletRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateWalletRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateWalletResponse::InitAsDefaultInstance() {
}
class CreateWalletResponse::_Internal {
 public:
};

CreateWalletResponse::CreateWalletResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
}
CreateWalletResponse::CreateWalletResponse(const CreateWalletResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
}

void CreateWalletResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateWalletResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateWalletResponse::~CreateWalletResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  SharedDtor();
}

void CreateWalletResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateWalletResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWalletResponse& CreateWalletResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateWalletResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void CreateWalletResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateWalletResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateWalletResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  return target;
}

size_t CreateWalletResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWalletResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWalletResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateWalletResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
    MergeFrom(*source);
  }
}

void CreateWalletResponse::MergeFrom(const CreateWalletResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void CreateWalletResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWalletResponse::CopyFrom(const CreateWalletResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWalletResponse::IsInitialized() const {
  return true;
}

void CreateWalletResponse::InternalSwap(CreateWalletResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateWalletResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListWalletRequest::InitAsDefaultInstance() {
}
class ListWalletRequest::_Internal {
 public:
};

ListWalletRequest::ListWalletRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
}
ListWalletRequest::ListWalletRequest(const ListWalletRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
}

void ListWalletRequest::SharedCtor() {
  query_ = false;
}

ListWalletRequest::~ListWalletRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  SharedDtor();
}

void ListWalletRequest::SharedDtor() {
}

void ListWalletRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListWalletRequest& ListWalletRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListWalletRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void ListWalletRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* ListWalletRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListWalletRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  return target;
}

size_t ListWalletRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListWalletRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListWalletRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListWalletRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
    MergeFrom(*source);
  }
}

void ListWalletRequest::MergeFrom(const ListWalletRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void ListWalletRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListWalletRequest::CopyFrom(const ListWalletRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWalletRequest::IsInitialized() const {
  return true;
}

void ListWalletRequest::InternalSwap(ListWalletRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWalletRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListWalletResponse::InitAsDefaultInstance() {
}
class ListWalletResponse::_Internal {
 public:
};

ListWalletResponse::ListWalletResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
}
ListWalletResponse::ListWalletResponse(const ListWalletResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
}

void ListWalletResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListWalletResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListWalletResponse::~ListWalletResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  SharedDtor();
}

void ListWalletResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListWalletResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListWalletResponse& ListWalletResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListWalletResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void ListWalletResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListWalletResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.ListWalletResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListWalletResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ListWalletResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  return target;
}

size_t ListWalletResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListWalletResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListWalletResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListWalletResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
    MergeFrom(*source);
  }
}

void ListWalletResponse::MergeFrom(const ListWalletResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ListWalletResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListWalletResponse::CopyFrom(const ListWalletResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWalletResponse::IsInitialized() const {
  return true;
}

void ListWalletResponse::InternalSwap(ListWalletResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWalletResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAddressRequest::InitAsDefaultInstance() {
}
class CreateAddressRequest::_Internal {
 public:
};

CreateAddressRequest::CreateAddressRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
}
CreateAddressRequest::CreateAddressRequest(const CreateAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
}

void CreateAddressRequest::SharedCtor() {
  query_ = false;
}

CreateAddressRequest::~CreateAddressRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  SharedDtor();
}

void CreateAddressRequest::SharedDtor() {
}

void CreateAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAddressRequest& CreateAddressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAddressRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void CreateAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* CreateAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAddressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  return target;
}

size_t CreateAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAddressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAddressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
    MergeFrom(*source);
  }
}

void CreateAddressRequest::MergeFrom(const CreateAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void CreateAddressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAddressRequest::CopyFrom(const CreateAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAddressRequest::IsInitialized() const {
  return true;
}

void CreateAddressRequest::InternalSwap(CreateAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAddressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAddressResponse::InitAsDefaultInstance() {
}
class CreateAddressResponse::_Internal {
 public:
};

CreateAddressResponse::CreateAddressResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
}
CreateAddressResponse::CreateAddressResponse(const CreateAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
}

void CreateAddressResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAddressResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateAddressResponse::~CreateAddressResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  SharedDtor();
}

void CreateAddressResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAddressResponse& CreateAddressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAddressResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void CreateAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAddressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  return target;
}

size_t CreateAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAddressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAddressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAddressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
    MergeFrom(*source);
  }
}

void CreateAddressResponse::MergeFrom(const CreateAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void CreateAddressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAddressResponse::CopyFrom(const CreateAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAddressResponse::IsInitialized() const {
  return true;
}

void CreateAddressResponse::InternalSwap(CreateAddressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAddressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAddressRequest::InitAsDefaultInstance() {
}
class GetAddressRequest::_Internal {
 public:
};

GetAddressRequest::GetAddressRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
}
GetAddressRequest::GetAddressRequest(const GetAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
}

void GetAddressRequest::SharedCtor() {
  query_ = false;
}

GetAddressRequest::~GetAddressRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  SharedDtor();
}

void GetAddressRequest::SharedDtor() {
}

void GetAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAddressRequest& GetAddressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAddressRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* GetAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAddressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  return target;
}

size_t GetAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAddressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
    MergeFrom(*source);
  }
}

void GetAddressRequest::MergeFrom(const GetAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void GetAddressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddressRequest::CopyFrom(const GetAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressRequest::IsInitialized() const {
  return true;
}

void GetAddressRequest::InternalSwap(GetAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAddressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAddressResponse::InitAsDefaultInstance() {
}
class GetAddressResponse::_Internal {
 public:
};

GetAddressResponse::GetAddressResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
}
GetAddressResponse::GetAddressResponse(const GetAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
}

void GetAddressResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAddressResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAddressResponse::~GetAddressResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  SharedDtor();
}

void GetAddressResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAddressResponse& GetAddressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAddressResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.GetAddressResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAddressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetAddressResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  return target;
}

size_t GetAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAddressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAddressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
    MergeFrom(*source);
  }
}

void GetAddressResponse::MergeFrom(const GetAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void GetAddressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddressResponse::CopyFrom(const GetAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressResponse::IsInitialized() const {
  return true;
}

void GetAddressResponse::InternalSwap(GetAddressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAddressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAddressRequest::InitAsDefaultInstance() {
}
class ListAddressRequest::_Internal {
 public:
};

ListAddressRequest::ListAddressRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
}
ListAddressRequest::ListAddressRequest(const ListAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
}

void ListAddressRequest::SharedCtor() {
  query_ = false;
}

ListAddressRequest::~ListAddressRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  SharedDtor();
}

void ListAddressRequest::SharedDtor() {
}

void ListAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAddressRequest& ListAddressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAddressRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void ListAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* ListAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAddressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  return target;
}

size_t ListAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAddressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAddressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
    MergeFrom(*source);
  }
}

void ListAddressRequest::MergeFrom(const ListAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void ListAddressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAddressRequest::CopyFrom(const ListAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAddressRequest::IsInitialized() const {
  return true;
}

void ListAddressRequest::InternalSwap(ListAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAddressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAddressResponse::InitAsDefaultInstance() {
}
class ListAddressResponse::_Internal {
 public:
};

ListAddressResponse::ListAddressResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
}
ListAddressResponse::ListAddressResponse(const ListAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
}

void ListAddressResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAddressResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListAddressResponse::~ListAddressResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  SharedDtor();
}

void ListAddressResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAddressResponse& ListAddressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAddressResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void ListAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.ListAddressResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAddressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ListAddressResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  return target;
}

size_t ListAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAddressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAddressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAddressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
    MergeFrom(*source);
  }
}

void ListAddressResponse::MergeFrom(const ListAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ListAddressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAddressResponse::CopyFrom(const ListAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAddressResponse::IsInitialized() const {
  return true;
}

void ListAddressResponse::InternalSwap(ListAddressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAddressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidateAddressRequest::InitAsDefaultInstance() {
}
class ValidateAddressRequest::_Internal {
 public:
};

ValidateAddressRequest::ValidateAddressRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
}
ValidateAddressRequest::ValidateAddressRequest(const ValidateAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
}

void ValidateAddressRequest::SharedCtor() {
  query_ = false;
}

ValidateAddressRequest::~ValidateAddressRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  SharedDtor();
}

void ValidateAddressRequest::SharedDtor() {
}

void ValidateAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateAddressRequest& ValidateAddressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateAddressRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void ValidateAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* ValidateAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateAddressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  return target;
}

size_t ValidateAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateAddressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateAddressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
    MergeFrom(*source);
  }
}

void ValidateAddressRequest::MergeFrom(const ValidateAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void ValidateAddressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateAddressRequest::CopyFrom(const ValidateAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateAddressRequest::IsInitialized() const {
  return true;
}

void ValidateAddressRequest::InternalSwap(ValidateAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateAddressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidateAddressResponse::InitAsDefaultInstance() {
}
class ValidateAddressResponse::_Internal {
 public:
};

ValidateAddressResponse::ValidateAddressResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
}
ValidateAddressResponse::ValidateAddressResponse(const ValidateAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
}

void ValidateAddressResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidateAddressResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ValidateAddressResponse::~ValidateAddressResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  SharedDtor();
}

void ValidateAddressResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidateAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidateAddressResponse& ValidateAddressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidateAddressResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void ValidateAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ValidateAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateAddressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  return target;
}

size_t ValidateAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidateAddressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidateAddressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidateAddressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
    MergeFrom(*source);
  }
}

void ValidateAddressResponse::MergeFrom(const ValidateAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ValidateAddressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidateAddressResponse::CopyFrom(const ValidateAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateAddressResponse::IsInitialized() const {
  return true;
}

void ValidateAddressResponse::InternalSwap(ValidateAddressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateAddressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBalanceRequest::InitAsDefaultInstance() {
}
class GetBalanceRequest::_Internal {
 public:
};

GetBalanceRequest::GetBalanceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
}
GetBalanceRequest::GetBalanceRequest(const GetBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
}

void GetBalanceRequest::SharedCtor() {
  query_ = false;
}

GetBalanceRequest::~GetBalanceRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  SharedDtor();
}

void GetBalanceRequest::SharedDtor() {
}

void GetBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalanceRequest& GetBalanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBalanceRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* GetBalanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBalanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  return target;
}

size_t GetBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
    MergeFrom(*source);
  }
}

void GetBalanceRequest::MergeFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void GetBalanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceRequest::CopyFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceRequest::IsInitialized() const {
  return true;
}

void GetBalanceRequest::InternalSwap(GetBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBalanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBalanceResponse::InitAsDefaultInstance() {
}
class GetBalanceResponse::_Internal {
 public:
};

GetBalanceResponse::GetBalanceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
}
GetBalanceResponse::GetBalanceResponse(const GetBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
}

void GetBalanceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBalanceResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBalanceResponse::~GetBalanceResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  SharedDtor();
}

void GetBalanceResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalanceResponse& GetBalanceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBalanceResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetBalanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBalanceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  return target;
}

size_t GetBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalanceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalanceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBalanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
    MergeFrom(*source);
  }
}

void GetBalanceResponse::MergeFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void GetBalanceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceResponse::CopyFrom(const GetBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceResponse::IsInitialized() const {
  return true;
}

void GetBalanceResponse::InternalSwap(GetBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBalanceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateRawTransactionRequest::InitAsDefaultInstance() {
}
class CreateRawTransactionRequest::_Internal {
 public:
};

CreateRawTransactionRequest::CreateRawTransactionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
}
CreateRawTransactionRequest::CreateRawTransactionRequest(const CreateRawTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
}

void CreateRawTransactionRequest::SharedCtor() {
  query_ = false;
}

CreateRawTransactionRequest::~CreateRawTransactionRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  SharedDtor();
}

void CreateRawTransactionRequest::SharedDtor() {
}

void CreateRawTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRawTransactionRequest& CreateRawTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRawTransactionRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void CreateRawTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* CreateRawTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRawTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  return target;
}

size_t CreateRawTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRawTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRawTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRawTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
    MergeFrom(*source);
  }
}

void CreateRawTransactionRequest::MergeFrom(const CreateRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void CreateRawTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRawTransactionRequest::CopyFrom(const CreateRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRawTransactionRequest::IsInitialized() const {
  return true;
}

void CreateRawTransactionRequest::InternalSwap(CreateRawTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRawTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateRawTransactionResponse::InitAsDefaultInstance() {
}
class CreateRawTransactionResponse::_Internal {
 public:
};

CreateRawTransactionResponse::CreateRawTransactionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
}
CreateRawTransactionResponse::CreateRawTransactionResponse(const CreateRawTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
}

void CreateRawTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateRawTransactionResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateRawTransactionResponse::~CreateRawTransactionResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  SharedDtor();
}

void CreateRawTransactionResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRawTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRawTransactionResponse& CreateRawTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRawTransactionResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void CreateRawTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CreateRawTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRawTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  return target;
}

size_t CreateRawTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRawTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRawTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateRawTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
    MergeFrom(*source);
  }
}

void CreateRawTransactionResponse::MergeFrom(const CreateRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void CreateRawTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRawTransactionResponse::CopyFrom(const CreateRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRawTransactionResponse::IsInitialized() const {
  return true;
}

void CreateRawTransactionResponse::InternalSwap(CreateRawTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRawTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignRawTransactionRequest::InitAsDefaultInstance() {
}
class SignRawTransactionRequest::_Internal {
 public:
};

SignRawTransactionRequest::SignRawTransactionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
}
SignRawTransactionRequest::SignRawTransactionRequest(const SignRawTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
}

void SignRawTransactionRequest::SharedCtor() {
  query_ = false;
}

SignRawTransactionRequest::~SignRawTransactionRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  SharedDtor();
}

void SignRawTransactionRequest::SharedDtor() {
}

void SignRawTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignRawTransactionRequest& SignRawTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignRawTransactionRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SignRawTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* SignRawTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignRawTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  return target;
}

size_t SignRawTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignRawTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignRawTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignRawTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
    MergeFrom(*source);
  }
}

void SignRawTransactionRequest::MergeFrom(const SignRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void SignRawTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignRawTransactionRequest::CopyFrom(const SignRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRawTransactionRequest::IsInitialized() const {
  return true;
}

void SignRawTransactionRequest::InternalSwap(SignRawTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignRawTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignRawTransactionResponse::InitAsDefaultInstance() {
}
class SignRawTransactionResponse::_Internal {
 public:
};

SignRawTransactionResponse::SignRawTransactionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
}
SignRawTransactionResponse::SignRawTransactionResponse(const SignRawTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
}

void SignRawTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignRawTransactionResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SignRawTransactionResponse::~SignRawTransactionResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  SharedDtor();
}

void SignRawTransactionResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignRawTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignRawTransactionResponse& SignRawTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignRawTransactionResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SignRawTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SignRawTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignRawTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  return target;
}

size_t SignRawTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignRawTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SignRawTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignRawTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
    MergeFrom(*source);
  }
}

void SignRawTransactionResponse::MergeFrom(const SignRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SignRawTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignRawTransactionResponse::CopyFrom(const SignRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRawTransactionResponse::IsInitialized() const {
  return true;
}

void SignRawTransactionResponse::InternalSwap(SignRawTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignRawTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecodeRawTransactionRequest::InitAsDefaultInstance() {
}
class DecodeRawTransactionRequest::_Internal {
 public:
};

DecodeRawTransactionRequest::DecodeRawTransactionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
}
DecodeRawTransactionRequest::DecodeRawTransactionRequest(const DecodeRawTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
}

void DecodeRawTransactionRequest::SharedCtor() {
  query_ = false;
}

DecodeRawTransactionRequest::~DecodeRawTransactionRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  SharedDtor();
}

void DecodeRawTransactionRequest::SharedDtor() {
}

void DecodeRawTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecodeRawTransactionRequest& DecodeRawTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecodeRawTransactionRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void DecodeRawTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* DecodeRawTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecodeRawTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  return target;
}

size_t DecodeRawTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecodeRawTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DecodeRawTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecodeRawTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
    MergeFrom(*source);
  }
}

void DecodeRawTransactionRequest::MergeFrom(const DecodeRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void DecodeRawTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecodeRawTransactionRequest::CopyFrom(const DecodeRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecodeRawTransactionRequest::IsInitialized() const {
  return true;
}

void DecodeRawTransactionRequest::InternalSwap(DecodeRawTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecodeRawTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecodeRawTransactionResponse::InitAsDefaultInstance() {
}
class DecodeRawTransactionResponse::_Internal {
 public:
};

DecodeRawTransactionResponse::DecodeRawTransactionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
}
DecodeRawTransactionResponse::DecodeRawTransactionResponse(const DecodeRawTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
}

void DecodeRawTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecodeRawTransactionResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DecodeRawTransactionResponse::~DecodeRawTransactionResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  SharedDtor();
}

void DecodeRawTransactionResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecodeRawTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecodeRawTransactionResponse& DecodeRawTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecodeRawTransactionResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void DecodeRawTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DecodeRawTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecodeRawTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  return target;
}

size_t DecodeRawTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecodeRawTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DecodeRawTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecodeRawTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
    MergeFrom(*source);
  }
}

void DecodeRawTransactionResponse::MergeFrom(const DecodeRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void DecodeRawTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecodeRawTransactionResponse::CopyFrom(const DecodeRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecodeRawTransactionResponse::IsInitialized() const {
  return true;
}

void DecodeRawTransactionResponse::InternalSwap(DecodeRawTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DecodeRawTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastRawTransactionRequest::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Rpc::Node::_BroadcastRawTransactionRequest_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::Catalyst::Protocol::Wire::TransactionBroadcast*>(
      ::Catalyst::Protocol::Wire::TransactionBroadcast::internal_default_instance());
}
class BroadcastRawTransactionRequest::_Internal {
 public:
  static const ::Catalyst::Protocol::Wire::TransactionBroadcast& transaction(const BroadcastRawTransactionRequest* msg);
};

const ::Catalyst::Protocol::Wire::TransactionBroadcast&
BroadcastRawTransactionRequest::_Internal::transaction(const BroadcastRawTransactionRequest* msg) {
  return *msg->transaction_;
}
void BroadcastRawTransactionRequest::clear_transaction() {
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
BroadcastRawTransactionRequest::BroadcastRawTransactionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
}
BroadcastRawTransactionRequest::BroadcastRawTransactionRequest(const BroadcastRawTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::Catalyst::Protocol::Wire::TransactionBroadcast(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
}

void BroadcastRawTransactionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastRawTransactionRequest_Rpc_2eproto.base);
  transaction_ = nullptr;
}

BroadcastRawTransactionRequest::~BroadcastRawTransactionRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  SharedDtor();
}

void BroadcastRawTransactionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete transaction_;
}

void BroadcastRawTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastRawTransactionRequest& BroadcastRawTransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastRawTransactionRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void BroadcastRawTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear();
}

const char* BroadcastRawTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastRawTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  return target;
}

size_t BroadcastRawTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Catalyst.Protocol.Wire.TransactionBroadcast transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastRawTransactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastRawTransactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastRawTransactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
    MergeFrom(*source);
  }
}

void BroadcastRawTransactionRequest::MergeFrom(const BroadcastRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction()) {
    _internal_mutable_transaction()->::Catalyst::Protocol::Wire::TransactionBroadcast::MergeFrom(from._internal_transaction());
  }
}

void BroadcastRawTransactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRawTransactionRequest::CopyFrom(const BroadcastRawTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRawTransactionRequest::IsInitialized() const {
  return true;
}

void BroadcastRawTransactionRequest::InternalSwap(BroadcastRawTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRawTransactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadcastRawTransactionResponse::InitAsDefaultInstance() {
}
class BroadcastRawTransactionResponse::_Internal {
 public:
};

BroadcastRawTransactionResponse::BroadcastRawTransactionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
}
BroadcastRawTransactionResponse::BroadcastRawTransactionResponse(const BroadcastRawTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_code_ = from.response_code_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
}

void BroadcastRawTransactionResponse::SharedCtor() {
  response_code_ = 0;
}

BroadcastRawTransactionResponse::~BroadcastRawTransactionResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  SharedDtor();
}

void BroadcastRawTransactionResponse::SharedDtor() {
}

void BroadcastRawTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastRawTransactionResponse& BroadcastRawTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastRawTransactionResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void BroadcastRawTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_code_ = 0;
  _internal_metadata_.Clear();
}

const char* BroadcastRawTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_response_code(static_cast<::Catalyst::Protocol::Rpc::Node::ResponseCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastRawTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
  if (this->response_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  return target;
}

size_t BroadcastRawTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Catalyst.Protocol.Rpc.Node.ResponseCode response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastRawTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastRawTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadcastRawTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
    MergeFrom(*source);
  }
}

void BroadcastRawTransactionResponse::MergeFrom(const BroadcastRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_code() != 0) {
    _internal_set_response_code(from._internal_response_code());
  }
}

void BroadcastRawTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastRawTransactionResponse::CopyFrom(const BroadcastRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastRawTransactionResponse::IsInitialized() const {
  return true;
}

void BroadcastRawTransactionResponse::InternalSwap(BroadcastRawTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(response_code_, other->response_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastRawTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendToRequest::InitAsDefaultInstance() {
}
class SendToRequest::_Internal {
 public:
};

SendToRequest::SendToRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendToRequest)
}
SendToRequest::SendToRequest(const SendToRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendToRequest)
}

void SendToRequest::SharedCtor() {
  query_ = false;
}

SendToRequest::~SendToRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendToRequest)
  SharedDtor();
}

void SendToRequest::SharedDtor() {
}

void SendToRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendToRequest& SendToRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendToRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SendToRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* SendToRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendToRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendToRequest)
  return target;
}

size_t SendToRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendToRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendToRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendToRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendToRequest)
    MergeFrom(*source);
  }
}

void SendToRequest::MergeFrom(const SendToRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void SendToRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToRequest::CopyFrom(const SendToRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToRequest::IsInitialized() const {
  return true;
}

void SendToRequest::InternalSwap(SendToRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendToRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendToResponse::InitAsDefaultInstance() {
}
class SendToResponse::_Internal {
 public:
};

SendToResponse::SendToResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendToResponse)
}
SendToResponse::SendToResponse(const SendToResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendToResponse)
}

void SendToResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendToResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendToResponse::~SendToResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendToResponse)
  SharedDtor();
}

void SendToResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendToResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendToResponse& SendToResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendToResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SendToResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SendToResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.SendToResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendToResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendToResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendToResponse)
  return target;
}

size_t SendToResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendToResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendToResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendToResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendToResponse)
    MergeFrom(*source);
  }
}

void SendToResponse::MergeFrom(const SendToResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SendToResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToResponse::CopyFrom(const SendToResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToResponse::IsInitialized() const {
  return true;
}

void SendToResponse::InternalSwap(SendToResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendToResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendToFromRequest::InitAsDefaultInstance() {
}
class SendToFromRequest::_Internal {
 public:
};

SendToFromRequest::SendToFromRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
}
SendToFromRequest::SendToFromRequest(const SendToFromRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
}

void SendToFromRequest::SharedCtor() {
  query_ = false;
}

SendToFromRequest::~SendToFromRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  SharedDtor();
}

void SendToFromRequest::SharedDtor() {
}

void SendToFromRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendToFromRequest& SendToFromRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendToFromRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SendToFromRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* SendToFromRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendToFromRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  return target;
}

size_t SendToFromRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendToFromRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToFromRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendToFromRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
    MergeFrom(*source);
  }
}

void SendToFromRequest::MergeFrom(const SendToFromRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void SendToFromRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToFromRequest::CopyFrom(const SendToFromRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToFromRequest::IsInitialized() const {
  return true;
}

void SendToFromRequest::InternalSwap(SendToFromRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendToFromRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendToFromResponse::InitAsDefaultInstance() {
}
class SendToFromResponse::_Internal {
 public:
};

SendToFromResponse::SendToFromResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
}
SendToFromResponse::SendToFromResponse(const SendToFromResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
}

void SendToFromResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendToFromResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendToFromResponse::~SendToFromResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  SharedDtor();
}

void SendToFromResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendToFromResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendToFromResponse& SendToFromResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendToFromResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SendToFromResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SendToFromResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.SendToFromResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendToFromResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendToFromResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  return target;
}

size_t SendToFromResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendToFromResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToFromResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendToFromResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
    MergeFrom(*source);
  }
}

void SendToFromResponse::MergeFrom(const SendToFromResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SendToFromResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToFromResponse::CopyFrom(const SendToFromResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToFromResponse::IsInitialized() const {
  return true;
}

void SendToFromResponse::InternalSwap(SendToFromResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendToFromResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendManyRequest::InitAsDefaultInstance() {
}
class SendManyRequest::_Internal {
 public:
};

SendManyRequest::SendManyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendManyRequest)
}
SendManyRequest::SendManyRequest(const SendManyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendManyRequest)
}

void SendManyRequest::SharedCtor() {
  query_ = false;
}

SendManyRequest::~SendManyRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  SharedDtor();
}

void SendManyRequest::SharedDtor() {
}

void SendManyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendManyRequest& SendManyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendManyRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SendManyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* SendManyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendManyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  return target;
}

size_t SendManyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendManyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendManyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendManyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendManyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendManyRequest)
    MergeFrom(*source);
  }
}

void SendManyRequest::MergeFrom(const SendManyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void SendManyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendManyRequest::CopyFrom(const SendManyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendManyRequest::IsInitialized() const {
  return true;
}

void SendManyRequest::InternalSwap(SendManyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendManyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendManyResponse::InitAsDefaultInstance() {
}
class SendManyResponse::_Internal {
 public:
};

SendManyResponse::SendManyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendManyResponse)
}
SendManyResponse::SendManyResponse(const SendManyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendManyResponse)
}

void SendManyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendManyResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendManyResponse::~SendManyResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  SharedDtor();
}

void SendManyResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendManyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendManyResponse& SendManyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendManyResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SendManyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SendManyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.SendManyResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendManyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendManyResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  return target;
}

size_t SendManyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendManyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendManyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendManyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendManyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendManyResponse)
    MergeFrom(*source);
  }
}

void SendManyResponse::MergeFrom(const SendManyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SendManyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendManyResponse::CopyFrom(const SendManyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendManyResponse::IsInitialized() const {
  return true;
}

void SendManyResponse::InternalSwap(SendManyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendManyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendFromManyRequest::InitAsDefaultInstance() {
}
class SendFromManyRequest::_Internal {
 public:
};

SendFromManyRequest::SendFromManyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
}
SendFromManyRequest::SendFromManyRequest(const SendFromManyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
}

void SendFromManyRequest::SharedCtor() {
  query_ = false;
}

SendFromManyRequest::~SendFromManyRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  SharedDtor();
}

void SendFromManyRequest::SharedDtor() {
}

void SendFromManyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendFromManyRequest& SendFromManyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendFromManyRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SendFromManyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* SendFromManyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendFromManyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  return target;
}

size_t SendFromManyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendFromManyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendFromManyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendFromManyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
    MergeFrom(*source);
  }
}

void SendFromManyRequest::MergeFrom(const SendFromManyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void SendFromManyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFromManyRequest::CopyFrom(const SendFromManyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFromManyRequest::IsInitialized() const {
  return true;
}

void SendFromManyRequest::InternalSwap(SendFromManyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendFromManyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendFromManyResponse::InitAsDefaultInstance() {
}
class SendFromManyResponse::_Internal {
 public:
};

SendFromManyResponse::SendFromManyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
}
SendFromManyResponse::SendFromManyResponse(const SendFromManyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
}

void SendFromManyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendFromManyResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendFromManyResponse::~SendFromManyResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  SharedDtor();
}

void SendFromManyResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendFromManyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendFromManyResponse& SendFromManyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendFromManyResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SendFromManyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SendFromManyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendFromManyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  return target;
}

size_t SendFromManyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendFromManyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendFromManyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendFromManyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
    MergeFrom(*source);
  }
}

void SendFromManyResponse::MergeFrom(const SendFromManyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void SendFromManyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFromManyResponse::CopyFrom(const SendFromManyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFromManyResponse::IsInitialized() const {
  return true;
}

void SendFromManyResponse::InternalSwap(SendFromManyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendFromManyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddNodeRequest::InitAsDefaultInstance() {
}
class AddNodeRequest::_Internal {
 public:
};

AddNodeRequest::AddNodeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
}
AddNodeRequest::AddNodeRequest(const AddNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
}

void AddNodeRequest::SharedCtor() {
  query_ = false;
}

AddNodeRequest::~AddNodeRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  SharedDtor();
}

void AddNodeRequest::SharedDtor() {
}

void AddNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddNodeRequest& AddNodeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddNodeRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void AddNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* AddNodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddNodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  return target;
}

size_t AddNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddNodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddNodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
    MergeFrom(*source);
  }
}

void AddNodeRequest::MergeFrom(const AddNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void AddNodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNodeRequest::CopyFrom(const AddNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNodeRequest::IsInitialized() const {
  return true;
}

void AddNodeRequest::InternalSwap(AddNodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddNodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddNodeResponse::InitAsDefaultInstance() {
}
class AddNodeResponse::_Internal {
 public:
};

AddNodeResponse::AddNodeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
}
AddNodeResponse::AddNodeResponse(const AddNodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
}

void AddNodeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddNodeResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddNodeResponse::~AddNodeResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  SharedDtor();
}

void AddNodeResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddNodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddNodeResponse& AddNodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddNodeResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void AddNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AddNodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.AddNodeResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddNodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddNodeResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  return target;
}

size_t AddNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddNodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddNodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddNodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
    MergeFrom(*source);
  }
}

void AddNodeResponse::MergeFrom(const AddNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void AddNodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNodeResponse::CopyFrom(const AddNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNodeResponse::IsInitialized() const {
  return true;
}

void AddNodeResponse::InternalSwap(AddNodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddNodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPeerListRequest::InitAsDefaultInstance() {
}
class GetPeerListRequest::_Internal {
 public:
};

GetPeerListRequest::GetPeerListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
}
GetPeerListRequest::GetPeerListRequest(const GetPeerListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
}

void GetPeerListRequest::SharedCtor() {
}

GetPeerListRequest::~GetPeerListRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  SharedDtor();
}

void GetPeerListRequest::SharedDtor() {
}

void GetPeerListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPeerListRequest& GetPeerListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPeerListRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetPeerListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetPeerListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeerListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  return target;
}

size_t GetPeerListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeerListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeerListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
    MergeFrom(*source);
  }
}

void GetPeerListRequest::MergeFrom(const GetPeerListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPeerListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerListRequest::CopyFrom(const GetPeerListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerListRequest::IsInitialized() const {
  return true;
}

void GetPeerListRequest::InternalSwap(GetPeerListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeerListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPeerListResponse::InitAsDefaultInstance() {
}
class GetPeerListResponse::_Internal {
 public:
};

void GetPeerListResponse::clear_peers() {
  peers_.Clear();
}
GetPeerListResponse::GetPeerListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
}
GetPeerListResponse::GetPeerListResponse(const GetPeerListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
}

void GetPeerListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPeerListResponse_Rpc_2eproto.base);
}

GetPeerListResponse::~GetPeerListResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  SharedDtor();
}

void GetPeerListResponse::SharedDtor() {
}

void GetPeerListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPeerListResponse& GetPeerListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPeerListResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetPeerListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  _internal_metadata_.Clear();
}

const char* GetPeerListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeerListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_peers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  return target;
}

size_t GetPeerListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Catalyst.Protocol.Peer.PeerId peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeerListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeerListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
    MergeFrom(*source);
  }
}

void GetPeerListResponse::MergeFrom(const GetPeerListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
}

void GetPeerListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerListResponse::CopyFrom(const GetPeerListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerListResponse::IsInitialized() const {
  return true;
}

void GetPeerListResponse::InternalSwap(GetPeerListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peers_.InternalSwap(&other->peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeerListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPeerReputationRequest::InitAsDefaultInstance() {
}
class GetPeerReputationRequest::_Internal {
 public:
};

GetPeerReputationRequest::GetPeerReputationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
}
GetPeerReputationRequest::GetPeerReputationRequest(const GetPeerReputationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
}

void GetPeerReputationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPeerReputationRequest_Rpc_2eproto.base);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPeerReputationRequest::~GetPeerReputationRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  SharedDtor();
}

void GetPeerReputationRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPeerReputationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPeerReputationRequest& GetPeerReputationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPeerReputationRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetPeerReputationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetPeerReputationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeerReputationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  return target;
}

size_t GetPeerReputationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeerReputationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerReputationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeerReputationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
    MergeFrom(*source);
  }
}

void GetPeerReputationRequest::MergeFrom(const GetPeerReputationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
}

void GetPeerReputationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerReputationRequest::CopyFrom(const GetPeerReputationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerReputationRequest::IsInitialized() const {
  return true;
}

void GetPeerReputationRequest::InternalSwap(GetPeerReputationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeerReputationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPeerReputationResponse::InitAsDefaultInstance() {
}
class GetPeerReputationResponse::_Internal {
 public:
};

GetPeerReputationResponse::GetPeerReputationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
}
GetPeerReputationResponse::GetPeerReputationResponse(const GetPeerReputationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reputation_ = from.reputation_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
}

void GetPeerReputationResponse::SharedCtor() {
  reputation_ = 0;
}

GetPeerReputationResponse::~GetPeerReputationResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  SharedDtor();
}

void GetPeerReputationResponse::SharedDtor() {
}

void GetPeerReputationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPeerReputationResponse& GetPeerReputationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPeerReputationResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetPeerReputationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reputation_ = 0;
  _internal_metadata_.Clear();
}

const char* GetPeerReputationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reputation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reputation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeerReputationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reputation = 1;
  if (this->reputation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reputation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  return target;
}

size_t GetPeerReputationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 reputation = 1;
  if (this->reputation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reputation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeerReputationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerReputationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeerReputationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
    MergeFrom(*source);
  }
}

void GetPeerReputationResponse::MergeFrom(const GetPeerReputationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reputation() != 0) {
    _internal_set_reputation(from._internal_reputation());
  }
}

void GetPeerReputationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerReputationResponse::CopyFrom(const GetPeerReputationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerReputationResponse::IsInitialized() const {
  return true;
}

void GetPeerReputationResponse::InternalSwap(GetPeerReputationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(reputation_, other->reputation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeerReputationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPeerBlackListRequest::InitAsDefaultInstance() {
}
class SetPeerBlackListRequest::_Internal {
 public:
};

SetPeerBlackListRequest::SetPeerBlackListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
}
SetPeerBlackListRequest::SetPeerBlackListRequest(const SetPeerBlackListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  blacklist_ = from.blacklist_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
}

void SetPeerBlackListRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPeerBlackListRequest_Rpc_2eproto.base);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blacklist_ = false;
}

SetPeerBlackListRequest::~SetPeerBlackListRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
  SharedDtor();
}

void SetPeerBlackListRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetPeerBlackListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPeerBlackListRequest& SetPeerBlackListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPeerBlackListRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SetPeerBlackListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blacklist_ = false;
  _internal_metadata_.Clear();
}

const char* SetPeerBlackListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blacklist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blacklist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPeerBlackListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // bool blacklist = 3;
  if (this->blacklist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_blacklist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
  return target;
}

size_t SetPeerBlackListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // bool blacklist = 3;
  if (this->blacklist() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPeerBlackListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPeerBlackListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPeerBlackListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
    MergeFrom(*source);
  }
}

void SetPeerBlackListRequest::MergeFrom(const SetPeerBlackListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.blacklist() != 0) {
    _internal_set_blacklist(from._internal_blacklist());
  }
}

void SetPeerBlackListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPeerBlackListRequest::CopyFrom(const SetPeerBlackListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPeerBlackListRequest::IsInitialized() const {
  return true;
}

void SetPeerBlackListRequest::InternalSwap(SetPeerBlackListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blacklist_, other->blacklist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPeerBlackListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPeerBlackListResponse::InitAsDefaultInstance() {
}
class SetPeerBlackListResponse::_Internal {
 public:
};

SetPeerBlackListResponse::SetPeerBlackListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
}
SetPeerBlackListResponse::SetPeerBlackListResponse(const SetPeerBlackListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  blacklist_ = from.blacklist_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
}

void SetPeerBlackListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPeerBlackListResponse_Rpc_2eproto.base);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blacklist_ = false;
}

SetPeerBlackListResponse::~SetPeerBlackListResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
  SharedDtor();
}

void SetPeerBlackListResponse::SharedDtor() {
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetPeerBlackListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPeerBlackListResponse& SetPeerBlackListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPeerBlackListResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SetPeerBlackListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blacklist_ = false;
  _internal_metadata_.Clear();
}

const char* SetPeerBlackListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blacklist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blacklist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPeerBlackListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // bool blacklist = 3;
  if (this->blacklist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_blacklist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
  return target;
}

size_t SetPeerBlackListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // bool blacklist = 3;
  if (this->blacklist() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPeerBlackListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPeerBlackListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPeerBlackListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
    MergeFrom(*source);
  }
}

void SetPeerBlackListResponse::MergeFrom(const SetPeerBlackListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.blacklist() != 0) {
    _internal_set_blacklist(from._internal_blacklist());
  }
}

void SetPeerBlackListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPeerBlackListResponse::CopyFrom(const SetPeerBlackListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPeerBlackListResponse::IsInitialized() const {
  return true;
}

void SetPeerBlackListResponse::InternalSwap(SetPeerBlackListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blacklist_, other->blacklist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPeerBlackListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPeerInfoRequest::InitAsDefaultInstance() {
}
class GetPeerInfoRequest::_Internal {
 public:
};

GetPeerInfoRequest::GetPeerInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
}
GetPeerInfoRequest::GetPeerInfoRequest(const GetPeerInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
}

void GetPeerInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPeerInfoRequest_Rpc_2eproto.base);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPeerInfoRequest::~GetPeerInfoRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  SharedDtor();
}

void GetPeerInfoRequest::SharedDtor() {
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPeerInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPeerInfoRequest& GetPeerInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPeerInfoRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetPeerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetPeerInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeerInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  return target;
}

size_t GetPeerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeerInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeerInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
    MergeFrom(*source);
  }
}

void GetPeerInfoRequest::MergeFrom(const GetPeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
}

void GetPeerInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerInfoRequest::CopyFrom(const GetPeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerInfoRequest::IsInitialized() const {
  return true;
}

void GetPeerInfoRequest::InternalSwap(GetPeerInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeerInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPeerInfoResponse::InitAsDefaultInstance() {
}
class GetPeerInfoResponse::_Internal {
 public:
};

void GetPeerInfoResponse::clear_peer_info() {
  peer_info_.Clear();
}
GetPeerInfoResponse::GetPeerInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
}
GetPeerInfoResponse::GetPeerInfoResponse(const GetPeerInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peer_info_(from.peer_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
}

void GetPeerInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPeerInfoResponse_Rpc_2eproto.base);
}

GetPeerInfoResponse::~GetPeerInfoResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  SharedDtor();
}

void GetPeerInfoResponse::SharedDtor() {
}

void GetPeerInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPeerInfoResponse& GetPeerInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPeerInfoResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetPeerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_info_.Clear();
  _internal_metadata_.Clear();
}

const char* GetPeerInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peer_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeerInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peer_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_peer_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  return target;
}

size_t GetPeerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Catalyst.Protocol.Peer.PeerInfo peer_info = 1;
  total_size += 1UL * this->_internal_peer_info_size();
  for (const auto& msg : this->peer_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeerInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeerInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
    MergeFrom(*source);
  }
}

void GetPeerInfoResponse::MergeFrom(const GetPeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peer_info_.MergeFrom(from.peer_info_);
}

void GetPeerInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerInfoResponse::CopyFrom(const GetPeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerInfoResponse::IsInitialized() const {
  return true;
}

void GetPeerInfoResponse::InternalSwap(GetPeerInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peer_info_.InternalSwap(&other->peer_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeerInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConnectionCountRequest::InitAsDefaultInstance() {
}
class GetConnectionCountRequest::_Internal {
 public:
};

GetConnectionCountRequest::GetConnectionCountRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
}
GetConnectionCountRequest::GetConnectionCountRequest(const GetConnectionCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
}

void GetConnectionCountRequest::SharedCtor() {
  query_ = false;
}

GetConnectionCountRequest::~GetConnectionCountRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  SharedDtor();
}

void GetConnectionCountRequest::SharedDtor() {
}

void GetConnectionCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConnectionCountRequest& GetConnectionCountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConnectionCountRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetConnectionCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* GetConnectionCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConnectionCountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  return target;
}

size_t GetConnectionCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConnectionCountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnectionCountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConnectionCountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
    MergeFrom(*source);
  }
}

void GetConnectionCountRequest::MergeFrom(const GetConnectionCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void GetConnectionCountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnectionCountRequest::CopyFrom(const GetConnectionCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnectionCountRequest::IsInitialized() const {
  return true;
}

void GetConnectionCountRequest::InternalSwap(GetConnectionCountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConnectionCountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConnectionCountResponse::InitAsDefaultInstance() {
}
class GetConnectionCountResponse::_Internal {
 public:
};

GetConnectionCountResponse::GetConnectionCountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
}
GetConnectionCountResponse::GetConnectionCountResponse(const GetConnectionCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
}

void GetConnectionCountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConnectionCountResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetConnectionCountResponse::~GetConnectionCountResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  SharedDtor();
}

void GetConnectionCountResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetConnectionCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConnectionCountResponse& GetConnectionCountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConnectionCountResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetConnectionCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetConnectionCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConnectionCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  return target;
}

size_t GetConnectionCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConnectionCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnectionCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConnectionCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
    MergeFrom(*source);
  }
}

void GetConnectionCountResponse::MergeFrom(const GetConnectionCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void GetConnectionCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnectionCountResponse::CopyFrom(const GetConnectionCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnectionCountResponse::IsInitialized() const {
  return true;
}

void GetConnectionCountResponse::InternalSwap(GetConnectionCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConnectionCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeltaRequest::InitAsDefaultInstance() {
}
class GetDeltaRequest::_Internal {
 public:
};

GetDeltaRequest::GetDeltaRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
}
GetDeltaRequest::GetDeltaRequest(const GetDeltaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delta_dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delta_dfs_hash().empty()) {
    delta_dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delta_dfs_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
}

void GetDeltaRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeltaRequest_Rpc_2eproto.base);
  delta_dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDeltaRequest::~GetDeltaRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  SharedDtor();
}

void GetDeltaRequest::SharedDtor() {
  delta_dfs_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDeltaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeltaRequest& GetDeltaRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeltaRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetDeltaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delta_dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetDeltaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes delta_dfs_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_delta_dfs_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeltaRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes delta_dfs_hash = 1;
  if (this->delta_dfs_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_delta_dfs_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  return target;
}

size_t GetDeltaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes delta_dfs_hash = 1;
  if (this->delta_dfs_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_delta_dfs_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeltaRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeltaRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeltaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
    MergeFrom(*source);
  }
}

void GetDeltaRequest::MergeFrom(const GetDeltaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delta_dfs_hash().size() > 0) {

    delta_dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delta_dfs_hash_);
  }
}

void GetDeltaRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeltaRequest::CopyFrom(const GetDeltaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeltaRequest::IsInitialized() const {
  return true;
}

void GetDeltaRequest::InternalSwap(GetDeltaRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  delta_dfs_hash_.Swap(&other->delta_dfs_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeltaRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeltaResponse::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Rpc::Node::_GetDeltaResponse_default_instance_._instance.get_mutable()->delta_ = const_cast< ::Catalyst::Protocol::Deltas::Delta*>(
      ::Catalyst::Protocol::Deltas::Delta::internal_default_instance());
}
class GetDeltaResponse::_Internal {
 public:
  static const ::Catalyst::Protocol::Deltas::Delta& delta(const GetDeltaResponse* msg);
};

const ::Catalyst::Protocol::Deltas::Delta&
GetDeltaResponse::_Internal::delta(const GetDeltaResponse* msg) {
  return *msg->delta_;
}
void GetDeltaResponse::clear_delta() {
  if (GetArenaNoVirtual() == nullptr && delta_ != nullptr) {
    delete delta_;
  }
  delta_ = nullptr;
}
GetDeltaResponse::GetDeltaResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
}
GetDeltaResponse::GetDeltaResponse(const GetDeltaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_delta()) {
    delta_ = new ::Catalyst::Protocol::Deltas::Delta(*from.delta_);
  } else {
    delta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
}

void GetDeltaResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDeltaResponse_Rpc_2eproto.base);
  delta_ = nullptr;
}

GetDeltaResponse::~GetDeltaResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  SharedDtor();
}

void GetDeltaResponse::SharedDtor() {
  if (this != internal_default_instance()) delete delta_;
}

void GetDeltaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeltaResponse& GetDeltaResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeltaResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetDeltaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && delta_ != nullptr) {
    delete delta_;
  }
  delta_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetDeltaResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Deltas.Delta delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_delta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeltaResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Deltas.Delta delta = 1;
  if (this->has_delta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::delta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  return target;
}

size_t GetDeltaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Catalyst.Protocol.Deltas.Delta delta = 1;
  if (this->has_delta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeltaResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeltaResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeltaResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
    MergeFrom(*source);
  }
}

void GetDeltaResponse::MergeFrom(const GetDeltaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_delta()) {
    _internal_mutable_delta()->::Catalyst::Protocol::Deltas::Delta::MergeFrom(from._internal_delta());
  }
}

void GetDeltaResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeltaResponse::CopyFrom(const GetDeltaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeltaResponse::IsInitialized() const {
  return true;
}

void GetDeltaResponse::InternalSwap(GetDeltaResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(delta_, other->delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeltaResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMempoolRequest::InitAsDefaultInstance() {
}
class GetMempoolRequest::_Internal {
 public:
};

GetMempoolRequest::GetMempoolRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
}
GetMempoolRequest::GetMempoolRequest(const GetMempoolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
}

void GetMempoolRequest::SharedCtor() {
  query_ = false;
}

GetMempoolRequest::~GetMempoolRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  SharedDtor();
}

void GetMempoolRequest::SharedDtor() {
}

void GetMempoolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMempoolRequest& GetMempoolRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMempoolRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetMempoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* GetMempoolRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMempoolRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  return target;
}

size_t GetMempoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMempoolRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMempoolRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMempoolRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
    MergeFrom(*source);
  }
}

void GetMempoolRequest::MergeFrom(const GetMempoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void GetMempoolRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMempoolRequest::CopyFrom(const GetMempoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMempoolRequest::IsInitialized() const {
  return true;
}

void GetMempoolRequest::InternalSwap(GetMempoolRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMempoolRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMempoolResponse::InitAsDefaultInstance() {
}
class GetMempoolResponse::_Internal {
 public:
};

void GetMempoolResponse::clear_transactions() {
  transactions_.Clear();
}
GetMempoolResponse::GetMempoolResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
}
GetMempoolResponse::GetMempoolResponse(const GetMempoolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
}

void GetMempoolResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMempoolResponse_Rpc_2eproto.base);
}

GetMempoolResponse::~GetMempoolResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  SharedDtor();
}

void GetMempoolResponse::SharedDtor() {
}

void GetMempoolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMempoolResponse& GetMempoolResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMempoolResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetMempoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear();
}

const char* GetMempoolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMempoolResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  return target;
}

size_t GetMempoolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Catalyst.Protocol.Transaction.PublicEntry transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMempoolResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMempoolResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMempoolResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
    MergeFrom(*source);
  }
}

void GetMempoolResponse::MergeFrom(const GetMempoolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
}

void GetMempoolResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMempoolResponse::CopyFrom(const GetMempoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMempoolResponse::IsInitialized() const {
  return true;
}

void GetMempoolResponse::InternalSwap(GetMempoolResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMempoolResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignMessageRequest::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Rpc::Node::_SignMessageRequest_default_instance_._instance.get_mutable()->signing_context_ = const_cast< ::Catalyst::Protocol::Cryptography::SigningContext*>(
      ::Catalyst::Protocol::Cryptography::SigningContext::internal_default_instance());
}
class SignMessageRequest::_Internal {
 public:
  static const ::Catalyst::Protocol::Cryptography::SigningContext& signing_context(const SignMessageRequest* msg);
};

const ::Catalyst::Protocol::Cryptography::SigningContext&
SignMessageRequest::_Internal::signing_context(const SignMessageRequest* msg) {
  return *msg->signing_context_;
}
void SignMessageRequest::clear_signing_context() {
  if (GetArenaNoVirtual() == nullptr && signing_context_ != nullptr) {
    delete signing_context_;
  }
  signing_context_ = nullptr;
}
SignMessageRequest::SignMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
}
SignMessageRequest::SignMessageRequest(const SignMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_id().empty()) {
    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from._internal_has_signing_context()) {
    signing_context_ = new ::Catalyst::Protocol::Cryptography::SigningContext(*from.signing_context_);
  } else {
    signing_context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
}

void SignMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignMessageRequest_Rpc_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signing_context_ = nullptr;
}

SignMessageRequest::~SignMessageRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  SharedDtor();
}

void SignMessageRequest::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signing_context_;
}

void SignMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignMessageRequest& SignMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignMessageRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SignMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && signing_context_ != nullptr) {
    delete signing_context_;
  }
  signing_context_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SignMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_signing_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message = 1;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message(), target);
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_id().data(), static_cast<int>(this->_internal_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SignMessageRequest.key_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_id(), target);
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
  if (this->has_signing_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::signing_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  return target;
}

size_t SignMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // string key_id = 2;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_id());
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 3;
  if (this->has_signing_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signing_context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
    MergeFrom(*source);
  }
}

void SignMessageRequest::MergeFrom(const SignMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.key_id().size() > 0) {

    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  if (from.has_signing_context()) {
    _internal_mutable_signing_context()->::Catalyst::Protocol::Cryptography::SigningContext::MergeFrom(from._internal_signing_context());
  }
}

void SignMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignMessageRequest::CopyFrom(const SignMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignMessageRequest::IsInitialized() const {
  return true;
}

void SignMessageRequest::InternalSwap(SignMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_id_.Swap(&other->key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signing_context_, other->signing_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignMessageResponse::InitAsDefaultInstance() {
}
class SignMessageResponse::_Internal {
 public:
};

SignMessageResponse::SignMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
}
SignMessageResponse::SignMessageResponse(const SignMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  original_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_original_message().empty()) {
    original_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.original_message_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
}

void SignMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignMessageResponse_Rpc_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SignMessageResponse::~SignMessageResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  SharedDtor();
}

void SignMessageResponse::SharedDtor() {
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignMessageResponse& SignMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignMessageResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SignMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SignMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes original_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_original_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  // bytes original_message = 3;
  if (this->original_message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_original_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  return target;
}

size_t SignMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes original_message = 3;
  if (this->original_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_original_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SignMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
    MergeFrom(*source);
  }
}

void SignMessageResponse::MergeFrom(const SignMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.original_message().size() > 0) {

    original_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.original_message_);
  }
}

void SignMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignMessageResponse::CopyFrom(const SignMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignMessageResponse::IsInitialized() const {
  return true;
}

void SignMessageResponse::InternalSwap(SignMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  original_message_.Swap(&other->original_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyMessageRequest::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Rpc::Node::_VerifyMessageRequest_default_instance_._instance.get_mutable()->signing_context_ = const_cast< ::Catalyst::Protocol::Cryptography::SigningContext*>(
      ::Catalyst::Protocol::Cryptography::SigningContext::internal_default_instance());
}
class VerifyMessageRequest::_Internal {
 public:
  static const ::Catalyst::Protocol::Cryptography::SigningContext& signing_context(const VerifyMessageRequest* msg);
};

const ::Catalyst::Protocol::Cryptography::SigningContext&
VerifyMessageRequest::_Internal::signing_context(const VerifyMessageRequest* msg) {
  return *msg->signing_context_;
}
void VerifyMessageRequest::clear_signing_context() {
  if (GetArenaNoVirtual() == nullptr && signing_context_ != nullptr) {
    delete signing_context_;
  }
  signing_context_ = nullptr;
}
VerifyMessageRequest::VerifyMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
}
VerifyMessageRequest::VerifyMessageRequest(const VerifyMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from._internal_has_signing_context()) {
    signing_context_ = new ::Catalyst::Protocol::Cryptography::SigningContext(*from.signing_context_);
  } else {
    signing_context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
}

void VerifyMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyMessageRequest_Rpc_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signing_context_ = nullptr;
}

VerifyMessageRequest::~VerifyMessageRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  SharedDtor();
}

void VerifyMessageRequest::SharedDtor() {
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signing_context_;
}

void VerifyMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyMessageRequest& VerifyMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyMessageRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void VerifyMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && signing_context_ != nullptr) {
    delete signing_context_;
  }
  signing_context_ = nullptr;
  _internal_metadata_.Clear();
}

const char* VerifyMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signing_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  // bytes message = 3;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
  if (this->has_signing_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::signing_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  return target;
}

size_t VerifyMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 4;
  if (this->has_signing_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signing_context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
    MergeFrom(*source);
  }
}

void VerifyMessageRequest::MergeFrom(const VerifyMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_signing_context()) {
    _internal_mutable_signing_context()->::Catalyst::Protocol::Cryptography::SigningContext::MergeFrom(from._internal_signing_context());
  }
}

void VerifyMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyMessageRequest::CopyFrom(const VerifyMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyMessageRequest::IsInitialized() const {
  return true;
}

void VerifyMessageRequest::InternalSwap(VerifyMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signing_context_, other->signing_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyMessageResponse::InitAsDefaultInstance() {
}
class VerifyMessageResponse::_Internal {
 public:
};

VerifyMessageResponse::VerifyMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
}
VerifyMessageResponse::VerifyMessageResponse(const VerifyMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_signed_by_key_ = from.is_signed_by_key_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
}

void VerifyMessageResponse::SharedCtor() {
  is_signed_by_key_ = false;
}

VerifyMessageResponse::~VerifyMessageResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  SharedDtor();
}

void VerifyMessageResponse::SharedDtor() {
}

void VerifyMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyMessageResponse& VerifyMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyMessageResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void VerifyMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_signed_by_key_ = false;
  _internal_metadata_.Clear();
}

const char* VerifyMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_signed_by_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_signed_by_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_signed_by_key = 1;
  if (this->is_signed_by_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_signed_by_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  return target;
}

size_t VerifyMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_signed_by_key = 1;
  if (this->is_signed_by_key() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
    MergeFrom(*source);
  }
}

void VerifyMessageResponse::MergeFrom(const VerifyMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_signed_by_key() != 0) {
    _internal_set_is_signed_by_key(from._internal_is_signed_by_key());
  }
}

void VerifyMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyMessageResponse::CopyFrom(const VerifyMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyMessageResponse::IsInitialized() const {
  return true;
}

void VerifyMessageResponse::InternalSwap(VerifyMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_signed_by_key_, other->is_signed_by_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceStatusRequest::InitAsDefaultInstance() {
}
class ServiceStatusRequest::_Internal {
 public:
};

ServiceStatusRequest::ServiceStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
}
ServiceStatusRequest::ServiceStatusRequest(const ServiceStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
}

void ServiceStatusRequest::SharedCtor() {
  query_ = false;
}

ServiceStatusRequest::~ServiceStatusRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  SharedDtor();
}

void ServiceStatusRequest::SharedDtor() {
}

void ServiceStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceStatusRequest& ServiceStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceStatusRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void ServiceStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* ServiceStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  return target;
}

size_t ServiceStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
    MergeFrom(*source);
  }
}

void ServiceStatusRequest::MergeFrom(const ServiceStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void ServiceStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStatusRequest::CopyFrom(const ServiceStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStatusRequest::IsInitialized() const {
  return true;
}

void ServiceStatusRequest::InternalSwap(ServiceStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceStatusResponse::InitAsDefaultInstance() {
}
class ServiceStatusResponse::_Internal {
 public:
};

ServiceStatusResponse::ServiceStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
}
ServiceStatusResponse::ServiceStatusResponse(const ServiceStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
}

void ServiceStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceStatusResponse_Rpc_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServiceStatusResponse::~ServiceStatusResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  SharedDtor();
}

void ServiceStatusResponse::SharedDtor() {
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceStatusResponse& ServiceStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceStatusResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void ServiceStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ServiceStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  return target;
}

size_t ServiceStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
    MergeFrom(*source);
  }
}

void ServiceStatusResponse::MergeFrom(const ServiceStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void ServiceStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStatusResponse::CopyFrom(const ServiceStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStatusResponse::IsInitialized() const {
  return true;
}

void ServiceStatusResponse::InternalSwap(ServiceStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFileToDfsRequest::InitAsDefaultInstance() {
}
class AddFileToDfsRequest::_Internal {
 public:
};

AddFileToDfsRequest::AddFileToDfsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
}
AddFileToDfsRequest::AddFileToDfsRequest(const AddFileToDfsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node().empty()) {
    node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
}

void AddFileToDfsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFileToDfsRequest_Rpc_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_size_ = PROTOBUF_ULONGLONG(0);
}

AddFileToDfsRequest::~AddFileToDfsRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  SharedDtor();
}

void AddFileToDfsRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddFileToDfsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFileToDfsRequest& AddFileToDfsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFileToDfsRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void AddFileToDfsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* AddFileToDfsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 file_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFileToDfsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 file_size = 1;
  if (this->file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_file_size(), target);
  }

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // string node = 3;
  if (this->node().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_node(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  return target;
}

size_t AddFileToDfsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string node = 3;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  // uint64 file_size = 1;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_file_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFileToDfsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFileToDfsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFileToDfsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
    MergeFrom(*source);
  }
}

void AddFileToDfsRequest::MergeFrom(const AddFileToDfsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.node().size() > 0) {

    node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_);
  }
  if (from.file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
}

void AddFileToDfsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFileToDfsRequest::CopyFrom(const AddFileToDfsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFileToDfsRequest::IsInitialized() const {
  return true;
}

void AddFileToDfsRequest::InternalSwap(AddFileToDfsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_.Swap(&other->node_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFileToDfsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddFileToDfsResponse::InitAsDefaultInstance() {
}
class AddFileToDfsResponse::_Internal {
 public:
};

AddFileToDfsResponse::AddFileToDfsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
}
AddFileToDfsResponse::AddFileToDfsResponse(const AddFileToDfsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_code().empty()) {
    response_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dfs_hash().empty()) {
    dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dfs_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
}

void AddFileToDfsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddFileToDfsResponse_Rpc_2eproto.base);
  response_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddFileToDfsResponse::~AddFileToDfsResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  SharedDtor();
}

void AddFileToDfsResponse::SharedDtor() {
  response_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dfs_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddFileToDfsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddFileToDfsResponse& AddFileToDfsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddFileToDfsResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void AddFileToDfsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AddFileToDfsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes response_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dfs_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dfs_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddFileToDfsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes response_code = 1;
  if (this->response_code().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_response_code(), target);
  }

  // string dfs_hash = 2;
  if (this->dfs_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dfs_hash().data(), static_cast<int>(this->_internal_dfs_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfs_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dfs_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  return target;
}

size_t AddFileToDfsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes response_code = 1;
  if (this->response_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_response_code());
  }

  // string dfs_hash = 2;
  if (this->dfs_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dfs_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFileToDfsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFileToDfsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddFileToDfsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
    MergeFrom(*source);
  }
}

void AddFileToDfsResponse::MergeFrom(const AddFileToDfsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_code().size() > 0) {

    response_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  if (from.dfs_hash().size() > 0) {

    dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dfs_hash_);
  }
}

void AddFileToDfsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFileToDfsResponse::CopyFrom(const AddFileToDfsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFileToDfsResponse::IsInitialized() const {
  return true;
}

void AddFileToDfsResponse::InternalSwap(AddFileToDfsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_code_.Swap(&other->response_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dfs_hash_.Swap(&other->dfs_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFileToDfsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferFileBytesRequest::InitAsDefaultInstance() {
}
class TransferFileBytesRequest::_Internal {
 public:
};

TransferFileBytesRequest::TransferFileBytesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
}
TransferFileBytesRequest::TransferFileBytesRequest(const TransferFileBytesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chunk_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chunk_bytes().empty()) {
    chunk_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chunk_bytes_);
  }
  correlation_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_correlation_file_name().empty()) {
    correlation_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.correlation_file_name_);
  }
  chunk_id_ = from.chunk_id_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
}

void TransferFileBytesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferFileBytesRequest_Rpc_2eproto.base);
  chunk_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  correlation_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunk_id_ = 0u;
}

TransferFileBytesRequest::~TransferFileBytesRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  SharedDtor();
}

void TransferFileBytesRequest::SharedDtor() {
  chunk_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  correlation_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferFileBytesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferFileBytesRequest& TransferFileBytesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferFileBytesRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void TransferFileBytesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  correlation_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunk_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* TransferFileBytesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 chunk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chunk_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chunk_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes correlation_file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_correlation_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferFileBytesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chunk_id = 1;
  if (this->chunk_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chunk_id(), target);
  }

  // bytes chunk_bytes = 2;
  if (this->chunk_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chunk_bytes(), target);
  }

  // bytes correlation_file_name = 3;
  if (this->correlation_file_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_correlation_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  return target;
}

size_t TransferFileBytesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk_bytes = 2;
  if (this->chunk_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk_bytes());
  }

  // bytes correlation_file_name = 3;
  if (this->correlation_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_correlation_file_name());
  }

  // uint32 chunk_id = 1;
  if (this->chunk_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferFileBytesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferFileBytesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferFileBytesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
    MergeFrom(*source);
  }
}

void TransferFileBytesRequest::MergeFrom(const TransferFileBytesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk_bytes().size() > 0) {

    chunk_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chunk_bytes_);
  }
  if (from.correlation_file_name().size() > 0) {

    correlation_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.correlation_file_name_);
  }
  if (from.chunk_id() != 0) {
    _internal_set_chunk_id(from._internal_chunk_id());
  }
}

void TransferFileBytesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferFileBytesRequest::CopyFrom(const TransferFileBytesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferFileBytesRequest::IsInitialized() const {
  return true;
}

void TransferFileBytesRequest::InternalSwap(TransferFileBytesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chunk_bytes_.Swap(&other->chunk_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  correlation_file_name_.Swap(&other->correlation_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chunk_id_, other->chunk_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferFileBytesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferFileBytesResponse::InitAsDefaultInstance() {
}
class TransferFileBytesResponse::_Internal {
 public:
};

TransferFileBytesResponse::TransferFileBytesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
}
TransferFileBytesResponse::TransferFileBytesResponse(const TransferFileBytesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_code().empty()) {
    response_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
}

void TransferFileBytesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferFileBytesResponse_Rpc_2eproto.base);
  response_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransferFileBytesResponse::~TransferFileBytesResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  SharedDtor();
}

void TransferFileBytesResponse::SharedDtor() {
  response_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferFileBytesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferFileBytesResponse& TransferFileBytesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferFileBytesResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void TransferFileBytesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TransferFileBytesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes response_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferFileBytesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes response_code = 1;
  if (this->response_code().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_response_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  return target;
}

size_t TransferFileBytesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes response_code = 1;
  if (this->response_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_response_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferFileBytesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferFileBytesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferFileBytesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
    MergeFrom(*source);
  }
}

void TransferFileBytesResponse::MergeFrom(const TransferFileBytesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_code().size() > 0) {

    response_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
}

void TransferFileBytesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferFileBytesResponse::CopyFrom(const TransferFileBytesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferFileBytesResponse::IsInitialized() const {
  return true;
}

void TransferFileBytesResponse::InternalSwap(TransferFileBytesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_code_.Swap(&other->response_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferFileBytesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemovePeerRequest::InitAsDefaultInstance() {
}
class RemovePeerRequest::_Internal {
 public:
};

RemovePeerRequest::RemovePeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
}
RemovePeerRequest::RemovePeerRequest(const RemovePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_ip().empty()) {
    peer_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_ip_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
}

void RemovePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemovePeerRequest_Rpc_2eproto.base);
  peer_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemovePeerRequest::~RemovePeerRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  SharedDtor();
}

void RemovePeerRequest::SharedDtor() {
  peer_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemovePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovePeerRequest& RemovePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovePeerRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void RemovePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RemovePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes peer_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_peer_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes peer_ip = 1;
  if (this->peer_ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_peer_ip(), target);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  return target;
}

size_t RemovePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes peer_ip = 1;
  if (this->peer_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_peer_ip());
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
    MergeFrom(*source);
  }
}

void RemovePeerRequest::MergeFrom(const RemovePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peer_ip().size() > 0) {

    peer_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_ip_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void RemovePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePeerRequest::CopyFrom(const RemovePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePeerRequest::IsInitialized() const {
  return true;
}

void RemovePeerRequest::InternalSwap(RemovePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peer_ip_.Swap(&other->peer_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemovePeerResponse::InitAsDefaultInstance() {
}
class RemovePeerResponse::_Internal {
 public:
};

RemovePeerResponse::RemovePeerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
}
RemovePeerResponse::RemovePeerResponse(const RemovePeerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deleted_count_ = from.deleted_count_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
}

void RemovePeerResponse::SharedCtor() {
  deleted_count_ = 0u;
}

RemovePeerResponse::~RemovePeerResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  SharedDtor();
}

void RemovePeerResponse::SharedDtor() {
}

void RemovePeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovePeerResponse& RemovePeerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemovePeerResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void RemovePeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_count_ = 0u;
  _internal_metadata_.Clear();
}

const char* RemovePeerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 deleted_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          deleted_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemovePeerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deleted_count = 1;
  if (this->deleted_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_deleted_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  return target;
}

size_t RemovePeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 deleted_count = 1;
  if (this->deleted_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deleted_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePeerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePeerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemovePeerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
    MergeFrom(*source);
  }
}

void RemovePeerResponse::MergeFrom(const RemovePeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deleted_count() != 0) {
    _internal_set_deleted_count(from._internal_deleted_count());
  }
}

void RemovePeerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePeerResponse::CopyFrom(const RemovePeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePeerResponse::IsInitialized() const {
  return true;
}

void RemovePeerResponse::InternalSwap(RemovePeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(deleted_count_, other->deleted_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemovePeerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPeerCountRequest::InitAsDefaultInstance() {
}
class GetPeerCountRequest::_Internal {
 public:
};

GetPeerCountRequest::GetPeerCountRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
}
GetPeerCountRequest::GetPeerCountRequest(const GetPeerCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
}

void GetPeerCountRequest::SharedCtor() {
}

GetPeerCountRequest::~GetPeerCountRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  SharedDtor();
}

void GetPeerCountRequest::SharedDtor() {
}

void GetPeerCountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPeerCountRequest& GetPeerCountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPeerCountRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetPeerCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetPeerCountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeerCountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  return target;
}

size_t GetPeerCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeerCountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerCountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeerCountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
    MergeFrom(*source);
  }
}

void GetPeerCountRequest::MergeFrom(const GetPeerCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPeerCountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerCountRequest::CopyFrom(const GetPeerCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerCountRequest::IsInitialized() const {
  return true;
}

void GetPeerCountRequest::InternalSwap(GetPeerCountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeerCountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPeerCountResponse::InitAsDefaultInstance() {
}
class GetPeerCountResponse::_Internal {
 public:
};

GetPeerCountResponse::GetPeerCountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
}
GetPeerCountResponse::GetPeerCountResponse(const GetPeerCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_count_ = from.peer_count_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
}

void GetPeerCountResponse::SharedCtor() {
  peer_count_ = 0;
}

GetPeerCountResponse::~GetPeerCountResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  SharedDtor();
}

void GetPeerCountResponse::SharedDtor() {
}

void GetPeerCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPeerCountResponse& GetPeerCountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPeerCountResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetPeerCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_count_ = 0;
  _internal_metadata_.Clear();
}

const char* GetPeerCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 peer_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          peer_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPeerCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 peer_count = 1;
  if (this->peer_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_peer_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  return target;
}

size_t GetPeerCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 peer_count = 1;
  if (this->peer_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peer_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPeerCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPeerCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPeerCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
    MergeFrom(*source);
  }
}

void GetPeerCountResponse::MergeFrom(const GetPeerCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peer_count() != 0) {
    _internal_set_peer_count(from._internal_peer_count());
  }
}

void GetPeerCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPeerCountResponse::CopyFrom(const GetPeerCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeerCountResponse::IsInitialized() const {
  return true;
}

void GetPeerCountResponse::InternalSwap(GetPeerCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_count_, other->peer_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeerCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFileFromDfsRequest::InitAsDefaultInstance() {
}
class GetFileFromDfsRequest::_Internal {
 public:
};

GetFileFromDfsRequest::GetFileFromDfsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
}
GetFileFromDfsRequest::GetFileFromDfsRequest(const GetFileFromDfsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dfs_hash().empty()) {
    dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dfs_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
}

void GetFileFromDfsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFileFromDfsRequest_Rpc_2eproto.base);
  dfs_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetFileFromDfsRequest::~GetFileFromDfsRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  SharedDtor();
}

void GetFileFromDfsRequest::SharedDtor() {
  dfs_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFileFromDfsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFileFromDfsRequest& GetFileFromDfsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFileFromDfsRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetFileFromDfsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetFileFromDfsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dfs_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dfs_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileFromDfsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dfs_hash = 1;
  if (this->dfs_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dfs_hash().data(), static_cast<int>(this->_internal_dfs_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfs_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dfs_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  return target;
}

size_t GetFileFromDfsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dfs_hash = 1;
  if (this->dfs_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dfs_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileFromDfsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileFromDfsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFileFromDfsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
    MergeFrom(*source);
  }
}

void GetFileFromDfsRequest::MergeFrom(const GetFileFromDfsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dfs_hash().size() > 0) {

    dfs_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dfs_hash_);
  }
}

void GetFileFromDfsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileFromDfsRequest::CopyFrom(const GetFileFromDfsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileFromDfsRequest::IsInitialized() const {
  return true;
}

void GetFileFromDfsRequest::InternalSwap(GetFileFromDfsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dfs_hash_.Swap(&other->dfs_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileFromDfsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFileFromDfsResponse::InitAsDefaultInstance() {
}
class GetFileFromDfsResponse::_Internal {
 public:
};

GetFileFromDfsResponse::GetFileFromDfsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
}
GetFileFromDfsResponse::GetFileFromDfsResponse(const GetFileFromDfsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_code().empty()) {
    response_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
}

void GetFileFromDfsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFileFromDfsResponse_Rpc_2eproto.base);
  response_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_size_ = PROTOBUF_ULONGLONG(0);
}

GetFileFromDfsResponse::~GetFileFromDfsResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  SharedDtor();
}

void GetFileFromDfsResponse::SharedDtor() {
  response_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFileFromDfsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFileFromDfsResponse& GetFileFromDfsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFileFromDfsResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void GetFileFromDfsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GetFileFromDfsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 file_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes response_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_response_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFileFromDfsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 file_size = 1;
  if (this->file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_file_size(), target);
  }

  // bytes response_code = 2;
  if (this->response_code().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_response_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  return target;
}

size_t GetFileFromDfsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes response_code = 2;
  if (this->response_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_response_code());
  }

  // uint64 file_size = 1;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_file_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFileFromDfsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFileFromDfsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFileFromDfsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
    MergeFrom(*source);
  }
}

void GetFileFromDfsResponse::MergeFrom(const GetFileFromDfsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_code().size() > 0) {

    response_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_code_);
  }
  if (from.file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
}

void GetFileFromDfsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileFromDfsResponse::CopyFrom(const GetFileFromDfsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileFromDfsResponse::IsInitialized() const {
  return true;
}

void GetFileFromDfsResponse::InternalSwap(GetFileFromDfsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_code_.Swap(&other->response_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFileFromDfsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPeerDataFolderRequest::InitAsDefaultInstance() {
}
class SetPeerDataFolderRequest::_Internal {
 public:
};

SetPeerDataFolderRequest::SetPeerDataFolderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
}
SetPeerDataFolderRequest::SetPeerDataFolderRequest(const SetPeerDataFolderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_folder().empty()) {
    data_folder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_folder_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
}

void SetPeerDataFolderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPeerDataFolderRequest_Rpc_2eproto.base);
  data_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetPeerDataFolderRequest::~SetPeerDataFolderRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  SharedDtor();
}

void SetPeerDataFolderRequest::SharedDtor() {
  data_folder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetPeerDataFolderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPeerDataFolderRequest& SetPeerDataFolderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPeerDataFolderRequest_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SetPeerDataFolderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_folder_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SetPeerDataFolderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string data_folder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data_folder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPeerDataFolderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data_folder = 1;
  if (this->data_folder().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_folder().data(), static_cast<int>(this->_internal_data_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.data_folder");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data_folder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  return target;
}

size_t SetPeerDataFolderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data_folder = 1;
  if (this->data_folder().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_folder());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPeerDataFolderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPeerDataFolderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPeerDataFolderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
    MergeFrom(*source);
  }
}

void SetPeerDataFolderRequest::MergeFrom(const SetPeerDataFolderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_folder().size() > 0) {

    data_folder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_folder_);
  }
}

void SetPeerDataFolderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPeerDataFolderRequest::CopyFrom(const SetPeerDataFolderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPeerDataFolderRequest::IsInitialized() const {
  return true;
}

void SetPeerDataFolderRequest::InternalSwap(SetPeerDataFolderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_folder_.Swap(&other->data_folder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPeerDataFolderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPeerDataFolderResponse::InitAsDefaultInstance() {
}
class SetPeerDataFolderResponse::_Internal {
 public:
};

SetPeerDataFolderResponse::SetPeerDataFolderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
}
SetPeerDataFolderResponse::SetPeerDataFolderResponse(const SetPeerDataFolderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_ = from.query_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
}

void SetPeerDataFolderResponse::SharedCtor() {
  query_ = false;
}

SetPeerDataFolderResponse::~SetPeerDataFolderResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  SharedDtor();
}

void SetPeerDataFolderResponse::SharedDtor() {
}

void SetPeerDataFolderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPeerDataFolderResponse& SetPeerDataFolderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPeerDataFolderResponse_Rpc_2eproto.base);
  return *internal_default_instance();
}


void SetPeerDataFolderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_ = false;
  _internal_metadata_.Clear();
}

const char* SetPeerDataFolderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPeerDataFolderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  return target;
}

size_t SetPeerDataFolderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query = 1;
  if (this->query() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPeerDataFolderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPeerDataFolderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPeerDataFolderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
    MergeFrom(*source);
  }
}

void SetPeerDataFolderResponse::MergeFrom(const SetPeerDataFolderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query() != 0) {
    _internal_set_query(from._internal_query());
  }
}

void SetPeerDataFolderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPeerDataFolderResponse::CopyFrom(const SetPeerDataFolderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPeerDataFolderResponse::IsInitialized() const {
  return true;
}

void SetPeerDataFolderResponse::InternalSwap(SetPeerDataFolderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_, other->query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPeerDataFolderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Node
}  // namespace Rpc
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::VersionRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::VersionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::VersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::VersionResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::VersionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::VersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetInfoRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetInfoResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::CreateWalletRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::CreateWalletRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::CreateWalletRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::CreateWalletResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::CreateWalletResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::CreateWalletResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::ListWalletRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::ListWalletRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::ListWalletRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::ListWalletResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::ListWalletResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::ListWalletResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::CreateAddressRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::CreateAddressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::CreateAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::CreateAddressResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::CreateAddressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::CreateAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetAddressRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetAddressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetAddressResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetAddressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::ListAddressRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::ListAddressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::ListAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::ListAddressResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::ListAddressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::ListAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetBalanceRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetBalanceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetBalanceResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetBalanceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SendToRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SendToRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SendToRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SendToResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SendToResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SendToResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SendToFromRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SendToFromRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SendToFromRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SendToFromResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SendToFromResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SendToFromResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SendManyRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SendManyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SendManyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SendManyResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SendManyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SendManyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SendFromManyRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SendFromManyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SendFromManyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SendFromManyResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SendFromManyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SendFromManyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::AddNodeRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::AddNodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::AddNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::AddNodeResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::AddNodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::AddNodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetPeerListRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetPeerListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetPeerListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetPeerListResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetPeerListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetPeerListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetDeltaRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetDeltaRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetDeltaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetDeltaResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetDeltaResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetDeltaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetMempoolRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetMempoolRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetMempoolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetMempoolResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetMempoolResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetMempoolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SignMessageRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SignMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SignMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SignMessageResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SignMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SignMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::RemovePeerRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::RemovePeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::RemovePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::RemovePeerResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::RemovePeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::RemovePeerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
