// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Peer.proto

#include "Peer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Peer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerId_Peer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Peer {
class PeerIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerId> _instance;
} _PeerId_default_instance_;
class PeerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerInfo> _instance;
} _PeerInfo_default_instance_;
}  // namespace Peer
}  // namespace Protocol
}  // namespace Catalyst
static void InitDefaultsscc_info_PeerId_Peer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Peer::_PeerId_default_instance_;
    new (ptr) ::Catalyst::Protocol::Peer::PeerId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Peer::PeerId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerId_Peer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerId_Peer_2eproto}, {}};

static void InitDefaultsscc_info_PeerInfo_Peer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Peer::_PeerInfo_default_instance_;
    new (ptr) ::Catalyst::Protocol::Peer::PeerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Peer::PeerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PeerInfo_Peer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PeerInfo_Peer_2eproto}, {
      &scc_info_PeerId_Peer_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Peer_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Peer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Peer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Peer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerId, ip_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerId, port_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerId, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerInfo, peer_id_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerInfo, reputation_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerInfo, is_blacklisted_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerInfo, is_unreachable_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerInfo, inactive_for_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerInfo, last_seen_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerInfo, modified_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Peer::PeerInfo, created_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Catalyst::Protocol::Peer::PeerId)},
  { 8, -1, sizeof(::Catalyst::Protocol::Peer::PeerInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Peer::_PeerId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Peer::_PeerInfo_default_instance_),
};

const char descriptor_table_protodef_Peer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nPeer.proto\022\026Catalyst.Protocol.Peer\032\037go"
  "ogle/protobuf/timestamp.proto\032\036google/pr"
  "otobuf/duration.proto\"6\n\006PeerId\022\n\n\002ip\030\001 "
  "\001(\014\022\014\n\004port\030\002 \001(\r\022\022\n\npublic_key\030\003 \001(\014\"\272\002"
  "\n\010PeerInfo\022/\n\007peer_id\030\001 \001(\0132\036.Catalyst.P"
  "rotocol.Peer.PeerId\022\022\n\nreputation\030\002 \001(\021\022"
  "\026\n\016is_blacklisted\030\003 \001(\010\022\026\n\016is_unreachabl"
  "e\030\004 \001(\010\022/\n\014inactive_for\030\005 \001(\0132\031.google.p"
  "rotobuf.Duration\022-\n\tlast_seen\030\006 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022,\n\010modified\030\007 \001("
  "\0132\032.google.protobuf.Timestamp\022+\n\007created"
  "\030\010 \001(\0132\032.google.protobuf.TimestampB\002P\001b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Peer_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Peer_2eproto_sccs[2] = {
  &scc_info_PeerId_Peer_2eproto.base,
  &scc_info_PeerInfo_Peer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Peer_2eproto_once;
static bool descriptor_table_Peer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Peer_2eproto = {
  &descriptor_table_Peer_2eproto_initialized, descriptor_table_protodef_Peer_2eproto, "Peer.proto", 486,
  &descriptor_table_Peer_2eproto_once, descriptor_table_Peer_2eproto_sccs, descriptor_table_Peer_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_Peer_2eproto::offsets,
  file_level_metadata_Peer_2eproto, 2, file_level_enum_descriptors_Peer_2eproto, file_level_service_descriptors_Peer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Peer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Peer_2eproto), true);
namespace Catalyst {
namespace Protocol {
namespace Peer {

// ===================================================================

void PeerId::InitAsDefaultInstance() {
}
class PeerId::_Internal {
 public:
};

PeerId::PeerId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Peer.PeerId)
}
PeerId::PeerId(const PeerId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Peer.PeerId)
}

void PeerId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerId_Peer_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

PeerId::~PeerId() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Peer.PeerId)
  SharedDtor();
}

void PeerId::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerId& PeerId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerId_Peer_2eproto.base);
  return *internal_default_instance();
}


void PeerId::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Peer.PeerId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

const char* PeerId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Peer.PeerId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ip = 1;
  if (this->ip().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // bytes public_key = 3;
  if (this->public_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Peer.PeerId)
  return target;
}

size_t PeerId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Peer.PeerId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // bytes public_key = 3;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Peer.PeerId)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Peer.PeerId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Peer.PeerId)
    MergeFrom(*source);
  }
}

void PeerId::MergeFrom(const PeerId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Peer.PeerId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void PeerId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Peer.PeerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerId::CopyFrom(const PeerId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Peer.PeerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerId::IsInitialized() const {
  return true;
}

void PeerId::InternalSwap(PeerId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerInfo::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Peer::_PeerInfo_default_instance_._instance.get_mutable()->peer_id_ = const_cast< ::Catalyst::Protocol::Peer::PeerId*>(
      ::Catalyst::Protocol::Peer::PeerId::internal_default_instance());
  ::Catalyst::Protocol::Peer::_PeerInfo_default_instance_._instance.get_mutable()->inactive_for_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::Catalyst::Protocol::Peer::_PeerInfo_default_instance_._instance.get_mutable()->last_seen_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::Catalyst::Protocol::Peer::_PeerInfo_default_instance_._instance.get_mutable()->modified_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::Catalyst::Protocol::Peer::_PeerInfo_default_instance_._instance.get_mutable()->created_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class PeerInfo::_Internal {
 public:
  static const ::Catalyst::Protocol::Peer::PeerId& peer_id(const PeerInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& inactive_for(const PeerInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_seen(const PeerInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& modified(const PeerInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created(const PeerInfo* msg);
};

const ::Catalyst::Protocol::Peer::PeerId&
PeerInfo::_Internal::peer_id(const PeerInfo* msg) {
  return *msg->peer_id_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
PeerInfo::_Internal::inactive_for(const PeerInfo* msg) {
  return *msg->inactive_for_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
PeerInfo::_Internal::last_seen(const PeerInfo* msg) {
  return *msg->last_seen_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
PeerInfo::_Internal::modified(const PeerInfo* msg) {
  return *msg->modified_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
PeerInfo::_Internal::created(const PeerInfo* msg) {
  return *msg->created_;
}
void PeerInfo::clear_inactive_for() {
  if (GetArenaNoVirtual() == nullptr && inactive_for_ != nullptr) {
    delete inactive_for_;
  }
  inactive_for_ = nullptr;
}
void PeerInfo::clear_last_seen() {
  if (GetArenaNoVirtual() == nullptr && last_seen_ != nullptr) {
    delete last_seen_;
  }
  last_seen_ = nullptr;
}
void PeerInfo::clear_modified() {
  if (GetArenaNoVirtual() == nullptr && modified_ != nullptr) {
    delete modified_;
  }
  modified_ = nullptr;
}
void PeerInfo::clear_created() {
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
PeerInfo::PeerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Peer.PeerInfo)
}
PeerInfo::PeerInfo(const PeerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_peer_id()) {
    peer_id_ = new ::Catalyst::Protocol::Peer::PeerId(*from.peer_id_);
  } else {
    peer_id_ = nullptr;
  }
  if (from._internal_has_inactive_for()) {
    inactive_for_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.inactive_for_);
  } else {
    inactive_for_ = nullptr;
  }
  if (from._internal_has_last_seen()) {
    last_seen_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_seen_);
  } else {
    last_seen_ = nullptr;
  }
  if (from._internal_has_modified()) {
    modified_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.modified_);
  } else {
    modified_ = nullptr;
  }
  if (from._internal_has_created()) {
    created_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  ::memcpy(&reputation_, &from.reputation_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_unreachable_) -
    reinterpret_cast<char*>(&reputation_)) + sizeof(is_unreachable_));
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Peer.PeerInfo)
}

void PeerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerInfo_Peer_2eproto.base);
  ::memset(&peer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_unreachable_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(is_unreachable_));
}

PeerInfo::~PeerInfo() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Peer.PeerInfo)
  SharedDtor();
}

void PeerInfo::SharedDtor() {
  if (this != internal_default_instance()) delete peer_id_;
  if (this != internal_default_instance()) delete inactive_for_;
  if (this != internal_default_instance()) delete last_seen_;
  if (this != internal_default_instance()) delete modified_;
  if (this != internal_default_instance()) delete created_;
}

void PeerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerInfo& PeerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerInfo_Peer_2eproto.base);
  return *internal_default_instance();
}


void PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Peer.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_id_ != nullptr) {
    delete peer_id_;
  }
  peer_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inactive_for_ != nullptr) {
    delete inactive_for_;
  }
  inactive_for_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_seen_ != nullptr) {
    delete last_seen_;
  }
  last_seen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modified_ != nullptr) {
    delete modified_;
  }
  modified_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  ::memset(&reputation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_unreachable_) -
      reinterpret_cast<char*>(&reputation_)) + sizeof(is_unreachable_));
  _internal_metadata_.Clear();
}

const char* PeerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 reputation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reputation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_blacklisted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_blacklisted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_unreachable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_unreachable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration inactive_for = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inactive_for(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_seen = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_seen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp modified = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_modified(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Peer.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  if (this->has_peer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_id(this), target, stream);
  }

  // sint32 reputation = 2;
  if (this->reputation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_reputation(), target);
  }

  // bool is_blacklisted = 3;
  if (this->is_blacklisted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_blacklisted(), target);
  }

  // bool is_unreachable = 4;
  if (this->is_unreachable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_unreachable(), target);
  }

  // .google.protobuf.Duration inactive_for = 5;
  if (this->has_inactive_for()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::inactive_for(this), target, stream);
  }

  // .google.protobuf.Timestamp last_seen = 6;
  if (this->has_last_seen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::last_seen(this), target, stream);
  }

  // .google.protobuf.Timestamp modified = 7;
  if (this->has_modified()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::modified(this), target, stream);
  }

  // .google.protobuf.Timestamp created = 8;
  if (this->has_created()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::created(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Peer.PeerInfo)
  return target;
}

size_t PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Peer.PeerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  if (this->has_peer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_id_);
  }

  // .google.protobuf.Duration inactive_for = 5;
  if (this->has_inactive_for()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inactive_for_);
  }

  // .google.protobuf.Timestamp last_seen = 6;
  if (this->has_last_seen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_seen_);
  }

  // .google.protobuf.Timestamp modified = 7;
  if (this->has_modified()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modified_);
  }

  // .google.protobuf.Timestamp created = 8;
  if (this->has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // sint32 reputation = 2;
  if (this->reputation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_reputation());
  }

  // bool is_blacklisted = 3;
  if (this->is_blacklisted() != 0) {
    total_size += 1 + 1;
  }

  // bool is_unreachable = 4;
  if (this->is_unreachable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Peer.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Peer.PeerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Peer.PeerInfo)
    MergeFrom(*source);
  }
}

void PeerInfo::MergeFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Peer.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_id()) {
    _internal_mutable_peer_id()->::Catalyst::Protocol::Peer::PeerId::MergeFrom(from._internal_peer_id());
  }
  if (from.has_inactive_for()) {
    _internal_mutable_inactive_for()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_inactive_for());
  }
  if (from.has_last_seen()) {
    _internal_mutable_last_seen()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_seen());
  }
  if (from.has_modified()) {
    _internal_mutable_modified()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_modified());
  }
  if (from.has_created()) {
    _internal_mutable_created()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created());
  }
  if (from.reputation() != 0) {
    _internal_set_reputation(from._internal_reputation());
  }
  if (from.is_blacklisted() != 0) {
    _internal_set_is_blacklisted(from._internal_is_blacklisted());
  }
  if (from.is_unreachable() != 0) {
    _internal_set_is_unreachable(from._internal_is_unreachable());
  }
}

void PeerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Peer.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerInfo::CopyFrom(const PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Peer.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfo::IsInitialized() const {
  return true;
}

void PeerInfo::InternalSwap(PeerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_id_, other->peer_id_);
  swap(inactive_for_, other->inactive_for_);
  swap(last_seen_, other->last_seen_);
  swap(modified_, other->modified_);
  swap(created_, other->created_);
  swap(reputation_, other->reputation_);
  swap(is_blacklisted_, other->is_blacklisted_);
  swap(is_unreachable_, other->is_unreachable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Peer
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Peer::PeerId* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Peer::PeerId >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Peer::PeerId >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Peer::PeerInfo* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Peer::PeerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Peer::PeerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
