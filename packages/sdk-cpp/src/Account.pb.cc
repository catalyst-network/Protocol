// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Account.proto

#include "Account.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Catalyst {
namespace Protocol {
namespace Account {
class AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Address> _instance;
} _Address_default_instance_;
}  // namespace Account
}  // namespace Protocol
}  // namespace Catalyst
static void InitDefaultsscc_info_Address_Account_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Account::_Address_default_instance_;
    new (ptr) ::Catalyst::Protocol::Account::Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Account::Address::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Address_Account_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Address_Account_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Account_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Account_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Account_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Account_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Account::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Account::Address, network_type_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Account::Address, account_type_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Account::Address, public_key_hash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Catalyst::Protocol::Account::Address)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Account::_Address_default_instance_),
};

const char descriptor_table_protodef_Account_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rAccount.proto\022\031Catalyst.Protocol.Accou"
  "nt\032\022Cryptography.proto\032\rNetwork.proto\"\236\001"
  "\n\007Address\022<\n\014network_type\030\001 \001(\0162&.Cataly"
  "st.Protocol.Network.NetworkType\022<\n\014accou"
  "nt_type\030\002 \001(\0162&.Catalyst.Protocol.Accoun"
  "t.AccountType\022\027\n\017public_key_hash\030\003 \001(\014*q"
  "\n\013AccountType\022\030\n\024ACCOUNT_TYPE_UNKNOWN\020\000\022"
  "\022\n\016PUBLIC_ACCOUNT\020\010\022\030\n\024CONFIDENTIAL_ACCO"
  "UNT\020\020\022\032\n\026SMART_CONTRACT_ACCOUNT\020\030B\002P\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Account_2eproto_deps[2] = {
  &::descriptor_table_Cryptography_2eproto,
  &::descriptor_table_Network_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Account_2eproto_sccs[1] = {
  &scc_info_Address_Account_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Account_2eproto_once;
static bool descriptor_table_Account_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Account_2eproto = {
  &descriptor_table_Account_2eproto_initialized, descriptor_table_protodef_Account_2eproto, "Account.proto", 365,
  &descriptor_table_Account_2eproto_once, descriptor_table_Account_2eproto_sccs, descriptor_table_Account_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_Account_2eproto::offsets,
  file_level_metadata_Account_2eproto, 1, file_level_enum_descriptors_Account_2eproto, file_level_service_descriptors_Account_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Account_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Account_2eproto), true);
namespace Catalyst {
namespace Protocol {
namespace Account {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Account_2eproto);
  return file_level_enum_descriptors_Account_2eproto[0];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 16:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Address::InitAsDefaultInstance() {
}
class Address::_Internal {
 public:
};

Address::Address()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Account.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key_hash().empty()) {
    public_key_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_hash_);
  }
  ::memcpy(&network_type_, &from.network_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_type_) -
    reinterpret_cast<char*>(&network_type_)) + sizeof(account_type_));
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Account.Address)
}

void Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Address_Account_2eproto.base);
  public_key_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_type_) -
      reinterpret_cast<char*>(&network_type_)) + sizeof(account_type_));
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Account.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  public_key_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Address& Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Address_Account_2eproto.base);
  return *internal_default_instance();
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Account.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_type_) -
      reinterpret_cast<char*>(&network_type_)) + sizeof(account_type_));
  _internal_metadata_.Clear();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Network.NetworkType network_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_network_type(static_cast<::Catalyst::Protocol::Network::NetworkType>(val));
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Account.AccountType account_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_account_type(static_cast<::Catalyst::Protocol::Account::AccountType>(val));
        } else goto handle_unusual;
        continue;
      // bytes public_key_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_key_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Account.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Network.NetworkType network_type = 1;
  if (this->network_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_network_type(), target);
  }

  // .Catalyst.Protocol.Account.AccountType account_type = 2;
  if (this->account_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_account_type(), target);
  }

  // bytes public_key_hash = 3;
  if (this->public_key_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_public_key_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Account.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Account.Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key_hash = 3;
  if (this->public_key_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key_hash());
  }

  // .Catalyst.Protocol.Network.NetworkType network_type = 1;
  if (this->network_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network_type());
  }

  // .Catalyst.Protocol.Account.AccountType account_type = 2;
  if (this->account_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_account_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Account.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Account.Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Account.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Account.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_key_hash().size() > 0) {

    public_key_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.public_key_hash_);
  }
  if (from.network_type() != 0) {
    _internal_set_network_type(from._internal_network_type());
  }
  if (from.account_type() != 0) {
    _internal_set_account_type(from._internal_account_type());
  }
}

void Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Account.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Account.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  public_key_hash_.Swap(&other->public_key_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(network_type_, other->network_type_);
  swap(account_type_, other->account_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Account
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Account::Address* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Account::Address >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Account::Address >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
