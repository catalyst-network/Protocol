// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Account.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Catalyst {
namespace Protocol {
namespace Account {
class AddressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Address> {
} _Address_default_instance_;

namespace protobuf_Account_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, network_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, account_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, public_key_hash_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Address)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Address_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Account.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Address_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::Catalyst::Protocol::Cryptography::protobuf_Cryptography_2eproto::InitDefaults();
  ::Catalyst::Protocol::Network::protobuf_Network_2eproto::InitDefaults();
  _Address_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rAccount.proto\022\031Catalyst.Protocol.Accou"
      "nt\032\022Cryptography.proto\032\rNetwork.proto\"\236\001"
      "\n\007Address\022<\n\014network_type\030\001 \001(\0162&.Cataly"
      "st.Protocol.Network.NetworkType\022<\n\014accou"
      "nt_type\030\002 \001(\0162&.Catalyst.Protocol.Accoun"
      "t.AccountType\022\027\n\017public_key_hash\030\003 \001(\014*q"
      "\n\013AccountType\022\030\n\024ACCOUNT_TYPE_UNKNOWN\020\000\022"
      "\022\n\016PUBLIC_ACCOUNT\020\010\022\030\n\024CONFIDENTIAL_ACCO"
      "UNT\020\020\022\032\n\026SMART_CONTRACT_ACCOUNT\020\030B\002P\001b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Account.proto", &protobuf_RegisterTypes);
  ::Catalyst::Protocol::Cryptography::protobuf_Cryptography_2eproto::AddDescriptors();
  ::Catalyst::Protocol::Network::protobuf_Network_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Account_2eproto

const ::google::protobuf::EnumDescriptor* AccountType_descriptor() {
  protobuf_Account_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Account_2eproto::file_level_enum_descriptors[0];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 16:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address::kNetworkTypeFieldNumber;
const int Address::kAccountTypeFieldNumber;
const int Address::kPublicKeyHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address::Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Account_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Account.Address)
}
Address::Address(const Address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key_hash().size() > 0) {
    public_key_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_hash_);
  }
  ::memcpy(&network_type_, &from.network_type_,
    reinterpret_cast<char*>(&account_type_) -
    reinterpret_cast<char*>(&network_type_) + sizeof(account_type_));
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Account.Address)
}

void Address::SharedCtor() {
  public_key_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_type_, 0, reinterpret_cast<char*>(&account_type_) -
    reinterpret_cast<char*>(&network_type_) + sizeof(account_type_));
  _cached_size_ = 0;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Account.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  public_key_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_Account_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Account_2eproto::file_level_metadata[0].descriptor;
}

const Address& Address::default_instance() {
  protobuf_Account_2eproto::InitDefaults();
  return *internal_default_instance();
}

Address* Address::New(::google::protobuf::Arena* arena) const {
  Address* n = new Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Account.Address)
  public_key_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&network_type_, 0, reinterpret_cast<char*>(&account_type_) -
    reinterpret_cast<char*>(&network_type_) + sizeof(account_type_));
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Account.Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Network.NetworkType network_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_network_type(static_cast< ::Catalyst::Protocol::Network::NetworkType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Account.AccountType account_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_account_type(static_cast< ::Catalyst::Protocol::Account::AccountType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes public_key_hash = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Account.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Account.Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Account.Address)
  // .Catalyst.Protocol.Network.NetworkType network_type = 1;
  if (this->network_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->network_type(), output);
  }

  // .Catalyst.Protocol.Account.AccountType account_type = 2;
  if (this->account_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->account_type(), output);
  }

  // bytes public_key_hash = 3;
  if (this->public_key_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->public_key_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Account.Address)
}

::google::protobuf::uint8* Address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Account.Address)
  // .Catalyst.Protocol.Network.NetworkType network_type = 1;
  if (this->network_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->network_type(), target);
  }

  // .Catalyst.Protocol.Account.AccountType account_type = 2;
  if (this->account_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->account_type(), target);
  }

  // bytes public_key_hash = 3;
  if (this->public_key_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->public_key_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Account.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Account.Address)
  size_t total_size = 0;

  // bytes public_key_hash = 3;
  if (this->public_key_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key_hash());
  }

  // .Catalyst.Protocol.Network.NetworkType network_type = 1;
  if (this->network_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_type());
  }

  // .Catalyst.Protocol.Account.AccountType account_type = 2;
  if (this->account_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->account_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Account.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Account.Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Account.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Account.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.public_key_hash().size() > 0) {

    public_key_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_hash_);
  }
  if (from.network_type() != 0) {
    set_network_type(from.network_type());
  }
  if (from.account_type() != 0) {
    set_account_type(from.account_type());
  }
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Account.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Account.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::Swap(Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address::InternalSwap(Address* other) {
  public_key_hash_.Swap(&other->public_key_hash_);
  std::swap(network_type_, other->network_type_);
  std::swap(account_type_, other->account_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_Account_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Account_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Address

// .Catalyst.Protocol.Network.NetworkType network_type = 1;
void Address::clear_network_type() {
  network_type_ = 0;
}
::Catalyst::Protocol::Network::NetworkType Address::network_type() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Account.Address.network_type)
  return static_cast< ::Catalyst::Protocol::Network::NetworkType >(network_type_);
}
void Address::set_network_type(::Catalyst::Protocol::Network::NetworkType value) {
  
  network_type_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Account.Address.network_type)
}

// .Catalyst.Protocol.Account.AccountType account_type = 2;
void Address::clear_account_type() {
  account_type_ = 0;
}
::Catalyst::Protocol::Account::AccountType Address::account_type() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Account.Address.account_type)
  return static_cast< ::Catalyst::Protocol::Account::AccountType >(account_type_);
}
void Address::set_account_type(::Catalyst::Protocol::Account::AccountType value) {
  
  account_type_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Account.Address.account_type)
}

// bytes public_key_hash = 3;
void Address::clear_public_key_hash() {
  public_key_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Address::public_key_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Account.Address.public_key_hash)
  return public_key_hash_.GetNoArena();
}
void Address::set_public_key_hash(const ::std::string& value) {
  
  public_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Account.Address.public_key_hash)
}
#if LANG_CXX11
void Address::set_public_key_hash(::std::string&& value) {
  
  public_key_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Account.Address.public_key_hash)
}
#endif
void Address::set_public_key_hash(const char* value) {
  
  public_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Account.Address.public_key_hash)
}
void Address::set_public_key_hash(const void* value, size_t size) {
  
  public_key_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Account.Address.public_key_hash)
}
::std::string* Address::mutable_public_key_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Account.Address.public_key_hash)
  return public_key_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Address::release_public_key_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Account.Address.public_key_hash)
  
  return public_key_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Address::set_allocated_public_key_hash(::std::string* public_key_hash) {
  if (public_key_hash != NULL) {
    
  } else {
    
  }
  public_key_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Account.Address.public_key_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Account
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)
