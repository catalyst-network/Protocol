// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#ifndef PROTOBUF_INCLUDED_Common_2eproto
#define PROTOBUF_INCLUDED_Common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto 

namespace protobuf_Common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Common_2eproto
namespace Catalyst {
namespace Protocol {
namespace Common {
class PeerId;
class PeerIdDefaultTypeInternal;
extern PeerIdDefaultTypeInternal _PeerId_default_instance_;
class PeerInfo;
class PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
class ProtocolErrorMessageSigned;
class ProtocolErrorMessageSignedDefaultTypeInternal;
extern ProtocolErrorMessageSignedDefaultTypeInternal _ProtocolErrorMessageSigned_default_instance_;
class ProtocolMessage;
class ProtocolMessageDefaultTypeInternal;
extern ProtocolMessageDefaultTypeInternal _ProtocolMessage_default_instance_;
class ProtocolMessageSigned;
class ProtocolMessageSignedDefaultTypeInternal;
extern ProtocolMessageSignedDefaultTypeInternal _ProtocolMessageSigned_default_instance_;
class SigningContext;
class SigningContextDefaultTypeInternal;
extern SigningContextDefaultTypeInternal _SigningContext_default_instance_;
}  // namespace Common
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
template<> ::Catalyst::Protocol::Common::PeerId* Arena::CreateMaybeMessage<::Catalyst::Protocol::Common::PeerId>(Arena*);
template<> ::Catalyst::Protocol::Common::PeerInfo* Arena::CreateMaybeMessage<::Catalyst::Protocol::Common::PeerInfo>(Arena*);
template<> ::Catalyst::Protocol::Common::ProtocolErrorMessageSigned* Arena::CreateMaybeMessage<::Catalyst::Protocol::Common::ProtocolErrorMessageSigned>(Arena*);
template<> ::Catalyst::Protocol::Common::ProtocolMessage* Arena::CreateMaybeMessage<::Catalyst::Protocol::Common::ProtocolMessage>(Arena*);
template<> ::Catalyst::Protocol::Common::ProtocolMessageSigned* Arena::CreateMaybeMessage<::Catalyst::Protocol::Common::ProtocolMessageSigned>(Arena*);
template<> ::Catalyst::Protocol::Common::SigningContext* Arena::CreateMaybeMessage<::Catalyst::Protocol::Common::SigningContext>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Catalyst {
namespace Protocol {
namespace Common {

enum Network {
  NETWORK_UNKNOWN = 0,
  MAINNET = 1,
  DEVNET = 2,
  TESTNET = 3,
  Network_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Network_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Network_IsValid(int value);
const Network Network_MIN = NETWORK_UNKNOWN;
const Network Network_MAX = TESTNET;
const int Network_ARRAYSIZE = Network_MAX + 1;

const ::google::protobuf::EnumDescriptor* Network_descriptor();
inline const ::std::string& Network_Name(Network value) {
  return ::google::protobuf::internal::NameOfEnum(
    Network_descriptor(), value);
}
inline bool Network_Parse(
    const ::std::string& name, Network* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Network>(
    Network_descriptor(), name, value);
}
enum SignatureType {
  SIGNATURE_TYPE_UNKNOWN = 0,
  TRANSACTION_PUBLIC = 1,
  TRANSACTION_CONFIDENTIAL = 2,
  PROTOCOL_RPC = 3,
  PROTOCOL_PEER = 4,
  SignatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SignatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SignatureType_IsValid(int value);
const SignatureType SignatureType_MIN = SIGNATURE_TYPE_UNKNOWN;
const SignatureType SignatureType_MAX = PROTOCOL_PEER;
const int SignatureType_ARRAYSIZE = SignatureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SignatureType_descriptor();
inline const ::std::string& SignatureType_Name(SignatureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SignatureType_descriptor(), value);
}
inline bool SignatureType_Parse(
    const ::std::string& name, SignatureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignatureType>(
    SignatureType_descriptor(), name, value);
}
// ===================================================================

class PeerId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Common.PeerId) */ {
 public:
  PeerId();
  virtual ~PeerId();

  PeerId(const PeerId& from);

  inline PeerId& operator=(const PeerId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerId(PeerId&& from) noexcept
    : PeerId() {
    *this = ::std::move(from);
  }

  inline PeerId& operator=(PeerId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerId* internal_default_instance() {
    return reinterpret_cast<const PeerId*>(
               &_PeerId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PeerId* other);
  friend void swap(PeerId& a, PeerId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerId* New() const final {
    return CreateMaybeMessage<PeerId>(NULL);
  }

  PeerId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerId& from);
  void MergeFrom(const PeerId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes clientId = 1;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const void* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // bytes protocolVersion = 2;
  void clear_protocolversion();
  static const int kProtocolVersionFieldNumber = 2;
  const ::std::string& protocolversion() const;
  void set_protocolversion(const ::std::string& value);
  #if LANG_CXX11
  void set_protocolversion(::std::string&& value);
  #endif
  void set_protocolversion(const char* value);
  void set_protocolversion(const void* value, size_t size);
  ::std::string* mutable_protocolversion();
  ::std::string* release_protocolversion();
  void set_allocated_protocolversion(::std::string* protocolversion);

  // bytes ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // bytes port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  #if LANG_CXX11
  void set_port(::std::string&& value);
  #endif
  void set_port(const char* value);
  void set_port(const void* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // bytes publicKey = 5;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 5;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Common.PeerId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr protocolversion_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtocolErrorMessageSigned : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Common.ProtocolErrorMessageSigned) */ {
 public:
  ProtocolErrorMessageSigned();
  virtual ~ProtocolErrorMessageSigned();

  ProtocolErrorMessageSigned(const ProtocolErrorMessageSigned& from);

  inline ProtocolErrorMessageSigned& operator=(const ProtocolErrorMessageSigned& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtocolErrorMessageSigned(ProtocolErrorMessageSigned&& from) noexcept
    : ProtocolErrorMessageSigned() {
    *this = ::std::move(from);
  }

  inline ProtocolErrorMessageSigned& operator=(ProtocolErrorMessageSigned&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolErrorMessageSigned& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtocolErrorMessageSigned* internal_default_instance() {
    return reinterpret_cast<const ProtocolErrorMessageSigned*>(
               &_ProtocolErrorMessageSigned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ProtocolErrorMessageSigned* other);
  friend void swap(ProtocolErrorMessageSigned& a, ProtocolErrorMessageSigned& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtocolErrorMessageSigned* New() const final {
    return CreateMaybeMessage<ProtocolErrorMessageSigned>(NULL);
  }

  ProtocolErrorMessageSigned* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolErrorMessageSigned>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtocolErrorMessageSigned& from);
  void MergeFrom(const ProtocolErrorMessageSigned& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolErrorMessageSigned* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // bytes correlationId = 3;
  void clear_correlationid();
  static const int kCorrelationIdFieldNumber = 3;
  const ::std::string& correlationid() const;
  void set_correlationid(const ::std::string& value);
  #if LANG_CXX11
  void set_correlationid(::std::string&& value);
  #endif
  void set_correlationid(const char* value);
  void set_correlationid(const void* value, size_t size);
  ::std::string* mutable_correlationid();
  ::std::string* release_correlationid();
  void set_allocated_correlationid(::std::string* correlationid);

  // .Catalyst.Protocol.Common.PeerId peerId = 2;
  bool has_peerid() const;
  void clear_peerid();
  static const int kPeerIdFieldNumber = 2;
  private:
  const ::Catalyst::Protocol::Common::PeerId& _internal_peerid() const;
  public:
  const ::Catalyst::Protocol::Common::PeerId& peerid() const;
  ::Catalyst::Protocol::Common::PeerId* release_peerid();
  ::Catalyst::Protocol::Common::PeerId* mutable_peerid();
  void set_allocated_peerid(::Catalyst::Protocol::Common::PeerId* peerid);

  // int32 code = 4;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Common.ProtocolErrorMessageSigned)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr correlationid_;
  ::Catalyst::Protocol::Common::PeerId* peerid_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtocolMessageSigned : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Common.ProtocolMessageSigned) */ {
 public:
  ProtocolMessageSigned();
  virtual ~ProtocolMessageSigned();

  ProtocolMessageSigned(const ProtocolMessageSigned& from);

  inline ProtocolMessageSigned& operator=(const ProtocolMessageSigned& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtocolMessageSigned(ProtocolMessageSigned&& from) noexcept
    : ProtocolMessageSigned() {
    *this = ::std::move(from);
  }

  inline ProtocolMessageSigned& operator=(ProtocolMessageSigned&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolMessageSigned& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtocolMessageSigned* internal_default_instance() {
    return reinterpret_cast<const ProtocolMessageSigned*>(
               &_ProtocolMessageSigned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ProtocolMessageSigned* other);
  friend void swap(ProtocolMessageSigned& a, ProtocolMessageSigned& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtocolMessageSigned* New() const final {
    return CreateMaybeMessage<ProtocolMessageSigned>(NULL);
  }

  ProtocolMessageSigned* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolMessageSigned>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtocolMessageSigned& from);
  void MergeFrom(const ProtocolMessageSigned& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolMessageSigned* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // .Catalyst.Protocol.Common.ProtocolMessage message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  private:
  const ::Catalyst::Protocol::Common::ProtocolMessage& _internal_message() const;
  public:
  const ::Catalyst::Protocol::Common::ProtocolMessage& message() const;
  ::Catalyst::Protocol::Common::ProtocolMessage* release_message();
  ::Catalyst::Protocol::Common::ProtocolMessage* mutable_message();
  void set_allocated_message(::Catalyst::Protocol::Common::ProtocolMessage* message);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Common.ProtocolMessageSigned)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::Catalyst::Protocol::Common::ProtocolMessage* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtocolMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Common.ProtocolMessage) */ {
 public:
  ProtocolMessage();
  virtual ~ProtocolMessage();

  ProtocolMessage(const ProtocolMessage& from);

  inline ProtocolMessage& operator=(const ProtocolMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtocolMessage(ProtocolMessage&& from) noexcept
    : ProtocolMessage() {
    *this = ::std::move(from);
  }

  inline ProtocolMessage& operator=(ProtocolMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtocolMessage* internal_default_instance() {
    return reinterpret_cast<const ProtocolMessage*>(
               &_ProtocolMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProtocolMessage* other);
  friend void swap(ProtocolMessage& a, ProtocolMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtocolMessage* New() const final {
    return CreateMaybeMessage<ProtocolMessage>(NULL);
  }

  ProtocolMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtocolMessage& from);
  void MergeFrom(const ProtocolMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes correlationId = 2;
  void clear_correlationid();
  static const int kCorrelationIdFieldNumber = 2;
  const ::std::string& correlationid() const;
  void set_correlationid(const ::std::string& value);
  #if LANG_CXX11
  void set_correlationid(::std::string&& value);
  #endif
  void set_correlationid(const char* value);
  void set_correlationid(const void* value, size_t size);
  ::std::string* mutable_correlationid();
  ::std::string* release_correlationid();
  void set_allocated_correlationid(::std::string* correlationid);

  // string type_url = 3;
  void clear_type_url();
  static const int kTypeUrlFieldNumber = 3;
  const ::std::string& type_url() const;
  void set_type_url(const ::std::string& value);
  #if LANG_CXX11
  void set_type_url(::std::string&& value);
  #endif
  void set_type_url(const char* value);
  void set_type_url(const char* value, size_t size);
  ::std::string* mutable_type_url();
  ::std::string* release_type_url();
  void set_allocated_type_url(::std::string* type_url);

  // bytes value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .Catalyst.Protocol.Common.PeerId peerId = 1;
  bool has_peerid() const;
  void clear_peerid();
  static const int kPeerIdFieldNumber = 1;
  private:
  const ::Catalyst::Protocol::Common::PeerId& _internal_peerid() const;
  public:
  const ::Catalyst::Protocol::Common::PeerId& peerid() const;
  ::Catalyst::Protocol::Common::PeerId* release_peerid();
  ::Catalyst::Protocol::Common::PeerId* mutable_peerid();
  void set_allocated_peerid(::Catalyst::Protocol::Common::PeerId* peerid);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Common.ProtocolMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr correlationid_;
  ::google::protobuf::internal::ArenaStringPtr type_url_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::Catalyst::Protocol::Common::PeerId* peerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Common.PeerInfo) */ {
 public:
  PeerInfo();
  virtual ~PeerInfo();

  PeerInfo(const PeerInfo& from);

  inline PeerInfo& operator=(const PeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerInfo(PeerInfo&& from) noexcept
    : PeerInfo() {
    *this = ::std::move(from);
  }

  inline PeerInfo& operator=(PeerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerInfo* internal_default_instance() {
    return reinterpret_cast<const PeerInfo*>(
               &_PeerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PeerInfo* other);
  friend void swap(PeerInfo& a, PeerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerInfo* New() const final {
    return CreateMaybeMessage<PeerInfo>(NULL);
  }

  PeerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerInfo& from);
  void MergeFrom(const PeerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Common.PeerId peerId = 1;
  bool has_peerid() const;
  void clear_peerid();
  static const int kPeerIdFieldNumber = 1;
  private:
  const ::Catalyst::Protocol::Common::PeerId& _internal_peerid() const;
  public:
  const ::Catalyst::Protocol::Common::PeerId& peerid() const;
  ::Catalyst::Protocol::Common::PeerId* release_peerid();
  ::Catalyst::Protocol::Common::PeerId* mutable_peerid();
  void set_allocated_peerid(::Catalyst::Protocol::Common::PeerId* peerid);

  // .google.protobuf.Duration inactiveFor = 5;
  bool has_inactivefor() const;
  void clear_inactivefor();
  static const int kInactiveForFieldNumber = 5;
  private:
  const ::google::protobuf::Duration& _internal_inactivefor() const;
  public:
  const ::google::protobuf::Duration& inactivefor() const;
  ::google::protobuf::Duration* release_inactivefor();
  ::google::protobuf::Duration* mutable_inactivefor();
  void set_allocated_inactivefor(::google::protobuf::Duration* inactivefor);

  // .google.protobuf.Timestamp lastSeen = 6;
  bool has_lastseen() const;
  void clear_lastseen();
  static const int kLastSeenFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_lastseen() const;
  public:
  const ::google::protobuf::Timestamp& lastseen() const;
  ::google::protobuf::Timestamp* release_lastseen();
  ::google::protobuf::Timestamp* mutable_lastseen();
  void set_allocated_lastseen(::google::protobuf::Timestamp* lastseen);

  // .google.protobuf.Timestamp modified = 7;
  bool has_modified() const;
  void clear_modified();
  static const int kModifiedFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_modified() const;
  public:
  const ::google::protobuf::Timestamp& modified() const;
  ::google::protobuf::Timestamp* release_modified();
  ::google::protobuf::Timestamp* mutable_modified();
  void set_allocated_modified(::google::protobuf::Timestamp* modified);

  // .google.protobuf.Timestamp created = 8;
  bool has_created() const;
  void clear_created();
  static const int kCreatedFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_created() const;
  public:
  const ::google::protobuf::Timestamp& created() const;
  ::google::protobuf::Timestamp* release_created();
  ::google::protobuf::Timestamp* mutable_created();
  void set_allocated_created(::google::protobuf::Timestamp* created);

  // int32 reputation = 2;
  void clear_reputation();
  static const int kReputationFieldNumber = 2;
  ::google::protobuf::int32 reputation() const;
  void set_reputation(::google::protobuf::int32 value);

  // bool blackListed = 3;
  void clear_blacklisted();
  static const int kBlackListedFieldNumber = 3;
  bool blacklisted() const;
  void set_blacklisted(bool value);

  // bool isAwolPeer = 4;
  void clear_isawolpeer();
  static const int kIsAwolPeerFieldNumber = 4;
  bool isawolpeer() const;
  void set_isawolpeer(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Common.PeerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Common::PeerId* peerid_;
  ::google::protobuf::Duration* inactivefor_;
  ::google::protobuf::Timestamp* lastseen_;
  ::google::protobuf::Timestamp* modified_;
  ::google::protobuf::Timestamp* created_;
  ::google::protobuf::int32 reputation_;
  bool blacklisted_;
  bool isawolpeer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SigningContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Common.SigningContext) */ {
 public:
  SigningContext();
  virtual ~SigningContext();

  SigningContext(const SigningContext& from);

  inline SigningContext& operator=(const SigningContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SigningContext(SigningContext&& from) noexcept
    : SigningContext() {
    *this = ::std::move(from);
  }

  inline SigningContext& operator=(SigningContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SigningContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SigningContext* internal_default_instance() {
    return reinterpret_cast<const SigningContext*>(
               &_SigningContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SigningContext* other);
  friend void swap(SigningContext& a, SigningContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SigningContext* New() const final {
    return CreateMaybeMessage<SigningContext>(NULL);
  }

  SigningContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SigningContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SigningContext& from);
  void MergeFrom(const SigningContext& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Common.Network network = 1;
  void clear_network();
  static const int kNetworkFieldNumber = 1;
  ::Catalyst::Protocol::Common::Network network() const;
  void set_network(::Catalyst::Protocol::Common::Network value);

  // .Catalyst.Protocol.Common.SignatureType signatureType = 2;
  void clear_signaturetype();
  static const int kSignatureTypeFieldNumber = 2;
  ::Catalyst::Protocol::Common::SignatureType signaturetype() const;
  void set_signaturetype(::Catalyst::Protocol::Common::SignatureType value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Common.SigningContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int network_;
  int signaturetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeerId

// bytes clientId = 1;
inline void PeerId::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerId::clientid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerId.clientId)
  return clientid_.GetNoArena();
}
inline void PeerId::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.PeerId.clientId)
}
#if LANG_CXX11
inline void PeerId::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.PeerId.clientId)
}
#endif
inline void PeerId::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.PeerId.clientId)
}
inline void PeerId::set_clientid(const void* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.PeerId.clientId)
}
inline ::std::string* PeerId::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.PeerId.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerId::release_clientid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.PeerId.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerId::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.PeerId.clientId)
}

// bytes protocolVersion = 2;
inline void PeerId::clear_protocolversion() {
  protocolversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerId::protocolversion() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerId.protocolVersion)
  return protocolversion_.GetNoArena();
}
inline void PeerId::set_protocolversion(const ::std::string& value) {
  
  protocolversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.PeerId.protocolVersion)
}
#if LANG_CXX11
inline void PeerId::set_protocolversion(::std::string&& value) {
  
  protocolversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.PeerId.protocolVersion)
}
#endif
inline void PeerId::set_protocolversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocolversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.PeerId.protocolVersion)
}
inline void PeerId::set_protocolversion(const void* value, size_t size) {
  
  protocolversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.PeerId.protocolVersion)
}
inline ::std::string* PeerId::mutable_protocolversion() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.PeerId.protocolVersion)
  return protocolversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerId::release_protocolversion() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.PeerId.protocolVersion)
  
  return protocolversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerId::set_allocated_protocolversion(::std::string* protocolversion) {
  if (protocolversion != NULL) {
    
  } else {
    
  }
  protocolversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocolversion);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.PeerId.protocolVersion)
}

// bytes ip = 3;
inline void PeerId::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerId::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerId.ip)
  return ip_.GetNoArena();
}
inline void PeerId::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.PeerId.ip)
}
#if LANG_CXX11
inline void PeerId::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.PeerId.ip)
}
#endif
inline void PeerId::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.PeerId.ip)
}
inline void PeerId::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.PeerId.ip)
}
inline ::std::string* PeerId::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.PeerId.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerId::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.PeerId.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerId::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.PeerId.ip)
}

// bytes port = 4;
inline void PeerId::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerId::port() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerId.port)
  return port_.GetNoArena();
}
inline void PeerId::set_port(const ::std::string& value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.PeerId.port)
}
#if LANG_CXX11
inline void PeerId::set_port(::std::string&& value) {
  
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.PeerId.port)
}
#endif
inline void PeerId::set_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.PeerId.port)
}
inline void PeerId::set_port(const void* value, size_t size) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.PeerId.port)
}
inline ::std::string* PeerId::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.PeerId.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerId::release_port() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.PeerId.port)
  
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerId::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.PeerId.port)
}

// bytes publicKey = 5;
inline void PeerId::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerId::publickey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerId.publicKey)
  return publickey_.GetNoArena();
}
inline void PeerId::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.PeerId.publicKey)
}
#if LANG_CXX11
inline void PeerId::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.PeerId.publicKey)
}
#endif
inline void PeerId::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.PeerId.publicKey)
}
inline void PeerId::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.PeerId.publicKey)
}
inline ::std::string* PeerId::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.PeerId.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerId::release_publickey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.PeerId.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerId::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.PeerId.publicKey)
}

// -------------------------------------------------------------------

// ProtocolErrorMessageSigned

// bytes signature = 1;
inline void ProtocolErrorMessageSigned::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolErrorMessageSigned::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.signature)
  return signature_.GetNoArena();
}
inline void ProtocolErrorMessageSigned::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.signature)
}
#if LANG_CXX11
inline void ProtocolErrorMessageSigned::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.signature)
}
#endif
inline void ProtocolErrorMessageSigned::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.signature)
}
inline void ProtocolErrorMessageSigned::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.signature)
}
inline ::std::string* ProtocolErrorMessageSigned::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolErrorMessageSigned::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolErrorMessageSigned::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.signature)
}

// .Catalyst.Protocol.Common.PeerId peerId = 2;
inline bool ProtocolErrorMessageSigned::has_peerid() const {
  return this != internal_default_instance() && peerid_ != NULL;
}
inline void ProtocolErrorMessageSigned::clear_peerid() {
  if (GetArenaNoVirtual() == NULL && peerid_ != NULL) {
    delete peerid_;
  }
  peerid_ = NULL;
}
inline const ::Catalyst::Protocol::Common::PeerId& ProtocolErrorMessageSigned::_internal_peerid() const {
  return *peerid_;
}
inline const ::Catalyst::Protocol::Common::PeerId& ProtocolErrorMessageSigned::peerid() const {
  const ::Catalyst::Protocol::Common::PeerId* p = peerid_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.peerId)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Common::PeerId*>(
      &::Catalyst::Protocol::Common::_PeerId_default_instance_);
}
inline ::Catalyst::Protocol::Common::PeerId* ProtocolErrorMessageSigned::release_peerid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.peerId)
  
  ::Catalyst::Protocol::Common::PeerId* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Common::PeerId* ProtocolErrorMessageSigned::mutable_peerid() {
  
  if (peerid_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Common::PeerId>(GetArenaNoVirtual());
    peerid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.peerId)
  return peerid_;
}
inline void ProtocolErrorMessageSigned::set_allocated_peerid(::Catalyst::Protocol::Common::PeerId* peerid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peerid_;
  }
  if (peerid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peerid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peerid, submessage_arena);
    }
    
  } else {
    
  }
  peerid_ = peerid;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.peerId)
}

// bytes correlationId = 3;
inline void ProtocolErrorMessageSigned::clear_correlationid() {
  correlationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolErrorMessageSigned::correlationid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.correlationId)
  return correlationid_.GetNoArena();
}
inline void ProtocolErrorMessageSigned::set_correlationid(const ::std::string& value) {
  
  correlationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.correlationId)
}
#if LANG_CXX11
inline void ProtocolErrorMessageSigned::set_correlationid(::std::string&& value) {
  
  correlationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.correlationId)
}
#endif
inline void ProtocolErrorMessageSigned::set_correlationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  correlationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.correlationId)
}
inline void ProtocolErrorMessageSigned::set_correlationid(const void* value, size_t size) {
  
  correlationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.correlationId)
}
inline ::std::string* ProtocolErrorMessageSigned::mutable_correlationid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.correlationId)
  return correlationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolErrorMessageSigned::release_correlationid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.correlationId)
  
  return correlationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolErrorMessageSigned::set_allocated_correlationid(::std::string* correlationid) {
  if (correlationid != NULL) {
    
  } else {
    
  }
  correlationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlationid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.correlationId)
}

// int32 code = 4;
inline void ProtocolErrorMessageSigned::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 ProtocolErrorMessageSigned::code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.code)
  return code_;
}
inline void ProtocolErrorMessageSigned::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.ProtocolErrorMessageSigned.code)
}

// -------------------------------------------------------------------

// ProtocolMessageSigned

// bytes signature = 1;
inline void ProtocolMessageSigned::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolMessageSigned::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.ProtocolMessageSigned.signature)
  return signature_.GetNoArena();
}
inline void ProtocolMessageSigned::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.ProtocolMessageSigned.signature)
}
#if LANG_CXX11
inline void ProtocolMessageSigned::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.ProtocolMessageSigned.signature)
}
#endif
inline void ProtocolMessageSigned::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.ProtocolMessageSigned.signature)
}
inline void ProtocolMessageSigned::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.ProtocolMessageSigned.signature)
}
inline ::std::string* ProtocolMessageSigned::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.ProtocolMessageSigned.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolMessageSigned::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.ProtocolMessageSigned.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolMessageSigned::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.ProtocolMessageSigned.signature)
}

// .Catalyst.Protocol.Common.ProtocolMessage message = 2;
inline bool ProtocolMessageSigned::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void ProtocolMessageSigned::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
inline const ::Catalyst::Protocol::Common::ProtocolMessage& ProtocolMessageSigned::_internal_message() const {
  return *message_;
}
inline const ::Catalyst::Protocol::Common::ProtocolMessage& ProtocolMessageSigned::message() const {
  const ::Catalyst::Protocol::Common::ProtocolMessage* p = message_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.ProtocolMessageSigned.message)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Common::ProtocolMessage*>(
      &::Catalyst::Protocol::Common::_ProtocolMessage_default_instance_);
}
inline ::Catalyst::Protocol::Common::ProtocolMessage* ProtocolMessageSigned::release_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.ProtocolMessageSigned.message)
  
  ::Catalyst::Protocol::Common::ProtocolMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Common::ProtocolMessage* ProtocolMessageSigned::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Common::ProtocolMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.ProtocolMessageSigned.message)
  return message_;
}
inline void ProtocolMessageSigned::set_allocated_message(::Catalyst::Protocol::Common::ProtocolMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.ProtocolMessageSigned.message)
}

// -------------------------------------------------------------------

// ProtocolMessage

// .Catalyst.Protocol.Common.PeerId peerId = 1;
inline bool ProtocolMessage::has_peerid() const {
  return this != internal_default_instance() && peerid_ != NULL;
}
inline void ProtocolMessage::clear_peerid() {
  if (GetArenaNoVirtual() == NULL && peerid_ != NULL) {
    delete peerid_;
  }
  peerid_ = NULL;
}
inline const ::Catalyst::Protocol::Common::PeerId& ProtocolMessage::_internal_peerid() const {
  return *peerid_;
}
inline const ::Catalyst::Protocol::Common::PeerId& ProtocolMessage::peerid() const {
  const ::Catalyst::Protocol::Common::PeerId* p = peerid_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.ProtocolMessage.peerId)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Common::PeerId*>(
      &::Catalyst::Protocol::Common::_PeerId_default_instance_);
}
inline ::Catalyst::Protocol::Common::PeerId* ProtocolMessage::release_peerid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.ProtocolMessage.peerId)
  
  ::Catalyst::Protocol::Common::PeerId* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Common::PeerId* ProtocolMessage::mutable_peerid() {
  
  if (peerid_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Common::PeerId>(GetArenaNoVirtual());
    peerid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.ProtocolMessage.peerId)
  return peerid_;
}
inline void ProtocolMessage::set_allocated_peerid(::Catalyst::Protocol::Common::PeerId* peerid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peerid_;
  }
  if (peerid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peerid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peerid, submessage_arena);
    }
    
  } else {
    
  }
  peerid_ = peerid;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.ProtocolMessage.peerId)
}

// bytes correlationId = 2;
inline void ProtocolMessage::clear_correlationid() {
  correlationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolMessage::correlationid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.ProtocolMessage.correlationId)
  return correlationid_.GetNoArena();
}
inline void ProtocolMessage::set_correlationid(const ::std::string& value) {
  
  correlationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.ProtocolMessage.correlationId)
}
#if LANG_CXX11
inline void ProtocolMessage::set_correlationid(::std::string&& value) {
  
  correlationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.ProtocolMessage.correlationId)
}
#endif
inline void ProtocolMessage::set_correlationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  correlationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.ProtocolMessage.correlationId)
}
inline void ProtocolMessage::set_correlationid(const void* value, size_t size) {
  
  correlationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.ProtocolMessage.correlationId)
}
inline ::std::string* ProtocolMessage::mutable_correlationid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.ProtocolMessage.correlationId)
  return correlationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolMessage::release_correlationid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.ProtocolMessage.correlationId)
  
  return correlationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolMessage::set_allocated_correlationid(::std::string* correlationid) {
  if (correlationid != NULL) {
    
  } else {
    
  }
  correlationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlationid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.ProtocolMessage.correlationId)
}

// string type_url = 3;
inline void ProtocolMessage::clear_type_url() {
  type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolMessage::type_url() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.ProtocolMessage.type_url)
  return type_url_.GetNoArena();
}
inline void ProtocolMessage::set_type_url(const ::std::string& value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.ProtocolMessage.type_url)
}
#if LANG_CXX11
inline void ProtocolMessage::set_type_url(::std::string&& value) {
  
  type_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.ProtocolMessage.type_url)
}
#endif
inline void ProtocolMessage::set_type_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.ProtocolMessage.type_url)
}
inline void ProtocolMessage::set_type_url(const char* value, size_t size) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.ProtocolMessage.type_url)
}
inline ::std::string* ProtocolMessage::mutable_type_url() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.ProtocolMessage.type_url)
  return type_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolMessage::release_type_url() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.ProtocolMessage.type_url)
  
  return type_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolMessage::set_allocated_type_url(::std::string* type_url) {
  if (type_url != NULL) {
    
  } else {
    
  }
  type_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_url);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.ProtocolMessage.type_url)
}

// bytes value = 4;
inline void ProtocolMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolMessage::value() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.ProtocolMessage.value)
  return value_.GetNoArena();
}
inline void ProtocolMessage::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.ProtocolMessage.value)
}
#if LANG_CXX11
inline void ProtocolMessage::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Common.ProtocolMessage.value)
}
#endif
inline void ProtocolMessage::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Common.ProtocolMessage.value)
}
inline void ProtocolMessage::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Common.ProtocolMessage.value)
}
inline ::std::string* ProtocolMessage::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.ProtocolMessage.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolMessage::release_value() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.ProtocolMessage.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolMessage::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.ProtocolMessage.value)
}

// -------------------------------------------------------------------

// PeerInfo

// .Catalyst.Protocol.Common.PeerId peerId = 1;
inline bool PeerInfo::has_peerid() const {
  return this != internal_default_instance() && peerid_ != NULL;
}
inline void PeerInfo::clear_peerid() {
  if (GetArenaNoVirtual() == NULL && peerid_ != NULL) {
    delete peerid_;
  }
  peerid_ = NULL;
}
inline const ::Catalyst::Protocol::Common::PeerId& PeerInfo::_internal_peerid() const {
  return *peerid_;
}
inline const ::Catalyst::Protocol::Common::PeerId& PeerInfo::peerid() const {
  const ::Catalyst::Protocol::Common::PeerId* p = peerid_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerInfo.peerId)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Common::PeerId*>(
      &::Catalyst::Protocol::Common::_PeerId_default_instance_);
}
inline ::Catalyst::Protocol::Common::PeerId* PeerInfo::release_peerid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.PeerInfo.peerId)
  
  ::Catalyst::Protocol::Common::PeerId* temp = peerid_;
  peerid_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Common::PeerId* PeerInfo::mutable_peerid() {
  
  if (peerid_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Common::PeerId>(GetArenaNoVirtual());
    peerid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.PeerInfo.peerId)
  return peerid_;
}
inline void PeerInfo::set_allocated_peerid(::Catalyst::Protocol::Common::PeerId* peerid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peerid_;
  }
  if (peerid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peerid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peerid, submessage_arena);
    }
    
  } else {
    
  }
  peerid_ = peerid;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.PeerInfo.peerId)
}

// int32 reputation = 2;
inline void PeerInfo::clear_reputation() {
  reputation_ = 0;
}
inline ::google::protobuf::int32 PeerInfo::reputation() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerInfo.reputation)
  return reputation_;
}
inline void PeerInfo::set_reputation(::google::protobuf::int32 value) {
  
  reputation_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.PeerInfo.reputation)
}

// bool blackListed = 3;
inline void PeerInfo::clear_blacklisted() {
  blacklisted_ = false;
}
inline bool PeerInfo::blacklisted() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerInfo.blackListed)
  return blacklisted_;
}
inline void PeerInfo::set_blacklisted(bool value) {
  
  blacklisted_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.PeerInfo.blackListed)
}

// bool isAwolPeer = 4;
inline void PeerInfo::clear_isawolpeer() {
  isawolpeer_ = false;
}
inline bool PeerInfo::isawolpeer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerInfo.isAwolPeer)
  return isawolpeer_;
}
inline void PeerInfo::set_isawolpeer(bool value) {
  
  isawolpeer_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.PeerInfo.isAwolPeer)
}

// .google.protobuf.Duration inactiveFor = 5;
inline bool PeerInfo::has_inactivefor() const {
  return this != internal_default_instance() && inactivefor_ != NULL;
}
inline const ::google::protobuf::Duration& PeerInfo::_internal_inactivefor() const {
  return *inactivefor_;
}
inline const ::google::protobuf::Duration& PeerInfo::inactivefor() const {
  const ::google::protobuf::Duration* p = inactivefor_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerInfo.inactiveFor)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* PeerInfo::release_inactivefor() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.PeerInfo.inactiveFor)
  
  ::google::protobuf::Duration* temp = inactivefor_;
  inactivefor_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* PeerInfo::mutable_inactivefor() {
  
  if (inactivefor_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    inactivefor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.PeerInfo.inactiveFor)
  return inactivefor_;
}
inline void PeerInfo::set_allocated_inactivefor(::google::protobuf::Duration* inactivefor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inactivefor_);
  }
  if (inactivefor) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(inactivefor)->GetArena();
    if (message_arena != submessage_arena) {
      inactivefor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inactivefor, submessage_arena);
    }
    
  } else {
    
  }
  inactivefor_ = inactivefor;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.PeerInfo.inactiveFor)
}

// .google.protobuf.Timestamp lastSeen = 6;
inline bool PeerInfo::has_lastseen() const {
  return this != internal_default_instance() && lastseen_ != NULL;
}
inline const ::google::protobuf::Timestamp& PeerInfo::_internal_lastseen() const {
  return *lastseen_;
}
inline const ::google::protobuf::Timestamp& PeerInfo::lastseen() const {
  const ::google::protobuf::Timestamp* p = lastseen_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerInfo.lastSeen)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PeerInfo::release_lastseen() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.PeerInfo.lastSeen)
  
  ::google::protobuf::Timestamp* temp = lastseen_;
  lastseen_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PeerInfo::mutable_lastseen() {
  
  if (lastseen_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    lastseen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.PeerInfo.lastSeen)
  return lastseen_;
}
inline void PeerInfo::set_allocated_lastseen(::google::protobuf::Timestamp* lastseen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lastseen_);
  }
  if (lastseen) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(lastseen)->GetArena();
    if (message_arena != submessage_arena) {
      lastseen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lastseen, submessage_arena);
    }
    
  } else {
    
  }
  lastseen_ = lastseen;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.PeerInfo.lastSeen)
}

// .google.protobuf.Timestamp modified = 7;
inline bool PeerInfo::has_modified() const {
  return this != internal_default_instance() && modified_ != NULL;
}
inline const ::google::protobuf::Timestamp& PeerInfo::_internal_modified() const {
  return *modified_;
}
inline const ::google::protobuf::Timestamp& PeerInfo::modified() const {
  const ::google::protobuf::Timestamp* p = modified_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerInfo.modified)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PeerInfo::release_modified() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.PeerInfo.modified)
  
  ::google::protobuf::Timestamp* temp = modified_;
  modified_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PeerInfo::mutable_modified() {
  
  if (modified_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    modified_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.PeerInfo.modified)
  return modified_;
}
inline void PeerInfo::set_allocated_modified(::google::protobuf::Timestamp* modified) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(modified_);
  }
  if (modified) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(modified)->GetArena();
    if (message_arena != submessage_arena) {
      modified = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, modified, submessage_arena);
    }
    
  } else {
    
  }
  modified_ = modified;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.PeerInfo.modified)
}

// .google.protobuf.Timestamp created = 8;
inline bool PeerInfo::has_created() const {
  return this != internal_default_instance() && created_ != NULL;
}
inline const ::google::protobuf::Timestamp& PeerInfo::_internal_created() const {
  return *created_;
}
inline const ::google::protobuf::Timestamp& PeerInfo::created() const {
  const ::google::protobuf::Timestamp* p = created_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.PeerInfo.created)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PeerInfo::release_created() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Common.PeerInfo.created)
  
  ::google::protobuf::Timestamp* temp = created_;
  created_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PeerInfo::mutable_created() {
  
  if (created_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    created_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Common.PeerInfo.created)
  return created_;
}
inline void PeerInfo::set_allocated_created(::google::protobuf::Timestamp* created) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_);
  }
  if (created) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Common.PeerInfo.created)
}

// -------------------------------------------------------------------

// SigningContext

// .Catalyst.Protocol.Common.Network network = 1;
inline void SigningContext::clear_network() {
  network_ = 0;
}
inline ::Catalyst::Protocol::Common::Network SigningContext::network() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.SigningContext.network)
  return static_cast< ::Catalyst::Protocol::Common::Network >(network_);
}
inline void SigningContext::set_network(::Catalyst::Protocol::Common::Network value) {
  
  network_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.SigningContext.network)
}

// .Catalyst.Protocol.Common.SignatureType signatureType = 2;
inline void SigningContext::clear_signaturetype() {
  signaturetype_ = 0;
}
inline ::Catalyst::Protocol::Common::SignatureType SigningContext::signaturetype() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Common.SigningContext.signatureType)
  return static_cast< ::Catalyst::Protocol::Common::SignatureType >(signaturetype_);
}
inline void SigningContext::set_signaturetype(::Catalyst::Protocol::Common::SignatureType value) {
  
  signaturetype_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Common.SigningContext.signatureType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace Protocol
}  // namespace Catalyst

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Catalyst::Protocol::Common::Network> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Common::Network>() {
  return ::Catalyst::Protocol::Common::Network_descriptor();
}
template <> struct is_proto_enum< ::Catalyst::Protocol::Common::SignatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Common::SignatureType>() {
  return ::Catalyst::Protocol::Common::SignatureType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Common_2eproto
