// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Account_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Account_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Cryptography.pb.h"
#include "Network.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Account_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Account_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Account_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Account {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
}  // namespace Account
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> ::Catalyst::Protocol::Account::Address* Arena::CreateMaybeMessage<::Catalyst::Protocol::Account::Address>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Catalyst {
namespace Protocol {
namespace Account {

enum AccountType : int {
  ACCOUNT_TYPE_UNKNOWN = 0,
  PUBLIC_ACCOUNT = 8,
  CONFIDENTIAL_ACCOUNT = 16,
  SMART_CONTRACT_ACCOUNT = 24,
  AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AccountType_IsValid(int value);
constexpr AccountType AccountType_MIN = ACCOUNT_TYPE_UNKNOWN;
constexpr AccountType AccountType_MAX = SMART_CONTRACT_ACCOUNT;
constexpr int AccountType_ARRAYSIZE = AccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor();
template<typename T>
inline const std::string& AccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountType_descriptor(), enum_t_value);
}
inline bool AccountType_Parse(
    const std::string& name, AccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountType>(
    AccountType_descriptor(), name, value);
}
// ===================================================================

class Address :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Account.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Account.Address";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Account_2eproto);
    return ::descriptor_table_Account_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyHashFieldNumber = 3,
    kNetworkTypeFieldNumber = 1,
    kAccountTypeFieldNumber = 2,
  };
  // bytes public_key_hash = 3;
  void clear_public_key_hash();
  const std::string& public_key_hash() const;
  void set_public_key_hash(const std::string& value);
  void set_public_key_hash(std::string&& value);
  void set_public_key_hash(const char* value);
  void set_public_key_hash(const void* value, size_t size);
  std::string* mutable_public_key_hash();
  std::string* release_public_key_hash();
  void set_allocated_public_key_hash(std::string* public_key_hash);
  private:
  const std::string& _internal_public_key_hash() const;
  void _internal_set_public_key_hash(const std::string& value);
  std::string* _internal_mutable_public_key_hash();
  public:

  // .Catalyst.Protocol.Network.NetworkType network_type = 1;
  void clear_network_type();
  ::Catalyst::Protocol::Network::NetworkType network_type() const;
  void set_network_type(::Catalyst::Protocol::Network::NetworkType value);
  private:
  ::Catalyst::Protocol::Network::NetworkType _internal_network_type() const;
  void _internal_set_network_type(::Catalyst::Protocol::Network::NetworkType value);
  public:

  // .Catalyst.Protocol.Account.AccountType account_type = 2;
  void clear_account_type();
  ::Catalyst::Protocol::Account::AccountType account_type() const;
  void set_account_type(::Catalyst::Protocol::Account::AccountType value);
  private:
  ::Catalyst::Protocol::Account::AccountType _internal_account_type() const;
  void _internal_set_account_type(::Catalyst::Protocol::Account::AccountType value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Account.Address)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_hash_;
  int network_type_;
  int account_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Account_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Address

// .Catalyst.Protocol.Network.NetworkType network_type = 1;
inline void Address::clear_network_type() {
  network_type_ = 0;
}
inline ::Catalyst::Protocol::Network::NetworkType Address::_internal_network_type() const {
  return static_cast< ::Catalyst::Protocol::Network::NetworkType >(network_type_);
}
inline ::Catalyst::Protocol::Network::NetworkType Address::network_type() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Account.Address.network_type)
  return _internal_network_type();
}
inline void Address::_internal_set_network_type(::Catalyst::Protocol::Network::NetworkType value) {
  
  network_type_ = value;
}
inline void Address::set_network_type(::Catalyst::Protocol::Network::NetworkType value) {
  _internal_set_network_type(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Account.Address.network_type)
}

// .Catalyst.Protocol.Account.AccountType account_type = 2;
inline void Address::clear_account_type() {
  account_type_ = 0;
}
inline ::Catalyst::Protocol::Account::AccountType Address::_internal_account_type() const {
  return static_cast< ::Catalyst::Protocol::Account::AccountType >(account_type_);
}
inline ::Catalyst::Protocol::Account::AccountType Address::account_type() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Account.Address.account_type)
  return _internal_account_type();
}
inline void Address::_internal_set_account_type(::Catalyst::Protocol::Account::AccountType value) {
  
  account_type_ = value;
}
inline void Address::set_account_type(::Catalyst::Protocol::Account::AccountType value) {
  _internal_set_account_type(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Account.Address.account_type)
}

// bytes public_key_hash = 3;
inline void Address::clear_public_key_hash() {
  public_key_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Address::public_key_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Account.Address.public_key_hash)
  return _internal_public_key_hash();
}
inline void Address::set_public_key_hash(const std::string& value) {
  _internal_set_public_key_hash(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Account.Address.public_key_hash)
}
inline std::string* Address::mutable_public_key_hash() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Account.Address.public_key_hash)
  return _internal_mutable_public_key_hash();
}
inline const std::string& Address::_internal_public_key_hash() const {
  return public_key_hash_.GetNoArena();
}
inline void Address::_internal_set_public_key_hash(const std::string& value) {
  
  public_key_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Address::set_public_key_hash(std::string&& value) {
  
  public_key_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Account.Address.public_key_hash)
}
inline void Address::set_public_key_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Account.Address.public_key_hash)
}
inline void Address::set_public_key_hash(const void* value, size_t size) {
  
  public_key_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Account.Address.public_key_hash)
}
inline std::string* Address::_internal_mutable_public_key_hash() {
  
  return public_key_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_public_key_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Account.Address.public_key_hash)
  
  return public_key_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_public_key_hash(std::string* public_key_hash) {
  if (public_key_hash != nullptr) {
    
  } else {
    
  }
  public_key_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Account.Address.public_key_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Account
}  // namespace Protocol
}  // namespace Catalyst

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Catalyst::Protocol::Account::AccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Account::AccountType>() {
  return ::Catalyst::Protocol::Account::AccountType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Account_2eproto
