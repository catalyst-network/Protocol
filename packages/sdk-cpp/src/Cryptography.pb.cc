// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cryptography.proto

#include "Cryptography.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Cryptography_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningContext_Cryptography_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Cryptography {
class SignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signature> _instance;
} _Signature_default_instance_;
class SigningContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigningContext> _instance;
} _SigningContext_default_instance_;
class SignatureBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureBatch> _instance;
} _SignatureBatch_default_instance_;
}  // namespace Cryptography
}  // namespace Protocol
}  // namespace Catalyst
static void InitDefaultsscc_info_Signature_Cryptography_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Cryptography::_Signature_default_instance_;
    new (ptr) ::Catalyst::Protocol::Cryptography::Signature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Cryptography::Signature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Signature_Cryptography_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Signature_Cryptography_2eproto}, {
      &scc_info_SigningContext_Cryptography_2eproto.base,}};

static void InitDefaultsscc_info_SignatureBatch_Cryptography_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Cryptography::_SignatureBatch_default_instance_;
    new (ptr) ::Catalyst::Protocol::Cryptography::SignatureBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Cryptography::SignatureBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignatureBatch_Cryptography_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignatureBatch_Cryptography_2eproto}, {}};

static void InitDefaultsscc_info_SigningContext_Cryptography_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Cryptography::_SigningContext_default_instance_;
    new (ptr) ::Catalyst::Protocol::Cryptography::SigningContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Cryptography::SigningContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigningContext_Cryptography_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigningContext_Cryptography_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Cryptography_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Cryptography_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Cryptography_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Cryptography_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::Signature, signing_context_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::Signature, raw_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::SigningContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::SigningContext, network_type_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::SigningContext, signature_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::SignatureBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::SignatureBatch, signatures_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::SignatureBatch, public_keys_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::SignatureBatch, messages_),
  PROTOBUF_FIELD_OFFSET(::Catalyst::Protocol::Cryptography::SignatureBatch, context_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Catalyst::Protocol::Cryptography::Signature)},
  { 7, -1, sizeof(::Catalyst::Protocol::Cryptography::SigningContext)},
  { 14, -1, sizeof(::Catalyst::Protocol::Cryptography::SignatureBatch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Cryptography::_Signature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Cryptography::_SigningContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Catalyst::Protocol::Cryptography::_SignatureBatch_default_instance_),
};

const char descriptor_table_protodef_Cryptography_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022Cryptography.proto\022\036Catalyst.Protocol."
  "Cryptography\032\rNetwork.proto\"g\n\tSignature"
  "\022G\n\017signing_context\030\001 \001(\0132..Catalyst.Pro"
  "tocol.Cryptography.SigningContext\022\021\n\traw"
  "_bytes\030\002 \001(\014\"\225\001\n\016SigningContext\022<\n\014netwo"
  "rk_type\030\001 \001(\0162&.Catalyst.Protocol.Networ"
  "k.NetworkType\022E\n\016signature_type\030\002 \001(\0162-."
  "Catalyst.Protocol.Cryptography.Signature"
  "Type\"\\\n\016SignatureBatch\022\022\n\nsignatures\030\001 \003"
  "(\014\022\023\n\013public_keys\030\002 \003(\014\022\020\n\010messages\030\003 \003("
  "\014\022\017\n\007context\030\004 \001(\014*\230\001\n\rSignatureType\022\032\n\026"
  "SIGNATURE_TYPE_UNKNOWN\020\000\022\026\n\022TRANSACTION_"
  "PUBLIC\020\001\022\034\n\030TRANSACTION_CONFIDENTIAL\020\002\022\020"
  "\n\014PROTOCOL_RPC\020\003\022\021\n\rPROTOCOL_PEER\020\004\022\020\n\014W"
  "EB3_MESSAGE\020\005*\222\002\n\tErrorCode\022\026\n\022ERROR_COD"
  "E_UNKNOWN\020\000\022\025\n\021INVALID_SIGNATURE\020\001\022\026\n\022IN"
  "VALID_PUBLIC_KEY\020\002\022\027\n\023INVALID_PRIVATE_KE"
  "Y\020\003\022\"\n\036SIGNATURE_VERIFICATION_FAILURE\020\004\022"
  "\032\n\026INVALID_CONTEXT_LENGTH\020\005\022\031\n\025INVALID_B"
  "ATCH_MESSAGE\020\006\022\033\n\027ARRAYS_NOT_EQUAL_LENGT"
  "H\020\007\022\036\n\032BATCH_VERIFICATION_FAILURE\020\010\022\r\n\010N"
  "O_ERROR\020\242\003B\002P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Cryptography_2eproto_deps[1] = {
  &::descriptor_table_Network_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Cryptography_2eproto_sccs[3] = {
  &scc_info_Signature_Cryptography_2eproto.base,
  &scc_info_SignatureBatch_Cryptography_2eproto.base,
  &scc_info_SigningContext_Cryptography_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Cryptography_2eproto_once;
static bool descriptor_table_Cryptography_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Cryptography_2eproto = {
  &descriptor_table_Cryptography_2eproto_initialized, descriptor_table_protodef_Cryptography_2eproto, "Cryptography.proto", 862,
  &descriptor_table_Cryptography_2eproto_once, descriptor_table_Cryptography_2eproto_sccs, descriptor_table_Cryptography_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_Cryptography_2eproto::offsets,
  file_level_metadata_Cryptography_2eproto, 3, file_level_enum_descriptors_Cryptography_2eproto, file_level_service_descriptors_Cryptography_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Cryptography_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Cryptography_2eproto), true);
namespace Catalyst {
namespace Protocol {
namespace Cryptography {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignatureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Cryptography_2eproto);
  return file_level_enum_descriptors_Cryptography_2eproto[0];
}
bool SignatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Cryptography_2eproto);
  return file_level_enum_descriptors_Cryptography_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 418:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Signature::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Cryptography::_Signature_default_instance_._instance.get_mutable()->signing_context_ = const_cast< ::Catalyst::Protocol::Cryptography::SigningContext*>(
      ::Catalyst::Protocol::Cryptography::SigningContext::internal_default_instance());
}
class Signature::_Internal {
 public:
  static const ::Catalyst::Protocol::Cryptography::SigningContext& signing_context(const Signature* msg);
};

const ::Catalyst::Protocol::Cryptography::SigningContext&
Signature::_Internal::signing_context(const Signature* msg) {
  return *msg->signing_context_;
}
Signature::Signature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Cryptography.Signature)
}
Signature::Signature(const Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_bytes().empty()) {
    raw_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
  }
  if (from._internal_has_signing_context()) {
    signing_context_ = new ::Catalyst::Protocol::Cryptography::SigningContext(*from.signing_context_);
  } else {
    signing_context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Cryptography.Signature)
}

void Signature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signature_Cryptography_2eproto.base);
  raw_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signing_context_ = nullptr;
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Cryptography.Signature)
  SharedDtor();
}

void Signature::SharedDtor() {
  raw_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signing_context_;
}

void Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signature& Signature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signature_Cryptography_2eproto.base);
  return *internal_default_instance();
}


void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Cryptography.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && signing_context_ != nullptr) {
    delete signing_context_;
  }
  signing_context_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Signature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signing_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes raw_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_raw_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Cryptography.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 1;
  if (this->has_signing_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::signing_context(this), target, stream);
  }

  // bytes raw_bytes = 2;
  if (this->raw_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_raw_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Cryptography.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Cryptography.Signature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes raw_bytes = 2;
  if (this->raw_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw_bytes());
  }

  // .Catalyst.Protocol.Cryptography.SigningContext signing_context = 1;
  if (this->has_signing_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signing_context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Cryptography.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Cryptography.Signature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Cryptography.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Cryptography.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_bytes().size() > 0) {

    raw_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
  }
  if (from.has_signing_context()) {
    _internal_mutable_signing_context()->::Catalyst::Protocol::Cryptography::SigningContext::MergeFrom(from._internal_signing_context());
  }
}

void Signature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Cryptography.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Cryptography.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::InternalSwap(Signature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  raw_bytes_.Swap(&other->raw_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signing_context_, other->signing_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SigningContext::InitAsDefaultInstance() {
}
class SigningContext::_Internal {
 public:
};

SigningContext::SigningContext()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Cryptography.SigningContext)
}
SigningContext::SigningContext(const SigningContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&network_type_, &from.network_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&signature_type_) -
    reinterpret_cast<char*>(&network_type_)) + sizeof(signature_type_));
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Cryptography.SigningContext)
}

void SigningContext::SharedCtor() {
  ::memset(&network_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signature_type_) -
      reinterpret_cast<char*>(&network_type_)) + sizeof(signature_type_));
}

SigningContext::~SigningContext() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Cryptography.SigningContext)
  SharedDtor();
}

void SigningContext::SharedDtor() {
}

void SigningContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigningContext& SigningContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigningContext_Cryptography_2eproto.base);
  return *internal_default_instance();
}


void SigningContext::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Cryptography.SigningContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&network_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signature_type_) -
      reinterpret_cast<char*>(&network_type_)) + sizeof(signature_type_));
  _internal_metadata_.Clear();
}

const char* SigningContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Catalyst.Protocol.Network.NetworkType network_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_network_type(static_cast<::Catalyst::Protocol::Network::NetworkType>(val));
        } else goto handle_unusual;
        continue;
      // .Catalyst.Protocol.Cryptography.SignatureType signature_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_signature_type(static_cast<::Catalyst::Protocol::Cryptography::SignatureType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigningContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Cryptography.SigningContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Network.NetworkType network_type = 1;
  if (this->network_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_network_type(), target);
  }

  // .Catalyst.Protocol.Cryptography.SignatureType signature_type = 2;
  if (this->signature_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_signature_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Cryptography.SigningContext)
  return target;
}

size_t SigningContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Cryptography.SigningContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Catalyst.Protocol.Network.NetworkType network_type = 1;
  if (this->network_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network_type());
  }

  // .Catalyst.Protocol.Cryptography.SignatureType signature_type = 2;
  if (this->signature_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_signature_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigningContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Cryptography.SigningContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SigningContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigningContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Cryptography.SigningContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Cryptography.SigningContext)
    MergeFrom(*source);
  }
}

void SigningContext::MergeFrom(const SigningContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Cryptography.SigningContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.network_type() != 0) {
    _internal_set_network_type(from._internal_network_type());
  }
  if (from.signature_type() != 0) {
    _internal_set_signature_type(from._internal_signature_type());
  }
}

void SigningContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Cryptography.SigningContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigningContext::CopyFrom(const SigningContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Cryptography.SigningContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningContext::IsInitialized() const {
  return true;
}

void SigningContext::InternalSwap(SigningContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(network_type_, other->network_type_);
  swap(signature_type_, other->signature_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignatureBatch::InitAsDefaultInstance() {
}
class SignatureBatch::_Internal {
 public:
};

SignatureBatch::SignatureBatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Cryptography.SignatureBatch)
}
SignatureBatch::SignatureBatch(const SignatureBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      signatures_(from.signatures_),
      public_keys_(from.public_keys_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context().empty()) {
    context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Cryptography.SignatureBatch)
}

void SignatureBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureBatch_Cryptography_2eproto.base);
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SignatureBatch::~SignatureBatch() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Cryptography.SignatureBatch)
  SharedDtor();
}

void SignatureBatch::SharedDtor() {
  context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignatureBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureBatch& SignatureBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureBatch_Cryptography_2eproto.base);
  return *internal_default_instance();
}


void SignatureBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Cryptography.SignatureBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  public_keys_.Clear();
  messages_.Clear();
  context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SignatureBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes signatures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes public_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_public_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Cryptography.SignatureBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes signatures = 1;
  for (int i = 0, n = this->_internal_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_signatures(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated bytes public_keys = 2;
  for (int i = 0, n = this->_internal_public_keys_size(); i < n; i++) {
    const auto& s = this->_internal_public_keys(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated bytes messages = 3;
  for (int i = 0, n = this->_internal_messages_size(); i < n; i++) {
    const auto& s = this->_internal_messages(i);
    target = stream->WriteBytes(3, s, target);
  }

  // bytes context = 4;
  if (this->context().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_context(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Cryptography.SignatureBatch)
  return target;
}

size_t SignatureBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Cryptography.SignatureBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signatures = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signatures_.size());
  for (int i = 0, n = signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signatures_.Get(i));
  }

  // repeated bytes public_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(public_keys_.size());
  for (int i = 0, n = public_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      public_keys_.Get(i));
  }

  // repeated bytes messages = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(messages_.size());
  for (int i = 0, n = messages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      messages_.Get(i));
  }

  // bytes context = 4;
  if (this->context().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_context());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Cryptography.SignatureBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Cryptography.SignatureBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Cryptography.SignatureBatch)
    MergeFrom(*source);
  }
}

void SignatureBatch::MergeFrom(const SignatureBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Cryptography.SignatureBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
  public_keys_.MergeFrom(from.public_keys_);
  messages_.MergeFrom(from.messages_);
  if (from.context().size() > 0) {

    context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
}

void SignatureBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Cryptography.SignatureBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureBatch::CopyFrom(const SignatureBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Cryptography.SignatureBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureBatch::IsInitialized() const {
  return true;
}

void SignatureBatch::InternalSwap(SignatureBatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
  public_keys_.InternalSwap(&other->public_keys_);
  messages_.InternalSwap(&other->messages_);
  context_.Swap(&other->context_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Cryptography
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Cryptography::Signature* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Cryptography::Signature >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Cryptography::Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Cryptography::SigningContext* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Cryptography::SigningContext >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Cryptography::SigningContext >(arena);
}
template<> PROTOBUF_NOINLINE ::Catalyst::Protocol::Cryptography::SignatureBatch* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Cryptography::SignatureBatch >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Cryptography::SignatureBatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
