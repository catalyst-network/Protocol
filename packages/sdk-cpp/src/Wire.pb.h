// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wire.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Wire_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Wire_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Cryptography.pb.h"
#include "Peer.pb.h"
#include "Transaction.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Wire_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Wire_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Wire_2eproto;
namespace Catalyst {
namespace Protocol {
namespace Wire {
class CandidateDeltaBroadcast;
class CandidateDeltaBroadcastDefaultTypeInternal;
extern CandidateDeltaBroadcastDefaultTypeInternal _CandidateDeltaBroadcast_default_instance_;
class DeltaDfsHashBroadcast;
class DeltaDfsHashBroadcastDefaultTypeInternal;
extern DeltaDfsHashBroadcastDefaultTypeInternal _DeltaDfsHashBroadcast_default_instance_;
class FavouriteDeltaBroadcast;
class FavouriteDeltaBroadcastDefaultTypeInternal;
extern FavouriteDeltaBroadcastDefaultTypeInternal _FavouriteDeltaBroadcast_default_instance_;
class ProtocolErrorMessage;
class ProtocolErrorMessageDefaultTypeInternal;
extern ProtocolErrorMessageDefaultTypeInternal _ProtocolErrorMessage_default_instance_;
class ProtocolMessage;
class ProtocolMessageDefaultTypeInternal;
extern ProtocolMessageDefaultTypeInternal _ProtocolMessage_default_instance_;
class TransactionBroadcast;
class TransactionBroadcastDefaultTypeInternal;
extern TransactionBroadcastDefaultTypeInternal _TransactionBroadcast_default_instance_;
}  // namespace Wire
}  // namespace Protocol
}  // namespace Catalyst
PROTOBUF_NAMESPACE_OPEN
template<> ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* Arena::CreateMaybeMessage<::Catalyst::Protocol::Wire::CandidateDeltaBroadcast>(Arena*);
template<> ::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast* Arena::CreateMaybeMessage<::Catalyst::Protocol::Wire::DeltaDfsHashBroadcast>(Arena*);
template<> ::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast* Arena::CreateMaybeMessage<::Catalyst::Protocol::Wire::FavouriteDeltaBroadcast>(Arena*);
template<> ::Catalyst::Protocol::Wire::ProtocolErrorMessage* Arena::CreateMaybeMessage<::Catalyst::Protocol::Wire::ProtocolErrorMessage>(Arena*);
template<> ::Catalyst::Protocol::Wire::ProtocolMessage* Arena::CreateMaybeMessage<::Catalyst::Protocol::Wire::ProtocolMessage>(Arena*);
template<> ::Catalyst::Protocol::Wire::TransactionBroadcast* Arena::CreateMaybeMessage<::Catalyst::Protocol::Wire::TransactionBroadcast>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Catalyst {
namespace Protocol {
namespace Wire {

// ===================================================================

class ProtocolErrorMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.ProtocolErrorMessage) */ {
 public:
  ProtocolErrorMessage();
  virtual ~ProtocolErrorMessage();

  ProtocolErrorMessage(const ProtocolErrorMessage& from);
  ProtocolErrorMessage(ProtocolErrorMessage&& from) noexcept
    : ProtocolErrorMessage() {
    *this = ::std::move(from);
  }

  inline ProtocolErrorMessage& operator=(const ProtocolErrorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolErrorMessage& operator=(ProtocolErrorMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolErrorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtocolErrorMessage* internal_default_instance() {
    return reinterpret_cast<const ProtocolErrorMessage*>(
               &_ProtocolErrorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtocolErrorMessage& a, ProtocolErrorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolErrorMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolErrorMessage* New() const final {
    return CreateMaybeMessage<ProtocolErrorMessage>(nullptr);
  }

  ProtocolErrorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolErrorMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolErrorMessage& from);
  void MergeFrom(const ProtocolErrorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolErrorMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Wire.ProtocolErrorMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Wire_2eproto);
    return ::descriptor_table_Wire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorrelationIdFieldNumber = 3,
    kSignatureFieldNumber = 1,
    kPeerIdFieldNumber = 2,
    kCodeFieldNumber = 4,
  };
  // bytes correlation_id = 3;
  void clear_correlation_id();
  const std::string& correlation_id() const;
  void set_correlation_id(const std::string& value);
  void set_correlation_id(std::string&& value);
  void set_correlation_id(const char* value);
  void set_correlation_id(const void* value, size_t size);
  std::string* mutable_correlation_id();
  std::string* release_correlation_id();
  void set_allocated_correlation_id(std::string* correlation_id);
  private:
  const std::string& _internal_correlation_id() const;
  void _internal_set_correlation_id(const std::string& value);
  std::string* _internal_mutable_correlation_id();
  public:

  // .Catalyst.Protocol.Cryptography.Signature signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Catalyst::Protocol::Cryptography::Signature& signature() const;
  ::Catalyst::Protocol::Cryptography::Signature* release_signature();
  ::Catalyst::Protocol::Cryptography::Signature* mutable_signature();
  void set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature);
  private:
  const ::Catalyst::Protocol::Cryptography::Signature& _internal_signature() const;
  ::Catalyst::Protocol::Cryptography::Signature* _internal_mutable_signature();
  public:

  // .Catalyst.Protocol.Peer.PeerId peer_id = 2;
  bool has_peer_id() const;
  private:
  bool _internal_has_peer_id() const;
  public:
  void clear_peer_id();
  const ::Catalyst::Protocol::Peer::PeerId& peer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* release_peer_id();
  ::Catalyst::Protocol::Peer::PeerId* mutable_peer_id();
  void set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id);
  private:
  const ::Catalyst::Protocol::Peer::PeerId& _internal_peer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* _internal_mutable_peer_id();
  public:

  // int32 code = 4;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.ProtocolErrorMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correlation_id_;
  ::Catalyst::Protocol::Cryptography::Signature* signature_;
  ::Catalyst::Protocol::Peer::PeerId* peer_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Wire_2eproto;
};
// -------------------------------------------------------------------

class ProtocolMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.ProtocolMessage) */ {
 public:
  ProtocolMessage();
  virtual ~ProtocolMessage();

  ProtocolMessage(const ProtocolMessage& from);
  ProtocolMessage(ProtocolMessage&& from) noexcept
    : ProtocolMessage() {
    *this = ::std::move(from);
  }

  inline ProtocolMessage& operator=(const ProtocolMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolMessage& operator=(ProtocolMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtocolMessage* internal_default_instance() {
    return reinterpret_cast<const ProtocolMessage*>(
               &_ProtocolMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtocolMessage& a, ProtocolMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolMessage* New() const final {
    return CreateMaybeMessage<ProtocolMessage>(nullptr);
  }

  ProtocolMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolMessage& from);
  void MergeFrom(const ProtocolMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Wire.ProtocolMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Wire_2eproto);
    return ::descriptor_table_Wire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorrelationIdFieldNumber = 2,
    kTypeUrlFieldNumber = 3,
    kValueFieldNumber = 4,
    kPeerIdFieldNumber = 1,
    kSignatureFieldNumber = 5,
  };
  // bytes correlation_id = 2;
  void clear_correlation_id();
  const std::string& correlation_id() const;
  void set_correlation_id(const std::string& value);
  void set_correlation_id(std::string&& value);
  void set_correlation_id(const char* value);
  void set_correlation_id(const void* value, size_t size);
  std::string* mutable_correlation_id();
  std::string* release_correlation_id();
  void set_allocated_correlation_id(std::string* correlation_id);
  private:
  const std::string& _internal_correlation_id() const;
  void _internal_set_correlation_id(const std::string& value);
  std::string* _internal_mutable_correlation_id();
  public:

  // string type_url = 3;
  void clear_type_url();
  const std::string& type_url() const;
  void set_type_url(const std::string& value);
  void set_type_url(std::string&& value);
  void set_type_url(const char* value);
  void set_type_url(const char* value, size_t size);
  std::string* mutable_type_url();
  std::string* release_type_url();
  void set_allocated_type_url(std::string* type_url);
  private:
  const std::string& _internal_type_url() const;
  void _internal_set_type_url(const std::string& value);
  std::string* _internal_mutable_type_url();
  public:

  // bytes value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .Catalyst.Protocol.Peer.PeerId peer_id = 1;
  bool has_peer_id() const;
  private:
  bool _internal_has_peer_id() const;
  public:
  void clear_peer_id();
  const ::Catalyst::Protocol::Peer::PeerId& peer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* release_peer_id();
  ::Catalyst::Protocol::Peer::PeerId* mutable_peer_id();
  void set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id);
  private:
  const ::Catalyst::Protocol::Peer::PeerId& _internal_peer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* _internal_mutable_peer_id();
  public:

  // .Catalyst.Protocol.Cryptography.Signature signature = 5;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::Catalyst::Protocol::Cryptography::Signature& signature() const;
  ::Catalyst::Protocol::Cryptography::Signature* release_signature();
  ::Catalyst::Protocol::Cryptography::Signature* mutable_signature();
  void set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature);
  private:
  const ::Catalyst::Protocol::Cryptography::Signature& _internal_signature() const;
  ::Catalyst::Protocol::Cryptography::Signature* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.ProtocolMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correlation_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::Catalyst::Protocol::Peer::PeerId* peer_id_;
  ::Catalyst::Protocol::Cryptography::Signature* signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Wire_2eproto;
};
// -------------------------------------------------------------------

class TransactionBroadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.TransactionBroadcast) */ {
 public:
  TransactionBroadcast();
  virtual ~TransactionBroadcast();

  TransactionBroadcast(const TransactionBroadcast& from);
  TransactionBroadcast(TransactionBroadcast&& from) noexcept
    : TransactionBroadcast() {
    *this = ::std::move(from);
  }

  inline TransactionBroadcast& operator=(const TransactionBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionBroadcast& operator=(TransactionBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionBroadcast* internal_default_instance() {
    return reinterpret_cast<const TransactionBroadcast*>(
               &_TransactionBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionBroadcast& a, TransactionBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionBroadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionBroadcast* New() const final {
    return CreateMaybeMessage<TransactionBroadcast>(nullptr);
  }

  TransactionBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionBroadcast& from);
  void MergeFrom(const TransactionBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Wire.TransactionBroadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Wire_2eproto);
    return ::descriptor_table_Wire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicEntryFieldNumber = 1,
  };
  // .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
  bool has_public_entry() const;
  private:
  bool _internal_has_public_entry() const;
  public:
  void clear_public_entry();
  const ::Catalyst::Protocol::Transaction::PublicEntry& public_entry() const;
  ::Catalyst::Protocol::Transaction::PublicEntry* release_public_entry();
  ::Catalyst::Protocol::Transaction::PublicEntry* mutable_public_entry();
  void set_allocated_public_entry(::Catalyst::Protocol::Transaction::PublicEntry* public_entry);
  private:
  const ::Catalyst::Protocol::Transaction::PublicEntry& _internal_public_entry() const;
  ::Catalyst::Protocol::Transaction::PublicEntry* _internal_mutable_public_entry();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.TransactionBroadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Transaction::PublicEntry* public_entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Wire_2eproto;
};
// -------------------------------------------------------------------

class CandidateDeltaBroadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.CandidateDeltaBroadcast) */ {
 public:
  CandidateDeltaBroadcast();
  virtual ~CandidateDeltaBroadcast();

  CandidateDeltaBroadcast(const CandidateDeltaBroadcast& from);
  CandidateDeltaBroadcast(CandidateDeltaBroadcast&& from) noexcept
    : CandidateDeltaBroadcast() {
    *this = ::std::move(from);
  }

  inline CandidateDeltaBroadcast& operator=(const CandidateDeltaBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidateDeltaBroadcast& operator=(CandidateDeltaBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandidateDeltaBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CandidateDeltaBroadcast* internal_default_instance() {
    return reinterpret_cast<const CandidateDeltaBroadcast*>(
               &_CandidateDeltaBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CandidateDeltaBroadcast& a, CandidateDeltaBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidateDeltaBroadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidateDeltaBroadcast* New() const final {
    return CreateMaybeMessage<CandidateDeltaBroadcast>(nullptr);
  }

  CandidateDeltaBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidateDeltaBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandidateDeltaBroadcast& from);
  void MergeFrom(const CandidateDeltaBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateDeltaBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Wire.CandidateDeltaBroadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Wire_2eproto);
    return ::descriptor_table_Wire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kPreviousDeltaDfsHashFieldNumber = 3,
    kProducerIdFieldNumber = 2,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes previous_delta_dfs_hash = 3;
  void clear_previous_delta_dfs_hash();
  const std::string& previous_delta_dfs_hash() const;
  void set_previous_delta_dfs_hash(const std::string& value);
  void set_previous_delta_dfs_hash(std::string&& value);
  void set_previous_delta_dfs_hash(const char* value);
  void set_previous_delta_dfs_hash(const void* value, size_t size);
  std::string* mutable_previous_delta_dfs_hash();
  std::string* release_previous_delta_dfs_hash();
  void set_allocated_previous_delta_dfs_hash(std::string* previous_delta_dfs_hash);
  private:
  const std::string& _internal_previous_delta_dfs_hash() const;
  void _internal_set_previous_delta_dfs_hash(const std::string& value);
  std::string* _internal_mutable_previous_delta_dfs_hash();
  public:

  // .Catalyst.Protocol.Peer.PeerId producer_id = 2;
  bool has_producer_id() const;
  private:
  bool _internal_has_producer_id() const;
  public:
  void clear_producer_id();
  const ::Catalyst::Protocol::Peer::PeerId& producer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* release_producer_id();
  ::Catalyst::Protocol::Peer::PeerId* mutable_producer_id();
  void set_allocated_producer_id(::Catalyst::Protocol::Peer::PeerId* producer_id);
  private:
  const ::Catalyst::Protocol::Peer::PeerId& _internal_producer_id() const;
  ::Catalyst::Protocol::Peer::PeerId* _internal_mutable_producer_id();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.CandidateDeltaBroadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_delta_dfs_hash_;
  ::Catalyst::Protocol::Peer::PeerId* producer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Wire_2eproto;
};
// -------------------------------------------------------------------

class FavouriteDeltaBroadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast) */ {
 public:
  FavouriteDeltaBroadcast();
  virtual ~FavouriteDeltaBroadcast();

  FavouriteDeltaBroadcast(const FavouriteDeltaBroadcast& from);
  FavouriteDeltaBroadcast(FavouriteDeltaBroadcast&& from) noexcept
    : FavouriteDeltaBroadcast() {
    *this = ::std::move(from);
  }

  inline FavouriteDeltaBroadcast& operator=(const FavouriteDeltaBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline FavouriteDeltaBroadcast& operator=(FavouriteDeltaBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FavouriteDeltaBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FavouriteDeltaBroadcast* internal_default_instance() {
    return reinterpret_cast<const FavouriteDeltaBroadcast*>(
               &_FavouriteDeltaBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FavouriteDeltaBroadcast& a, FavouriteDeltaBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(FavouriteDeltaBroadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FavouriteDeltaBroadcast* New() const final {
    return CreateMaybeMessage<FavouriteDeltaBroadcast>(nullptr);
  }

  FavouriteDeltaBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FavouriteDeltaBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FavouriteDeltaBroadcast& from);
  void MergeFrom(const FavouriteDeltaBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FavouriteDeltaBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Wire.FavouriteDeltaBroadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Wire_2eproto);
    return ::descriptor_table_Wire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 1,
    kVoterIdFieldNumber = 2,
  };
  // .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast& candidate() const;
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* release_candidate();
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* mutable_candidate();
  void set_allocated_candidate(::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* candidate);
  private:
  const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast& _internal_candidate() const;
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* _internal_mutable_candidate();
  public:

  // .Catalyst.Protocol.Peer.PeerId voter_id = 2;
  bool has_voter_id() const;
  private:
  bool _internal_has_voter_id() const;
  public:
  void clear_voter_id();
  const ::Catalyst::Protocol::Peer::PeerId& voter_id() const;
  ::Catalyst::Protocol::Peer::PeerId* release_voter_id();
  ::Catalyst::Protocol::Peer::PeerId* mutable_voter_id();
  void set_allocated_voter_id(::Catalyst::Protocol::Peer::PeerId* voter_id);
  private:
  const ::Catalyst::Protocol::Peer::PeerId& _internal_voter_id() const;
  ::Catalyst::Protocol::Peer::PeerId* _internal_mutable_voter_id();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* candidate_;
  ::Catalyst::Protocol::Peer::PeerId* voter_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Wire_2eproto;
};
// -------------------------------------------------------------------

class DeltaDfsHashBroadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast) */ {
 public:
  DeltaDfsHashBroadcast();
  virtual ~DeltaDfsHashBroadcast();

  DeltaDfsHashBroadcast(const DeltaDfsHashBroadcast& from);
  DeltaDfsHashBroadcast(DeltaDfsHashBroadcast&& from) noexcept
    : DeltaDfsHashBroadcast() {
    *this = ::std::move(from);
  }

  inline DeltaDfsHashBroadcast& operator=(const DeltaDfsHashBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaDfsHashBroadcast& operator=(DeltaDfsHashBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeltaDfsHashBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeltaDfsHashBroadcast* internal_default_instance() {
    return reinterpret_cast<const DeltaDfsHashBroadcast*>(
               &_DeltaDfsHashBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeltaDfsHashBroadcast& a, DeltaDfsHashBroadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaDfsHashBroadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeltaDfsHashBroadcast* New() const final {
    return CreateMaybeMessage<DeltaDfsHashBroadcast>(nullptr);
  }

  DeltaDfsHashBroadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeltaDfsHashBroadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeltaDfsHashBroadcast& from);
  void MergeFrom(const DeltaDfsHashBroadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeltaDfsHashBroadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Catalyst.Protocol.Wire.DeltaDfsHashBroadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Wire_2eproto);
    return ::descriptor_table_Wire_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaDfsHashFieldNumber = 1,
    kPreviousDeltaDfsHashFieldNumber = 2,
  };
  // bytes delta_dfs_hash = 1;
  void clear_delta_dfs_hash();
  const std::string& delta_dfs_hash() const;
  void set_delta_dfs_hash(const std::string& value);
  void set_delta_dfs_hash(std::string&& value);
  void set_delta_dfs_hash(const char* value);
  void set_delta_dfs_hash(const void* value, size_t size);
  std::string* mutable_delta_dfs_hash();
  std::string* release_delta_dfs_hash();
  void set_allocated_delta_dfs_hash(std::string* delta_dfs_hash);
  private:
  const std::string& _internal_delta_dfs_hash() const;
  void _internal_set_delta_dfs_hash(const std::string& value);
  std::string* _internal_mutable_delta_dfs_hash();
  public:

  // bytes previous_delta_dfs_hash = 2;
  void clear_previous_delta_dfs_hash();
  const std::string& previous_delta_dfs_hash() const;
  void set_previous_delta_dfs_hash(const std::string& value);
  void set_previous_delta_dfs_hash(std::string&& value);
  void set_previous_delta_dfs_hash(const char* value);
  void set_previous_delta_dfs_hash(const void* value, size_t size);
  std::string* mutable_previous_delta_dfs_hash();
  std::string* release_previous_delta_dfs_hash();
  void set_allocated_previous_delta_dfs_hash(std::string* previous_delta_dfs_hash);
  private:
  const std::string& _internal_previous_delta_dfs_hash() const;
  void _internal_set_previous_delta_dfs_hash(const std::string& value);
  std::string* _internal_mutable_previous_delta_dfs_hash();
  public:

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_dfs_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_delta_dfs_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Wire_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtocolErrorMessage

// .Catalyst.Protocol.Cryptography.Signature signature = 1;
inline bool ProtocolErrorMessage::_internal_has_signature() const {
  return this != internal_default_instance() && signature_ != nullptr;
}
inline bool ProtocolErrorMessage::has_signature() const {
  return _internal_has_signature();
}
inline const ::Catalyst::Protocol::Cryptography::Signature& ProtocolErrorMessage::_internal_signature() const {
  const ::Catalyst::Protocol::Cryptography::Signature* p = signature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Cryptography::Signature*>(
      &::Catalyst::Protocol::Cryptography::_Signature_default_instance_);
}
inline const ::Catalyst::Protocol::Cryptography::Signature& ProtocolErrorMessage::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
  return _internal_signature();
}
inline ::Catalyst::Protocol::Cryptography::Signature* ProtocolErrorMessage::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
  
  ::Catalyst::Protocol::Cryptography::Signature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Cryptography::Signature* ProtocolErrorMessage::_internal_mutable_signature() {
  
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Cryptography::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  return signature_;
}
inline ::Catalyst::Protocol::Cryptography::Signature* ProtocolErrorMessage::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
  return _internal_mutable_signature();
}
inline void ProtocolErrorMessage::set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolErrorMessage.signature)
}

// .Catalyst.Protocol.Peer.PeerId peer_id = 2;
inline bool ProtocolErrorMessage::_internal_has_peer_id() const {
  return this != internal_default_instance() && peer_id_ != nullptr;
}
inline bool ProtocolErrorMessage::has_peer_id() const {
  return _internal_has_peer_id();
}
inline const ::Catalyst::Protocol::Peer::PeerId& ProtocolErrorMessage::_internal_peer_id() const {
  const ::Catalyst::Protocol::Peer::PeerId* p = peer_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Peer::PeerId*>(
      &::Catalyst::Protocol::Peer::_PeerId_default_instance_);
}
inline const ::Catalyst::Protocol::Peer::PeerId& ProtocolErrorMessage::peer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
  return _internal_peer_id();
}
inline ::Catalyst::Protocol::Peer::PeerId* ProtocolErrorMessage::release_peer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = peer_id_;
  peer_id_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Peer::PeerId* ProtocolErrorMessage::_internal_mutable_peer_id() {
  
  if (peer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Peer::PeerId>(GetArenaNoVirtual());
    peer_id_ = p;
  }
  return peer_id_;
}
inline ::Catalyst::Protocol::Peer::PeerId* ProtocolErrorMessage::mutable_peer_id() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
  return _internal_mutable_peer_id();
}
inline void ProtocolErrorMessage::set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_id_);
  }
  if (peer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_id, submessage_arena);
    }
    
  } else {
    
  }
  peer_id_ = peer_id;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolErrorMessage.peer_id)
}

// bytes correlation_id = 3;
inline void ProtocolErrorMessage::clear_correlation_id() {
  correlation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtocolErrorMessage::correlation_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
  return _internal_correlation_id();
}
inline void ProtocolErrorMessage::set_correlation_id(const std::string& value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
inline std::string* ProtocolErrorMessage::mutable_correlation_id() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
  return _internal_mutable_correlation_id();
}
inline const std::string& ProtocolErrorMessage::_internal_correlation_id() const {
  return correlation_id_.GetNoArena();
}
inline void ProtocolErrorMessage::_internal_set_correlation_id(const std::string& value) {
  
  correlation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtocolErrorMessage::set_correlation_id(std::string&& value) {
  
  correlation_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
inline void ProtocolErrorMessage::set_correlation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  correlation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
inline void ProtocolErrorMessage::set_correlation_id(const void* value, size_t size) {
  
  correlation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}
inline std::string* ProtocolErrorMessage::_internal_mutable_correlation_id() {
  
  return correlation_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtocolErrorMessage::release_correlation_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
  
  return correlation_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolErrorMessage::set_allocated_correlation_id(std::string* correlation_id) {
  if (correlation_id != nullptr) {
    
  } else {
    
  }
  correlation_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), correlation_id);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolErrorMessage.correlation_id)
}

// int32 code = 4;
inline void ProtocolErrorMessage::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtocolErrorMessage::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtocolErrorMessage::code() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolErrorMessage.code)
  return _internal_code();
}
inline void ProtocolErrorMessage::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ProtocolErrorMessage::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolErrorMessage.code)
}

// -------------------------------------------------------------------

// ProtocolMessage

// .Catalyst.Protocol.Peer.PeerId peer_id = 1;
inline bool ProtocolMessage::_internal_has_peer_id() const {
  return this != internal_default_instance() && peer_id_ != nullptr;
}
inline bool ProtocolMessage::has_peer_id() const {
  return _internal_has_peer_id();
}
inline const ::Catalyst::Protocol::Peer::PeerId& ProtocolMessage::_internal_peer_id() const {
  const ::Catalyst::Protocol::Peer::PeerId* p = peer_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Peer::PeerId*>(
      &::Catalyst::Protocol::Peer::_PeerId_default_instance_);
}
inline const ::Catalyst::Protocol::Peer::PeerId& ProtocolMessage::peer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
  return _internal_peer_id();
}
inline ::Catalyst::Protocol::Peer::PeerId* ProtocolMessage::release_peer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = peer_id_;
  peer_id_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Peer::PeerId* ProtocolMessage::_internal_mutable_peer_id() {
  
  if (peer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Peer::PeerId>(GetArenaNoVirtual());
    peer_id_ = p;
  }
  return peer_id_;
}
inline ::Catalyst::Protocol::Peer::PeerId* ProtocolMessage::mutable_peer_id() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
  return _internal_mutable_peer_id();
}
inline void ProtocolMessage::set_allocated_peer_id(::Catalyst::Protocol::Peer::PeerId* peer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_id_);
  }
  if (peer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_id, submessage_arena);
    }
    
  } else {
    
  }
  peer_id_ = peer_id;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.peer_id)
}

// bytes correlation_id = 2;
inline void ProtocolMessage::clear_correlation_id() {
  correlation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtocolMessage::correlation_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
  return _internal_correlation_id();
}
inline void ProtocolMessage::set_correlation_id(const std::string& value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
inline std::string* ProtocolMessage::mutable_correlation_id() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
  return _internal_mutable_correlation_id();
}
inline const std::string& ProtocolMessage::_internal_correlation_id() const {
  return correlation_id_.GetNoArena();
}
inline void ProtocolMessage::_internal_set_correlation_id(const std::string& value) {
  
  correlation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtocolMessage::set_correlation_id(std::string&& value) {
  
  correlation_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
inline void ProtocolMessage::set_correlation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  correlation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
inline void ProtocolMessage::set_correlation_id(const void* value, size_t size) {
  
  correlation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}
inline std::string* ProtocolMessage::_internal_mutable_correlation_id() {
  
  return correlation_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtocolMessage::release_correlation_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
  
  return correlation_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolMessage::set_allocated_correlation_id(std::string* correlation_id) {
  if (correlation_id != nullptr) {
    
  } else {
    
  }
  correlation_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), correlation_id);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.correlation_id)
}

// string type_url = 3;
inline void ProtocolMessage::clear_type_url() {
  type_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtocolMessage::type_url() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
  return _internal_type_url();
}
inline void ProtocolMessage::set_type_url(const std::string& value) {
  _internal_set_type_url(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
inline std::string* ProtocolMessage::mutable_type_url() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
  return _internal_mutable_type_url();
}
inline const std::string& ProtocolMessage::_internal_type_url() const {
  return type_url_.GetNoArena();
}
inline void ProtocolMessage::_internal_set_type_url(const std::string& value) {
  
  type_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtocolMessage::set_type_url(std::string&& value) {
  
  type_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
inline void ProtocolMessage::set_type_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
inline void ProtocolMessage::set_type_url(const char* value, size_t size) {
  
  type_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}
inline std::string* ProtocolMessage::_internal_mutable_type_url() {
  
  return type_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtocolMessage::release_type_url() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
  
  return type_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolMessage::set_allocated_type_url(std::string* type_url) {
  if (type_url != nullptr) {
    
  } else {
    
  }
  type_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_url);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.type_url)
}

// bytes value = 4;
inline void ProtocolMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtocolMessage::value() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.value)
  return _internal_value();
}
inline void ProtocolMessage::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
inline std::string* ProtocolMessage::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.value)
  return _internal_mutable_value();
}
inline const std::string& ProtocolMessage::_internal_value() const {
  return value_.GetNoArena();
}
inline void ProtocolMessage::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtocolMessage::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
inline void ProtocolMessage::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
inline void ProtocolMessage::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.ProtocolMessage.value)
}
inline std::string* ProtocolMessage::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtocolMessage::release_value() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.value)
}

// .Catalyst.Protocol.Cryptography.Signature signature = 5;
inline bool ProtocolMessage::_internal_has_signature() const {
  return this != internal_default_instance() && signature_ != nullptr;
}
inline bool ProtocolMessage::has_signature() const {
  return _internal_has_signature();
}
inline const ::Catalyst::Protocol::Cryptography::Signature& ProtocolMessage::_internal_signature() const {
  const ::Catalyst::Protocol::Cryptography::Signature* p = signature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Cryptography::Signature*>(
      &::Catalyst::Protocol::Cryptography::_Signature_default_instance_);
}
inline const ::Catalyst::Protocol::Cryptography::Signature& ProtocolMessage::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.ProtocolMessage.signature)
  return _internal_signature();
}
inline ::Catalyst::Protocol::Cryptography::Signature* ProtocolMessage::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.ProtocolMessage.signature)
  
  ::Catalyst::Protocol::Cryptography::Signature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Cryptography::Signature* ProtocolMessage::_internal_mutable_signature() {
  
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Cryptography::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  return signature_;
}
inline ::Catalyst::Protocol::Cryptography::Signature* ProtocolMessage::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.ProtocolMessage.signature)
  return _internal_mutable_signature();
}
inline void ProtocolMessage::set_allocated_signature(::Catalyst::Protocol::Cryptography::Signature* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.ProtocolMessage.signature)
}

// -------------------------------------------------------------------

// TransactionBroadcast

// .Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
inline bool TransactionBroadcast::_internal_has_public_entry() const {
  return this != internal_default_instance() && public_entry_ != nullptr;
}
inline bool TransactionBroadcast::has_public_entry() const {
  return _internal_has_public_entry();
}
inline const ::Catalyst::Protocol::Transaction::PublicEntry& TransactionBroadcast::_internal_public_entry() const {
  const ::Catalyst::Protocol::Transaction::PublicEntry* p = public_entry_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Transaction::PublicEntry*>(
      &::Catalyst::Protocol::Transaction::_PublicEntry_default_instance_);
}
inline const ::Catalyst::Protocol::Transaction::PublicEntry& TransactionBroadcast::public_entry() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
  return _internal_public_entry();
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* TransactionBroadcast::release_public_entry() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
  
  ::Catalyst::Protocol::Transaction::PublicEntry* temp = public_entry_;
  public_entry_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* TransactionBroadcast::_internal_mutable_public_entry() {
  
  if (public_entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Transaction::PublicEntry>(GetArenaNoVirtual());
    public_entry_ = p;
  }
  return public_entry_;
}
inline ::Catalyst::Protocol::Transaction::PublicEntry* TransactionBroadcast::mutable_public_entry() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
  return _internal_mutable_public_entry();
}
inline void TransactionBroadcast::set_allocated_public_entry(::Catalyst::Protocol::Transaction::PublicEntry* public_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_entry_);
  }
  if (public_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      public_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_entry, submessage_arena);
    }
    
  } else {
    
  }
  public_entry_ = public_entry;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.TransactionBroadcast.public_entry)
}

// -------------------------------------------------------------------

// CandidateDeltaBroadcast

// bytes hash = 1;
inline void CandidateDeltaBroadcast::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CandidateDeltaBroadcast::hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
  return _internal_hash();
}
inline void CandidateDeltaBroadcast::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
inline std::string* CandidateDeltaBroadcast::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
  return _internal_mutable_hash();
}
inline const std::string& CandidateDeltaBroadcast::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void CandidateDeltaBroadcast::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CandidateDeltaBroadcast::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
inline void CandidateDeltaBroadcast::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
inline void CandidateDeltaBroadcast::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}
inline std::string* CandidateDeltaBroadcast::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CandidateDeltaBroadcast::release_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CandidateDeltaBroadcast::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.hash)
}

// .Catalyst.Protocol.Peer.PeerId producer_id = 2;
inline bool CandidateDeltaBroadcast::_internal_has_producer_id() const {
  return this != internal_default_instance() && producer_id_ != nullptr;
}
inline bool CandidateDeltaBroadcast::has_producer_id() const {
  return _internal_has_producer_id();
}
inline const ::Catalyst::Protocol::Peer::PeerId& CandidateDeltaBroadcast::_internal_producer_id() const {
  const ::Catalyst::Protocol::Peer::PeerId* p = producer_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Peer::PeerId*>(
      &::Catalyst::Protocol::Peer::_PeerId_default_instance_);
}
inline const ::Catalyst::Protocol::Peer::PeerId& CandidateDeltaBroadcast::producer_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
  return _internal_producer_id();
}
inline ::Catalyst::Protocol::Peer::PeerId* CandidateDeltaBroadcast::release_producer_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = producer_id_;
  producer_id_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Peer::PeerId* CandidateDeltaBroadcast::_internal_mutable_producer_id() {
  
  if (producer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Peer::PeerId>(GetArenaNoVirtual());
    producer_id_ = p;
  }
  return producer_id_;
}
inline ::Catalyst::Protocol::Peer::PeerId* CandidateDeltaBroadcast::mutable_producer_id() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
  return _internal_mutable_producer_id();
}
inline void CandidateDeltaBroadcast::set_allocated_producer_id(::Catalyst::Protocol::Peer::PeerId* producer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(producer_id_);
  }
  if (producer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      producer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producer_id, submessage_arena);
    }
    
  } else {
    
  }
  producer_id_ = producer_id;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.producer_id)
}

// bytes previous_delta_dfs_hash = 3;
inline void CandidateDeltaBroadcast::clear_previous_delta_dfs_hash() {
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CandidateDeltaBroadcast::previous_delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
  return _internal_previous_delta_dfs_hash();
}
inline void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(const std::string& value) {
  _internal_set_previous_delta_dfs_hash(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
inline std::string* CandidateDeltaBroadcast::mutable_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
  return _internal_mutable_previous_delta_dfs_hash();
}
inline const std::string& CandidateDeltaBroadcast::_internal_previous_delta_dfs_hash() const {
  return previous_delta_dfs_hash_.GetNoArena();
}
inline void CandidateDeltaBroadcast::_internal_set_previous_delta_dfs_hash(const std::string& value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(std::string&& value) {
  
  previous_delta_dfs_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
inline void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
inline void CandidateDeltaBroadcast::set_previous_delta_dfs_hash(const void* value, size_t size) {
  
  previous_delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}
inline std::string* CandidateDeltaBroadcast::_internal_mutable_previous_delta_dfs_hash() {
  
  return previous_delta_dfs_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CandidateDeltaBroadcast::release_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
  
  return previous_delta_dfs_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CandidateDeltaBroadcast::set_allocated_previous_delta_dfs_hash(std::string* previous_delta_dfs_hash) {
  if (previous_delta_dfs_hash != nullptr) {
    
  } else {
    
  }
  previous_delta_dfs_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.CandidateDeltaBroadcast.previous_delta_dfs_hash)
}

// -------------------------------------------------------------------

// FavouriteDeltaBroadcast

// .Catalyst.Protocol.Wire.CandidateDeltaBroadcast candidate = 1;
inline bool FavouriteDeltaBroadcast::_internal_has_candidate() const {
  return this != internal_default_instance() && candidate_ != nullptr;
}
inline bool FavouriteDeltaBroadcast::has_candidate() const {
  return _internal_has_candidate();
}
inline void FavouriteDeltaBroadcast::clear_candidate() {
  if (GetArenaNoVirtual() == nullptr && candidate_ != nullptr) {
    delete candidate_;
  }
  candidate_ = nullptr;
}
inline const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast& FavouriteDeltaBroadcast::_internal_candidate() const {
  const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* p = candidate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast*>(
      &::Catalyst::Protocol::Wire::_CandidateDeltaBroadcast_default_instance_);
}
inline const ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast& FavouriteDeltaBroadcast::candidate() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
  return _internal_candidate();
}
inline ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* FavouriteDeltaBroadcast::release_candidate() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
  
  ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* temp = candidate_;
  candidate_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* FavouriteDeltaBroadcast::_internal_mutable_candidate() {
  
  if (candidate_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Wire::CandidateDeltaBroadcast>(GetArenaNoVirtual());
    candidate_ = p;
  }
  return candidate_;
}
inline ::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* FavouriteDeltaBroadcast::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
  return _internal_mutable_candidate();
}
inline void FavouriteDeltaBroadcast::set_allocated_candidate(::Catalyst::Protocol::Wire::CandidateDeltaBroadcast* candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete candidate_;
  }
  if (candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    
  } else {
    
  }
  candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.candidate)
}

// .Catalyst.Protocol.Peer.PeerId voter_id = 2;
inline bool FavouriteDeltaBroadcast::_internal_has_voter_id() const {
  return this != internal_default_instance() && voter_id_ != nullptr;
}
inline bool FavouriteDeltaBroadcast::has_voter_id() const {
  return _internal_has_voter_id();
}
inline const ::Catalyst::Protocol::Peer::PeerId& FavouriteDeltaBroadcast::_internal_voter_id() const {
  const ::Catalyst::Protocol::Peer::PeerId* p = voter_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Peer::PeerId*>(
      &::Catalyst::Protocol::Peer::_PeerId_default_instance_);
}
inline const ::Catalyst::Protocol::Peer::PeerId& FavouriteDeltaBroadcast::voter_id() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
  return _internal_voter_id();
}
inline ::Catalyst::Protocol::Peer::PeerId* FavouriteDeltaBroadcast::release_voter_id() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
  
  ::Catalyst::Protocol::Peer::PeerId* temp = voter_id_;
  voter_id_ = nullptr;
  return temp;
}
inline ::Catalyst::Protocol::Peer::PeerId* FavouriteDeltaBroadcast::_internal_mutable_voter_id() {
  
  if (voter_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Peer::PeerId>(GetArenaNoVirtual());
    voter_id_ = p;
  }
  return voter_id_;
}
inline ::Catalyst::Protocol::Peer::PeerId* FavouriteDeltaBroadcast::mutable_voter_id() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
  return _internal_mutable_voter_id();
}
inline void FavouriteDeltaBroadcast::set_allocated_voter_id(::Catalyst::Protocol::Peer::PeerId* voter_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voter_id_);
  }
  if (voter_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voter_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voter_id, submessage_arena);
    }
    
  } else {
    
  }
  voter_id_ = voter_id;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.voter_id)
}

// -------------------------------------------------------------------

// DeltaDfsHashBroadcast

// bytes delta_dfs_hash = 1;
inline void DeltaDfsHashBroadcast::clear_delta_dfs_hash() {
  delta_dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeltaDfsHashBroadcast::delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
  return _internal_delta_dfs_hash();
}
inline void DeltaDfsHashBroadcast::set_delta_dfs_hash(const std::string& value) {
  _internal_set_delta_dfs_hash(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
inline std::string* DeltaDfsHashBroadcast::mutable_delta_dfs_hash() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
  return _internal_mutable_delta_dfs_hash();
}
inline const std::string& DeltaDfsHashBroadcast::_internal_delta_dfs_hash() const {
  return delta_dfs_hash_.GetNoArena();
}
inline void DeltaDfsHashBroadcast::_internal_set_delta_dfs_hash(const std::string& value) {
  
  delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeltaDfsHashBroadcast::set_delta_dfs_hash(std::string&& value) {
  
  delta_dfs_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
inline void DeltaDfsHashBroadcast::set_delta_dfs_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
inline void DeltaDfsHashBroadcast::set_delta_dfs_hash(const void* value, size_t size) {
  
  delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}
inline std::string* DeltaDfsHashBroadcast::_internal_mutable_delta_dfs_hash() {
  
  return delta_dfs_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeltaDfsHashBroadcast::release_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
  
  return delta_dfs_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeltaDfsHashBroadcast::set_allocated_delta_dfs_hash(std::string* delta_dfs_hash) {
  if (delta_dfs_hash != nullptr) {
    
  } else {
    
  }
  delta_dfs_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.delta_dfs_hash)
}

// bytes previous_delta_dfs_hash = 2;
inline void DeltaDfsHashBroadcast::clear_previous_delta_dfs_hash() {
  previous_delta_dfs_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeltaDfsHashBroadcast::previous_delta_dfs_hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
  return _internal_previous_delta_dfs_hash();
}
inline void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(const std::string& value) {
  _internal_set_previous_delta_dfs_hash(value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
inline std::string* DeltaDfsHashBroadcast::mutable_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
  return _internal_mutable_previous_delta_dfs_hash();
}
inline const std::string& DeltaDfsHashBroadcast::_internal_previous_delta_dfs_hash() const {
  return previous_delta_dfs_hash_.GetNoArena();
}
inline void DeltaDfsHashBroadcast::_internal_set_previous_delta_dfs_hash(const std::string& value) {
  
  previous_delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(std::string&& value) {
  
  previous_delta_dfs_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
inline void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
inline void DeltaDfsHashBroadcast::set_previous_delta_dfs_hash(const void* value, size_t size) {
  
  previous_delta_dfs_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}
inline std::string* DeltaDfsHashBroadcast::_internal_mutable_previous_delta_dfs_hash() {
  
  return previous_delta_dfs_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeltaDfsHashBroadcast::release_previous_delta_dfs_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
  
  return previous_delta_dfs_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeltaDfsHashBroadcast::set_allocated_previous_delta_dfs_hash(std::string* previous_delta_dfs_hash) {
  if (previous_delta_dfs_hash != nullptr) {
    
  } else {
    
  }
  previous_delta_dfs_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_delta_dfs_hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.previous_delta_dfs_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Wire
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Wire_2eproto
