<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Transaction.proto

namespace Catalyst\Protocol\Transaction;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>Catalyst.Protocol.Transaction.ConfidentialEntry</code>
 */
class ConfidentialEntry extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * PublicKey of receiver.
     * </pre>
     *
     * <code>bytes receiver_public_key = 1;</code>
     */
    private $receiver_public_key = '';
    /**
     * <pre>
     * PublicKey of sender.
     * </pre>
     *
     * <code>bytes sender_public_key = 2;</code>
     */
    private $sender_public_key = '';
    /**
     * <pre>
     * 32 bytes
     * </pre>
     *
     * <code>bytes pedersen_commitment = 3;</code>
     */
    private $pedersen_commitment = '';
    /**
     * <code>.Catalyst.Protocol.Transaction.RangeProof range_proof = 4;</code>
     */
    private $range_proof = null;
    /**
     * <pre>
     * 8 bytes, clear text, fees * 10^12
     * </pre>
     *
     * <code>bytes transaction_fees = 5;</code>
     */
    private $transaction_fees = '';
    /**
     * <pre>
     * A nonce, similar to Ethereum, incremented on each transaction on the account issuing the transaction
     * </pre>
     *
     * <code>uint64 nonce = 6;</code>
     */
    private $nonce = 0;

    public function __construct() {
        \GPBMetadata\Transaction::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * PublicKey of receiver.
     * </pre>
     *
     * <code>bytes receiver_public_key = 1;</code>
     */
    public function getReceiverPublicKey()
    {
        return $this->receiver_public_key;
    }

    /**
     * <pre>
     * PublicKey of receiver.
     * </pre>
     *
     * <code>bytes receiver_public_key = 1;</code>
     */
    public function setReceiverPublicKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->receiver_public_key = $var;
    }

    /**
     * <pre>
     * PublicKey of sender.
     * </pre>
     *
     * <code>bytes sender_public_key = 2;</code>
     */
    public function getSenderPublicKey()
    {
        return $this->sender_public_key;
    }

    /**
     * <pre>
     * PublicKey of sender.
     * </pre>
     *
     * <code>bytes sender_public_key = 2;</code>
     */
    public function setSenderPublicKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->sender_public_key = $var;
    }

    /**
     * <pre>
     * 32 bytes
     * </pre>
     *
     * <code>bytes pedersen_commitment = 3;</code>
     */
    public function getPedersenCommitment()
    {
        return $this->pedersen_commitment;
    }

    /**
     * <pre>
     * 32 bytes
     * </pre>
     *
     * <code>bytes pedersen_commitment = 3;</code>
     */
    public function setPedersenCommitment($var)
    {
        GPBUtil::checkString($var, False);
        $this->pedersen_commitment = $var;
    }

    /**
     * <code>.Catalyst.Protocol.Transaction.RangeProof range_proof = 4;</code>
     */
    public function getRangeProof()
    {
        return $this->range_proof;
    }

    /**
     * <code>.Catalyst.Protocol.Transaction.RangeProof range_proof = 4;</code>
     */
    public function setRangeProof(&$var)
    {
        GPBUtil::checkMessage($var, \Catalyst\Protocol\Transaction\RangeProof::class);
        $this->range_proof = $var;
    }

    /**
     * <pre>
     * 8 bytes, clear text, fees * 10^12
     * </pre>
     *
     * <code>bytes transaction_fees = 5;</code>
     */
    public function getTransactionFees()
    {
        return $this->transaction_fees;
    }

    /**
     * <pre>
     * 8 bytes, clear text, fees * 10^12
     * </pre>
     *
     * <code>bytes transaction_fees = 5;</code>
     */
    public function setTransactionFees($var)
    {
        GPBUtil::checkString($var, False);
        $this->transaction_fees = $var;
    }

    /**
     * <pre>
     * A nonce, similar to Ethereum, incremented on each transaction on the account issuing the transaction
     * </pre>
     *
     * <code>uint64 nonce = 6;</code>
     */
    public function getNonce()
    {
        return $this->nonce;
    }

    /**
     * <pre>
     * A nonce, similar to Ethereum, incremented on each transaction on the account issuing the transaction
     * </pre>
     *
     * <code>uint64 nonce = 6;</code>
     */
    public function setNonce($var)
    {
        GPBUtil::checkUint64($var);
        $this->nonce = $var;
    }

}

