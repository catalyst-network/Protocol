<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Transaction.proto

namespace Catalyst\Protocol\Transaction;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 **
 * BulletProof-based range proof. See https://eprint.iacr.org/2017/1066.pdf for references to equations below.
 * Total byte size is (9+2k)*32, where k = log_2(n*m), m is number of aggregates in proof, (2^n)-1 is upper range of values.
 * </pre>
 *
 * Protobuf type <code>Catalyst.Protocol.Transaction.RangeProof</code>
 */
class RangeProof extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * m * 32 bytes, value commitment (eq. 36) 
     * </pre>
     *
     * <code>repeated bytes value_commitment = 1;</code>
     */
    private $value_commitment;
    /**
     * <pre>
     * 32 bytes, bit commitment (eq. 48)
     * </pre>
     *
     * <code>bytes bit_commitment = 2;</code>
     */
    private $bit_commitment = '';
    /**
     * <pre>
     * 32 bytes, per bit blinding factor commitment (eq. 48)
     * </pre>
     *
     * <code>bytes per_bit_blinding_factor_commitment = 3;</code>
     */
    private $per_bit_blinding_factor_commitment = '';
    /**
     * <pre>
     * 32 bytes, poly commitment (eq. 54)
     * </pre>
     *
     * <code>bytes poly_commitment_t1 = 4;</code>
     */
    private $poly_commitment_t1 = '';
    /**
     * <pre>
     * 32 bytes, poly commitment (eq. 54)
     * </pre>
     *
     * <code>bytes poly_commitment_t2 = 5;</code>
     */
    private $poly_commitment_t2 = '';
    /**
     * <pre>
     * 32 bytes, proof of share (eq. 63)
     * </pre>
     *
     * <code>bytes proof_of_share_tau = 6;</code>
     */
    private $proof_of_share_tau = '';
    /**
     * <pre>
     * 32 bytes, proof of share (eq. 63)
     * </pre>
     *
     * <code>bytes proof_of_share_mu = 7;</code>
     */
    private $proof_of_share_mu = '';
    /**
     * <pre>
     * k * 32 bytes, aggregated vector polynomial (eq. 63)
     * </pre>
     *
     * <code>repeated bytes aggregated_vector_polynomial_l = 8;</code>
     */
    private $aggregated_vector_polynomial_l;
    /**
     * <pre>
     * k * 32 bytes, aggregated vector polynomial (eq. 63)
     * </pre>
     *
     * <code>repeated bytes aggregated_vector_polynomial_r = 9;</code>
     */
    private $aggregated_vector_polynomial_r;
    /**
     * <pre>
     * 32 bytes (eq. 63)
     * </pre>
     *
     * <code>bytes a_prime_0 = 10;</code>
     */
    private $a_prime_0 = '';
    /**
     * <pre>
     * 32 bytes (eq. 63)
     * </pre>
     *
     * <code>bytes b_prime_0 = 11;</code>
     */
    private $b_prime_0 = '';
    /**
     * <code>bytes t = 12;</code>
     */
    private $t = '';

    public function __construct() {
        \GPBMetadata\Transaction::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * m * 32 bytes, value commitment (eq. 36) 
     * </pre>
     *
     * <code>repeated bytes value_commitment = 1;</code>
     */
    public function getValueCommitment()
    {
        return $this->value_commitment;
    }

    /**
     * <pre>
     * m * 32 bytes, value commitment (eq. 36) 
     * </pre>
     *
     * <code>repeated bytes value_commitment = 1;</code>
     */
    public function setValueCommitment(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->value_commitment = $var;
    }

    /**
     * <pre>
     * 32 bytes, bit commitment (eq. 48)
     * </pre>
     *
     * <code>bytes bit_commitment = 2;</code>
     */
    public function getBitCommitment()
    {
        return $this->bit_commitment;
    }

    /**
     * <pre>
     * 32 bytes, bit commitment (eq. 48)
     * </pre>
     *
     * <code>bytes bit_commitment = 2;</code>
     */
    public function setBitCommitment($var)
    {
        GPBUtil::checkString($var, False);
        $this->bit_commitment = $var;
    }

    /**
     * <pre>
     * 32 bytes, per bit blinding factor commitment (eq. 48)
     * </pre>
     *
     * <code>bytes per_bit_blinding_factor_commitment = 3;</code>
     */
    public function getPerBitBlindingFactorCommitment()
    {
        return $this->per_bit_blinding_factor_commitment;
    }

    /**
     * <pre>
     * 32 bytes, per bit blinding factor commitment (eq. 48)
     * </pre>
     *
     * <code>bytes per_bit_blinding_factor_commitment = 3;</code>
     */
    public function setPerBitBlindingFactorCommitment($var)
    {
        GPBUtil::checkString($var, False);
        $this->per_bit_blinding_factor_commitment = $var;
    }

    /**
     * <pre>
     * 32 bytes, poly commitment (eq. 54)
     * </pre>
     *
     * <code>bytes poly_commitment_t1 = 4;</code>
     */
    public function getPolyCommitmentT1()
    {
        return $this->poly_commitment_t1;
    }

    /**
     * <pre>
     * 32 bytes, poly commitment (eq. 54)
     * </pre>
     *
     * <code>bytes poly_commitment_t1 = 4;</code>
     */
    public function setPolyCommitmentT1($var)
    {
        GPBUtil::checkString($var, False);
        $this->poly_commitment_t1 = $var;
    }

    /**
     * <pre>
     * 32 bytes, poly commitment (eq. 54)
     * </pre>
     *
     * <code>bytes poly_commitment_t2 = 5;</code>
     */
    public function getPolyCommitmentT2()
    {
        return $this->poly_commitment_t2;
    }

    /**
     * <pre>
     * 32 bytes, poly commitment (eq. 54)
     * </pre>
     *
     * <code>bytes poly_commitment_t2 = 5;</code>
     */
    public function setPolyCommitmentT2($var)
    {
        GPBUtil::checkString($var, False);
        $this->poly_commitment_t2 = $var;
    }

    /**
     * <pre>
     * 32 bytes, proof of share (eq. 63)
     * </pre>
     *
     * <code>bytes proof_of_share_tau = 6;</code>
     */
    public function getProofOfShareTau()
    {
        return $this->proof_of_share_tau;
    }

    /**
     * <pre>
     * 32 bytes, proof of share (eq. 63)
     * </pre>
     *
     * <code>bytes proof_of_share_tau = 6;</code>
     */
    public function setProofOfShareTau($var)
    {
        GPBUtil::checkString($var, False);
        $this->proof_of_share_tau = $var;
    }

    /**
     * <pre>
     * 32 bytes, proof of share (eq. 63)
     * </pre>
     *
     * <code>bytes proof_of_share_mu = 7;</code>
     */
    public function getProofOfShareMu()
    {
        return $this->proof_of_share_mu;
    }

    /**
     * <pre>
     * 32 bytes, proof of share (eq. 63)
     * </pre>
     *
     * <code>bytes proof_of_share_mu = 7;</code>
     */
    public function setProofOfShareMu($var)
    {
        GPBUtil::checkString($var, False);
        $this->proof_of_share_mu = $var;
    }

    /**
     * <pre>
     * k * 32 bytes, aggregated vector polynomial (eq. 63)
     * </pre>
     *
     * <code>repeated bytes aggregated_vector_polynomial_l = 8;</code>
     */
    public function getAggregatedVectorPolynomialL()
    {
        return $this->aggregated_vector_polynomial_l;
    }

    /**
     * <pre>
     * k * 32 bytes, aggregated vector polynomial (eq. 63)
     * </pre>
     *
     * <code>repeated bytes aggregated_vector_polynomial_l = 8;</code>
     */
    public function setAggregatedVectorPolynomialL(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->aggregated_vector_polynomial_l = $var;
    }

    /**
     * <pre>
     * k * 32 bytes, aggregated vector polynomial (eq. 63)
     * </pre>
     *
     * <code>repeated bytes aggregated_vector_polynomial_r = 9;</code>
     */
    public function getAggregatedVectorPolynomialR()
    {
        return $this->aggregated_vector_polynomial_r;
    }

    /**
     * <pre>
     * k * 32 bytes, aggregated vector polynomial (eq. 63)
     * </pre>
     *
     * <code>repeated bytes aggregated_vector_polynomial_r = 9;</code>
     */
    public function setAggregatedVectorPolynomialR(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->aggregated_vector_polynomial_r = $var;
    }

    /**
     * <pre>
     * 32 bytes (eq. 63)
     * </pre>
     *
     * <code>bytes a_prime_0 = 10;</code>
     */
    public function getAPrime0()
    {
        return $this->a_prime_0;
    }

    /**
     * <pre>
     * 32 bytes (eq. 63)
     * </pre>
     *
     * <code>bytes a_prime_0 = 10;</code>
     */
    public function setAPrime0($var)
    {
        GPBUtil::checkString($var, False);
        $this->a_prime_0 = $var;
    }

    /**
     * <pre>
     * 32 bytes (eq. 63)
     * </pre>
     *
     * <code>bytes b_prime_0 = 11;</code>
     */
    public function getBPrime0()
    {
        return $this->b_prime_0;
    }

    /**
     * <pre>
     * 32 bytes (eq. 63)
     * </pre>
     *
     * <code>bytes b_prime_0 = 11;</code>
     */
    public function setBPrime0($var)
    {
        GPBUtil::checkString($var, False);
        $this->b_prime_0 = $var;
    }

    /**
     * <code>bytes t = 12;</code>
     */
    public function getT()
    {
        return $this->t;
    }

    /**
     * <code>bytes t = 12;</code>
     */
    public function setT($var)
    {
        GPBUtil::checkString($var, False);
        $this->t = $var;
    }

}

