// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DfsMarketplace.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "DfsMarketplace.pbobjc.h"
 #import "Peer.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DfsMarketplaceRoot

@implementation DfsMarketplaceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - DfsMarketplaceRoot_FileDescriptor

static GPBFileDescriptor *DfsMarketplaceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Catalyst.Protocol.DfsMarketplace"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - BlockChallengeRequest

@implementation BlockChallengeRequest

@dynamic challengeSalt;
@dynamic mainFileCid;
@dynamic blockIdxRandomGuid;

typedef struct BlockChallengeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *challengeSalt;
  NSString *mainFileCid;
  NSData *blockIdxRandomGuid;
} BlockChallengeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "challengeSalt",
        .dataTypeSpecific.className = NULL,
        .number = BlockChallengeRequest_FieldNumber_ChallengeSalt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlockChallengeRequest__storage_, challengeSalt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mainFileCid",
        .dataTypeSpecific.className = NULL,
        .number = BlockChallengeRequest_FieldNumber_MainFileCid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BlockChallengeRequest__storage_, mainFileCid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blockIdxRandomGuid",
        .dataTypeSpecific.className = NULL,
        .number = BlockChallengeRequest_FieldNumber_BlockIdxRandomGuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BlockChallengeRequest__storage_, blockIdxRandomGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlockChallengeRequest class]
                                     rootClass:[DfsMarketplaceRoot class]
                                          file:DfsMarketplaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockChallengeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BlockChallengeResponse

@implementation BlockChallengeResponse

@dynamic answer;
@dynamic blockChallengeRequestHash;

typedef struct BlockChallengeResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *answer;
  NSString *blockChallengeRequestHash;
} BlockChallengeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "answer",
        .dataTypeSpecific.className = NULL,
        .number = BlockChallengeResponse_FieldNumber_Answer,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlockChallengeResponse__storage_, answer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blockChallengeRequestHash",
        .dataTypeSpecific.className = NULL,
        .number = BlockChallengeResponse_FieldNumber_BlockChallengeRequestHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BlockChallengeResponse__storage_, blockChallengeRequestHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlockChallengeResponse class]
                                     rootClass:[DfsMarketplaceRoot class]
                                          file:DfsMarketplaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockChallengeResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BlockChallengeBroadcast

@implementation BlockChallengeBroadcast

@dynamic hasOriginalChallenge, originalChallenge;
@dynamic answer;
@dynamic hasChallengedPeer, challengedPeer;
@dynamic hasChallengedBy, challengedBy;

typedef struct BlockChallengeBroadcast__storage_ {
  uint32_t _has_storage_[1];
  BlockChallengeRequest *originalChallenge;
  NSString *answer;
  PeerId *challengedPeer;
  PeerId *challengedBy;
} BlockChallengeBroadcast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "originalChallenge",
        .dataTypeSpecific.className = GPBStringifySymbol(BlockChallengeRequest),
        .number = BlockChallengeBroadcast_FieldNumber_OriginalChallenge,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlockChallengeBroadcast__storage_, originalChallenge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "answer",
        .dataTypeSpecific.className = NULL,
        .number = BlockChallengeBroadcast_FieldNumber_Answer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BlockChallengeBroadcast__storage_, answer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "challengedPeer",
        .dataTypeSpecific.className = GPBStringifySymbol(PeerId),
        .number = BlockChallengeBroadcast_FieldNumber_ChallengedPeer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BlockChallengeBroadcast__storage_, challengedPeer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "challengedBy",
        .dataTypeSpecific.className = GPBStringifySymbol(PeerId),
        .number = BlockChallengeBroadcast_FieldNumber_ChallengedBy,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BlockChallengeBroadcast__storage_, challengedBy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlockChallengeBroadcast class]
                                     rootClass:[DfsMarketplaceRoot class]
                                          file:DfsMarketplaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockChallengeBroadcast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
