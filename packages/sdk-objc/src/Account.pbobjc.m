// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Account.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Account.pbobjc.h"
 #import "Cryptography.pbobjc.h"
 #import "Network.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AccountRoot

@implementation AccountRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AccountRoot_FileDescriptor

static GPBFileDescriptor *AccountRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Catalyst.Protocol.Account"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum AccountType

GPBEnumDescriptor *AccountType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "AccountTypeUnknown\000PublicAccount\000Confide"
        "ntialAccount\000SmartContractAccount\000";
    static const int32_t values[] = {
        AccountType_AccountTypeUnknown,
        AccountType_PublicAccount,
        AccountType_ConfidentialAccount,
        AccountType_SmartContractAccount,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AccountType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AccountType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AccountType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AccountType_AccountTypeUnknown:
    case AccountType_PublicAccount:
    case AccountType_ConfidentialAccount:
    case AccountType_SmartContractAccount:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Address

@implementation Address

@dynamic networkType;
@dynamic accountType;
@dynamic publicKeyHash;

typedef struct Address__storage_ {
  uint32_t _has_storage_[1];
  NetworkType networkType;
  AccountType accountType;
  NSData *publicKeyHash;
} Address__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "networkType",
        .dataTypeSpecific.enumDescFunc = NetworkType_EnumDescriptor,
        .number = Address_FieldNumber_NetworkType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Address__storage_, networkType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "accountType",
        .dataTypeSpecific.enumDescFunc = AccountType_EnumDescriptor,
        .number = Address_FieldNumber_AccountType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Address__storage_, accountType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "publicKeyHash",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_PublicKeyHash,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Address__storage_, publicKeyHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Address class]
                                     rootClass:[AccountRoot class]
                                          file:AccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Address__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Address_NetworkType_RawValue(Address *message) {
  GPBDescriptor *descriptor = [Address descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Address_FieldNumber_NetworkType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAddress_NetworkType_RawValue(Address *message, int32_t value) {
  GPBDescriptor *descriptor = [Address descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Address_FieldNumber_NetworkType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Address_AccountType_RawValue(Address *message) {
  GPBDescriptor *descriptor = [Address descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Address_FieldNumber_AccountType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAddress_AccountType_RawValue(Address *message, int32_t value) {
  GPBDescriptor *descriptor = [Address descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Address_FieldNumber_AccountType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
