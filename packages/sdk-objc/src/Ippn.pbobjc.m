// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IPPN.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Ippn.pbobjc.h"
 #import "Peer.pbobjc.h"
 #import "Deltas.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - IppnRoot

@implementation IppnRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - IppnRoot_FileDescriptor

static GPBFileDescriptor *IppnRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Catalyst.Protocol.IPPN"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PeerNeighborsRequest

@implementation PeerNeighborsRequest


typedef struct PeerNeighborsRequest__storage_ {
  uint32_t _has_storage_[1];
} PeerNeighborsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PeerNeighborsRequest class]
                                     rootClass:[IppnRoot class]
                                          file:IppnRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PeerNeighborsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PeerNeighborsResponse

@implementation PeerNeighborsResponse

@dynamic peersArray, peersArray_Count;

typedef struct PeerNeighborsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *peersArray;
} PeerNeighborsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "peersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PeerId),
        .number = PeerNeighborsResponse_FieldNumber_PeersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PeerNeighborsResponse__storage_, peersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PeerNeighborsResponse class]
                                     rootClass:[IppnRoot class]
                                          file:IppnRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PeerNeighborsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PingRequest

@implementation PingRequest


typedef struct PingRequest__storage_ {
  uint32_t _has_storage_[1];
} PingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PingRequest class]
                                     rootClass:[IppnRoot class]
                                          file:IppnRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PingRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PingResponse

@implementation PingResponse


typedef struct PingResponse__storage_ {
  uint32_t _has_storage_[1];
} PingResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PingResponse class]
                                     rootClass:[IppnRoot class]
                                          file:IppnRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PingResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LatestDeltaHashRequest

@implementation LatestDeltaHashRequest


typedef struct LatestDeltaHashRequest__storage_ {
  uint32_t _has_storage_[1];
} LatestDeltaHashRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LatestDeltaHashRequest class]
                                     rootClass:[IppnRoot class]
                                          file:IppnRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(LatestDeltaHashRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LatestDeltaHashResponse

@implementation LatestDeltaHashResponse

@dynamic deltaHash;

typedef struct LatestDeltaHashResponse__storage_ {
  uint32_t _has_storage_[1];
  NSData *deltaHash;
} LatestDeltaHashResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "deltaHash",
        .dataTypeSpecific.className = NULL,
        .number = LatestDeltaHashResponse_FieldNumber_DeltaHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LatestDeltaHashResponse__storage_, deltaHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LatestDeltaHashResponse class]
                                     rootClass:[IppnRoot class]
                                          file:IppnRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LatestDeltaHashResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeltaHistoryRequest

@implementation DeltaHistoryRequest

@dynamic range;
@dynamic height;

typedef struct DeltaHistoryRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t range;
  uint32_t height;
} DeltaHistoryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "range",
        .dataTypeSpecific.className = NULL,
        .number = DeltaHistoryRequest_FieldNumber_Range,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeltaHistoryRequest__storage_, range),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = DeltaHistoryRequest_FieldNumber_Height,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeltaHistoryRequest__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeltaHistoryRequest class]
                                     rootClass:[IppnRoot class]
                                          file:IppnRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeltaHistoryRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeltaHistoryResponse

@implementation DeltaHistoryResponse

@dynamic resultArray, resultArray_Count;

typedef struct DeltaHistoryResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *resultArray;
} DeltaHistoryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DeltaIndex),
        .number = DeltaHistoryResponse_FieldNumber_ResultArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeltaHistoryResponse__storage_, resultArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeltaHistoryResponse class]
                                     rootClass:[IppnRoot class]
                                          file:IppnRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeltaHistoryResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
