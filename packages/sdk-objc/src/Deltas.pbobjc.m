// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Deltas.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Deltas.pbobjc.h"
#import "Transaction.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DeltasRoot

@implementation DeltasRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - DeltasRoot_FileDescriptor

static GPBFileDescriptor *DeltasRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Catalyst.Protocol.Deltas"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DeltaIndex

@implementation DeltaIndex

@dynamic height;
@dynamic cid;

typedef struct DeltaIndex__storage_ {
  uint32_t _has_storage_[1];
  uint32_t height;
  NSData *cid;
} DeltaIndex__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = DeltaIndex_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeltaIndex__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cid",
        .dataTypeSpecific.className = NULL,
        .number = DeltaIndex_FieldNumber_Cid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeltaIndex__storage_, cid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeltaIndex class]
                                     rootClass:[DeltasRoot class]
                                          file:DeltasRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeltaIndex__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Delta

@implementation Delta

@dynamic previousDeltaDfsHash;
@dynamic merkleRoot;
@dynamic merklePoda;
@dynamic hasTimeStamp, timeStamp;
@dynamic publicEntriesArray, publicEntriesArray_Count;
@dynamic confidentialEntriesArray, confidentialEntriesArray_Count;
@dynamic coinbaseEntriesArray, coinbaseEntriesArray_Count;
@dynamic stateRoot;
@dynamic deltaNumber;

typedef struct Delta__storage_ {
  uint32_t _has_storage_[1];
  NSData *previousDeltaDfsHash;
  NSData *merkleRoot;
  NSData *merklePoda;
  GPBTimestamp *timeStamp;
  NSMutableArray *publicEntriesArray;
  NSMutableArray *confidentialEntriesArray;
  NSMutableArray *coinbaseEntriesArray;
  NSData *stateRoot;
  int64_t deltaNumber;
} Delta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "previousDeltaDfsHash",
        .dataTypeSpecific.className = NULL,
        .number = Delta_FieldNumber_PreviousDeltaDfsHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Delta__storage_, previousDeltaDfsHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "merkleRoot",
        .dataTypeSpecific.className = NULL,
        .number = Delta_FieldNumber_MerkleRoot,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Delta__storage_, merkleRoot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "merklePoda",
        .dataTypeSpecific.className = NULL,
        .number = Delta_FieldNumber_MerklePoda,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Delta__storage_, merklePoda),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "timeStamp",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Delta_FieldNumber_TimeStamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Delta__storage_, timeStamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "publicEntriesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PublicEntry),
        .number = Delta_FieldNumber_PublicEntriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Delta__storage_, publicEntriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confidentialEntriesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ConfidentialEntry),
        .number = Delta_FieldNumber_ConfidentialEntriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Delta__storage_, confidentialEntriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "coinbaseEntriesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CoinbaseEntry),
        .number = Delta_FieldNumber_CoinbaseEntriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Delta__storage_, coinbaseEntriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stateRoot",
        .dataTypeSpecific.className = NULL,
        .number = Delta_FieldNumber_StateRoot,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Delta__storage_, stateRoot),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "deltaNumber",
        .dataTypeSpecific.className = NULL,
        .number = Delta_FieldNumber_DeltaNumber,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Delta__storage_, deltaNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Delta class]
                                     rootClass:[DeltasRoot class]
                                          file:DeltasRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Delta__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
