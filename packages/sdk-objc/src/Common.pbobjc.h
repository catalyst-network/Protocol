// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class GPBDuration;
@class GPBTimestamp;
@class PeerId;
@class ProtocolMessage;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Network

typedef GPB_ENUM(Network) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Network_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Network_NetworkUnknown = 0,
  Network_Mainnet = 1,
  Network_Devnet = 2,
  Network_Testnet = 3,
};

GPBEnumDescriptor *Network_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Network_IsValidValue(int32_t value);

#pragma mark - Enum SignatureType

typedef GPB_ENUM(SignatureType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  SignatureType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  SignatureType_SignatureTypeUnknown = 0,
  SignatureType_TransactionPublic = 1,
  SignatureType_TransactionConfidential = 2,
  SignatureType_ProtocolRpc = 3,
  SignatureType_ProtocolPeer = 4,
};

GPBEnumDescriptor *SignatureType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SignatureType_IsValidValue(int32_t value);

#pragma mark - CommonRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface CommonRoot : GPBRootObject
@end

#pragma mark - PeerId

typedef GPB_ENUM(PeerId_FieldNumber) {
  PeerId_FieldNumber_ClientId = 1,
  PeerId_FieldNumber_ProtocolVersion = 2,
  PeerId_FieldNumber_Ip = 3,
  PeerId_FieldNumber_Port = 4,
  PeerId_FieldNumber_PublicKey = 5,
};

/**
 * *
 * Aggregated size of the fields in PeerId should be 42 bytes as specified in
 * https://github.com/catalyst-network/protocol-blueprint/blob/master/PeerProtocol.md
 **/
@interface PeerId : GPBMessage

/** 2 bytes */
@property(nonatomic, readwrite, copy, null_resettable) NSData *clientId;

/** 2 bytes */
@property(nonatomic, readwrite, copy, null_resettable) NSData *protocolVersion;

/** 16 bytes */
@property(nonatomic, readwrite, copy, null_resettable) NSData *ip;

/** 2 bytes */
@property(nonatomic, readwrite, copy, null_resettable) NSData *port;

/** 20 bytes */
@property(nonatomic, readwrite, copy, null_resettable) NSData *publicKey;

@end

#pragma mark - ProtocolErrorMessageSigned

typedef GPB_ENUM(ProtocolErrorMessageSigned_FieldNumber) {
  ProtocolErrorMessageSigned_FieldNumber_Signature = 1,
  ProtocolErrorMessageSigned_FieldNumber_PeerId = 2,
  ProtocolErrorMessageSigned_FieldNumber_CorrelationId = 3,
  ProtocolErrorMessageSigned_FieldNumber_Code = 4,
};

/**
 * *
 * Provides a network error message, for when a node cant send/ build a valid response
 **/
@interface ProtocolErrorMessageSigned : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;

@property(nonatomic, readwrite, strong, null_resettable) PeerId *peerId;
/** Test to see if @c peerId has been set. */
@property(nonatomic, readwrite) BOOL hasPeerId;

@property(nonatomic, readwrite, copy, null_resettable) NSData *correlationId;

@property(nonatomic, readwrite) int32_t code;

@end

#pragma mark - ProtocolMessageSigned

typedef GPB_ENUM(ProtocolMessageSigned_FieldNumber) {
  ProtocolMessageSigned_FieldNumber_Signature = 1,
  ProtocolMessageSigned_FieldNumber_Message = 2,
};

/**
 * *
 * A wrapper around the service message, the contents of service message should be signed by the sender to avoid tampering mid-transit.
 * To verify use message.peerId.publicKey
 **/
@interface ProtocolMessageSigned : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *signature;

@property(nonatomic, readwrite, strong, null_resettable) ProtocolMessage *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

@end

#pragma mark - ProtocolMessage

typedef GPB_ENUM(ProtocolMessage_FieldNumber) {
  ProtocolMessage_FieldNumber_PeerId = 1,
  ProtocolMessage_FieldNumber_CorrelationId = 2,
  ProtocolMessage_FieldNumber_TypeURL = 3,
  ProtocolMessage_FieldNumber_Value = 4,
};

/**
 * *
 * Core protocol messages to be sent across the network.
 * - peerId is the sender's peerId
 * - correlationId is a 16 bytes guid used to match responses to their original requests
 * - type_url is the shortened protocol name of the message type being encoded in the value field (cf Any from protobuf WellKnownTypes)
 * - value is the actual value of the message being wrapped (cf Any from protobuf WellKnownTypes)
 **/
@interface ProtocolMessage : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) PeerId *peerId;
/** Test to see if @c peerId has been set. */
@property(nonatomic, readwrite) BOOL hasPeerId;

@property(nonatomic, readwrite, copy, null_resettable) NSData *correlationId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *typeURL;

@property(nonatomic, readwrite, copy, null_resettable) NSData *value;

@end

#pragma mark - PeerInfo

typedef GPB_ENUM(PeerInfo_FieldNumber) {
  PeerInfo_FieldNumber_PeerId = 1,
  PeerInfo_FieldNumber_Reputation = 2,
  PeerInfo_FieldNumber_BlackListed = 3,
  PeerInfo_FieldNumber_IsAwolPeer = 4,
  PeerInfo_FieldNumber_InactiveFor = 5,
  PeerInfo_FieldNumber_LastSeen = 6,
  PeerInfo_FieldNumber_Modified = 7,
  PeerInfo_FieldNumber_Created = 8,
};

/**
 * *
 * Information about a peer
 * - peerId is the peerId
 * - pkId is the primary key of the peer in storage
 * - reputation of peer
 * - blackListed is to check if the peer is blackListed
 * - isAwolPeer is when the peer cannot be reached on the network
 * - inactiveFor is how long the peer has beekn inactive for
 * - lastSeen is when the peer was last seen
 * - modified is when the peer was last modified
 * - created is when the peer was created
 **/
@interface PeerInfo : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) PeerId *peerId;
/** Test to see if @c peerId has been set. */
@property(nonatomic, readwrite) BOOL hasPeerId;

@property(nonatomic, readwrite) int32_t reputation;

@property(nonatomic, readwrite) BOOL blackListed;

@property(nonatomic, readwrite) BOOL isAwolPeer;

@property(nonatomic, readwrite, strong, null_resettable) GPBDuration *inactiveFor;
/** Test to see if @c inactiveFor has been set. */
@property(nonatomic, readwrite) BOOL hasInactiveFor;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *lastSeen;
/** Test to see if @c lastSeen has been set. */
@property(nonatomic, readwrite) BOOL hasLastSeen;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *modified;
/** Test to see if @c modified has been set. */
@property(nonatomic, readwrite) BOOL hasModified;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *created;
/** Test to see if @c created has been set. */
@property(nonatomic, readwrite) BOOL hasCreated;

@end

#pragma mark - SigningContext

typedef GPB_ENUM(SigningContext_FieldNumber) {
  SigningContext_FieldNumber_Network = 1,
  SigningContext_FieldNumber_SignatureType = 2,
};

/**
 * *
 * Context in which a signature takes place.
 * - peerId is the peerId
 * - Network is the network (mainet / devnet etc)
 * - SignatureType contains info on whether the signature is for a protocol message or a transaction.
 **/
@interface SigningContext : GPBMessage

@property(nonatomic, readwrite) Network network;

@property(nonatomic, readwrite) SignatureType signatureType;

@end

/**
 * Fetches the raw value of a @c SigningContext's @c network property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SigningContext_Network_RawValue(SigningContext *message);
/**
 * Sets the raw value of an @c SigningContext's @c network property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSigningContext_Network_RawValue(SigningContext *message, int32_t value);

/**
 * Fetches the raw value of a @c SigningContext's @c signatureType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t SigningContext_SignatureType_RawValue(SigningContext *message);
/**
 * Sets the raw value of an @c SigningContext's @c signatureType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetSigningContext_SignatureType_RawValue(SigningContext *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
