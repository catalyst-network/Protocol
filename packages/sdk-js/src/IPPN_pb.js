/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Peer_pb = require('./Peer_pb.js');
var Deltas_pb = require('./Deltas_pb.js');
goog.exportSymbol('proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.IPPN.PingRequest', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.IPPN.PingResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest.displayName = 'proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest;
  return proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.repeatedFields_, null);
};
goog.inherits(proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.displayName = 'proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    peersList: jspb.Message.toObjectList(msg.getPeersList(),
    Peer_pb.PeerId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse;
  return proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Peer_pb.PeerId;
      reader.readMessage(value,Peer_pb.PeerId.deserializeBinaryFromReader);
      msg.addPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Peer_pb.PeerId.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Catalyst.Protocol.Peer.PeerId peers = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Catalyst.Protocol.Peer.PeerId>}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.prototype.getPeersList = function() {
  return /** @type{!Array.<!proto.Catalyst.Protocol.Peer.PeerId>} */ (
    jspb.Message.getRepeatedWrapperField(this, Peer_pb.PeerId, 1));
};


/** @param {!Array.<!proto.Catalyst.Protocol.Peer.PeerId>} value */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.prototype.setPeersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Catalyst.Protocol.Peer.PeerId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Catalyst.Protocol.Peer.PeerId}
 */
proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Catalyst.Protocol.Peer.PeerId, opt_index);
};


proto.Catalyst.Protocol.IPPN.PeerNeighborsResponse.prototype.clearPeersList = function() {
  this.setPeersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.IPPN.PingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.IPPN.PingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.IPPN.PingRequest.displayName = 'proto.Catalyst.Protocol.IPPN.PingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.PingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.IPPN.PingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.IPPN.PingRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.PingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.IPPN.PingRequest}
 */
proto.Catalyst.Protocol.IPPN.PingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.IPPN.PingRequest;
  return proto.Catalyst.Protocol.IPPN.PingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.IPPN.PingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.IPPN.PingRequest}
 */
proto.Catalyst.Protocol.IPPN.PingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.IPPN.PingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.IPPN.PingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.IPPN.PingRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Catalyst.Protocol.IPPN.PingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.IPPN.PingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.IPPN.PingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.IPPN.PingResponse.displayName = 'proto.Catalyst.Protocol.IPPN.PingResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.PingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.IPPN.PingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.IPPN.PingResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.PingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.IPPN.PingResponse}
 */
proto.Catalyst.Protocol.IPPN.PingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.IPPN.PingResponse;
  return proto.Catalyst.Protocol.IPPN.PingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.IPPN.PingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.IPPN.PingResponse}
 */
proto.Catalyst.Protocol.IPPN.PingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.IPPN.PingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.IPPN.PingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.IPPN.PingResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Catalyst.Protocol.IPPN.PingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest.displayName = 'proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest;
  return proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.displayName = 'proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deltaHash: msg.getDeltaHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse;
  return proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeltaHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeltaHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes delta_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.prototype.getDeltaHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes delta_hash = 1;
 * This is a type-conversion wrapper around `getDeltaHash()`
 * @return {string}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.prototype.getDeltaHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeltaHash()));
};


/**
 * optional bytes delta_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeltaHash()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.prototype.getDeltaHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeltaHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.Catalyst.Protocol.IPPN.LatestDeltaHashResponse.prototype.setDeltaHash = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.displayName = 'proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest;
  return proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRange();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.prototype.setRange = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Catalyst.Protocol.IPPN.DeltaHistoryRequest.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.repeatedFields_, null);
};
goog.inherits(proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.displayName = 'proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    Deltas_pb.DeltaIndex.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse;
  return proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Deltas_pb.DeltaIndex;
      reader.readMessage(value,Deltas_pb.DeltaIndex.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      Deltas_pb.DeltaIndex.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Catalyst.Protocol.Deltas.DeltaIndex result = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Catalyst.Protocol.Deltas.DeltaIndex>}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.prototype.getResultList = function() {
  return /** @type{!Array.<!proto.Catalyst.Protocol.Deltas.DeltaIndex>} */ (
    jspb.Message.getRepeatedWrapperField(this, Deltas_pb.DeltaIndex, 1));
};


/** @param {!Array.<!proto.Catalyst.Protocol.Deltas.DeltaIndex>} value */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.prototype.setResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Catalyst.Protocol.Deltas.DeltaIndex=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Catalyst.Protocol.Deltas.DeltaIndex}
 */
proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Catalyst.Protocol.Deltas.DeltaIndex, opt_index);
};


proto.Catalyst.Protocol.IPPN.DeltaHistoryResponse.prototype.clearResultList = function() {
  this.setResultList([]);
};


goog.object.extend(exports, proto.Catalyst.Protocol.IPPN);
