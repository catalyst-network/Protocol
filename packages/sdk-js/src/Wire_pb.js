// source: Wire.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Cryptography_pb = require('./Cryptography_pb.js');
goog.object.extend(proto, Cryptography_pb);
var Peer_pb = require('./Peer_pb.js');
goog.object.extend(proto, Peer_pb);
var Transaction_pb = require('./Transaction_pb.js');
goog.object.extend(proto, Transaction_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Wire.ProtocolErrorMessage', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Wire.ProtocolMessage', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Wire.TransactionBroadcast', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Wire.ProtocolErrorMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.displayName = 'proto.Catalyst.Protocol.Wire.ProtocolErrorMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Wire.ProtocolMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Wire.ProtocolMessage.displayName = 'proto.Catalyst.Protocol.Wire.ProtocolMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Wire.TransactionBroadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Wire.TransactionBroadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Wire.TransactionBroadcast.displayName = 'proto.Catalyst.Protocol.Wire.TransactionBroadcast';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.displayName = 'proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.displayName = 'proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.displayName = 'proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: (f = msg.getSignature()) && Cryptography_pb.Signature.toObject(includeInstance, f),
    peerId: (f = msg.getPeerId()) && Peer_pb.PeerId.toObject(includeInstance, f),
    correlationId: msg.getCorrelationId_asB64(),
    code: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Wire.ProtocolErrorMessage;
  return proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Cryptography_pb.Signature;
      reader.readMessage(value,Cryptography_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    case 2:
      var value = new Peer_pb.PeerId;
      reader.readMessage(value,Peer_pb.PeerId.deserializeBinaryFromReader);
      msg.setPeerId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCorrelationId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Cryptography_pb.Signature.serializeBinaryToWriter
    );
  }
  f = message.getPeerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Peer_pb.PeerId.serializeBinaryToWriter
    );
  }
  f = message.getCorrelationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional Catalyst.Protocol.Cryptography.Signature signature = 1;
 * @return {?proto.Catalyst.Protocol.Cryptography.Signature}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.getSignature = function() {
  return /** @type{?proto.Catalyst.Protocol.Cryptography.Signature} */ (
    jspb.Message.getWrapperField(this, Cryptography_pb.Signature, 1));
};


/**
 * @param {?proto.Catalyst.Protocol.Cryptography.Signature|undefined} value
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage} returns this
*/
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage} returns this
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Catalyst.Protocol.Peer.PeerId peer_id = 2;
 * @return {?proto.Catalyst.Protocol.Peer.PeerId}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.getPeerId = function() {
  return /** @type{?proto.Catalyst.Protocol.Peer.PeerId} */ (
    jspb.Message.getWrapperField(this, Peer_pb.PeerId, 2));
};


/**
 * @param {?proto.Catalyst.Protocol.Peer.PeerId|undefined} value
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage} returns this
*/
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.setPeerId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage} returns this
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.clearPeerId = function() {
  return this.setPeerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.hasPeerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes correlation_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.getCorrelationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes correlation_id = 3;
 * This is a type-conversion wrapper around `getCorrelationId()`
 * @return {string}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.getCorrelationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCorrelationId()));
};


/**
 * optional bytes correlation_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCorrelationId()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.getCorrelationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCorrelationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage} returns this
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.setCorrelationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int32 code = 4;
 * @return {number}
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolErrorMessage} returns this
 */
proto.Catalyst.Protocol.Wire.ProtocolErrorMessage.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Wire.ProtocolMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Wire.ProtocolMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerId: (f = msg.getPeerId()) && Peer_pb.PeerId.toObject(includeInstance, f),
    correlationId: msg.getCorrelationId_asB64(),
    typeUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: msg.getValue_asB64(),
    signature: (f = msg.getSignature()) && Cryptography_pb.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolMessage}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Wire.ProtocolMessage;
  return proto.Catalyst.Protocol.Wire.ProtocolMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Wire.ProtocolMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolMessage}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Peer_pb.PeerId;
      reader.readMessage(value,Peer_pb.PeerId.deserializeBinaryFromReader);
      msg.setPeerId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCorrelationId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeUrl(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 5:
      var value = new Cryptography_pb.Signature;
      reader.readMessage(value,Cryptography_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Wire.ProtocolMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Wire.ProtocolMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Peer_pb.PeerId.serializeBinaryToWriter
    );
  }
  f = message.getCorrelationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTypeUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      Cryptography_pb.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional Catalyst.Protocol.Peer.PeerId peer_id = 1;
 * @return {?proto.Catalyst.Protocol.Peer.PeerId}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.getPeerId = function() {
  return /** @type{?proto.Catalyst.Protocol.Peer.PeerId} */ (
    jspb.Message.getWrapperField(this, Peer_pb.PeerId, 1));
};


/**
 * @param {?proto.Catalyst.Protocol.Peer.PeerId|undefined} value
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolMessage} returns this
*/
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.setPeerId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolMessage} returns this
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.clearPeerId = function() {
  return this.setPeerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.hasPeerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes correlation_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.getCorrelationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes correlation_id = 2;
 * This is a type-conversion wrapper around `getCorrelationId()`
 * @return {string}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.getCorrelationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCorrelationId()));
};


/**
 * optional bytes correlation_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCorrelationId()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.getCorrelationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCorrelationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolMessage} returns this
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.setCorrelationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string type_url = 3;
 * @return {string}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.getTypeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolMessage} returns this
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.setTypeUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes value = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes value = 4;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolMessage} returns this
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional Catalyst.Protocol.Cryptography.Signature signature = 5;
 * @return {?proto.Catalyst.Protocol.Cryptography.Signature}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.getSignature = function() {
  return /** @type{?proto.Catalyst.Protocol.Cryptography.Signature} */ (
    jspb.Message.getWrapperField(this, Cryptography_pb.Signature, 5));
};


/**
 * @param {?proto.Catalyst.Protocol.Cryptography.Signature|undefined} value
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolMessage} returns this
*/
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Wire.ProtocolMessage} returns this
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Wire.ProtocolMessage.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Wire.TransactionBroadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Wire.TransactionBroadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Wire.TransactionBroadcast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.TransactionBroadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicEntry: (f = msg.getPublicEntry()) && Transaction_pb.PublicEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Wire.TransactionBroadcast}
 */
proto.Catalyst.Protocol.Wire.TransactionBroadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Wire.TransactionBroadcast;
  return proto.Catalyst.Protocol.Wire.TransactionBroadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Wire.TransactionBroadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Wire.TransactionBroadcast}
 */
proto.Catalyst.Protocol.Wire.TransactionBroadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Transaction_pb.PublicEntry;
      reader.readMessage(value,Transaction_pb.PublicEntry.deserializeBinaryFromReader);
      msg.setPublicEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.TransactionBroadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Wire.TransactionBroadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Wire.TransactionBroadcast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.TransactionBroadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicEntry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Transaction_pb.PublicEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional Catalyst.Protocol.Transaction.PublicEntry public_entry = 1;
 * @return {?proto.Catalyst.Protocol.Transaction.PublicEntry}
 */
proto.Catalyst.Protocol.Wire.TransactionBroadcast.prototype.getPublicEntry = function() {
  return /** @type{?proto.Catalyst.Protocol.Transaction.PublicEntry} */ (
    jspb.Message.getWrapperField(this, Transaction_pb.PublicEntry, 1));
};


/**
 * @param {?proto.Catalyst.Protocol.Transaction.PublicEntry|undefined} value
 * @return {!proto.Catalyst.Protocol.Wire.TransactionBroadcast} returns this
*/
proto.Catalyst.Protocol.Wire.TransactionBroadcast.prototype.setPublicEntry = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Wire.TransactionBroadcast} returns this
 */
proto.Catalyst.Protocol.Wire.TransactionBroadcast.prototype.clearPublicEntry = function() {
  return this.setPublicEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Wire.TransactionBroadcast.prototype.hasPublicEntry = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    producerId: (f = msg.getProducerId()) && Peer_pb.PeerId.toObject(includeInstance, f),
    previousDeltaDfsHash: msg.getPreviousDeltaDfsHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast;
  return proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = new Peer_pb.PeerId;
      reader.readMessage(value,Peer_pb.PeerId.deserializeBinaryFromReader);
      msg.setProducerId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousDeltaDfsHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getProducerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Peer_pb.PeerId.serializeBinaryToWriter
    );
  }
  f = message.getPreviousDeltaDfsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast} returns this
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Catalyst.Protocol.Peer.PeerId producer_id = 2;
 * @return {?proto.Catalyst.Protocol.Peer.PeerId}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.getProducerId = function() {
  return /** @type{?proto.Catalyst.Protocol.Peer.PeerId} */ (
    jspb.Message.getWrapperField(this, Peer_pb.PeerId, 2));
};


/**
 * @param {?proto.Catalyst.Protocol.Peer.PeerId|undefined} value
 * @return {!proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast} returns this
*/
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.setProducerId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast} returns this
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.clearProducerId = function() {
  return this.setProducerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.hasProducerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes previous_delta_dfs_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.getPreviousDeltaDfsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes previous_delta_dfs_hash = 3;
 * This is a type-conversion wrapper around `getPreviousDeltaDfsHash()`
 * @return {string}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.getPreviousDeltaDfsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousDeltaDfsHash()));
};


/**
 * optional bytes previous_delta_dfs_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousDeltaDfsHash()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.getPreviousDeltaDfsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousDeltaDfsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast} returns this
 */
proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.prototype.setPreviousDeltaDfsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.getCandidate()) && proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.toObject(includeInstance, f),
    voterId: (f = msg.getVoterId()) && Peer_pb.PeerId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast}
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast;
  return proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast}
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast;
      reader.readMessage(value,proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 2:
      var value = new Peer_pb.PeerId;
      reader.readMessage(value,Peer_pb.PeerId.deserializeBinaryFromReader);
      msg.setVoterId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast.serializeBinaryToWriter
    );
  }
  f = message.getVoterId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Peer_pb.PeerId.serializeBinaryToWriter
    );
  }
};


/**
 * optional CandidateDeltaBroadcast candidate = 1;
 * @return {?proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast}
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.prototype.getCandidate = function() {
  return /** @type{?proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast} */ (
    jspb.Message.getWrapperField(this, proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast, 1));
};


/**
 * @param {?proto.Catalyst.Protocol.Wire.CandidateDeltaBroadcast|undefined} value
 * @return {!proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast} returns this
*/
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.prototype.setCandidate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast} returns this
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.prototype.clearCandidate = function() {
  return this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Catalyst.Protocol.Peer.PeerId voter_id = 2;
 * @return {?proto.Catalyst.Protocol.Peer.PeerId}
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.prototype.getVoterId = function() {
  return /** @type{?proto.Catalyst.Protocol.Peer.PeerId} */ (
    jspb.Message.getWrapperField(this, Peer_pb.PeerId, 2));
};


/**
 * @param {?proto.Catalyst.Protocol.Peer.PeerId|undefined} value
 * @return {!proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast} returns this
*/
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.prototype.setVoterId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast} returns this
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.prototype.clearVoterId = function() {
  return this.setVoterId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Wire.FavouriteDeltaBroadcast.prototype.hasVoterId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    deltaDfsHash: msg.getDeltaDfsHash_asB64(),
    previousDeltaDfsHash: msg.getPreviousDeltaDfsHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast}
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast;
  return proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast}
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeltaDfsHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousDeltaDfsHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeltaDfsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPreviousDeltaDfsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes delta_dfs_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.prototype.getDeltaDfsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes delta_dfs_hash = 1;
 * This is a type-conversion wrapper around `getDeltaDfsHash()`
 * @return {string}
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.prototype.getDeltaDfsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeltaDfsHash()));
};


/**
 * optional bytes delta_dfs_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeltaDfsHash()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.prototype.getDeltaDfsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeltaDfsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast} returns this
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.prototype.setDeltaDfsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes previous_delta_dfs_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.prototype.getPreviousDeltaDfsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes previous_delta_dfs_hash = 2;
 * This is a type-conversion wrapper around `getPreviousDeltaDfsHash()`
 * @return {string}
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.prototype.getPreviousDeltaDfsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousDeltaDfsHash()));
};


/**
 * optional bytes previous_delta_dfs_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousDeltaDfsHash()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.prototype.getPreviousDeltaDfsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousDeltaDfsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast} returns this
 */
proto.Catalyst.Protocol.Wire.DeltaDfsHashBroadcast.prototype.setPreviousDeltaDfsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.Catalyst.Protocol.Wire);
