// source: Transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Cryptography_pb = require('./Cryptography_pb.js');
goog.object.extend(proto, Cryptography_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.Catalyst.Protocol.Transaction.CoinbaseEntry', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Transaction.ConfidentialEntry', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Transaction.PublicEntry', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Transaction.RangeProof', null, global);
goog.exportSymbol('proto.Catalyst.Protocol.Transaction.TransactionType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Transaction.PublicEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Transaction.PublicEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Transaction.PublicEntry.displayName = 'proto.Catalyst.Protocol.Transaction.PublicEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Transaction.ConfidentialEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Transaction.ConfidentialEntry.displayName = 'proto.Catalyst.Protocol.Transaction.ConfidentialEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Catalyst.Protocol.Transaction.CoinbaseEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Transaction.CoinbaseEntry.displayName = 'proto.Catalyst.Protocol.Transaction.CoinbaseEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Catalyst.Protocol.Transaction.RangeProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Catalyst.Protocol.Transaction.RangeProof.repeatedFields_, null);
};
goog.inherits(proto.Catalyst.Protocol.Transaction.RangeProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Catalyst.Protocol.Transaction.RangeProof.displayName = 'proto.Catalyst.Protocol.Transaction.RangeProof';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Transaction.PublicEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Transaction.PublicEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiverAddress: msg.getReceiverAddress_asB64(),
    senderAddress: msg.getSenderAddress_asB64(),
    amount: msg.getAmount_asB64(),
    data: msg.getData_asB64(),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    gasPrice: msg.getGasPrice_asB64(),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 7, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 9, 0),
    signature: (f = msg.getSignature()) && Cryptography_pb.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Transaction.PublicEntry;
  return proto.Catalyst.Protocol.Transaction.PublicEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Transaction.PublicEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiverAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderAddress(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasPrice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 10:
      var value = new Cryptography_pb.Signature;
      reader.readMessage(value,Cryptography_pb.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Transaction.PublicEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Transaction.PublicEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiverAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSenderAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getGasPrice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      Cryptography_pb.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes receiver_address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getReceiverAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes receiver_address = 1;
 * This is a type-conversion wrapper around `getReceiverAddress()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getReceiverAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiverAddress()));
};


/**
 * optional bytes receiver_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiverAddress()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getReceiverAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiverAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.setReceiverAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sender_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getSenderAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sender_address = 2;
 * This is a type-conversion wrapper around `getSenderAddress()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getSenderAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderAddress()));
};


/**
 * optional bytes sender_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderAddress()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getSenderAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.setSenderAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes amount = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes amount = 3;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.setAmount = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
*/
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes gas_price = 6;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getGasPrice = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes gas_price = 6;
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getGasPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasPrice()));
};


/**
 * optional bytes gas_price = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasPrice()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getGasPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasPrice()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint64 gas_limit = 7;
 * @return {number}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 nonce = 9;
 * @return {number}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional Catalyst.Protocol.Cryptography.Signature signature = 10;
 * @return {?proto.Catalyst.Protocol.Cryptography.Signature}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.getSignature = function() {
  return /** @type{?proto.Catalyst.Protocol.Cryptography.Signature} */ (
    jspb.Message.getWrapperField(this, Cryptography_pb.Signature, 10));
};


/**
 * @param {?proto.Catalyst.Protocol.Cryptography.Signature|undefined} value
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
*/
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Transaction.PublicEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Transaction.PublicEntry.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Transaction.ConfidentialEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiverPublicKey: msg.getReceiverPublicKey_asB64(),
    senderPublicKey: msg.getSenderPublicKey_asB64(),
    pedersenCommitment: msg.getPedersenCommitment_asB64(),
    rangeProof: (f = msg.getRangeProof()) && proto.Catalyst.Protocol.Transaction.RangeProof.toObject(includeInstance, f),
    transactionFees: msg.getTransactionFees_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Transaction.ConfidentialEntry;
  return proto.Catalyst.Protocol.Transaction.ConfidentialEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiverPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderPublicKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPedersenCommitment(value);
      break;
    case 4:
      var value = new proto.Catalyst.Protocol.Transaction.RangeProof;
      reader.readMessage(value,proto.Catalyst.Protocol.Transaction.RangeProof.deserializeBinaryFromReader);
      msg.setRangeProof(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionFees(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Transaction.ConfidentialEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiverPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSenderPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPedersenCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRangeProof();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Catalyst.Protocol.Transaction.RangeProof.serializeBinaryToWriter
    );
  }
  f = message.getTransactionFees_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional bytes receiver_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getReceiverPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes receiver_public_key = 1;
 * This is a type-conversion wrapper around `getReceiverPublicKey()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getReceiverPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiverPublicKey()));
};


/**
 * optional bytes receiver_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiverPublicKey()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getReceiverPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiverPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.setReceiverPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sender_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getSenderPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sender_public_key = 2;
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getSenderPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderPublicKey()));
};


/**
 * optional bytes sender_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderPublicKey()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getSenderPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.setSenderPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes pedersen_commitment = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getPedersenCommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pedersen_commitment = 3;
 * This is a type-conversion wrapper around `getPedersenCommitment()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getPedersenCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPedersenCommitment()));
};


/**
 * optional bytes pedersen_commitment = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPedersenCommitment()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getPedersenCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPedersenCommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.setPedersenCommitment = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional RangeProof range_proof = 4;
 * @return {?proto.Catalyst.Protocol.Transaction.RangeProof}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getRangeProof = function() {
  return /** @type{?proto.Catalyst.Protocol.Transaction.RangeProof} */ (
    jspb.Message.getWrapperField(this, proto.Catalyst.Protocol.Transaction.RangeProof, 4));
};


/**
 * @param {?proto.Catalyst.Protocol.Transaction.RangeProof|undefined} value
 * @return {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry} returns this
*/
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.setRangeProof = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.clearRangeProof = function() {
  return this.setRangeProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.hasRangeProof = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes transaction_fees = 5;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getTransactionFees = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes transaction_fees = 5;
 * This is a type-conversion wrapper around `getTransactionFees()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getTransactionFees_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionFees()));
};


/**
 * optional bytes transaction_fees = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionFees()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getTransactionFees_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionFees()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.setTransactionFees = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 nonce = 6;
 * @return {number}
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Catalyst.Protocol.Transaction.ConfidentialEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.ConfidentialEntry.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Transaction.CoinbaseEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Transaction.CoinbaseEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiverPublicKey: msg.getReceiverPublicKey_asB64(),
    amount: msg.getAmount_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Transaction.CoinbaseEntry}
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Transaction.CoinbaseEntry;
  return proto.Catalyst.Protocol.Transaction.CoinbaseEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Transaction.CoinbaseEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Transaction.CoinbaseEntry}
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiverPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Transaction.CoinbaseEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Transaction.CoinbaseEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiverPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes receiver_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.prototype.getReceiverPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes receiver_public_key = 1;
 * This is a type-conversion wrapper around `getReceiverPublicKey()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.prototype.getReceiverPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiverPublicKey()));
};


/**
 * optional bytes receiver_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiverPublicKey()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.prototype.getReceiverPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiverPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.CoinbaseEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.prototype.setReceiverPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes amount = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.prototype.getAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes amount = 2;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.CoinbaseEntry} returns this
 */
proto.Catalyst.Protocol.Transaction.CoinbaseEntry.prototype.setAmount = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Catalyst.Protocol.Transaction.RangeProof.repeatedFields_ = [1,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.toObject = function(opt_includeInstance) {
  return proto.Catalyst.Protocol.Transaction.RangeProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Catalyst.Protocol.Transaction.RangeProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.RangeProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueCommitmentList: msg.getValueCommitmentList_asB64(),
    bitCommitment: msg.getBitCommitment_asB64(),
    perBitBlindingFactorCommitment: msg.getPerBitBlindingFactorCommitment_asB64(),
    polyCommitmentT1: msg.getPolyCommitmentT1_asB64(),
    polyCommitmentT2: msg.getPolyCommitmentT2_asB64(),
    proofOfShareTau: msg.getProofOfShareTau_asB64(),
    proofOfShareMu: msg.getProofOfShareMu_asB64(),
    aggregatedVectorPolynomialLList: msg.getAggregatedVectorPolynomialLList_asB64(),
    aggregatedVectorPolynomialRList: msg.getAggregatedVectorPolynomialRList_asB64(),
    aPrime0: msg.getAPrime0_asB64(),
    bPrime0: msg.getBPrime0_asB64(),
    t: msg.getT_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Catalyst.Protocol.Transaction.RangeProof;
  return proto.Catalyst.Protocol.Transaction.RangeProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Catalyst.Protocol.Transaction.RangeProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addValueCommitment(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBitCommitment(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPerBitBlindingFactorCommitment(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPolyCommitmentT1(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPolyCommitmentT2(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofOfShareTau(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofOfShareMu(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAggregatedVectorPolynomialL(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAggregatedVectorPolynomialR(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAPrime0(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBPrime0(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setT(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Catalyst.Protocol.Transaction.RangeProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Catalyst.Protocol.Transaction.RangeProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Catalyst.Protocol.Transaction.RangeProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueCommitmentList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getBitCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPerBitBlindingFactorCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPolyCommitmentT1_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPolyCommitmentT2_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getProofOfShareTau_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getProofOfShareMu_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getAggregatedVectorPolynomialLList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      8,
      f
    );
  }
  f = message.getAggregatedVectorPolynomialRList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      9,
      f
    );
  }
  f = message.getAPrime0_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getBPrime0_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getT_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * repeated bytes value_commitment = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getValueCommitmentList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes value_commitment = 1;
 * This is a type-conversion wrapper around `getValueCommitmentList()`
 * @return {!Array<string>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getValueCommitmentList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getValueCommitmentList()));
};


/**
 * repeated bytes value_commitment = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValueCommitmentList()`
 * @return {!Array<!Uint8Array>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getValueCommitmentList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getValueCommitmentList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setValueCommitmentList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.addValueCommitment = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.clearValueCommitmentList = function() {
  return this.setValueCommitmentList([]);
};


/**
 * optional bytes bit_commitment = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBitCommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes bit_commitment = 2;
 * This is a type-conversion wrapper around `getBitCommitment()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBitCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBitCommitment()));
};


/**
 * optional bytes bit_commitment = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBitCommitment()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBitCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBitCommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setBitCommitment = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes per_bit_blinding_factor_commitment = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPerBitBlindingFactorCommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes per_bit_blinding_factor_commitment = 3;
 * This is a type-conversion wrapper around `getPerBitBlindingFactorCommitment()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPerBitBlindingFactorCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPerBitBlindingFactorCommitment()));
};


/**
 * optional bytes per_bit_blinding_factor_commitment = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPerBitBlindingFactorCommitment()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPerBitBlindingFactorCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPerBitBlindingFactorCommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setPerBitBlindingFactorCommitment = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes poly_commitment_t1 = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes poly_commitment_t1 = 4;
 * This is a type-conversion wrapper around `getPolyCommitmentT1()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPolyCommitmentT1()));
};


/**
 * optional bytes poly_commitment_t1 = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPolyCommitmentT1()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPolyCommitmentT1()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setPolyCommitmentT1 = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes poly_commitment_t2 = 5;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT2 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes poly_commitment_t2 = 5;
 * This is a type-conversion wrapper around `getPolyCommitmentT2()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT2_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPolyCommitmentT2()));
};


/**
 * optional bytes poly_commitment_t2 = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPolyCommitmentT2()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getPolyCommitmentT2_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPolyCommitmentT2()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setPolyCommitmentT2 = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes proof_of_share_tau = 6;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareTau = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes proof_of_share_tau = 6;
 * This is a type-conversion wrapper around `getProofOfShareTau()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareTau_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofOfShareTau()));
};


/**
 * optional bytes proof_of_share_tau = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofOfShareTau()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareTau_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofOfShareTau()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setProofOfShareTau = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes proof_of_share_mu = 7;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareMu = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes proof_of_share_mu = 7;
 * This is a type-conversion wrapper around `getProofOfShareMu()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareMu_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofOfShareMu()));
};


/**
 * optional bytes proof_of_share_mu = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofOfShareMu()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getProofOfShareMu_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofOfShareMu()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setProofOfShareMu = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * repeated bytes aggregated_vector_polynomial_l = 8;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialLList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * repeated bytes aggregated_vector_polynomial_l = 8;
 * This is a type-conversion wrapper around `getAggregatedVectorPolynomialLList()`
 * @return {!Array<string>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialLList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAggregatedVectorPolynomialLList()));
};


/**
 * repeated bytes aggregated_vector_polynomial_l = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggregatedVectorPolynomialLList()`
 * @return {!Array<!Uint8Array>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialLList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAggregatedVectorPolynomialLList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setAggregatedVectorPolynomialLList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.addAggregatedVectorPolynomialL = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.clearAggregatedVectorPolynomialLList = function() {
  return this.setAggregatedVectorPolynomialLList([]);
};


/**
 * repeated bytes aggregated_vector_polynomial_r = 9;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialRList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * repeated bytes aggregated_vector_polynomial_r = 9;
 * This is a type-conversion wrapper around `getAggregatedVectorPolynomialRList()`
 * @return {!Array<string>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialRList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAggregatedVectorPolynomialRList()));
};


/**
 * repeated bytes aggregated_vector_polynomial_r = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAggregatedVectorPolynomialRList()`
 * @return {!Array<!Uint8Array>}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAggregatedVectorPolynomialRList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAggregatedVectorPolynomialRList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setAggregatedVectorPolynomialRList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.addAggregatedVectorPolynomialR = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.clearAggregatedVectorPolynomialRList = function() {
  return this.setAggregatedVectorPolynomialRList([]);
};


/**
 * optional bytes a_prime_0 = 10;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAPrime0 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes a_prime_0 = 10;
 * This is a type-conversion wrapper around `getAPrime0()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAPrime0_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAPrime0()));
};


/**
 * optional bytes a_prime_0 = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAPrime0()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getAPrime0_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAPrime0()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setAPrime0 = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes b_prime_0 = 11;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBPrime0 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes b_prime_0 = 11;
 * This is a type-conversion wrapper around `getBPrime0()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBPrime0_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBPrime0()));
};


/**
 * optional bytes b_prime_0 = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBPrime0()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getBPrime0_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBPrime0()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setBPrime0 = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes t = 12;
 * @return {!(string|Uint8Array)}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getT = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes t = 12;
 * This is a type-conversion wrapper around `getT()`
 * @return {string}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getT_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getT()));
};


/**
 * optional bytes t = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getT()`
 * @return {!Uint8Array}
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.getT_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getT()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Catalyst.Protocol.Transaction.RangeProof} returns this
 */
proto.Catalyst.Protocol.Transaction.RangeProof.prototype.setT = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * @enum {number}
 */
proto.Catalyst.Protocol.Transaction.TransactionType = {
  TRANSACTION_TYPE_UNKNOWN: 0,
  PUBLIC: 1,
  CONFIDENTIAL: 2
};

goog.object.extend(exports, proto.Catalyst.Protocol.Transaction);
