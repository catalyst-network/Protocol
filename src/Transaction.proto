/**
* Copyright (c) 2019 Catalyst Network
*
* This file is part of Catalyst.Network.Protocol.Protobuffs <https://github.com/catalyst-network/protocol-protobuffs>
*
* Catalyst.Network.Protocol.Protobuffs is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* (at your option) any later version.
* 
* Catalyst.Network.Protocol.Protobuffs is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with Catalyst.Network.Protocol.Protobuffs If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

option java_multiple_files = true;

import "Cryptography.proto";
import "google/protobuf/timestamp.proto";

package Catalyst.Protocol.Transaction;

enum TransactionType {
	TRANSACTION_TYPE_UNKNOWN = 0; //Unknown transaction type.
	PUBLIC = 1; // Public transaction type.
	CONFIDENTIAL = 2; // Private transaction type.
}

message PublicEntry {
	bytes receiver_address = 1; // Address of receiver.
	bytes sender_address = 2;// Address of sender.
  bytes amount = 3; // uint256 amount
  bytes data = 4; // Smart contract data.
	google.protobuf.Timestamp timestamp = 5; 
	bytes gas_price = 6;
	uint64 gas_limit = 7;
	bytes transaction_fees = 8; // 8 bytes, clear text, fees * 10^12
	uint64 nonce = 9; // A nonce, similar to Ethereum, incremented on each transaction on the account issuing the transaction
	Cryptography.Signature signature = 10; // is the ed25519ph context signature
}

message ConfidentialEntry {
	bytes receiver_public_key = 1; // PublicKey of receiver.
	bytes sender_public_key = 2;// PublicKey of sender.
  bytes pedersen_commitment = 3; // 32 bytes
  RangeProof range_proof = 4;
	bytes transaction_fees = 5; // 8 bytes, clear text, fees * 10^12
	uint64 nonce = 6; // A nonce, similar to Ethereum, incremented on each transaction on the account issuing the transaction
}

message CoinbaseEntry {
    bytes receiver_public_key = 1; // public key behind the address where the Coinbase will be credited
    bytes amount = 2; // uint256 amount
}

/**
 * BulletProof-based range proof. See https://eprint.iacr.org/2017/1066.pdf for references to equations below.
 * Total byte size is (9+2k)*32, where k = log_2(n*m), m is number of aggregates in proof, (2^n)-1 is upper range of values.
 */
message RangeProof {
	repeated bytes value_commitment = 1; // m * 32 bytes, value commitment (eq. 36) 
	bytes bit_commitment = 2; // 32 bytes, bit commitment (eq. 48)
	bytes per_bit_blinding_factor_commitment = 3; // 32 bytes, per bit blinding factor commitment (eq. 48)
	bytes poly_commitment_t1 = 4; // 32 bytes, poly commitment (eq. 54)
	bytes poly_commitment_t2 = 5; // 32 bytes, poly commitment (eq. 54)
	bytes proof_of_share_tau = 6; // 32 bytes, proof of share (eq. 63)
	bytes proof_of_share_mu = 7; // 32 bytes, proof of share (eq. 63)
	repeated bytes aggregated_vector_polynomial_l = 8; // k * 32 bytes, aggregated vector polynomial (eq. 63)
	repeated bytes aggregated_vector_polynomial_r = 9; // k * 32 bytes, aggregated vector polynomial (eq. 63)
	bytes a_prime_0 = 10; // 32 bytes (eq. 63)
	bytes b_prime_0 = 11; // 32 bytes (eq. 63)
	bytes t = 12; 
} 
