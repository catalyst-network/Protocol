/**
* Copyright (c) 2019 Catalyst Network
*
* This file is part of Catalyst.Network.Protocol.Protobuffs <https://github.com/catalyst-network/protocol-protobuffs>
*
* Catalyst.Network.Protocol.Protobuffs is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* (at your option) any later version.
* 
* Catalyst.Network.Protocol.Protobuffs is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with Catalyst.Network.Protocol.Protobuffs If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

option java_multiple_files = true;

import "Cryptography.proto";
import "google/protobuf/timestamp.proto";

package Catalyst.Protocol.Transaction;

enum TransactionType {
	TRANSACTION_TYPE_UNKNOWN = 0; //Unknown transaction type.
	PUBLIC = 1; // Public transaction type.
	CONFIDENTIAL = 2; // Private transaction type.
}

message PublicEntry {
    BaseEntry base = 1;
    bytes amount = 2; // uint256 amount
    bytes data = 3; // Smart contract data.
}

message ConfidentialEntry {
    BaseEntry base = 1;
    bytes pedersen_commitment = 2; // 32 bytes
    /**
    * BulletProof-based range proof. See https://eprint.iacr.org/2017/1066.pdf for references to equations below.
    * Total byte size is (9+2k)*32, where k = log_2(n*m), m is number of aggregates in proof, (2^n)-1 is upper range of values.
    */
    bytes range_proof = 3;
}

message BaseEntry {
    uint64 nonce = 1; // A nonce, similar to Ethereum, incremented on each transaction on the account issuing the transaction
	bytes receiver_public_key = 2; // PublicKey of receiver.
	bytes sender_public_key = 3;// PublicKey of sender.
    bytes transaction_fees = 4; // 8 bytes, clear text, fees * 10^12
}

message CoinbaseEntry {
    bytes receiver_public_key = 1; // public key behind the address where the Coinbase will be credited
    bytes amount = 2; // uint256 amount
}
