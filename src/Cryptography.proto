/**
* Copyright (c) 2019 Catalyst Network
*
* This file is part of Catalyst.Network.Protocol.Protobuffs <https://github.com/catalyst-network/protocol-protobuffs>
*
* Catalyst.Network.Protocol.Protobuffs is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* (at your option) any later version.
* 
* Catalyst.Network.Protocol.Protobuffs is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with Catalyst.Network.Protocol.Protobuffs If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

option java_multiple_files = true;

import "Network.proto";

package Catalyst.Protocol.Cryptography;

message Signature {
	SigningContext signing_context = 1;
	bytes raw_bytes = 2;
}

enum SignatureType {
	SIGNATURE_TYPE_UNKNOWN = 0;
	TRANSACTION_PUBLIC = 1;
	TRANSACTION_CONFIDENTIAL = 2;
	PROTOCOL_RPC = 3;
	PROTOCOL_PEER = 4;
}

message SigningContext {
	Network.NetworkType network_type = 1; // is the network enum (mainet / devnet etc)
	SignatureType signature_type = 2; // contains info on whether the signature is for a protocol message or a transaction.
}