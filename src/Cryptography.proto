/**
* Copyright (c) 2019 Catalyst Network
*
* This file is part of Catalyst.Network.Protocol.Protobuffs <https://github.com/catalyst-network/protocol-protobuffs>
*
* Catalyst.Network.Protocol.Protobuffs is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* (at your option) any later version.
* 
* Catalyst.Network.Protocol.Protobuffs is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with Catalyst.Network.Protocol.Protobuffs If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

option java_multiple_files = true;

import "Network.proto";

package Catalyst.Protocol.Cryptography;

message Signature {
	SigningContext signing_context = 1; // system domain context.
	bytes raw_bytes = 2; // signature digest.
}

// Represents domains of a node.
enum SignatureType {
	SIGNATURE_TYPE_UNKNOWN = 0; // Unknown signature.
	TRANSACTION_PUBLIC = 1; // Signatures for public transactions.
	TRANSACTION_CONFIDENTIAL = 2; // Signatures for confidential transactions.
	PROTOCOL_RPC = 3; // Signatures for rpc messages.
	PROTOCOL_PEER = 4; // Signatures for peer protocol messages.
}

message SigningContext {
	Network.NetworkType network_type = 1; // is the network enum (mainet / devnet etc).
	SignatureType signature_type = 2; // contains info on whether the signature is for a protocol message or a transaction.
}

enum ErrorCode {
	ERROR_CODE_UNKNOWN = 0;						// Unknown error.
	INVALID_SIGNATURE = 1;						// Signature is of incorrect length or does not correspond to a valid point.
	INVALID_PUBLIC_KEY = 2;						// Public key is of incorrect length or cannot be decompressed to a valid point.
	INVALID_PRIVATE_KEY = 3;					// Private key is of incorrect length.
    SIGNATURE_VERIFICATION_FAILURE = 4;			// Signature cannot be verified against the provided information.
    INVALID_CONTEXT_LENGTH = 5;					// Context exceed the maximum allowed length.
	INVALID_BATCH_MESSAGE = 6;					// Unable to convert message to valid data. 
	ARRAYS_NOT_EQUAL_LENGTH = 7;				// Cannot perform batch verification as an unequal number of messages/signatures/keys were provided.
	BATCH_VERIFICATION_FAILURE = 8; 			// One or more signatures cannot be verified.
	NO_ERROR = 418;								// No error (just a teapot).
}

//Holds data for batch verification of signatures.
message SignatureBatch {
	repeated bytes signatures = 1;
	repeated bytes public_keys = 2;
	repeated bytes messages = 3;
	bytes context = 4;
}